***************Beginning Page***************
***************page number:1**************
21 octombrie 2022
—

***************Ending Page***************

***************Beginning Page***************
***************page number:2**************
a Probleme de drumuri in digrafuri
o Drumuri de cost minim - Problema P2 pentru dags: sortarea
topologicé
o Drumuri de cost minim - Problema P2 pentru costuri nenegative
o Drumuri de cost minim - Problema P2 pentru costuri reale
o Drumuri de cost minim - Rezolvarea problem P3
o inmultirea (rapidé) a matricilor
9 Exercitii pentru seminarul de séptéména urméitoare
—

***************Ending Page***************


***************Beginning Page***************
***************page number:3**************
Un digraf aciclic (dag) este un digraf féré circuite.

O ordonare topologicé a (nodurilor) unui digraf G : (V,E), cu

‘CH : n, este 0 functie injectivé 0rd : V —> {1,2,...,n} (ord[u] :

numérul de ordine a1 nodului u, Vu E V) a§a incét

u'u G E :> o'rd[u] < 0rd['u],Vu'u G E.

G : (V, E) este un digraf féré circuite dacé §i numai dacéi admite o

ordonare topologicé.
—

***************Ending Page***************

***************Beginning Page***************
***************page number:4**************
Proof: "<2" Fie 0rd o ordonare topologicé a lui G. Dacé C’ :
(U1,U11L2,’U,2,...,'Ll,k,’LLk'U,1,'U,1) este un circuit in G, atunci, din propri-
etatea functiei 0rd, obtinem contradictia
o'rd[u1] < ord[u2] < < 0rd[uk] < 0rd['u,1].
“:>" Fie G : (V,E) un digraf de ordin n féré circuite. Arétém
prin inductie dupé n cé G are o ordonare topological Pasul induc-
tiv:
let v0 G V;
while (dam/0) 51$ 0) do
take u E V a§a incét u'uo € E;
'uo <— u;
return v0.
—

***************Ending Page***************


***************Beginning Page***************
***************page number:5**************
Evident, deoarece G nu are circuite §i V este ﬁnitéi, algoritmul se ter-
mini §i in nodul returnat, v0, nu mai intré arce. Digraful G — 1/0 nu
are circuite §i din ipoteza inductivé are o 0rdonare topologicéi 0rd’. Or-
donarea topologicé a lui G este
o'rd[v] _ 1, dacé v : 'uO
— 0rd’['u] + 1, dacé v E V \ {v0}.

U
Din demonstratia de mai sus obtinem urmétorul algoritm pentru re-
cunoagterea unui dag §i constructia unei ordonéri topologice in cazul
instantelor “yes”:
Input: G : ({1, . . .,'n,}, E) digraf cu ‘E! : m.
Output: "yes" dacé G este dag §i o ordonare topologicé 0rd; "no"
altfel.

—

***************Ending Page***************

***************Beginning Page***************
***************page number:6**************
construct the array d5[u],Vu E V;
count <— O; S <— {u E V : dau] : 0}; // S este o coadé sau o stivé;
while (s 7s o) do
u <- pop(S); count + +; ord['u] <— count;
for (w E A['u]) do
dEW] — —;
if (013111] : 0) then
push(S, w);
// complexitatea timp 0(n + m);
if (count : n) then
return "yes" o'rd;
return "no";
—

***************Ending Page***************


***************Beginning Page***************
***************page number:7**************
P2 Dat G :(V,E) digraf; a: E —>]R;s E V.
Determiné Pg;- G 'PshW 6 V, a. i. a(P;"Z-) : min{a(PSZ-) : Psi G
P2 cu G : ({1,...,n},E) dag, cu ordh'] : i, Vi E V, §i s : 1.
Condi'gia (I) este satisféicuté §i sistemul (B) se rezolvé prin "substitu'gie".
11,1 <— 0; before[1] <— 0;
for (z : 2,7) d0
ul- <— oo; beforeh'] k 0;
for (j I Mi) d0
if (‘Mi > 117+ 0,35) then
ui <— uj + aji; beforeﬁ] <— j;
// complexitatea timp (9(n2);
—

***************Ending Page***************

***************Beginning Page***************
***************page number:8**************
P2 Dat G :(V,E) digraf; a: E —>R;s € V.
Determina P; E 7351',V’I; E V, a. i. a(P;~) : min{a(Psi) : Psi €
P2 cu (1(a)) O,Ve E E.
Condi'gia (1’) este satisfacuta §i sistemul (B) se poate rezolva cu algo-
ritmul lui Dijkstra, care are urmatorul invariant: S Q V §i
(D)
Vi E S 11,1: min{a(Psi) : Psi G 7351'}

{ Vi E V \ S 'Ulz' I min{a(Psi) I Psi E 7351', V(P5¢) \ S : {1}}
Initial S : {s} §i in ﬁecare dintre cei n —1 pa§i un nod nou este adaugat
1a S, obtinand S : V. Astfel, datorita invariantului (D) de mai sus,
P2 este rezolvata.

—

***************Ending Page***************


***************Beginning Page***************
***************page number:9**************
Algoritmul lui Dijkstra
S <- {s}; before[s] <- 0; us <- 0;
for (i G V \ {5}) do
ul- <— a“; beforeh] <— s; // (are 10c D)
while (S 75 V) do
ﬁndj* G V\Ss. t. 117* :min{'u.j : j G V\S};
S + S U {1*};
for (j E V\S) d0
if (uj > ‘117* + &j*j) then
“j k “1* + am; befOTeU] k j*;
—

***************Ending Page***************

***************Beginning Page***************
***************page number:10**************
Demonstraﬁa corectitudinii algoritmului lui Dijkstra
Deoarece (D) are 10c dupé pasul de initializare, trebuie sé demonstrém
c5 dacé (D) are loc inaintea itera'giei While curente, atunci (D) are loc §i
inaintea iteratiei urmétoare.
Fie S Q V §i 141,. . .un satisfécénd (D) inaintea iteratiei while curente.
Arétéim a mai intéi c5 dacéi j * este astfel incét 114* :
min{'u,j : j G V \ S}, atunci
117* : min{a(st*) : P511 6 7951*}.
Si presupunem c5 EIPSlﬁ 6 79st a§a incét a(Pslj*) < uﬁ. Deoarece S §i
ul- satisfac (D), avem
“1* I min{a(st*) I st- 6 7351*, V(st*) \ 5 I {j*}}-
Urmeazé c5 V(Pslj*) \ S 75 {j*}; ﬁe k primul nod de pe P517», (incepénd
cu s) a§a incét k; §é S.
—

***************Ending Page***************


***************Beginning Page***************
***************page number:11**************
Demonstragia corectitudinii algoritmului lui Dijkstra (cont)
Atunci a(P$1j*) I a(P51k) + a(P,:j*). Din modul de alegere a lui k, avem
V(P51k) \ S : {k} gi, deoarece (D) este satisfécuté, avem a(Pslk) Z uk.
Obtinem cé 117* > a(Pslj*) Z uk + a(P,1j*) Z uh (costurile sunt 2 0, deci
a(P,§J-*) 2 0. Dar aceasta contrazice alegerea lui j*.
Urmeazé c5 in iteratia curenté, dupé asignarea S P S U {j*}, prima
parte din (D) are loc.
Bucla for de dupé aceasté asignare este necesaré pentru a asigura partea
a doua din(D) dupé itera'gia while: Vj 6 V \ (S U {j*})

min{a(st) I P516 735]‘, V(st) \ (5 U {j*}) I {1}} I

min {min{a(st) 1 P515 7351', V(st) \ 5 I {j}}(: uj),

min{a(st) 1 P51‘ E 73511V(st)\5 I {j,j*}}(: 011)}-
—

***************Ending Page***************

***************Beginning Page***************
***************page number:12**************
Demonstralgia corectitudinii algoritmului lui Dijkstra (c0nt.)
Primul argument din minimul de mai sus este uj (vechea valoare dinain-
tea buclei for); ﬁe aj cel de-al doilea argument.
Fie P81]- un drum pentru care ozj : a(P$1J-) cu j* G V(Pslj) §i V(P51j\(SU
{j*}) : {j}; avem aj : a(P51j*) + a(P]~1*]~). Deoarece am demonstrat (:5
S U {j*} satisface prima parte din (D), urmeazﬁ céi a(P51j*) = 117* §i deci
Dacé a(PJ-1*j) 75 aj*j, urmeazé cé existé un1l€ V(le*j) O S, i315 j*. De
unde uj < a(P;z-) + a<P5> I w + “Pl-3) < Mi) + “Pl-3) I (APSE) z
01]‘.
Am ob'ginut (:5 singura posibilitate de a avea aj < uj este cénd a(P]~1*j) I
am; in acest caz aj : ‘114* + am- < uj, care este testul din bucla for a
algoritmului (Uj este vechea valoare dinaintea buclei for).

D

—

***************Ending Page***************


***************Beginning Page***************
***************page number:13**************
Complexitatea timp a algoritmului lui Dijkstra
Deoarece bucla for din cel de-al doilea pas poate ﬁ inlocuité echivalent
cu

for (j e Nam do

if (Uj > uﬁ + aj*j) then
uj <— uj», + am; beforeb'] <- j*;
timpul general necesar algoritmului pentru a actualiza valorile uj este
<9( Z 0130*»: @(m)
j*€V\{$}
Urmeazéi c5 complexitatea timp este dominatéi de secven'ga de deter-
minéiri a minimelor 117*.
—

***************Ending Page***************

***************Beginning Page***************
***************page number:14**************
Complexitatea timp a algoritmului lui Dijkstra

o Dacé alegerea minimului uy este fécuté prin parcurgerea 1ui
(Uj)jev\s, atunci algoritmul se executé in (9((n — 1) + (n — 2) +
---+ 1): (9(n2).

o Dacé valorile 1ui uj pentru j E V \ S sunt tinute intr-o coadé
cu prioritéti (e.g. heap) atunci extragerea ﬁecérui minim necesité
0(1), dar timpul necsar execu'giei tuturor reducerilor uj este in cazul
cel mai nefavorabil (9(m10g n) - sunt (9(m) reduceri posibile, ﬁecare
necesiténd 0(1og n) pentru intre'ginerea heap-ului (J 0hnson,1977).

o Cea mai buné implementare se obigine folosind o grémadé (heap)
Fibonacci cu o complexitate timp de @(m + nlog n) (Fredman 8:
Tarjan, 1984).

—

***************Ending Page***************


***************Beginning Page***************
***************page number:15**************
o Pentru a rezolva problema P1 folosind algoritmul lui Dijkstra,
adaugam un test de oprire a executiei cand nodul t este introdus in
S. in cazul cel mai nefavorabil complexitatea ramane aceeasi.

o O euristica interesanta care dirijeaza cautarea spre t se obtine cu
ajutorul unui estimator consistent, i. e. o functie g : V —> 1R+
care satisface conditiile:

(i) Vi E V, uz- + 9(2) g min{a(Pst) : Pst E 'Pst §i i E V(Pst)}
(ii) Vii 6 E,9(i) é at + 90)-
o Evident, g(z') : 0, Vz' este un estimator consistent trivial.
—

***************Ending Page***************

***************Beginning Page***************
***************page number:16**************
o Dacéi V(G) este a multime de puncte dintr-un spatiu Euclidean,
atunci, luand 9(1) : distanta Euclideana de 1a 1L 1a t, obtinem un
estimator consistent daca sunt satisfacute §i conditiile din (ii).

o Dacéi g este un estimator consistent, atunci alegerea lui j * in algo-
ritmul lui Dijkstra se face astfel

“1* + 90*) I min{u1' + 9(1) 11E V \ S}-
Corectitudinea demonstratiei este similara cu cea data pentru
9(1) : 0, Vi.
—

***************Ending Page***************


***************Beginning Page***************
***************page number:17**************
Algoritmul Bellman-Ford-Moore

Dacé existé un arc ij E E a§a incét al'j < O atunci algoritmul lui Dijkstra
poate e§ua (strategia "best first" nu mai functioneazé). Presupunénd cé
(1’) a(C) Z O,VC’ circuit in G,
vom rezolva sistemul

u : O

B s . .

( ) { ui : minj¢¢(uj + aji),\V/'L 75 s
prin aproximéri succesive.

—

***************Ending Page***************

***************Beginning Page***************
***************page number:18**************
Algoritmul Bellman-Ford-Moore
Deﬁnim
(BM) uf I min{a(P) 1 P e 733i, |E(P)| g k},Vi e V,k :1,n _1
Deoarece lungimea (numérul de arce) ale ﬁecérui drum din G este cel
mult n — 1, urmeazé c5 dacéi vom construi

u1 : (11,11,...,u,1l),

112 I (“12,---,ui).
atunci u”_1 este o solutie a sistemului (B) Deoarece valorile lui u1 sunt
evidente, atunci, dacéi vom indica o regulé de a trece de 1a uk 1a uk+1,
vom obtine urmétorul algoritm pentru a rezolva (B):

—

***************Ending Page***************


***************Beginning Page***************
***************page number:19**************
Algoritmul Bellman-Ford-Moore
usl <— 0;
for (z G V \ {5}) do
ull k a“; //evident (BM) are 10c.
for (k I m) d0
for (z = Lin) do
11.er1 <— min (uik, minﬁi (qu + am);
Pentru a dovedi corectitudinea acestui algoritm, vom aréta cﬁ dacé uk
satisface (BM) atunci uk+1 satisface (BM), pentru k : m
—

***************Ending Page***************

***************Beginning Page***************
***************page number:20**************
Algoritmul Bellman-Ford-Moore
u : O

B 5
( ) { 'LLZ' I minﬁgi (uj —|— aji),Vz' 75 S
Pentru '1; 6 V, consideréim urmétoarele multimi de drumuri:

A : {P : P G 7351', length(P) g k; +1}

B : {P : P G 7351', length(P) g k}

C : {P : P € Psi; length(P) : k + 1}
Atunci, A : B LJ C, §i
min{a(P) : P 6 A} I min(min{a(P) : P 6 B},min{a(P) : P E C’ )
Deoarece uf satisface (BM) avem

min{a(P) : P 6 A}: min (uf,min{a(P) : P G C})
—

***************Ending Page***************


***************Beginning Page***************
***************page number:21**************
Algoritmul Bellman-Ford-Moore

Fie min{a(P) : P E C} I a(P0), pentru P0 E C. Atuncij este nodul

dinaintea 1ui i 6 P0 (existé un astfel de j deoarece P0 are cel putin doué

arce), atunci a(P°) : a(PSOJ-) + aJ-Z- 2 ujk + aji (deoarece Pg- are k arce

§i uk satisface (BM) Astfel

min{a(P) : P E A} I min(uf,11n;111(u]k+ (13-1)),

adicé, valoarea asignaté lui uikﬂ in algoritm.

Complexitatea timp este (9(n3) dacé minimul din a1 doilea for necesité

Drumuri de cost minim pot ﬁ ob'ginute ca §i in algoritmul lui Dijkstra,

dacé vectorul beforeﬂ, ini'gializat trivial, este actualizat corespunzétor

atunci cénd se determiné minimul din cel de-al doilea for.
—

***************Ending Page***************

***************Beginning Page***************
***************page number:22**************
Algoritmul Bellman-Ford-Moore
o Putem adéuga algoritmului urmétorul pas:
if (at e v a§a incét ufrl > minjii (ufrl + am) then
return "existé un circuit de cost negativ";
in acest fel se obtine un test de 0(n3) dacé digraful G §i functia de
cost a incalcé conditia (1’) (altfel, din demonstratia corectitudinii,
uinil nu poate ﬁ scéizut). Un circuit de cost negativ poate ﬁ gﬁsit
folosind vectorul before [].

a Dacé existé k < n — 1 a§a incét uk : 11'“?1 , atunci algoritmul
poate ﬁ oprit. Folosind aceasté idee, este posibil s5 implementém
algoritmul in @(nm), memorénd nodurile z' pentru care valoarea ul-
se modiﬁcé in coadé.

—

***************Ending Page***************


***************Beginning Page***************
***************page number:23**************
P3 Dat G : (V, E) digraf; a : E —> R, 55 se determine
Pf; 6 Pij,v7;,j 6 V, a. i. a(PZ‘j) = min{a(P¢]~) : P17 6 7317'}

o Fie uij : min{a(Pij) : P17‘ 6 7917}. Astfel avem de determinat ma-
tricea U : (Uij)n><n, cénd matricea de cost-adiacen'gé A este daté.

o Fiecare drum de cost minim poate ﬁ ob'ginut in 0(n) dacéi, in
timpul construc'giei matricei U, intre'ginem matricea Before :
(beforeiJ-Mxn, unde befo'reij~ : nodul dinaintea lui j pe drumul de
cost minim de 1a i 1a j din G.

o Dacﬁ perechea (G,a) satisface condi'gia (1’), putem rezolva P3
aplicénd algoritmul Bellman-Ford-Moore pentru s 6 {1, . . . , n}, in
(9(n4). Existé §i solutii mai eﬁciente pe care 1e vom prezenta pe
slide-urile urméitoare. 7

—

***************Ending Page***************

***************Beginning Page***************
***************page number:24**************
Iterarea algoritmului lui Dijkstra

Dacé toate costurile sunt nenegative, putem rezolva P3 aplicéind algo-

ritmul lui Dijkstra pentru s e {1, . . . , n}, in (9(n3).

Iterarea algoritmului lui Dijkstra este de asemeni posibiléi si atunci cénd

avem costuri negative, dacéi condi'gia (I') are 10c, dupé o pre-procesare

interesanté.

Fie a: V —> IR a§a incét V'Lj 6 E, 01(1) + aij 2 a(j).

Fie 61E —> RF daté prin Eij I aij + 04(1) — a(j), Vij E E.

Avem 513- > 0 §i nu este diﬁcil de a vedea céi pentru orice Pij E 7315,

(*) a(Pu) I (‘(Pij) + [01(1) — 01(1)]-

Astfel, putem itera algoritmul Dijkstra pentru a determina drumurile de

cost minim relativ 1a E.
—

***************Ending Page***************


***************Beginning Page***************
***************page number:25**************
Iterarea algoritmului lui Dijkstra
Rela'gia (*) aratﬁ 05 un drum este de cost minim relativ 1a costul E dacé
§i numai dacé este minim relativ 1a costul a (6(Pij) — (1(Pij) este o
constanté care nu depinde de Pij). Astfel, avem urmétorul algoritm:

1: determiné a §i construie§te matricea I;

2: rezolvé P3 pentru Z, returnénd V §i W;

3: determiné U ('U/Z'j : ﬂij — a(z') + a(j));
Pasul 2 necesité (9(n3) din iterarea algoritmului lui Dijkstra. Pasul 1
poate ﬁ implementat in @(ns), alegénd un nod s E V §i rezolvénd P2
cu algoritmul Bellman-Ford-Moore (care testeazé de asemeni dacé (1’)
este indeplinitéi).

—

***************Ending Page***************

***************Beginning Page***************
***************page number:26**************
Iterarea algoritmului lui Dijkstra

Tntr-adevér, daci (um E V) este solutie pentru P2, atunci (um E V)

satisface sistemul (B), deci uj : 11211(u¢+ aij), adicé, V'Zj G E, avem
Z J

'U/j g ui + GU‘. Astfel, aij + ui — uj 2 0, Vij 6 E, ceea ce araté c5 putem

lua 01(2) : ui, Vi 6 V a§a incét conditia (*) s5 aibé loc.

Algoritmul Floyd - Warshall

Fie

“Z I min{a(Pij 1 P11‘ 6 7% V(P¢j) \ {M} Q {1,2,---,k — 1}}
vm' e V,l<: z l,n+1.
—

***************Ending Page***************


***************Beginning Page***************
***************page number:27**************
Algoritmul Floyd - Warshall

Evident, all]- : aij, V'Il,j E V (presupunem cé au- : 0, Vi E V). Mai

mult,

uffl : min {uZ-kj, usC + ulljj},V1L,j G V, k : 1,7.

Aceasta rezulté prin induc'gie dupé k. in pasul inductiv: un drum de

cost minim de 1a z' 1a j féré noduri interne 2 k +1 ﬁe nu contine nodul k:

§i costul siu este all}, ﬁe contine nodul lc §i atunci costul séu este “Sc +u/jj

(din principiul de optimalitate a1 lui Bellman §i ipoteza inductivé).

Evident, dacé ob'ginem ‘all; < O, atunci existé un circuit de cost negativ

C’ care trece prin nodul z' cu V(C') \ {1L} Q {1, . . . , k; — 1}.
—

***************Ending Page***************

***************Beginning Page***************
***************page number:28**************
for (i I Lin) d0
for (j : Lin) d0
before('1l,j)+i;
if (z' : j) then
au- <— O; before(z', i) <— 0;
for (k I Lin) d0
for (z : Lin) do
for (j : 1,7) do
if (aZ-j > (Mk + akj) then
aij <— am + akj; before(z',j) <- before(k,j);
if (2' :j §i aij < O) then
return "circuit negativ";
—

***************Ending Page***************


***************Beginning Page***************
***************page number:29**************
Aceasta metoda pentru rezolvarea problemei P3 este cunoscuta drept

algoritmul Floyd - Warshal:

Evident, complexitatea timp a acestui algoritm este (9(n3).

Daca §tim ca digraful nu are circuite de cost negative, atunci daca e1-

ementele diagonals ale lui A sunt initializate cu oo, valoarea ﬁnala a

ﬁecarui element diagonal este costul minim a1 unui circuit care trece

prin nodul corespunzator.
—

***************Ending Page***************

***************Beginning Page***************
***************page number:30**************
inmulgirea (rapidé) a matricilor
Si presupunem c5 (1’) este indeplinité §i in matricea de cost-adiacenté
elementele diagonale sunt 0. Fie
a; z min{a(P¢j) 1 Pij e Pij, Pij are cel mult k: arce}
Vi, j 6 V, k : m.
Notém cu Uk : (ufj)1<i,j<n pentru k 6 {0, 1, 2, . . . , n— 1}, unde U0 are
toate elementele oo, mai putin cele de pe diagonal 5 care sunt 0. Atunci,
iterarea algoritmului Bellman-Ford-Moore poate ﬁ descrisé intr-o forméi
matricealé:
—

***************Ending Page***************


***************Beginning Page***************
***************page number:31**************
inmulgirea (rapidé) a matricilor
for (i,j G V) d0
if (z 7k j) then
ug- <- oo;
else
ug <- 0;
for (k:0,n—2)d0
for (1L,j E V) do
“5+1 I £125 (“5L + ahj);
—

***************Ending Page***************

***************Beginning Page***************
***************page number:32**************
inmulgirea (rapidﬁ) a matricilor
Considerém urmétorul “produs de matrici”
VB, C E Mnxn, B ® C : P : (pij), Where p-L'j : mi£(b¢k + ij).
k:1,n
Operatia ® este asociativé §i este similaréi inmul'girii uzuale a matricilor.
Putem scrie Um+1 I Um ® A gi, prin induc'gie, ob'ginem
U1 I A, U2 I 14(2), . . ., U“l I AW“,
Where A“) I AUH) ® A §iA(1) I A.
in ipoteza (1’) avem: AW) : A("_1), Vp cu 2P Z n — 1.
Astfel, calculénd succesiv, A,A(2),A(4) I 14(2) ® 14(2), . . .,ob'§inem a1-
goritm cu (9(n3 log n) complexitate timp pentru rezolvarea problemei
P3.
—

***************Ending Page***************


***************Beginning Page***************
***************page number:33**************
Dacé opera'gia ® este implementaté cu algoritmi mai rapizi, n3 de mai

sus devine 111°g2 7 : 112-81 (Strassen 1969) sau 193728639 (Cooppersmith

& Winograd 1987, Le Gall 2014).
—

***************Ending Page***************

***************Beginning Page***************
***************page number:34**************
Exercitiul 1’. Rulati algoritmul lui Dijkstra pe digraful urmétor.
1 ll 1
.r 12 'y 10 Z
—

***************Ending Page***************


***************Beginning Page***************
***************page number:35**************
Exercigiul 1. Un graf G este dat functional: pentru ﬁecare nod 'u E
V(G) putem ob'gine NG('u) pentru 1$; alternativ, dupé o preprocesare
care costé T$ (T >> 1), putem obtine, NG('u) §i also NG(w), pentru
toate nodurile w E V(G). Tn G se construie§te un drum P plecénd
dintr-un nod arbitrar §i alegénd un vecin nevizitat incﬁ atéta vreme
cét este posibil. Dupéi ce drumul este construit putem sé ii comparéim
costul, Onlz'ne(P), cu cel mai mic cost posibil, Ojjcl'me(P). Descrie'gi o
strategie de platé (de accesare a multimilor de vecini) a§a incét
Onl'me(P) g (2 — 31) - Oﬁine(P).
—

***************Ending Page***************

***************Beginning Page***************
***************page number:36**************
Exercitiul 2. Fie D un digraf §i a : E(D) —> Eh, b : E(D) —> R1.
Descrie'gi un algoritm eﬁcient pentru determinarea unui circuit C’* a1 lui
D, a§a incét
C‘* . C . .
(M : m1n{ZEC; : C' Clrcult in D}.
Exercigiul 3. in problema determinéirii drumurilor de cost minim de
1a un nod dat s 1a toate celelalte noduri dintr-un digraf G : (V, E),
avem o functie de cost c : E —> {0,1,..., C} unde C E N nu depinde de
n : IV] sau de m : |E]. Cum se poate modiﬁca algoritmul lui Dijkstra
pentru a reduce complexitatea timp 1a (9(n + m)?
—

***************Ending Page***************


***************Beginning Page***************
***************page number:37**************
Exercigiul 4. Fie D : (V,E) un digraf tare conex de ordin n §i
a : E —> 1R o func'gie de cost pe arcele sale. Dacé X este un mers,
un drum sau un circuit in D, atunci a(X), costul lui X, este suma
costurilor de pe arcele sale, len(X), este lungimea lui X (numérul de
arce), §i aavg(X), costul mediu a1 arcelor sale, este aavg(X) : 125$)‘
Fie
03W : . min A aavg(C').
C C1rcu1t 1n D
Fie s G V, k € N*, §i Ak('u) costul minim a1 unui mers de 1a s 1a 'u de
lungime k (dacéi existé un astfel de mers, altfel Ak('u) I +00).
—

***************Ending Page***************

***************Beginning Page***************
***************page number:38**************
Exercitiul 4. (continuare)

a) Dacé D nu contine circuite de cost negativ, dar existé un circuit C

cu a(C') : O, aréta'gi (:5 existé un nod 'u G V a§a incét
An('u) : min{a(P) : P este un s'u-drum de 1a s 1a 'u in D}.
b) Arétati 05 dacé azvg : 0, atunci
. A (v) — AW’)
* _ Tl

c) Dacé ajvg 7i 0, transformati functia a a§a incét noua functie a’ s5
satisfacé ipoteza de 1a b) §i din (MMC') (care are loc pentru a’)
arétati c5 (MMC) are loc pentru orice functie a.

—

***************Ending Page***************


***************Beginning Page***************
***************page number:39**************
Exercitiul 5. in numeroase aplica'gii, pentru un digraf dat, G : (V, E)
cu a : E —> Rr, trebuie sa raspundem consecvent 1a o intrebare de tipul
urmator: Care este drumul de cost minim dintre s si t? (5,13 6 V,
s 75 t). Pentru un digraf foarte mare, G, se propune urmatorul algoritm
Dijkstra modiﬁcat (bidirectional):

o construieste inversul lui G, G’, cu functia de cost a’ : E(G’) —> Rim
data prin agj : aji, Wj G E(G’);

o aplica succesiv un pas din algoritmul lui Dijkstra lui G si a (plecand
din s) §i lui G’ si a’ (plecand din t);

a cand un nod u este introdus in S (multimea nodurilor etichetate
de algoritmul lui Dijkstra) de amandoua instantele algoritmului ne
oprim;

a returneaza drumul de 1a s 1a u in G reunit cu inversul drumului de
1a t 1a u in G’ .

Arata'gi ca aceasta procedura nu este corecta, oferind un exemplu care

***************Ending Page***************

***************Beginning Page***************
***************page number:40**************
Exercitiul 6. Dati un exemplu de digraf care s5 aibé §i costuri negative

pe arce §i pe care algoritmul lui Dijkstra s5 egueze. J

Exercitiul 7. Fie G : (V, E) un digraf, a : E —> R+ o functie de cost

pe arcele sale §i $0 E V un nod din care toate celelate noduri ale lui G

sunt accesibile. Un SP-arbore pentru tripleta (G, a, $0) este un

arbore cu rﬁdéciné (in $0) a1 lui G, T : (V, E’), a§a incét costul (cu

aceea§i functie a) drumului de 1a x0 1a u in T este costul minim a1

unui drum de 1a m0 1a u in G, pentru orice u E V.

(a) Aréta'gi céi un astfel de SP-arbore existii intotdeauna.

(b) Descrieti un algoritm care s5 determine un SP-arbore.
—

***************Ending Page***************


***************Beginning Page***************
***************page number:41**************
Exercigiul 8. Fie G un graf conex. Aritati cé
a) orice doué drumuri de lungime maximéi ale lui G au intersec'gie
nevidé.
b) dacé G este un arbore, atunci toate drumurile de lungime maximé
din G au intersec'gia nevidéi.
Exercigiul 9. Fie G : (V, E) un graf conex.
a) Arita'gi c5 existé o mul'gime stabiléi, S, a§a incét graful par'gial bi-
V S
partit H : (S, V \ S; E’) si ﬁe conex, unde E’: E\< 2\ >
U . v |G| — 1
b A t G > i.
() raatlcaoz( )/ A(G)
—

***************Ending Page***************

***************Beginning Page***************
***************page number:42**************
Exercitiul 10. Aratati ca orice arbore, T, are cel putin A(T) noduri
pendante (frunze).
Exercitiul 11. Fie G un graf cu n Z 2 noduri §i m muchii.

a) Aratati ca G contine cel putin doua noduri de ace1a§i grad.

b) Fie r(G) numarul maxim de noduri avand ace1a§i grad in G. Daca

notam cu dmed : 2m / n, demonstrati ca
n
r G > — .
( )/ ideed - 26(G) + 1i
Exercitiul 12. Aratati ca un digraf are o singura ordonare topologica
daca §i numai daca are un drum Hamiltonian iar toate celelate arce sunt
orientate inainte relativ 1a directia de parcurgere a acestui drum.
—

***************Ending Page***************


***************Beginning Page***************
***************page number:43**************
Exercigiul 13. Fie G : (S, T; E) un graf bipartit cu urmétoarele
proprietéti:

- |S\ : n,]T\ : m (n,m E N*);

- Vt E T, [NG(t)I > k > 0 (pentru un k < n ﬁxat);

- V151, 152 G T, dacéi t1 73 252, atunci |Ng(t1) O Ng(t2)| : k;
Aréta'gi cé m g n;
Exercigiul 14. Fie G : (V, E) un digraf; deﬁnim o func'gie fG :
'P(V) —> N prin fG(®) : O §i fg(S) : {{v : 'u este accesibil din 5}‘,
pentru Q 75 S Q V.
(a) Arﬁtati cé, pentru orice digraf G, avem

MS) +fG(T) >fG(SU T) +fG(S m T), V5’, T Q V-
(b) Demonstra'gi c5 (a) este echivalenté cu
fG(Xw{v})—fG<X) > fG(YU{v})—fG(Y),\1X Q Y g WU e V\

***************Ending Page***************


***************Beginning Page***************
***************page number:44**************
Exercitiul 15. Un student a decis sa ajunga in ﬁecare zi la universitate
alergand. Harta orasului contine m segmente de strazi (toate cu doua
sensuri) - un segment se intinde intre doua intersectii - ale caror lungimi
strict pozitive sunt cunoscute. Studentul doreste sa isi imparta drumul
in doua: 0 prima parte in care doar sa urce si una in care doar sa
coboare. (Un segment este in urcare daca punctul de intersctie ﬁnal are

o altitudine mai mare decat punctul de intersectie initial; un segment

este in coborare daca punctul de intersectie ﬁnal are o altitudine mai

mica decat punctul de intersectie initial.)

(a) Descrieti un algoritm eﬁcient (0(n + m), unde n este numarul de
intersectii) pentru determinarea unui drum de cost minim dintre
cele care indeplinesc cerintele studentului (daca un astfel de drum
exista).

—

***************Ending Page***************


***************Beginning Page***************
***************page number:45**************
Exercitiul 15. (continuare)

(b) Dupé céteva zile de alergare studentul i§i d5 seama (:5 structura
drumului i1 face prea diﬁcil de parcurs §i se hotéré§te s5 accepte
pentru traseul séu §i segmente care au capetele 1a aceea§i altitudine,
astfel, in prima parte a drumului vrea sé aibé doar segmente in
urcare sau plate iar in a doua parte numai segmente in coborére sau
plate. Descrie'gi un algoritm care sé rezolve aceasté noué problemé.
Care este complexitatea unui astfel de algoritm?

Exercigiul 16. Fie G : (V, E) un digraf §i V familia componentelor

sale tari conexe. Deﬁnim urmétorul digraf g : (12,8), unde pentru

orice H’,H” E V, H’H” 6 5 dacé existé un arc v'v” E E astfel incét

'u’ 6 V(H’) §i 'u” G V(H”). O ordonare 111,112,...,'un a nodurilor lui

G se nume§te ordonare SP-topologz'cd dacéi pentru orice arc 'Uj'Ui E

E, cu 1 g 2' < j g n, nodurile 'ui,'ui+1,...,vj apar'gin unei aceleia§i

componente tari conexe a lui G.

—

***************Ending Page***************


***************Beginning Page***************
***************page number:46**************
Exercitiul 16. (continuare)

(a) Arétati céi g este un digraf aciclic.

(b) Descrie'gi un algoritm de complexitate timp (9Q V‘ + IE!) care s5 de-
termine pentru un digraf dat o ordonare SP-topologicé a nodurilor
lui G.

(c) Demonstra'gi cé pentru orice drum D din G existé 0 ordonare SP-
topologicé a nodurilor lui G 111,112, . . . , vn astfel incét pentru orice
doué noduri 'Ui,'UJ' E V(D), dacé m apare inaintea lui vj pe D,
atunci 2' < j.

—

***************Ending Page***************

