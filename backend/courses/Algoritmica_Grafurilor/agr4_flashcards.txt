[{content={parts=[{text=--FlashCardSeparator--
Single
--InteriorSeparator--
What is a directed acyclic graph (DAG)?
--InteriorSeparator--
A directed graph without cycles.
--InteriorSeparator--
easy
--InteriorSeparator--
3
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is a topological ordering of a directed graph G = (V,E)?
--InteriorSeparator--
An injective function Ord: V -> {1, 2, ..., n} such that for every edge u->v in E, Ord[u] < Ord[v].
--InteriorSeparator--
medium
--InteriorSeparator--
3
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
A directed graph G = (V, E) without cycles admits what?
--InteriorSeparator--
A topological ordering.
--InteriorSeparator--
medium
--InteriorSeparator--
3
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which data structure can be used to implement the set S in the topological sort algorithm efficiently?
--InteriorSeparator--
(right) A queue
(right) A stack
(wrong) A binary tree
(wrong) A linked list
--InteriorSeparator--
medium
--InteriorSeparator--
6
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the time complexity of the topological sort algorithm?
--InteriorSeparator--
O(n + m), where n is the number of vertices and m is the number of edges.
--InteriorSeparator--
easy
--InteriorSeparator--
6
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In the context of shortest paths, what does P(s,v) represent?
--InteriorSeparator--
A path from vertex s to vertex v.
--InteriorSeparator--
easy
--InteriorSeparator--
7
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the condition (I') for the existence of shortest paths using Dijkstra's algorithm?
--InteriorSeparator--
All edge costs must be non-negative.
--InteriorSeparator--
medium
--InteriorSeparator--
8
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the invariant (D) maintained by Dijkstra's algorithm?
--InteriorSeparator--
For all v in S, u[v] is the minimum cost of a path from s to v; for all v not in S, u[v] is the minimum cost of a path from s to v such that all vertices except the last one are in S.
--InteriorSeparator--
hard
--InteriorSeparator--
8
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What data structure is commonly used to implement the priority queue in Dijkstra's algorithm?
--InteriorSeparator--
(right) Heap
(wrong) Linked list
(wrong) Hash table
(wrong) Array
--InteriorSeparator--
easy
--InteriorSeparator--
14
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the time complexity of Dijkstra's algorithm using a Fibonacci heap?
--InteriorSeparator--
O(m + n log n), where n is the number of vertices and m is the number of edges.
--InteriorSeparator--
medium
--InteriorSeparator--
14
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is a consistent estimator 'g' in the context of Dijkstra's algorithm?
--InteriorSeparator--
A function g: V -> R+ such that for every v in V, u[v] + g(v) <= min{a(P(s,t)) : P(s,t) is a path from s to t and v is in V(P(s,t))} and for every edge uv in E, g(u) <= a(uv) + g(v).
--InteriorSeparator--
hard
--InteriorSeparator--
15
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What happens if Dijkstra's algorithm is run on a graph with negative edge weights?
--InteriorSeparator--
(right) It may fail to find the correct shortest paths
(wrong) It always finds the correct shortest paths
(wrong) It runs in O(1) time.
(wrong) It throws an exception.
--InteriorSeparator--
medium
--InteriorSeparator--
17
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What condition must be satisfied for Bellman-Ford-Moore to work correctly?
--InteriorSeparator--
The sum of the weights of every cycle in the graph must be non-negative (a(C) >= 0 for every cycle C).
--InteriorSeparator--
medium
--InteriorSeparator--
17
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the time complexity of the Bellman-Ford-Moore algorithm?
--InteriorSeparator--
O(n^3)
--InteriorSeparator--
medium
--InteriorSeparator--
21
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
How can Bellman-Ford-Moore be used to detect negative cycles?
--InteriorSeparator--
After running the algorithm, if there exists an edge uv such that u[v] > u[u] + a(uv), then a negative cycle exists.
--InteriorSeparator--
hard
--InteriorSeparator--
22
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the key idea behind solving the all-pairs shortest path problem (P3)?
--InteriorSeparator--
To determine the matrix U where Uij = min{a(Pij) : Pij is a path from i to j}.
--InteriorSeparator--
easy
--InteriorSeparator--
23
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
How can shortest paths be obtained while constructing the matrix U for the all-pairs shortest path problem?
--InteriorSeparator--
By maintaining a Before matrix, where Before[i,j] is the node preceding j on the shortest path from i to j.
--InteriorSeparator--
medium
--InteriorSeparator--
23
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
If all costs are non-negative, which algorithm can be iterated to solve the all-pairs shortest path problem (P3)?
--InteriorSeparator--
(right) Dijkstra's algorithm
(wrong) Bellman-Ford-Moore
(wrong) Floyd-Warshall
(wrong) Topological Sort
--InteriorSeparator--
medium
--InteriorSeparator--
24
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
How can negative edge weights be handled when iterating Dijkstra's algorithm for the all-pairs shortest path problem?
--InteriorSeparator--
By pre-processing the graph with a potential function alpha such that a(uv) + alpha(u) - alpha(v) >= 0 for all edges uv.
--InteriorSeparator--
hard
--InteriorSeparator--
24
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the time complexity of solving the all-pairs shortest path problem by iterating Dijkstra's algorithm after reweighting the edges?
--InteriorSeparator--
O(n^3)
--InteriorSeparator--
medium
--InteriorSeparator--
25
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the core idea behind the Floyd-Warshall algorithm?
--InteriorSeparator--
To iteratively compute the shortest path between all pairs of vertices, considering only vertices {1, 2, ..., k-1} as intermediate nodes.
--InteriorSeparator--
medium
--InteriorSeparator--
26
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
In the Floyd-Warshall algorithm, what does a[i,j]^k represent?
--InteriorSeparator--
(right) The minimum cost of a path from i to j with intermediate nodes in {1, 2, ..., k-1}
(wrong) The shortest path from i to j
(wrong) The cost of the direct edge from i to j
(wrong) The sum of the costs of all paths from i to j
--InteriorSeparator--
hard
--InteriorSeparator--
26
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the time complexity of the Floyd-Warshall algorithm?
--InteriorSeparator--
O(n^3)
--InteriorSeparator--
easy
--InteriorSeparator--
29
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What happens to the diagonal elements of the cost matrix in the Floyd-Warshall algorithm if negative cycles exist?
--InteriorSeparator--
At least one diagonal element will become negative.
--InteriorSeparator--
hard
--InteriorSeparator--
29
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In the context of matrix multiplication for shortest paths, what does U^k represent?
--InteriorSeparator--
A matrix where Uij^k represents the minimum cost of a path from i to j with at most k edges.
--InteriorSeparator--
hard
--InteriorSeparator--
30
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What operation replaces standard matrix multiplication when applying matrix multiplication to solve the all-pairs shortest path problem?
--InteriorSeparator--
The "min-plus" product, denoted by ®, where (B ® C)[i,j] = min_k(B[i,k] + C[k,j]).
--InteriorSeparator--
hard
--InteriorSeparator--
32
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the time complexity of the matrix multiplication-based algorithm for the all-pairs shortest path problem, assuming condition (I') holds?
--InteriorSeparator--
O(n^3 log n)
--InteriorSeparator--
medium
--InteriorSeparator--
32
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the key property of the digraph g=(V,E) defined from the strongly connected components (V) of G?
--InteriorSeparator--
g is acyclic.
--InteriorSeparator--
hard
--InteriorSeparator--
46
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
How can the efficiency of the matrix multiplication-based algorithm for solving the all-pairs shortest path problem be improved?
--InteriorSeparator--
(right) Using faster matrix multiplication algorithms like Strassen's algorithm
(wrong) By using Dijkstra's algorithm
(wrong) By using Bellman-Ford Moore algorithm
(wrong) By using Depth First Search
--InteriorSeparator--
hard
--InteriorSeparator--
33
--FlashCardSeparator--
}], role=model}, finishReason=STOP, avgLogprobs=-0.12580143628538565}]