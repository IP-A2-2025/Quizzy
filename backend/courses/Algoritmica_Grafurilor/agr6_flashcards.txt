[{content={parts=[{text=--FlashCardSeparator--
Single
--InteriorSeparator--
What does c(e) represent in the context of the MST problem?
--InteriorSeparator--
The cost of edge e.
--InteriorSeparator--
easy
--InteriorSeparator--
3
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following are key components of the general MST method?
--InteriorSeparator--
(right) A family of disjoint trees that are progressively merged.
(wrong) Deleting the highest cost edges until a tree remains.
(right) Choosing a tree from the family.
(wrong) Randomly selecting edges until a spanning tree is formed.
--InteriorSeparator--
medium
--InteriorSeparator--
4
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What happens in the general MST method if at some point there's no edge connecting a tree to the remaining graph?
--InteriorSeparator--
The graph is not connected, and there's no MST.
--InteriorSeparator--
medium
--InteriorSeparator--
5
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What property must a cost function 'c' satisfy for the MST demonstration to remain valid?
--InteriorSeparator--
(wrong) c(e') > c(e) => c(T + e' - e) < c(T)
(right) c(e') >= c(e) => c(T + e' - e) >= c(T)
(wrong) c(e') <= c(e) => c(T + e' - e) >= c(T)
(wrong) c(e') >= c(e) => c(T + e' - e) <= c(T)
--InteriorSeparator--
hard
--InteriorSeparator--
9
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In Prim's algorithm, which tree is chosen as Tsk?
--InteriorSeparator--
The tree of maximum order in the family Tk.
--InteriorSeparator--
easy
--InteriorSeparator--
10
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the time complexity of Prim's algorithm?
--InteriorSeparator--
O(n^2)
--InteriorSeparator--
medium
--InteriorSeparator--
12
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
How does Kruskal's algorithm initially select edges?
--InteriorSeparator--
It sorts the edges in ascending order of cost.
--InteriorSeparator--
easy
--InteriorSeparator--
13
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What data structure is often used to efficiently implement the test for circuits in Kruskal's algorithm?
--InteriorSeparator--
(wrong) A stack
(wrong) A queue
(right) Disjoint-set data structure (using trees)
(wrong) A hash table
--InteriorSeparator--
medium
--InteriorSeparator--
14
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does the `find(v)` function do in the context of Kruskal's algorithm?
--InteriorSeparator--
Determines to which set the node v belongs (returns the root of the tree containing v).
--InteriorSeparator--
medium
--InteriorSeparator--
14
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the purpose of the `union(u, w)` method?
--InteriorSeparator--
Merges the sets containing nodes u and w.
--InteriorSeparator--
medium
--InteriorSeparator--
15
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the time complexity of the basic `union` method described (using `root` table)?
--InteriorSeparator--
O(n)
--InteriorSeparator--
medium
--InteriorSeparator--
16
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is the time complexity of Kruskal's algorithm with the basic `find` and `union` implementations?
--InteriorSeparator--
(wrong) O(m log m)
(wrong) O(m)
(right) O(max(m log n, n^2))
(wrong) O(m + n)
--InteriorSeparator--
hard
--InteriorSeparator--
17
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does `pred[v]` signify when it contains 0?
--InteriorSeparator--
`v` is a root node.
--InteriorSeparator--
medium
--InteriorSeparator--
18
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is the time complexity of `find(v)` when using path compression?
--InteriorSeparator--
(wrong) O(1)
(right) O(h(v)), where h(v) is the height of `v` from its root.
(wrong) O(n)
(wrong) O(log n)
--InteriorSeparator--
hard
--InteriorSeparator--
18
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the time complexity of the improved `union` method which considers the number of nodes when merging?
--InteriorSeparator--
O(1)
--InteriorSeparator--
medium
--InteriorSeparator--
22
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is the height h(v) of any node bounded by, in the improved union find algorithm where you keep track of number of nodes within the set
--InteriorSeparator--
(wrong) Logarithmic
(wrong) n
(right) log(n)
(wrong) constant
--InteriorSeparator--
hard
--InteriorSeparator--
25
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Who introduced path compression for the `find` operation?
--InteriorSeparator--
Tarjan
--InteriorSeparator--
medium
--InteriorSeparator--
26
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the approximate time complexity of Kruskal's algorithm using the improved `union` and `find` with path compression?
--InteriorSeparator--
O(m * α(m, n)), where α is the inverse Ackermann function. Practically O(m).
--InteriorSeparator--
hard
--InteriorSeparator--
27
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Define a "cuplaj" (matching) in a graph G = (V, E).
--InteriorSeparator--
A subset of edges M ⊆ E such that no two edges in M share a vertex.
--InteriorSeparator--
easy
--InteriorSeparator--
28
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does dM(v) represent?
--InteriorSeparator--
The degree of node v in the subgraph induced by the matching M.
--InteriorSeparator--
medium
--InteriorSeparator--
28
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is S(M)?
--InteriorSeparator--
The set of vertices saturated by matching M.
--InteriorSeparator--
medium
--InteriorSeparator--
29
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is E(M)?
--InteriorSeparator--
The set of vertices exposed (unsaturated) relative to matching M.
--InteriorSeparator--
medium
--InteriorSeparator--
29
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the goal of the maximum matching problem?
--InteriorSeparator--
To find a matching M with the maximum number of edges.
--InteriorSeparator--
easy
--InteriorSeparator--
30
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Define an edge cover of a graph G.
--InteriorSeparator--
A set of edges F ⊆ E such that every vertex in G is incident to at least one edge in F.
--InteriorSeparator--
easy
--InteriorSeparator--
31
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does it mean for two problems to be polynomially equivalent in the context of matching and edge covers?
--InteriorSeparator--
The algorithms used to solve them can be transformed to each other in polynomial time, and they produce optimal solutions.
--InteriorSeparator--
hard
--InteriorSeparator--
35
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What does the Norman-Rabin theorem state about the relationship between maximum matching and minimum edge cover?
--InteriorSeparator--
(right) |M*| + |F*| = n (where M* is a maximum matching, F* is a minimum edge cover, and n is the number of vertices).
(wrong) |M*| = |F*|
(wrong) |M*| - |F*| = n
(wrong) |M*| * |F*| = n
--InteriorSeparator--
hard
--InteriorSeparator--
32
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What must be true for Fg (the family of edge covers) to not be empty?
--InteriorSeparator--
(wrong) G must have isolated nodes
(right) G must have no isolated nodes.
(wrong) G must be a complete graph
(wrong) G must be a bipartite graph
--InteriorSeparator--
medium
--InteriorSeparator--
31
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Suppose G is a graph of n vertices, with no isolated nodes. Given a maximal matching M*, we construct an edge cover F as follows: F = M*. For each exposed node v in E(M*), we add an arbitrary edge from v to F, what is the size of F?
--InteriorSeparator--
(wrong) |M*|
(wrong) |E(M*)|
(right) |M*| + |E(M*)|
(wrong) n + |M*|
--InteriorSeparator--
hard
--InteriorSeparator--
32
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
For a node 'u' with dM(u) > 1 in edge cover F* in a graph G, what action is taken to create a matching M in the proof of the Norman-Rabin theorem?
--InteriorSeparator--
Find e incident to 'u', M <- M \ {e}.
--InteriorSeparator--
medium
--InteriorSeparator--
33
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is the significance of showing polynomial equivalence of max matching and min edge cover?
--InteriorSeparator--
(wrong) They are the same problem
(wrong) An efficient solution for one implies the other has no efficient solution
(right) An efficient solution to one implies the existence of an efficient solution to the other.
(wrong) One is always NP-complete and the other is always in P.
--InteriorSeparator--
hard
--InteriorSeparator--
35
--FlashCardSeparator--
}], role=model}, finishReason=STOP, avgLogprobs=-0.2192939491123541}]