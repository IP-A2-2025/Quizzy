***************Beginning Page***************
***************page number:1**************
4 noiembrie 2022
—

***************Ending Page***************

***************Beginning Page***************
***************page number:2**************
a Problema arborelui par'gial de cost minim
o Metoda generalé MST
o Algoritmul lui Prim
o Algoritmul lui Kruskal
a Cuplaje
o Cuplaje maxime — acoperiri minime cu muchii
a Exercitii pentru seminarul din séptéména urmétoare
—

***************Ending Page***************


***************Beginning Page***************
***************page number:3**************
Problema MST. Dat G : (V,E) un graf §i c : E —> IR (C(e) este
costul muchiei e) gési'gi T* E TG astfel incét
T* I ' T
C( ) 71%17116 ¢( ),
unde c(T): Z c(e).
eEE(T)
—

***************Ending Page***************

***************Beginning Page***************
***************page number:4**************
o Se p0rne§te cu familia 7-0 I (T10, T20, . . . , T2) de n arbori disjuncti:
Ti0 : ({1}, Q), z': Lin.

0 La ﬁecare pas k (O g k g n — 2), din familia TI“ I
(le, T2,“, . . ., Tsik) de (n — k) arbori disjunc'gi astfel incét V :
nik nik
U V(Tf) §i U E(TZ-k) Q E, construie§te Tk+1 dupéi cum
111rmeazé: Z

o alege TS,“ € Tk;

o determinéi o muchie de cost minim e* : 1/31/11 din multimea de
muchii ale lui G cu 0 extremitate v5 G V(Tsk) §i cealalté in V \
WT?) (111* Q V(T]3));

O Tk+1 I (Tk \{Tsk, TJ-ki}) U T, unde T este arborele ob'ginut din Tsk
§i lei prin adéugarea muchiei e*.

—

***************Ending Page***************


***************Beginning Page***************
***************page number:5**************
0 Observéim c5, dacé, 1a un anumit pas, nu existé nicio muchie cu o

extremitate in V(T$k) §i cealalté in V\ V(Tf), atunci G nu este

conex §i nu existé vreun MST in G.
0 Constructia de mai sus este sugeraté in imaginea de mai jos:

A
Tf'
Til Tubs
o Familia T"_1 are doar un arbore, Tlnil.
—

***************Ending Page***************

***************Beginning Page***************
***************page number:6**************
Dacé’ G : (V, E) este un grafconex cu V : {1,2, . . . , n}, atunci T17"1
construit de algoritmul anterior este un MST a1 1u1' G.
Demonstraﬁie: Demonstrém (prin inductie) C5. (*) Vk G {0, . . . , n — 1}
existé un arbore partial Tg, MST a1 lui G, astfel incét

n—k

EW) I U E<Tf> Q EM?)-

1:1
in particular, pentru k : n — 1, E(T”_1) I E(T1"_1) Q E(T,Z:_1)
implicéi T17"1 : T711 §i teorema este demonstraté.
Pentru k : O, avem E(7'0) : Q §i, deoarece G este conex, existé un
MST T6‘; astfel, proprietatea (*) este adevératé.

—

***************Ending Page***************


***************Beginning Page***************
***************page number:7**************
Demonstralgie (continuare). Dacé proprietatea (*) are 10c pentru
0 g k g n — 2, atunci existé un MST a1 lui G, T11‘: astfel incét E(7'k) Q
E(T,§). Din constructie, E(7'k+1) I E(7"“) u {6*}. Dacﬁ 6* e E(T;),
atunci luéim TII+1 : T]: §i proprietatea are 10c §i pentru k + 1.

Si presupunem c5 e* ¢ E(T,:) Atunci, T]: + e* are exact un circuit
C’, con'ginénd e* : 0515*. Deoarece 15* yé V(Tsk), urmeazé cé existé 0
muchie e1 75 e* in C cu o extremitate in V(Tf) §i cealalté in V\ V(Tsk).
Din modul de alegere a1 e* avem c(e*) g c(e1)§i el E E(T,j) \ E(Tk).
Fie T1 : T}: + e* — e1; evident, T1 € TG (ﬁind conex cu n — 1 muchii).
Deoarece el € E(T,:) \ E('Tk), avem E(Tk+1) Q E(T1).

—

***************Ending Page***************

***************Beginning Page***************
***************page number:8**************
Demonstratie (continuare).

Pe de alté parte, deoarece c(e*) g c(e1), avem c(T1) : c(T,I)-|—c(e*)—

c(e1) é @(TZ)

Deoarece T]: este un MST a1 lui G, urmeazéi 05 C(Tl) : C(TII), i. e.,

T1 este un MST a1 lui G con'ginénd toate muchiile din E(Tk+1). Luénd

TI: +1 : Tl incheiem demonstratia teoremei. U
—

***************Ending Page***************


***************Beginning Page***************
***************page number:9**************
o Demonstratia de mai sus rﬁméne adevératé §i pentru functii de cost

c : TG —> R care satisfac1VT € Tg,Ve E E(T),Ve’ ¢ E(T)
C(e’) é 6(6) :> C(T + e’ — 6) é C(T)-

o in metoda generalﬁ prezentaté, modul de alegere a arborelui Tsk
nu este precizat in aménunt. Vom discuta doué strategii clasice de
alegere a acestui arbore.

o Prima strategie alege Tf ca ﬁind arborele de ordin maxim din fa-
milia 7"’?

o in cea de-a doua strategie Tf este unul dintre cei doi arbori din fa-
milia Tk, legati printr-o muchie de cost minim printre toate muchiile
cu extremité'gi in arbori diferi'gi ai familiei.

—

***************Ending Page***************

***************Beginning Page***************
***************page number:10**************
0 in strategia lui Prim Tsk este arborele de ordin maxim din
familia Th.

0 Urmeazé c5 1a ﬁecare pas k > 0 a1 metodei generale, Tl“ are un
arbore, TS,“ : (Vs, E5), cu k + 1 noduri §i n — k — 1 arbori ﬁecare
cu céte un nod.

o Implementarea lui Dijkstra: Fie a §i ,6 doi vectori de dimensiune
n; elementele lui a sunt noduri din V(G) iar elementele lui ﬂ sunt
numere reale, cu urmétoarea semniﬁcatie:

S V' V V ' : ' ' : ' "
( ) J € \ MU] C(abh) i€&1}i§l€E C(11)
—

***************Ending Page***************


***************Beginning Page***************
***************page number:11**************
Algoritmul lui Prim

V5 k {s}; Es k Q; // pentru un s G V.
for (v E V \ {5}) do

04M <— s; mu] P c(s'u); // dacé ij ¢ E, atunci c(ij) : oo.
while (Vs 75 V) d0

ﬁnd j* G V\ VS a. i. ﬂ[j*] : _min ,6[j];

J€V\Vs
Vs P VS U {j*}§ Es <— Es U {a[j*]j*};
for (j E V\ Vs) do
if WU] > CUVD then
ﬂU] k GUY]; GU] kj*;
—

***************Ending Page***************

***************Beginning Page***************
***************page number:12**************
L
‘r
o Se observé cé (S) este satisfécuté dupé initializare. In bucla While,
strategia metodei generale este respectatéi §i de asemeni semniﬁca'gia
lui (S) este pistraté de testul din bucla for.
0 Complexitatea timp: 0(n — 1) + (9(n — 2) + - - - + (9(1) : 0(n2)
care este buné pentru grafuri de dimensiune 0(n2).
—

***************Ending Page***************


***************Beginning Page***************
***************page number:13**************
0 in algoritmul lui Kruskal Tsk este unul dintre cei doi arbori
din familia Tk, legagi printr-o muchie de cost minim printre
toate muchiile cu extremitﬁgi in arbori diferigi ai familiei.

o Aceastéi alegere poate ﬁ fécuté prin sortarea ini'gialé a muchiilor
crescétor dupé cost §i, dupé aceea, prin parcurgerea listei astfel
obtinute. Dacé notém cu T arborele T5,“, algoritmul poate ﬁ descris
astfel.

sort E : {e1,e2,...,em} a. i. c(e1) g g c(em);
T <— Q; z' <— 1;
while (z g m) do
if ((T U {e¢}>G nu are circuite) then
T H T U {e1};
z' + +;
—

***************Ending Page***************

***************Beginning Page***************
***************page number:14**************
o Sortarea poate ﬁ fécuté in (9(m log m) : @(mlog n).

o Pentru implementarea eﬁcienté a testului din bucla While,
este necesar sé reprezentém mul'gimile de noduri ale arbori,
V(T1k), V(T2k), . . ., V(T,'j_k) (1a ﬁecare pas k; a1 metodei generale),
§i sé testém dacé muchia curenté are ambele extremitéti in aceea§i
multime.

o Aceste multimi vor ﬁ reprezentate folosind arbori (care nu sunt, in
general, subarbori ai grafului G). Fiecare astfel de arbore are o
rédécinﬁ care va ﬁ folosité pentru a desemna multimea de noduri
ale grafului G din acel arbore.

o Mai precis, avem a functie ﬁnd(v) care determiné cérei multimi
ii apartine nodul v, adicé, returneazé rﬁdﬁcina arborelui care
reﬁne mulgimea lui 'u.

—

***************Ending Page***************


***************Beginning Page***************
***************page number:15**************
o in metoda generalé este necesaréi o reuniune (disjuncté) a mul'gim-
ilor de noduri a doi arbori (pentru a obtine 7%“).

o Folosim metoda union(u,'w) cu urméitoarea semniﬁca'gie: real-
izeazi reuniunea a douﬁ mulgimi de noduri, una cﬁreia ii
apartine v §i una cﬁreia ii apartine w.

o Putem rescrie bucla While a algoritmului dupé cum urmeazéi:

While (z é m) do
let ei : 11w;
if (ﬁnd('u) yéﬁnd(w)) then
union('u, w);
T <- T U {61'};
z' + +;
—

***************Ending Page***************

***************Beginning Page***************
***************page number:16**************
o Tabloul r00t[1..n] cu elemente din V are semniﬁca'gia: T00t[’U] :
rédécina arborelui care retine multimea céreia ii apartine v.
0 Adaugé 1a pasul de initializare (correspunzénd familiei To):
for (v G V) do
1'00t['u] k 'u;
o Functia ﬁnd (cu complexitatea timp (9(1)):
function ﬁnd(v : V);
return moth];
o Metoda union (cu complexitatea timp C’)(n)):
method union('u, w : V);
for (z' 6 V) d0
if (T00t[i] : T00t['u]) then
moth] : rooﬂw];
—

***************Ending Page***************


***************Beginning Page***************
***************page number:17**************
Analiza complexitégii timp:

o Sunt (9(m) apeluri ale func'giei ﬁnd in timpul buclei While.

o in §iru1 de apeluri ﬁnd, se intercaleazéi exact n — 1 apeluri um'on

(un apel pentru ﬁecare muchie din MST-ul ﬁnal).

o Astfel, time necesar buclei while este (9(m(9(1) + (n — 1)(9(n)) :
Complexitatea timp a algoritmului este O(ma:r:(m10g n, n2))
Dacé G are multe muchii, m : 0(n2), algoritmul lui Prim este mai
eﬁcient.

—

***************Ending Page***************

***************Beginning Page***************
***************page number:18**************
o Tabloul p'red[1..n] cu elemente din V LJ {0} are semniﬁcatia
pred[v] :nodul dinaintea 1ui 'u pe drumul unic citre v de 1a rédécina
arborelui care retine multimea céruia ii apartine 'u.

o Adaugé 1a pasul de initializare (correspunzénd familiei To):

for (v G V) do
pred['v] k O;
o Functia ﬁnd(v) are complexitatea in (9(h(v)), unde h('u) este
lungimea drumului din arbore de 1a v 1a rédﬁcina acestui arbore:
function ﬁnd('u : V);
z' <— 'u;// o variabilé localé.
while (pred['1l] > 0) d0
2' k predh'];
return 2';
—

***************Ending Page***************


***************Beginning Page***************
***************page number:19**************
o Metoda union (de complexitate timp 0(1)) este apelaté doar
pentru noduri rédéciné:
method union(r00t1, Tootg : V)
pred[r00t1] <- Tootg;
o Bucla while a algoritmului este modiﬁcatﬁ astfel:
while (2' g m) d0
let ei : 'u'w; a: <—ﬁnd('u); y <—ﬁnd(w);
if (:1; 75 y) then
union(:z:, y);
T H T U {e1};
z' + +;
—

***************Ending Page***************

***************Beginning Page***************
***************page number:20**************
Dacé executéim bucla While in aceasté formé pentru graful G : Klynil
cu lista sortaté amuchiilor, E = {12, 13, ..., 1n}, atunci §iru1 de apeluri
ale celor doué metode este (F §i U abreviazé ﬁnd §i union):

1 2 n

F(1),F(2)‘U(1,2) o—-0 --------------________ .

2 1 2 3 n

F(1).,F(3),U(2.3) ._-._-. --_______________ .

3 1 2 3 4 n

F(1),F(4),U(3,4) .—I.—I.—I. ------_______ .

n 1 2 3 4 n- 1 n

—

***************Ending Page***************


***************Beginning Page***************
***************page number:21**************
o Astfel, aceasté forméi a algoritmului are complexitatea timp Q(n2)
(chiar dacé graful este rar).

o Neajunsul acestei implementéri este dat de faptul c5, in metoda
union, rédéciné a noului arbore devine rédécina acelui arbore care
re'gine un numéir mai mic de noduri, ceea ce implicéi o mérire a lui
h('u) 1a (9(n) in timpul algoritmului.

o Putem evita acest neajuns 'ginénd in rédécina ﬁecéirui arbore car-
dinalul mul'gimii pe care arborele 0 re'gine. Mai precis, semniﬁca'gia
pred[v], unde 1/ este o rédéciné, este:

predhl] < 0 <:> 'u este rfidécina unui arbore
care reﬁne 0 multime cu — pred[11]n0duri
—

***************Ending Page***************

***************Beginning Page***************
***************page number:22**************
o Pasul de initializare
for (v G V) do
pred['u] P —1;
o Metoda union are complexitatea (9(1) pentru a intre'gine noua
semniﬁcatie:
method union(root1, rootg : V)
t <— pred[root1] + pred[rooz‘/2];
if (-pred[r00t1] 2 —pred[r00t2]) then
pred[r00t2] <— rootl; pred[r00t1] <— t;
else
pred[r00t1] P rootg; pred[r00t2] P t;
—

***************Ending Page***************


***************Beginning Page***************
***************page number:23**************
Aﬁrmagie. Cu acestea implementéri ale func'giei ﬁnd §i metodei union
algoritmul are urmétorul invariant:
(*)V'u E V, —p'red[ﬁnd(v)] Z 2M”)

Cu alte cuvinte, numéirul de noduri din arborele ciruia ii apar'gine 'u este
cel pu'gin 2 1a puterea “distan'ga de 1a 'u 1a rédéciné".
Demonstratia aﬁrmatgiei. Dupé pasul de initializare avem h(v) : 0,
ﬁnd(v) : 'u, §i —pred['u] : 1, V11 6 V, deci (*) are loc cu egalitate.
Si presupunem c5 (*) are 10c inaintea unei iteratii din bucla While. Sunt
posibile doué cazuri:

o in aceasté itera'gie While nu este apelaté union. Tabloul pred nu

este actualizat, deci (*) are 10c §i dupé aceastéi itera'gie.
—

***************Ending Page***************

***************Beginning Page***************
***************page number:24**************
o in aceastéi iteragie While avem un apel a1 metodei union. Fie
um'on(a:, y) acest apel, §i sé presupunem c5 in metoda union se exe-
cuté atribuirea pred[y] <- 03. Aceasta inseamné cé inaintea aceastei
iteratii avem —p'red[a:] 2 —p'red[y].

Nodurile v pentru care h('u) se modiﬁcé in aceasté iteratia sunt ace-
1ea pentru care, inaintea itera'giei aveam ﬁnd('u) : y §i —pred[y] >
2'4“).

Dupéi itera'gia While, avem h’(v) : h(v) + 1 §i ﬁnd’(v) : :12. Astfel,
trebuie sé veriﬁcém c5 —p'red’[:r] 2 2h’(v)_ Tntr-adevér, —p'red’[a:] :
—p'red[a:] — pred[y] 2 2- (—pred[y]) 2 2 - 2M”) : 2M”)+1 : 2W”).

Urmeazé c5 (*) este un invariant a1 algoritmului. U
—

***************Ending Page***************


***************Beginning Page***************
***************page number:25**************
—

Aplicénd logaritmul in (*) ob'ginem

h('u) <10g(-pred[ﬁnd(v)]) g 10g n,Vv G V.
Complexitatea timp a buclei While este
C’)(n — 1+ 2m10g n) : 0(m10g n)

Astfel, aceasté a doua implementare pentru union §i ﬁnd oferé o com-

plexitate timp a algoritmului Kruskal de 0(m10g n)
—

***************Ending Page***************

***************Beginning Page***************
***************page number:26**************
Complexitatea timp a buclei While din solutia de mai sus este da-
toraté §irului de apeluri ﬁnd. Tarjan (1976) a observat c5 un
apel cu h(v) > 1 poate s5 "colapseze" drumul din arbore de la 'u
la rédécinéi, féré a modiﬁca timpul O(h('u)), fécénd h(a:) : 1 pen-
tru toate nodurile a: de pe drum. ln acest fel, viitoarele apeluri
ﬁnd pentru aceste noduri vor ﬁ mai rapide. Mai precis, functia ﬁnd
devine:
function ﬁnd(v : V); // i, j, aux sunt variabile locale.
z' <— 'u;
while (predm > 0) d0
z' <— predh];
j P v;
while (p'red[j] > 0) do
aux <- pred[j]; p'red[j] k i; j <- aux;
return 2';
—

***************Ending Page***************


***************Beginning Page***************
***************page number:27**************
Dacé A : N >< N —> N este functia 1ui Ackermann daté prin:
n + 1, dacé m : O
(1) A(m,n) : A(m — 1,1), dacﬁ m > 0 §i n : O
A(m— 1,A(m,n—1)), dacéi m > 0 §i n > 0
§i dacé notém, Vm 2 n > 0,
a(m,n) : min{z : A(z,4[m/n]) >10gn,z >1}
ob'ginem cé complexitatea timp a buclei while folosind union din cea
de-a doua solu'gie §i ﬁnd de mai sus, devine 0(m - a(m, n)).
Si notém c5 a(m, n) este o functie care cre§te foarte incet (pentru valori
practice ale lui n, a(m, n) g 3); astfel cea de-a treia solutie este practic
o implementare liniaréi (O(m)) a algoritmului lui Kruskal.
—

***************Ending Page***************

***************Beginning Page***************
***************page number:28**************
Fie G : (V, E) un (multi)graf. Dacéi A Q E §i 'u E V, notém dA('u) :
|{e : e € A, e incidentéi cu 'u}|, i. e., gradul lui 'u in subgraful generat
de A, (A>G.
Un cuplaj (0 multime independentﬁ de muchii) in G este o
multime de muchii M Q E astfel incét
dM(v)<1,V'u € V.
Familia tuturor cuplajelor din graful G este notaté cu Mg:
Mg:{M : MQE,Mcup1aj in G}. \
—

***************Ending Page***************


***************Beginning Page***************
***************page number:29**************
Se observé cé MG satisface:

(i) Q G Mg;

(ii) M GMg,MI Q M:> M’ GMg.
Fie M E MG un cuplaj.

o Un nod v E V cu dM(v) : 1 este numit saturat de citre M,
iar multimea tuturor nodurilor lui G saturate de M este notaté cu
S(M). Evident,

$(M): U e, §i \$(M)\:2-\Ml-
66M

o Un nod 'u € V cu dM('u) : 0 este numit expus relativ 1a M
(sau nesaturat de céitre M), iar multimea tuturor nodurilor lui G
expuse relativ 1a M este notaté cu E(M). Evident cé E(M) :
V\$(M), §i \EUVI) I \W —2-!M!-

***************Ending Page***************

***************Beginning Page***************
***************page number:30**************
Problema cuplajului maxim:
P1 Dat un graf G : (V, E), s5 se determine M* 6 MG astfel incét
|M*| : max |M|.
MEMG
Notéim cu 1/(G) : max |M|.
MEMG
Problema cuplajului maxim este stréns legaté de problema acoperirii
minime cu muchii.
—

***************Ending Page***************


***************Beginning Page***************
***************page number:31**************
O acoperire cu muchii a lui G este o mul'gime de muchii F Q E astfel
incét
(ll-7(1))? 1,V11 6 V(G).
Familia acoperirilor cu muchii ale graful G este notaté cu Fg:
FG : {F : F Q E, F acoperire cu muchii a lui G}.
FG are urmétoarele proprieté'gi
(i) J-"G 75 Q <:> G nu are noduri izolate (caz in care E 6 Fg);
(ii) F Efg,F’Q F:> F’ Gfg.
Problem acoperirii minime cu muchii:
P2 dat un graf G : (V, E), gésiti F* E FG astfel incét
|F*| : min |F|
FEFG

***************Ending Page***************

***************Beginning Page***************
***************page number:32**************
(Norman-Rabin, 1959) Fie G : (V,E) un graf de ordin n, fara
noduri izolate. Daca M * este un cuplaj de cardinal maxim in G §i F*
este o acoperire minima cu muchii a 1ui G, atunci
|M*| + |F*| : n.
Demonstragie: "g" Fie M* un cuplaj de cardinal maxim in G; con-
sideram urmatorul algoritm:
F P M*;
for (v G E(M*)) do
ﬁnd 'u’ E S(M*) a. i. 'uv’ E E;
F <- F U {1111'};
—

***************Ending Page***************


***************Beginning Page***************
***************page number:33**************
Demonstragie (continuare).
Si notém 05, V'u G E(M*), deoarece G nu are noduri izolate, existéi o
muchie incidentéi cu 'u, gi, cum M * este maximal relativ 1a rela'gia de
incluziune, aceasté muchie are celélalt capét in S (M *).
Multimea F de muchii construité este o acoperire cu muchii §i \F] :
|M*I + |E(M*)| : |M*| + n — 2- |M*\ : n — |M*I. Astfel
(2) |F*|<|F|:n—lM*l-
"Z" Fie F* o acoperire minimé cu muchii a lui G; considerém urmétorul
algoritm:
M <— F*;
for (El'u E V: dM('u) > l) do
ﬁnd e G M incidentéi cu 'u;
M k M \ {e};
—

***************Ending Page***************

***************Beginning Page***************
***************page number:34**************
Demonstragie (continuare).

Evident c5 algoritmul construie§te un cuplaj M in G. Dacé muchia

e incidenté cu 'u (eliminaté din M intr-o iteratie While) este e : v'u’,

atunci (in/1(1)’) : 1 §i in urméitoarea itera'gie vom avea dM('u’) : O, astfel

1a ﬁecare itera'gie While este creat un nod expus relativ 1a cuplajul ﬁnal,

M (dacé ar exista 0 alté muchie e’, in multimea curenté M, incidenté

cu 'u’, atunci deoarece e E F*, F* \ {e} ar ﬁ o acoperire cu muchii, in

contradictie cu alegerea lui F*).

Astfel, dacéi M este cuplajul construit de algoritm, avem: |F*| — |M | :

|E(M)| : n —2- |M|, i. e.,

(3) |F*|:n—|Ml>n—lM*l-

Din (2) §i (3) derivi concluzia teoremei. U
—

***************Ending Page***************


***************Beginning Page***************
***************page number:35**************
Si observém ca tocmai am demonstrat c5 doué probleme P1 §i P2 sunt

polinomial echivalente deoarece cuplajul M §i acoperirea cu muchii F

construite sunt solutii optime pentru cele douﬁ probleme, respectiv.
—

***************Ending Page***************

***************Beginning Page***************
***************page number:36**************
Exercigiul 1’. Determina'gi un arbore par'gial de cost minim in graful
de mai jos.
3 1
1
3
—

***************Ending Page***************


***************Beginning Page***************
***************page number:37**************
Exercigiul 1. Fie G : (V, E) un graf conex §i c : E —> R o func'gie de

cost pe muchiile sale. O submultime A Q E este numité tdz'etu'ni dacé

existé o bipartitie (S, T) a lui V astfel incét A : {uv 6 E : u E S, v E

T} (G \ A nu mai este conex).

(a) Dacé in orice téieturé existé o singurﬁ muchie de cost minim, atunci
G con'gine un singur arbore par'gial de cost minim.

(b) Arétati c5, dacé c este functie injectivé, atunci G contine un singur
arbore par'gial de cost minim.

(c) Reciprocele aﬁrmatiilor de mai sus sunt adevérate?

Exercitiul 2. Fie G : (V, E) un graf conex de ordin n, c : E —> 1R,

§i Tém” familia arborilor sii partiali de cost (c) minim. Deﬁnim H :

(Tgm,E(H)) unde T1T2 e E(H) <:> |E(T1)AE(T2)| z 2. Arétati c5

H este conex §i c5 diametrul séiu este cel mult n — 1.

—

***************Ending Page***************

***************Beginning Page***************
***************page number:38**************
Exercitiul 3. Fie G : (V, E) un graf conex §i c : R —> R. Pentru un
arbore partial T : (V, E’) G Tg, §i 'u 73 'w G V notam cu P5,, singurul
'u'w-drum din T. Aratati ca un arbore partial T* : (V, E*) este de cost
minim daca §i numai daca
V e : v'u) E E \ E*,V e’ E E(P,,7;,*), avem c(e) > c(e').
Exercitiul 4. Fie G : (V, E) un graf 2-muchie-conex §i c : E —> 1R.
Daca T : (V, E’) este arbore partial de cost minim a1 lui G §i e G E’,
T — e are exact doua componente conex Ti §i Té, respectiv. Notam cu
eT 73 e o muchie de cost minim in taietura generata de (V(T{), V(Té))
in G — e. Aratati ca, daca T* este un arbore partial de cost minim al
lui G, §i e 6 E(T*), atunci T* — e + e1" este un arbore partial de cost
minim G — e.
—

***************Ending Page***************


***************Beginning Page***************
***************page number:39**************
Exercitiul 5. Fie G : (V, E) un graf conex §i c : E —> IR o functie de
cost injectiva pe muchiile sale. Consideram urmatorul algoritm
for (e G E) d0
7(6) <— 7‘; // toate muchiile sunt colorate cu ro§u; in timpul executiei
vor ﬁ r0§ii, albastre sau verzi
while ((EIA Q E, taietura cu 'y(e’) 5i v, unde c(e') : 11112 c(e)) sau
ee
(EIC, un circuit cu 7(e’) 75 a, unde c(e') : mac}; c(e))) d0
ee
pentru o taietura, A, 'y(e’) P 'u;
pentru un circuit, C’, 7(e’) P a;
return H : (V,{e G E : 7(e) : 11]»);
Arata'gi ca
(a) o muchie apartine unui arbore partial de cost minim daca §i numai
daca este de cost minim intr-o taietura;
(b) o muchie nu apartine nici unui arbore partial de cost minim daca
§i numai daca este de cost maxim intr-un circuit;

***************Ending Page***************

***************Beginning Page***************
***************page number:40**************
Exercitiul 5 (continuare).
(c) algoritmul nu se opregte cété vreme mai existé muchii r0§ii in graf;
(d) algoritmul se opre§te pentru orice alegere a muchiilor e’, iar H

este singurul arbore par'gial de cost minim din G.
Exercigiul 6. Fie H un graf conex, Q 73 A Q V(H), §i 'w : E(H) —>
REF. Un arbore Steiner pentru (H, A, w) este un arbore T(H, A, w) :
(VT, ET) Q H cu A Q VT care are costul minim printre toti arborii
care contin A, §i care sunt sunt subgrafuri ale lui H:

s[T(H,A,w>] I Z 10(6):
EEET
: min Z w(e) : T’ : (VTI, ET!) arbore in H,A Q VT/
BEET!

(a) Aréta'gi cé un arbore Steiner poate ﬁ determinat in timp polinomial

dacéA: V H sau A :2.

***************Ending Page***************


***************Beginning Page***************
***************page number:41**************
Exercitiul 6 (continuare).

(b) Fie G : (V,E) un graf conex cu V : {1,2,...,n}, §i A Q V;
avem de asemeni §i o functie de cost c : E —> Rn Considerém
graful complet Kn (cu V(Kn) : V) §i deﬁnim E: E(Kn) —> R+z

E('1Lj) : min {c(P) : Z c(e) : P este 'Ilj-drum in G}
e€E(P)
Demonstrati céi s[T(G,A,c)] : s[T(Kn,A,E)] §i aréta'gi cum
se poate construi un arbore Steiner T(Kn,A,E) dintr-un arbore
Steiner T(G,A, c).

(c) Aréta'gi cé existéi un arbore Steiner T(Kn, A,E) astfel incét toate
nodurile sale din afara lui A au gradul cel putin 3. Folosind aceasté
proprietate arétati cé existé un arbore Steiner T(Kn, A,E) cu cel
mult 2|A‘ — 2 noduri.

—

***************Ending Page***************

***************Beginning Page***************
***************page number:42**************
Exercitiul 7. Considerém o ordonare E : {e1, 62, . . . , em} a muchiillor

unui graf conex G : (V, E) de ordin n. Pentru orice submul'gime A Q E

deﬁnim XA G GFm vectorul caracteristic m-dimensional a1 mul'gimii A:

xfl : 1 <:> ei E A. GFm este spatiul m-dimensional peste Zg.

(a) Aréta'gi c5 submultimea vectorilor caracteristici corespunzétori tu-
turor téieturilor din G impreuné cu vectorul nul este un subspatiu
X a11ui GFm.

(b) Arétati c5 submultimea vectorilor caracteristici corespunzétori tu-
turor circuitelor din G genereazé un subspatiu U a1 lui GFm care
este ortogonal pe X.

(c) Arétati cé dim(X) 2 n — 1.

(d) Arita'gi céi dim(U) Z m — n +1.

(e) Tn ﬁnal, dovediigi cé inegalitétile de mai sus sunt de fapt egalitéti.

—

***************Ending Page***************


***************Beginning Page***************
***************page number:43**************
Exercigiul 8. Fie G : (V, E) un graf conex §i c : E —> R o functie de
cost pe muchiile sale.
a) Fie T* un arbore partial de cost c-minim a1 1ui G §i e > 0. Aratati
ca T* este singurul arbore par'gial de cost E-minim a1 lui G, unde

E(e) :{ c(e) — e, daca e E E(T*)

c(e), altfel

b) Deduce'gi de aici ca pentru orice arbore par'gial de cost minim, T*,
a1 lui G exista o ordonare a muchiilor lui G astfel incat algoritmul lui
Kruskal returneaza T*.
Exercigiul 9. Fie G un graf, 5,25 E V §i c : E(G) —> R+ o functie de
cost deﬁnita pe muchiile sale. Pentru orice drum (cu cel pu1gin o muchie)
deﬁnim locul 'anust ca ﬁind costul minim a1 uneia dintre muchiile sale.
Proiecta'gi un algoritm eﬁcient care sa determine un st-drum cu locul
ingust maxim (printre toate st-drumurile din G).

***************Ending Page***************


***************Beginning Page***************
***************page number:44**************
Exercitiul 10. Fie G : (V, E) un graf conex §i c : E —> R o functie

de cost injectiva. Fie T* un arbore partial de cost minim al lui G §i To

un arbore partial cu cel de-al doilea cel mai mic cost in G.

(a) T0 este unicul arbore partial cu cel de-al doilea cel mai mic cost in
G?

(b) Aratati ca |E(T*)AE(TO)| : 2.

(c) Descrieti un algoritm pentru a determina un arbore partial cu cel
de-al doilea cel mai mic cost in G.

—

***************Ending Page***************

***************Beginning Page***************
***************page number:45**************
Exercitiul 11. Fie G : (V, E) un graf conex §i c : E —> R o functie

de cost. Adevarat sau fals? (J ustiﬁca'gi raspunsurile!)

(a) Orice muchie de cost minim din G este continuta intr-un anume
arbore partial de cost minim din G.

(b) Daca G are un circuit, G, cu o singura muchie de cost minim, atunci
acea muchie este continuta in orice arbore partial de cost minim din
G.

(c) Daca o muchie este continuta intr-un arbore partial de cost c minim
din G, atunci acea muchie este de cost minim intr-o anumita tai-
etura a lui G.

—

***************Ending Page***************


***************Beginning Page***************
***************page number:46**************
Exercigiul 12. Determinati numérul de cuplaje maxime ale urméitoru-
lui graf:
1 2 3 i” 2n—2 2n—1 2n
Exercigiul 13. Doi copii se joacé pe un graf dat, G, astfel: ﬁecare alege
alternativ un nod nou 110,111, . .. a§a incét, pentru orice i > 0, 'ui este
adiacent cu 'uiil. J ucétorul care nu mai poate alege un nod nou pierde
jocul. Arétati c5 jucétorul care incepe jocul are intotdeauna 0 strategie
de cégtig dacé §i numai dacé G nu are un cuplaj perfect.
—

***************Ending Page***************


***************Beginning Page***************
***************page number:47**************
Exercitiul 14. Fie S 0 multime nevidé §i ﬁnité, k; E N*, iar
.A I (14.1‘)1gz'gk §i B : (Bi)1§1<k (10115. partitii 8.16 1111 S. Arétati
C5. A §i B admit un sistem comun de reprezentanti, i. e., existﬁ
734,773 : {1,2, . . . , k} —> S a§ainc€1tpentru orice 1 g 7 g k, 734(7) E A1
§i 713(7) € Bi, iar cele doué func'gii au aceagi imagine.
—

***************Ending Page***************

