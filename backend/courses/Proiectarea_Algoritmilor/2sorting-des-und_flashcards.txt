[{content={parts=[{text=```
--FlashCardSeparator--
Single
--InteriorSeparator--
What is the condition for SORTED(a) according to the provided material?
--InteriorSeparator--
Vi.(0 <= i < n-1) => a[i] <= a[i + 1] where n = a.size()
--InteriorSeparator--
medium
--InteriorSeparator--
4
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In BubbleSort, what is (a[i] > a[i+1]) called?
--InteriorSeparator--
Inversion
--InteriorSeparator--
easy
--InteriorSeparator--
4
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is the purpose of the `askIth` function in the BubbleSort algorithm?
--InteriorSeparator--
(right) It swaps elements a[i] and a[i+1] if a[i] > a[i+1]
(wrong) It always swaps elements a[i] and a[i+1]
(wrong) It returns the average of a[i] and a[i+1]
(wrong) It compares elements a[i] and a[i+2]
--InteriorSeparator--
medium
--InteriorSeparator--
6
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does the variable `last` represent in the BubbleSort algorithm?
--InteriorSeparator--
The index up to which the array needs to be compared in the current pass.
--InteriorSeparator--
medium
--InteriorSeparator--
6
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following is an invariant of the *outer* while loop in the BubbleSort algorithm?
--InteriorSeparator--
(right) forall jzint :: forall kzint :: 0 <= j <= last < k < a.size() ==> a[j] <= a[k]
(wrong) forall jzint :: 0 <= j < i ==> a[j] <= a[i]
(wrong) last <= j < k < a.size() ==> a[j] <= a[k]
(wrong) forall jzint :: forall kzint :: 0 <= j < k < a.size() ==> a[j] <= a[k]
--InteriorSeparator--
hard
--InteriorSeparator--
9
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the basic principle behind InsertSort?
--InteriorSeparator--
For each element, insert it into the sorted portion of the array.
--InteriorSeparator--
easy
--InteriorSeparator--
12
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
In InsertSort, what happens when `a[i] > temp` within the inner while loop?
--InteriorSeparator--
(right) `a[i+1]` is assigned the value of `a[i]`
(wrong) `a[i]` is assigned the value of `a[i+1]`
(wrong) The loop terminates
(wrong) A swap operation is performed
--InteriorSeparator--
medium
--InteriorSeparator--
13
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What condition must be met for the inner while loop in InsertSort to execute?
--InteriorSeparator--
(i >= 0) && (temp < a[i])
--InteriorSeparator--
medium
--InteriorSeparator--
14
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is `MAXHEAP(a)` property described in the text?
--InteriorSeparator--
(right) Every node is greater than or equal to its children.
(wrong) Every node is less than or equal to its children.
(wrong) All elements of a are sorted.
(wrong) Half the elements in a are sorted.
--InteriorSeparator--
medium
--InteriorSeparator--
17
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In HeapSort, what is the first step after establishing MAXHEAP(a)?
--InteriorSeparator--
Swap a[0] and a[n-1].
--InteriorSeparator--
medium
--InteriorSeparator--
17
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What does `MAXHEAP(a, l)` signify in the context of HeapSort?
--InteriorSeparator--
(right) The max-heap property holds for all indices greater than or equal to l.
(wrong) The max-heap property holds for all indices less than or equal to l.
(wrong) Only element at index l satisfies max-heap property.
(wrong) The first l elements are sorted.
--InteriorSeparator--
hard
--InteriorSeparator--
19
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the purpose of the `insertInHeap` function in HeapSort?
--InteriorSeparator--
To re-establish the max-heap property after a swap or insertion.
--InteriorSeparator--
medium
--InteriorSeparator--
20
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What are the preconditions `@requires` for `insertInHeap(out a, n, l)` function in HeapSort?
--InteriorSeparator--
(right) `MAXHEAP(a,l + 1)`
(wrong) `MAXHEAP(a,l - 1)`
(wrong) `SORTED(a)`
(wrong) `a.size() > 0`
--InteriorSeparator--
hard
--InteriorSeparator--
21
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
After calling `swap(a, 0, r)` inside the heapSort algorithm, what is the next function called?
--InteriorSeparator--
`insertInHeap(a, r, 0)`
--InteriorSeparator--
medium
--InteriorSeparator--
20
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which invariants hold true within the outer while loop `while (r >= 1)` in the `heapSort` algorithm?
--InteriorSeparator--
(right) MAXHEAP(a[0..r])
(right) SORTED(a[r..n])
(wrong) MAXHEAP(a)
(wrong) a[0] <= a[r]
--InteriorSeparator--
hard
--InteriorSeparator--
22
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is a key property that `insertInHeap` aims to maintain, related to the input parameter `n`?
--InteriorSeparator--
(right) The heap structure is within the bounds of the array from 0 to n-1.
(wrong) All values in a are less than n
(wrong) `n` must always be even
(wrong) The array `a` must have a length of `n`.
--InteriorSeparator--
hard
--InteriorSeparator--
20
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Considering the invariants of the outer while loop for bubble sort, what does this imply about the sorted portion of the array?
--InteriorSeparator--
(right) Elements beyond the `last` index are in their final sorted positions.
(wrong) Elements before the `last` index are in their final sorted positions
(wrong) The array is entirely unsorted
(wrong) Only the element at the `last` index is in its correct position.
--InteriorSeparator--
hard
--InteriorSeparator--
9
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is the general strategy to re-establish the heap property in HeapSort?
--InteriorSeparator--
(right) Correct violations of heap property by swapping parent with largest child
(wrong) Compare all of the nodes in the heap and build a new one
(wrong) Randomly swap any pair of nodes in the tree to "spread out" the violation
(wrong) Swap any nodes that are out of order
--InteriorSeparator--
medium
--InteriorSeparator--
19
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the first step in the `heapSort` method according to the document?
--InteriorSeparator--
Establishing the MAXHEAP property for the entire array.
--InteriorSeparator--
easy
--InteriorSeparator--
18
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
The provided text shows that the inner while loop in InsertSort is annotated with an invariant. What does that invariant say?
--InteriorSeparator--
(right) All elements in the range (i,j] are greater than or equal to temp
(wrong) All elements in the range [i,j) are less than or equal to temp
(wrong) The array is sorted from index 0 to j
(wrong) All elements are equal to temp
--InteriorSeparator--
hard
--InteriorSeparator--
15
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is the relationship between 'j' and 'k' in the 'insertInHeap' algorithm?
--InteriorSeparator--
(right) k is the index of the larger child of j.
(wrong) j is the parent of k.
(wrong) k is always j + 1.
(wrong) k is a random index.
--InteriorSeparator--
hard
--InteriorSeparator--
20
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the role of the variable 'i' in the inner while loop of the InsertSort algorithm?
--InteriorSeparator--
It represents the index in the sorted portion of the array being compared with the element to be inserted.
--InteriorSeparator--
medium
--InteriorSeparator--
14
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What happens within the for loop of the `heapSort` algorithm?
--InteriorSeparator--
(right) The `insertInHeap` function is called to establish the max-heap property starting from the bottom of the heap.
(wrong) The entire array is sorted using bubble sort
(wrong) The array is reversed
(wrong) The largest element is swapped to the end of the array
--InteriorSeparator--
medium
--InteriorSeparator--
20
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Where does the element `a[j]` get inserted in the InsertSort algorithm?
--InteriorSeparator--
In the sorted subarray `a[0..j-1]`.
--InteriorSeparator--
medium
--InteriorSeparator--
12
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Considering an invariant for the *inner* while loop of BubbleSort, what does it imply regarding array elements?
--InteriorSeparator--
(right) All elements from index 0 to i-1 are less than or equal to the element at index i.
(wrong) All elements from index 0 to i-1 are greater than or equal to the element at index i.
(wrong) The entire array from 0 to i is sorted.
(wrong) The element at index i is the smallest in the array.
--InteriorSeparator--
hard
--InteriorSeparator--
8
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the initial value assigned to the variable `l` in the `heapSort` function?
--InteriorSeparator--
(n-1)/2
--InteriorSeparator--
medium
--InteriorSeparator--
20
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What does the outer while loop condition (r >= 1) in the `heapSort` algorithm suggest about the algorithm's progress?
--InteriorSeparator--
(right) The loop continues until the first two elements are correctly positioned.
(wrong) The loop continues until the entire array is sorted.
(wrong) The loop runs only once.
(wrong) The loop continues until the array is empty.
--InteriorSeparator--
hard
--InteriorSeparator--
20
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In `insertInHeap`, what is the value of `k` if `(k < n-1) && (a[k] < a[k+1])` is true?
--InteriorSeparator--
k+1
--InteriorSeparator--
medium
--InteriorSeparator--
20
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What can we deduce from the statement 'if (i != j-1) a[i+1] = temp;' in the InsertSort algorithm?
--InteriorSeparator--
(right) Element a[j] was moved to a new position
(wrong) Element a[j] did not change positions
(wrong) the array is now sorted from 0 to j.
(wrong) i is equal to j - 1
--InteriorSeparator--
hard
--InteriorSeparator--
14
--FlashCardSeparator--
```}], role=model}, finishReason=STOP, avgLogprobs=-0.2584142456595939}]