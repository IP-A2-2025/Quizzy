[{content={parts=[{text=--FlashCardSeparator--
Single
--InteriorSeparator--
What does TA(n) represent in the context of algorithm analysis?
--InteriorSeparator--
The worst-case execution time of an algorithm for an input of size n.
--InteriorSeparator--
easy
--InteriorSeparator--
3
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
When analyzing the worst-case time complexity of an algorithm, what should be considered?
--InteriorSeparator--
(right) The type of cost (uniform, logarithmic)
(right) The size of the input instance
(wrong) The color of the code editor
(wrong) The programmer's name
--InteriorSeparator--
medium
--InteriorSeparator--
6
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
If A is an assignment X := E, how is TA(n) computed?
--InteriorSeparator--
TA(n) = TE(n)
--InteriorSeparator--
easy
--InteriorSeparator--
3
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What are the two solutions presented for approximating the time complexity of an iterative instruction?
--InteriorSeparator--
(right) Compute the maximum number of iterations and sum the worst case time complexities for each iteration
(right) Compute the maximum number of iterations, find the worst case iteration and multiply the number of iterations by the worst case time complexity of that iteration
(wrong) Compute the minimum number of iterations and sum the best case time complexities for each iteration.
(wrong) Multiply the number of iterations with the average time complexity of an iteration
--InteriorSeparator--
medium
--InteriorSeparator--
4
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
When dealing with lists or sets, what is a crucial aspect to consider when analyzing the complexity of operations?
--InteriorSeparator--
The complexity of each individual operation (e.g., at(i), U).
--InteriorSeparator--
medium
--InteriorSeparator--
5
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What are the common function classes used to approximate TA(n)?
--InteriorSeparator--
(right) O(f(n))
(right) Ω(f(n))
(wrong) Θ(log n)
(wrong)  Δ(f(n))
--InteriorSeparator--
easy
--InteriorSeparator--
6
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In Example 1, what type of cost is used for analysis?
--InteriorSeparator--
Uniform cost.
--InteriorSeparator--
easy
--InteriorSeparator--
8
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
In example 1, what is the worst case scenario?
--InteriorSeparator--
(right) z occurs for the first time on position n - 1
(right) z does not occur in a
(wrong) z occurs in the first position
(wrong) z occurs in the middle of a
--InteriorSeparator--
medium
--InteriorSeparator--
8
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In Example 2, what operations are analyzed?
--InteriorSeparator--
Assignments involving array elements.
--InteriorSeparator--
easy
--InteriorSeparator--
10
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
In example 2, what is the worst case scenario?
--InteriorSeparator--
(right) a is increasing
(wrong) a is decreasing
(wrong) a is constant
(wrong) a is randomly populated
--InteriorSeparator--
medium
--InteriorSeparator--
10
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In Example 3, what is the analyzed operation?
--InteriorSeparator--
Assignments involving sum.
--InteriorSeparator--
easy
--InteriorSeparator--
12
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
In Example 3, what happens with the worst and most favorable cases?
--InteriorSeparator--
(right) there is only one case, which is the worst and the most favorable
(wrong) the worst case is when n is odd and the most favorable when n is even
(wrong) they are completely different
(wrong) the worst case is when n is a power of 2, the most favorable when n is prime
--InteriorSeparator--
medium
--InteriorSeparator--
12
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In Example 3, what is the execution time for the worst case, with uniform cost?
--InteriorSeparator--
TA(n) = n
--InteriorSeparator--
easy
--InteriorSeparator--
12
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
In example 3, if m = log n, what is the worst case value of n?
--InteriorSeparator--
(right) 2^m
(wrong) log m
(wrong) m^2
(wrong) e^m
--InteriorSeparator--
medium
--InteriorSeparator--
13
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In Example 3, when considering a logarithmic time cost for problem size, what is the execution time for the worst case?
--InteriorSeparator--
TA(m) = 2^m
--InteriorSeparator--
hard
--InteriorSeparator--
13
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
In example 4, what assumptions are made about B.popFront(), B.topFront() and B.pushFront(j)?
--InteriorSeparator--
(right) time(B.popFront()) = O(1)
(right) time(B.topFront()) = O(1)
(wrong) time(B.pushFront(j)) = O(n)
(wrong) time(B.popFront()) = O(n)
--InteriorSeparator--
medium
--InteriorSeparator--
15
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In Example 4, what does 'n' represent in the context of size?
--InteriorSeparator--
n = D.V.size(), the number of vertices in the digraph.
--InteriorSeparator--
easy
--InteriorSeparator--
15
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
In Example 4, what is the worst case scenario for the digraph D?
--InteriorSeparator--
(right) D.a[i].size() = n-1 for each i (a complete digraph)
(wrong) D.a[i].size() = 1 for each i
(wrong) D has no edges
(wrong) D is a tree
--InteriorSeparator--
hard
--InteriorSeparator--
15
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In Example 4, what is the time complexity of the foreach loop, assuming p[i] = D.a[i] is O(1)?
--InteriorSeparator--
O(n)
--InteriorSeparator--
medium
--InteriorSeparator--
15
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
In Example 4, what is the time complexity for the while-body, given that all operations inside have an execution time of O(1)?
--InteriorSeparator--
(right) O(1)
(wrong) O(log n)
(wrong) O(n)
(wrong) O(n log n)
--InteriorSeparator--
medium
--InteriorSeparator--
15
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In Example 4, what is the number of iterations for the worst case of the while loop?
--InteriorSeparator--
∑ᵢ D.a[i].size() = n * (n - 1)
--InteriorSeparator--
hard
--InteriorSeparator--
15
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
In Example 4, what is the overall execution time for the worst case TA(n)?
--InteriorSeparator--
(right) O(n^2)
(wrong) O(n)
(wrong) O(n log n)
(wrong) O(log n)
--InteriorSeparator--
hard
--InteriorSeparator--
15
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the definition of O(f(n))?
--InteriorSeparator--
O(f(n)) = {g(n) | (∃C > 0)(∃n₀ > 0)(∀n ≥ n₀)|g(n)| ≤ C * |f(n)|}
--InteriorSeparator--
hard
--InteriorSeparator--
6
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is the definition of Ω(f(n))?
--InteriorSeparator--
(right) Ω(f(n)) = {g(n) | (∃C > 0)(∃n₀ > 0)(∀n ≥ n₀)|g(n)| ≥ C * |f(n)|}
(wrong) Ω(f(n)) = {g(n) | (∀C > 0)(∀n₀ > 0)(∃n ≥ n₀)|g(n)| ≥ C * |f(n)|}
(wrong) Ω(f(n)) = {g(n) | (∃C > 0)(∃n₀ > 0)(∀n ≥ n₀)|g(n)| ≤ C * |f(n)|}
(wrong) Ω(f(n)) = {g(n) | (∀C > 0)(∀n₀ > 0)(∃n ≥ n₀)|g(n)| ≤ C * |f(n)|}
--InteriorSeparator--
hard
--InteriorSeparator--
6
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the definition of Θ(f(n))?
--InteriorSeparator--
Θ(f(n)) = {g(n) | (∃C₁,C₂ > 0)(∃n₀ > 0)(∀n ≥ n₀)C₁*|f(n)| ≤ |g(n)| ≤ C₂ * |f(n)|}
--InteriorSeparator--
hard
--InteriorSeparator--
6
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
When analyzing function calls within an algorithm, what should be considered?
--InteriorSeparator--
(right) Estimate the size of arguments as a function of the instance size n
(right) Use the worst-case time of the called algorithm for the estimated argument size
(wrong) Assume function calls always take constant time
(wrong) Ignore function calls as they are irrelevant to worst-case complexity
--InteriorSeparator--
medium
--InteriorSeparator--
5
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does 'uniform case' usually mean in the context of computing worst-case time complexity in practice?
--InteriorSeparator--
Each operation is considered to have a constant cost, regardless of the specific values being processed.
--InteriorSeparator--
medium
--InteriorSeparator--
6
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
In the provided materials, what are examples of operations whose complexities should be carefully considered when they involve lists or sets?
--InteriorSeparator--
(right) Accessing an element at a specific index (e.g., l.at(i) for lists)
(right) Set union operations (e.g., s U singletonSet(X) for sets)
(wrong) Variable assignment (e.g., x = 5)
(wrong) Basic arithmetic operations (e.g., x + y)
--InteriorSeparator--
medium
--InteriorSeparator--
5
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does 'sized(a|var(x)) = n' represent in the time complexity formula for an expression E?
--InteriorSeparator--
It means the size of the input 'a' when the variable 'x' is an argument to expression 'E', is equal to 'n'.
--InteriorSeparator--
hard
--InteriorSeparator--
3
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
In the context of "if (E) S1 else S2", how is the worst-case time complexity TA(n) calculated?
--InteriorSeparator--
(right) TA(n) = max{ T51(n), T52(n)} + TE(n)
(wrong) TA(n) = T51(n) + T52(n) + TE(n)
(wrong) TA(n) = min{ T51(n), T52(n)} + TE(n)
(wrong) TA(n) = T51(n) * T52(n) + TE(n)
--InteriorSeparator--
medium
--InteriorSeparator--
3
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the worst-case time complexity of an algorithm that iterates through a linear list of size 'n' and performs a constant-time operation in each iteration?
--InteriorSeparator--
O(n)
--InteriorSeparator--
easy
--InteriorSeparator--
5
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
When approximating the worst-case time complexity of a while loop, what are two key factors to determine?
--InteriorSeparator--
(right) The maximum number of iterations (nMax)
(right) The worst-case time complexity for each iteration or the worst case iteration
(wrong) The best-case time complexity for each iteration
(wrong) The average number of iterations
--InteriorSeparator--
medium
--InteriorSeparator--
4
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
When analyzing the complexity of the statement `if (X % 2 == 0) s = s U singletonSet(X);` where 'a' is a set, what must be considered?
--InteriorSeparator--
The complexity of the set union operation `s U singletonSet(X)`.
--InteriorSeparator--
hard
--InteriorSeparator--
5
--FlashCardSeparator--
}], role=model}, finishReason=STOP, avgLogprobs=-0.14982289233420693}]