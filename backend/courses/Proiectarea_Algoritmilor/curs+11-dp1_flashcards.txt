[{content={parts=[{text=--FlashCardSeparator--
Single
--InteriorSeparator--
What is a key difference between Dynamic Programming and Divide and Conquer?
--InteriorSeparator--
Dynamic programming directly uses the result of the subproblems, while divide and conquer combines the solutions of the subproblems.
--InteriorSeparator--
medium
--InteriorSeparator--
4
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is a crucial characteristic of subproblems that makes Dynamic Programming more efficient than Divide and Conquer?
--InteriorSeparator--
Overlapping subproblems
--InteriorSeparator--
medium
--InteriorSeparator--
6
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
How does Dynamic Programming avoid re-computing results for the same subproblem?
--InteriorSeparator--
It uses a table or other data structure to store the results of a subproblem the first time it is computed.
--InteriorSeparator--
easy
--InteriorSeparator--
7
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What are the characteristics of the leaves of the tree of recursive calls for fib(n)?
--InteriorSeparator--
(right) Labeled with either fib(0) or fib(1)
(wrong) Have exactly two children
(right) They are the base cases
(wrong) They represent recursive calls
--InteriorSeparator--
medium
--InteriorSeparator--
15
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In the recursive Fibonacci implementation, how many times is the value of fib(k) computed to evaluate fib(n), where 1 <= k <= n?
--InteriorSeparator--
fib(n - k + 1) times
--InteriorSeparator--
hard
--InteriorSeparator--
21
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is the time complexity of the optimized Fibonacci implementation using memoization?
--InteriorSeparator--
(right) O(n)
(wrong) O(log n)
(wrong) O(n^2)
(wrong) Exponential
--InteriorSeparator--
easy
--InteriorSeparator--
25
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the space complexity of the iterative Fibonacci implementation?
--InteriorSeparator--
O(1)
--InteriorSeparator--
medium
--InteriorSeparator--
27
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What are the key properties of an increasing subsequence?
--InteriorSeparator--
(right) Values are in strictly increasing order
(right) Can be obtained by deleting elements from the original sequence
(wrong) Must include all elements from the original sequence
(wrong) The values are in strictly decreasing order
--InteriorSeparator--
medium
--InteriorSeparator--
30
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does LIS[i] represent in the Dynamic Programming solution for the Longest Increasing Subsequence problem?
--InteriorSeparator--
The length of the longest increasing subsequence of v[1], v[2], ..., v[i] which must contain the last element v[i].
--InteriorSeparator--
medium
--InteriorSeparator--
34
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the time complexity of the initial DP implementation for LIS?
--InteriorSeparator--
O(N*N)
--InteriorSeparator--
easy
--InteriorSeparator--
36
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does "path reconstruction" refer to in the context of DP problems?
--InteriorSeparator--
Finding the actual sequence or steps that lead to the optimal solution, not just its value.
--InteriorSeparator--
medium
--InteriorSeparator--
37
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What optimization is used to achieve a faster solution for LIS?
--InteriorSeparator--
(right) Binary search
(wrong) Recursion
(right) Maintaining the smallest end value for LIS of each length
(wrong) Divide and conquer
--InteriorSeparator--
hard
--InteriorSeparator--
46
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the time complexity of the faster LIS solution using binary search?
--InteriorSeparator--
O(n log n)
--InteriorSeparator--
medium
--InteriorSeparator--
50
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In the rod cutting problem, what does price[i] represent?
--InteriorSeparator--
The price for which a piece of length i can be sold.
--InteriorSeparator--
easy
--InteriorSeparator--
51
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does profit[k] represent in the rod cutting problem's Dynamic Programming approach?
--InteriorSeparator--
The maximum profit that can be obtained for a piece of length k after cutting it optimally.
--InteriorSeparator--
medium
--InteriorSeparator--
55
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is the time complexity of the recursive rod cutting implementation without dynamic programming?
--InteriorSeparator--
(wrong) O(n)
(right) Exponential
(wrong) O(n log n)
(wrong) O(n^2)
--InteriorSeparator--
medium
--InteriorSeparator--
58
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What are the two general techniques used in Dynamic Programming?
--InteriorSeparator--
Top-down (Memoization) and Bottom-up (Tabulation)
--InteriorSeparator--
easy
--InteriorSeparator--
64
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
In the discrete knapsack problem, what parameters describe each object?
--InteriorSeparator--
(right) Value
(wrong) Density
(right) Weight
(wrong) Color
--InteriorSeparator--
easy
--InteriorSeparator--
67
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In the knapsack problem, what does value[i][cap] represent?
--InteriorSeparator--
The maximum value achievable using objects 1 to i and a knapsack of size cap.
--InteriorSeparator--
medium
--InteriorSeparator--
72
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the time complexity of the DP solution for the 0-1 knapsack problem?
--InteriorSeparator--
O(n*W), where n is the number of items and W is the knapsack capacity.
--InteriorSeparator--
medium
--InteriorSeparator--
74
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
How can space complexity be reduced in the knapsack DP implementation (without path reconstruction)?
--InteriorSeparator--
(right) By using only two lines of the matrix
(right) By using only one line of the matrix
(wrong) By using recursion
(wrong) By using a greedy approach
--InteriorSeparator--
hard
--InteriorSeparator--
78
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Why is the DP solution for the discrete knapsack problem considered to have a pseudo-polynomial time complexity?
--InteriorSeparator--
Because its complexity depends on the numeric value of the input (W), not just the size of the input representation (number of bits).
--InteriorSeparator--
hard
--InteriorSeparator--
79
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the purpose of the subproblem graph in dynamic programming?
--InteriorSeparator--
To embody the subproblems involved and how they depend on one another.
--InteriorSeparator--
hard
--InteriorSeparator--
63
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the key advantage of bottom-up (tabulation) DP compared to top-down (memoization)?
--InteriorSeparator--
It usually outperforms memoization by a constant factor as it has no overhead for recursion.
--InteriorSeparator--
hard
--InteriorSeparator--
64
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
In the knapsack path reconstruction, what does the following condition mean: if (value[i][cap] != value[i-1][cap])
--InteriorSeparator--
(right) Object 'i' was taken
(wrong) Object 'i' was dropped
(wrong) The capacity is full
(wrong) There are no more objects
--InteriorSeparator--
medium
--InteriorSeparator--
75
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What conditions must be met for a value to be added in the "faster solution for LIS"?
--InteriorSeparator--
(right) Previous LIS length + 1
(right) Current item in array must be less than the current smallest value
(wrong) Must care about all previous LIS lengths
(wrong) Must be the largest value so far
--InteriorSeparator--
hard
--InteriorSeparator--
45
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Given the array is v = [5, 2, 8, 6, 3, 6, 3, 7, 1], what is prv[6] using LIS with path reconstruction?
--InteriorSeparator--
(wrong) 0
(wrong) 1
(wrong) 3
(right) 5
--InteriorSeparator--
hard
--InteriorSeparator--
41
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Select the key step(s) to apply dynamic programming:
--InteriorSeparator--
(right) Design a formula that describes the solution of the problem as a combination of subproblems of the same type.
(right) Compute all the initial cases, that don't require knowledge of any of their subproblems to be solved.
(wrong) Randomly calculate subproblems to see if they are needed.
(wrong) Only solve the main problem ignoring subproblems to improve performance.
--InteriorSeparator--
hard
--InteriorSeparator--
5
--FlashCardSeparator--
}], role=model}, finishReason=STOP, avgLogprobs=-0.19067833907806475}]