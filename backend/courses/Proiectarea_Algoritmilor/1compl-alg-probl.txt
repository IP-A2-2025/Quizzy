***************Beginning Page***************
***************page number:1**************
Complexity of Algorithms
Algorith mic Complexity of Computational Problems
Dorel Lucanu
Faculty of Computer Science
Alexandru loan Cuza University, lasi, Romania
d1ucanu©info.uaic .ro

PA 2021/2022
El r5‘ ' _= IE J) Q G
Complexity of Algorithms and of Computatic PA 2021/2022 1/64

***************Ending Page***************

***************Beginning Page***************
***************page number:2**************
a Recap

a Algorithm efficiency: cost functions
o Value Size
o Time cost of operation evaluation
o Time cost of an expression evaluation and of a computation step
o Time/space cost of a computation

a The worst-case complexity

a (Algorithmic) Complexity of Computational Problems

a The Complexity of Sorting

a Polynomial reduction of problems

Complexity of Algorithms and of Computatic PA 2021/2022 2/64

***************Ending Page***************


***************Beginning Page***************
***************page number:3**************
Plan
0 Recap
Q Algorithm efficiency: cost functions
o Value Size
o Time cost of operation evaluation
o Time cost of an expression evaluation and of a computation step
o Time/space cost of a computation
Q The worst-case complexity
o (Algorithmic) Complexity of Computational Problems
Q The Complexity of Sorting
Q Polynomial reduction of problems
<E1>4§>4i3>4I5> IE QQO
Complexity of A'gorithms and of Computati—

***************Ending Page***************

***************Beginning Page***************
***************page number:4**************
The algorithmic language /—\|k
fact(n) {
f = 1;
for (i I 2; i <= n; Hi)
f *2 i;
return f;
}
b = fact(a);
We want to run it for a=21:
$ alki —a fact.alk —i "a._|—>_.21"—m
a \—> 21
b i—> 51090942171709440000
The option -m is for dispplaying the final state
El i5] i E :5 QQG
Complexity of Algorithms and of Computatic PA 2021/2022 4/64

***************Ending Page***************


***************Beginning Page***************
***************page number:5**************
Semantics: Execution
The initial conﬁguration (50,00> includes the algorithm (Alk code) to be
executed SO and the initial state 00.
The final configuration <5”, an), which exists only if the execution is finite,
has no successor configurations (nothing more to be executed).
Am algorithm is deterministic if for any execution and for any configuration
of that execution, there is at most one successor configuration.

Complexity of Algorithms and of Computatic PA 2021/2022 5/64

***************Ending Page***************

***************Beginning Page***************
***************page number:6**************
Problem solved by an algorithm
A deterministic algorithm A solves a problem P if:
o the concepts in the problem domain are represented by data
structures;
o for any instance (input) p of P, there is an initial configuration
<A,0p>; such that 0p includes data structures describing p;
0 the execution starting from the initial conﬁguration (Amp) ends into
a ﬁnal configuration <-,0'), write (A,0> @* <.,0’>; and
o a’ includes data structures that describes the output P(p).
Complexity of Algorithms and of Computatic PA 2021/2022 6/64

***************Ending Page***************


***************Beginning Page***************
***************page number:7**************
Solvable (Computable) Problem
A problem P is solvable (computable) if there is an algorithm A that
solves P.
A problem P is non-solvable (non-computable) if it DOES NOT exists an
algorithm A that solves P.
A decision problem P has the answer (output) of the form "YES" or
"NO" (equivalently, "true" or "false").
A decision problem is generally presented by a pair (instance, question).
A decidable problem is a decision problem that is solvable.
A undecidable problem is a decision problem that is unsolvable.

Complexity of Algorithms and of Computatic PA 2021/2022 7/64

***************Ending Page***************

***************Beginning Page***************
***************page number:8**************
Plan
Recap
o Algorithm efficiency: cost functions
o Value Size
0 Time cost of operation evaluation
o Time cost of an expression evaluation and of a computation step
o Time/space cost of a computation
The vvorstecase complexity
(Algorithmic) Complexity of Computational Problems
The Complexity of Sorting
Polynomial reduction of problems
E1 ﬁ ' _= :E ‘ORG
Complexity of Algorithms and of Computatic PA 2021/2022 8/64

***************Ending Page***************


***************Beginning Page***************
***************page number:9**************
Pla n
e Algorithm efficiency: cost functions
o Value Size
El 5' _ _= :E J) Q0
Complexity of Algorithms and of Computatic PA 2021/2022 9/64

***************Ending Page***************

***************Beginning Page***************
***************page number:10**************
On data types
A data type consists of values (constants) and operations.
Each value is represented using a memory space.
For the values of each data type, the size of representation must be
mentioned.
There are (at least) three ways to deﬁne the size of values:
0 uniform: |v|unif
0 logarithmic: |v|10g
o linear: lVllin
cl 51 i E :2 oqo
Complexity of Algorithms and of Computatic PA 2021/2022 10/64

***************Ending Page***************


***************Beginning Page***************
***************page number:11**************
Examples of values SlZe
o integers:
Int: {...,—2,—1,0,1,2,...}
o uniform dimension: |n|unif : 1
o logarithmic dimension: |n|10g I log2 ab5(n)
o linear dimension: |n|1in : abs(n)
o arrays:
o value: a: [ao,al,...,a,,_1]
o size: |a|d I |a0|d + |91|d + ' - - + |a,,_1|d, d € {unif,10g,lin}
o bidimensional arrays are arrays of unidimensional arrays,
o tridimensional arrays are arrays of bidimensional arrays,
o etc.
cl 51 , E i5 Qqe
Complexity of Algorithms and of Computatic PA 2021/2022 11/64

***************Ending Page***************

***************Beginning Page***************
***************page number:12**************
Pla n
a Algorithm efficiency: cost functions
o Time cost of operation evaluation
El 5' ' _= IE ‘D Q G
Complexity of Algorithms and of Computatic PA 2021/2022 12/64

***************Ending Page***************


***************Beginning Page***************
***************page number:13**************
Data type (cont)
Data type : values + Operations
Each operation op has a time cost time(op).
For each operation of any data type the cost time must be mentioned.
There three ways to measure the time (inherited from the value
dimension):
uniform: timeunif(op) — uses the uniform dimension of values
logarithmic: time10g(op) — uses the logarithmic dimension of values
linear: timelin(op) — uses the linear dimension of values
Complexity of Algorithms and of Computatic PA 2021/2022 13/64

***************Ending Page***************

***************Beginning Page***************
***************page number:14**************
Examples of time cost of operations
O integer addition a +Int b
o uniform: 0(1)
o logaritmic: O(max(l0g a, log b))
o linear: O(a+ b)
O array lookup
// 0k : ...a|—>A...iv—>i0...
x : a [ i ] ;
// 0k+1:...a|—>A...i|—>i0...xr—>A.Iookup(i0)...
time cost
o uniform: 0(1)
logaritmic: 0(i0 + |A[i0]|1og
linear: O(|A[i0]|1in)
Remark
The time cost of the operations over lists, sets, maps, depends on the implementation
(arrys, Ilists, . . .) (see Data Structure course).
cl 51 i E :5 oqo
Complexity of Algorithms and of Computatic PA 2021/2022 14/64

***************Ending Page***************


***************Beginning Page***************
***************page number:15**************
Time cost of an expression evaluation and of a computation step
P | a n
o Algorithm efficiency: cost functions
0 Time cost of an expression evaluation and of a computation step
El 5' i E :5 Q Q G
Complexity of Algorithms and of Computatic PA 2021/2022 15/64

***************Ending Page***************

***************Beginning Page***************
***************page number:16**************
Time cost of an expression evaluation and of a computation step
Time cost of an expression evaluation
Evaluation of expressions: [IE]](0) - the value of E in the state cr
Example: 0:ai—>3bi—>6
lla + b * 211(6): llall(<1)+/mllb * 211(0) i 3 +Im llbll(0) *1”: lIQllW):
3 +1,” 6 *Int 2 I 3 +Iﬂt 12 I 15
where +1,” represents the algorithm for integer addition and *Int represents the
algorithm for integer multiplication.
The time cost of an expression evaluation is the sum of time costs of the
operations included in the expression.
Obviously, it could be uniform, logarithmic, or linear.
Example: timed(|[a + b >l< 2]](0)) :
timed(|Ia]](0)) + timed(|[b]](0)) + timed(6 *1,” 2) + timed(3 +1,” 122),
d G {unif, log, lin}.
0 I a i—> 3 b i—> 6
time10g(|[a]](0)) I log 3, timelog([[b]](0)) I log6
timeunif([[a]](0)) I 1, timeunif([[b]](a)) I 1
timelin(|[a]](0)) : 3, timelin(|[b]](0)) : 6
Complexity of Algorithms and of Computatic PA 2021/2022 16/64

***************Ending Page***************


***************Beginning Page***************
***************page number:17**************
Time cost of an expression evaluation and of a computation step
Time cost of an instruction execution step
An execution step is a pair (5,0) :> (5/,0’), meaning that after the first step in
S is executed in state 0, we get S’ and 0’.
The time cost of an instruction execution step depends on the state a and 0n the
executed instruction.
Examples:
0 (V I E; 5,0) :> (5,0/) , where 0’ I O'[V I—> HE]](U)
the execution time is equal to the evaluation time of E in the state 01;
o (if (E) $1 else 52 5,0) :> (S,- 5,0)
the execution time is equal to the evaluation time of E in the state J;
0 instruction while (E) S 5’ can be replaced with the equivalent one
if (E) {S while (E) 5} S’;
0 . . .
Again, it could be uniform, logarithmic, or linear.
1A more careful analysis could consider the assignment operator as well.
Complexity of Algorithms and of Computatic PA 2021/2022 17/64

***************Ending Page***************

***************Beginning Page***************
***************page number:18**************
P l a n
a Algorithm efficiency: cost functions
o Time/space cost of a computation
El 5' ' _= IE ‘D Q G
Complexity of Algorithms and of Computatic PA 2021/2022 18/64

***************Ending Page***************


***************Beginning Page***************
***************page number:19**************
Time cost of a computation (execution)

A computation (an execution) is a sequence of execution steps:

'7' : <51,0'1> I> (52,62) I> (53,63) :>

The time cost of a computation:

timed(7') : ZI- timed((S,-,a,-> :> <5i+1,0'i+1>)1

where d G {unif, log, lin}

El i5] i E :5 ‘)QQ

Complexity of Algorithms and of Computatic PA 2021/2022 19/64

***************Ending Page***************

***************Beginning Page***************
***************page number:20**************
Size (space) cost of a computation (execution)

The size (space) of a state a is the sum of sizes of the values stored in 0.

The size (space) of a computation:

Si26d(7') I max,- sized(0,-),

where T I (51,01) ¢ (52,02) i (53,03) i and

d € {unif7 log, lin}

El 5' i E :5 QQQ

Complexity of Algorithms and of Computatic PA 2021/2022 20/64

***************Ending Page***************


***************Beginning Page***************
***************page number:21**************
Computation COStSI example

<if (X > 3) x = x + y; else x = O; y = 4; ,Xl—>7yl—>12>:

<X = X + y; y = 4; ,x»—>7yl—>12>;>

(y = 4;,x1—>19yl—>12>:>

<-, X |—> 19 y l—> 4>

The expression evaluations used:

|[x>3]](xr—>7yl—>12):7>3:true

|Ix+y1|(xv—>7y|—> 12):7+12: 19

[[4]](X l-> 19 y l-> 12) I 4

The computation cost:

uniform cost: 3 (I the number of steps)

logarithmic cost: log 7 + log 12 + log 19 + log4

linear cost: 7 + 12 + 19 + 4

cl 51 1 E :2 oqo

Complexity of Algorithms and of Computatic PA 2021/2022 21/64

***************Ending Page***************

***************Beginning Page***************
***************page number:22**************
Computing cost functions with Alk interpreter 1/3
Consider the algorithm computing the sum of the ﬁrst n integers:
sum(n)
// requires n >: 0
{
s = 0;
i = O;
while(i < n) {
i++;
s = s + i;
}
return s;
}
cl 51 i E :2 oqo
Complexity of Algorithms and of Computatic PA 2021/2022 22/64

***************Ending Page***************


***************Beginning Page***************
***************page number:23**************
Computing cost functions with Alk interpreter 2/3
We add instructions computing the time cost functions (note that log(x)
returns logarithm in base e):
#include "ops—time.alk"
timeSum(n, timeType)
// requires n >2 0
{
time 2 0;
s 2 0;
time +2 timeOpUn("2", timeType, s);
i 2 O;
time +2 timeOpUn("2", timeType, s);
Whi|e(i < n) {
time +2 timeOpBin(”<", timeType, i , n);
i++;
time +2 timeOpUn("-l—l-", timeType, i);
s 2 s + i;
time +2 timeOpBin("<", timeType, i, n);
}
return time;
l
m a] 2 E :5 QQG
Complexity of Algorithms and of Computatic PA 2021/2022 23/64

***************Ending Page***************

***************Beginning Page***************
***************page number:24**************
Computing cost functions with Alk interpreter 3/3

Run it:

time_unif = timeSum(100, "unif");

time_|og : timeSum(100, "log" );

time_lin = timeSum(100, "lin");

Final configuration:

time_unif |—> 302 O(n)

time_log |—> 1976 O(|ogn!), why?

time_lin |—> 25050 O(n2),why?

cl 51 t E :5 oqo

Complexity of Algorithms and of Computatic PA 2021/2022 24/64

***************Ending Page***************


***************Beginning Page***************
***************page number:25**************
Plan
Q Recap
Q Algorithm efficiency: cost functions
o Value Size
0 Time cost of operation evaluation
o Time cost of an expression evaluation and of a computation step
o Time/space cost of a computation
a The worst-case complexity
o (Algorithmic) Complexity of Computational Problems
o The Complexity of Sorting
Q Polynomial reduction of problems
<E1><ﬁ>4if>4IE> :E QQG
Complexity of Algorithms and of Computati—

***************Ending Page***************

***************Beginning Page***************
***************page number:26**************
The size of a problem instance
The dimension of a state 0 is
Sized(a) I ZXHVGU SiZGd(V)
The dimension of a conﬁguration is
sized((A, 0)) I sized(a)

where d € {log, unif, lin}.

Let P be a problem, p E P, and A a deterministic algorithm that solves P.

The size of p is the the size of its intial configuration:

sized(p) = sized((A, 0p>) (: size(ap))
where d G {log, unif, lin}.
El r51 i E :5 0Q‘?

Complexity of Algorithms and of Computatic PA 2021/2022 26/64

***************Ending Page***************


***************Beginning Page***************
***************page number:27**************
The worst-case time complexity
Let P be a problem and A a determinstic algorithm that solves P and ﬁx
d E {log7 unif7 lin}.
Group the instances p of P into equivalences classes: p and p’ are in the
same equivalence class iff size(p) : size(p’).
A natural number n can be seen as the equivalence class of instances p of
size n (sized(p) : n).
The worst-case time complexity:
TA7d(n) : sup{timed(A, p) | p € P, sized(p) : n}
Complexity of Algorithms and of Computatic PA 2021/2022 27/64

***************Ending Page***************

***************Beginning Page***************
***************page number:28**************
Space complexity
Let E : <A0,00) :> :> (Aman) be an execution and fix
d € {/0g, unif, lin}
The space used by this execution is:
spaced(E) : maxf’:0 sized(<A,-, 0;))}
The space required by the algorithm A solve the instance p E P is
Spaced“, P) I Spaced(Ep)
where Ep is the execution corresponding to p.
The worst-case space complexity:
six”) I supepacedmm) | sizedo) I n}
e. 5' t E :2 owv
Complexity of Algorithms and of Computatic PA 2021/2022 28/64

***************Ending Page***************


***************Beginning Page***************
***************page number:29**************
Computing the worst-case time complexity: Example 1/2
input: D a digraf, i0 a vertex
output: S I the set of vertices reachable from i0
P : emptyMap;
foreach i from D.V
Pli] : D-ali]:
SB : <i0>;
S I {i0};
while (SB.size() > O)
{ i = SB.topFront();
if (p[i]:size() I O){
SB.popFront();
ilse {
j = p[i].topFront();
Plil-POPFrontO;
if (!(j i" 5)){
// visit j
s : s u {J};
SB.pushFront(j);
}
l
}
El 5' i E :5 QQQ
Complexity of Algorithms and of Computatic PA 2021/2022 29/64

***************Ending Page***************

***************Beginning Page***************
***************page number:30**************
Computing the worst-case time complexity: Example 2/2

o type of cost: uniform

0 size of an instance: n I D.V.size()

0 assumptions: time(B.popFront()) I 0(1), time(B.topFr0nt()) I 0(1),
time(B.pushFront(j)) I 0(1), time(5 U {j}) I 0(1) 2

o analysed operations: all those involving vertices

o the worst-case: D.a[i].size() I n — 1 for each i (a complete digraph)

O foreach: 0(n), assuming that the time for p[i] I D.a[i]; is 0(1)

O While: the number of iterations for the worst-case is
Z,- D.a[i].size() I n - (n I 1)
the time for while-body is 0(1) since all operations inside have the
execution time 0(1)

o execution time for the worst-case:
TA(n) I 0(1) + 0(n) + n - (n — 1) - 0(1) I 0(n2)

2It must be an implementations with these execution times.

Complexity of Algorithms and of Computatic PA 2021/2022 30/64

***************Ending Page***************


***************Beginning Page***************
***************page number:31**************
Pla n
a (Algorithmic) Complexity of Computational Problems
El 5' _ _= :E J) Q0’
Complexity of Algorithms and of Computatic PA 2021/2022 31/64

***************Ending Page***************

***************Beginning Page***************
***************page number:32**************
VVhy?

A problem may be solved by many algorithms.

Actually, if there is one algorithm solving it, then there are an infinity.

(Why?)

How efficiently a problem can be solved (if any)?

The definition from the efficiency of the algorithms can be extended to

problems.

cl r51 t E :2 oqo

Complexity of Algorithms and of Computatic PA 2021/2022 32/64

***************Ending Page***************


***************Beginning Page***************
***************page number:33**************
When we know ONE algorithm solving the problem
Consider:
0 a problem P
o n : size(x), X € P an instance of P
o an algorithm A solving P with the worst-case execution time O(f(n))
What can we say about the time complexity of P?
El 5' i E :5 QQQ
Complexity of Algorithms and of Computatic PA 2021/2022 33/64

***************Ending Page***************

***************Beginning Page***************
***************page number:34**************
The complexity O(f(n)) of a problem

It supplies a superior bound for the computational effort needed to solve a

problem.

Definition

A problem P has the worst-case time complexity O(f(n)) if there is an

algorithm A that solves P and TA(n) = O(f(n)).

El r51 i E :5 ‘)QQ

Complexity of Algorithms and of Computatic PA 2021/2022 34/64

***************Ending Page***************


***************Beginning Page***************
***************page number:35**************
When we want to know something about ALL the
algorithms
Consider:
o a problem P
o n : size(x), X G P an instance of P
What kind of information can we supply about all the algorithms solving P
El 5' i E :5 ‘)QG
Complexity of Algorithms and of Computatic PA 2021/2022 35/64

***************Ending Page***************

***************Beginning Page***************
***************page number:36**************
The complexity Q(f(n)) of a problem

lt supplies a inferior bound for the computational effort needed to solve a

problem.

Definition

A problem P has the worst-case time complexity Q(f(n)) if any algorithm

A that solves P has TA(n) : Q(f(n)).

El 5' i E :5 QQG

Complexity of Algorithms and of Computatic PA 2021/2022 36/64

***************Ending Page***************


***************Beginning Page***************
***************page number:37**************
An optimal algorithm for a problem
Consider:
o a problem P
o n : size(x), x G P an instance of P
When an algorithm is optimal for P?
Deﬁnition
A is an optimal algorithm (w.r.t. the worst-case time complexity) for P if
o A solves P and
o P has the worst-case time complexity Q(TA(n)).
El 5' i E :5 QQQ
Complexity of Algorithms and of Computatic PA 2021/2022 37/64

***************Ending Page***************

***************Beginning Page***************
***************page number:38**************
Plan
Q Recap
Q Algorithm efficiency: cost functions
o Value Size
0 Time cost of operation evaluation
o Time cost of an expression evaluation and of a computation step
o Time/space cost of a computation
Q The worst-case complexity
o (Algorithmic) Complexity of Computational Problems
a The Complexity of Sorting
Q Polynomial reduction of problems
<E1><ﬁ>4if>4IE> :E QQG
Complexity of A'gorithms and of Computati—

***************Ending Page***************


***************Beginning Page***************
***************page number:39**************
Sorting Problem
Consider the particular case of arrays sorting:
SORT
Domain Assume that (M, g) is a (universe) set totally ordered.
Input n and the array a : [v0,...,v,,21] with v,- E U.
Output An array a’ I [W0, . . . , Wn_1] with the property:
W0 g g W,,_1 and W : (W07 . . . , W,,_1) is a permutation of
v I (v0, . . . , v,,_1).
Notation:
SORTED(W): the sequence W is sorted (non-decreasingly ordered)
Perm(v, W): W is a permutation of v
Complexity of Algorithms and of Computatic PA 2021/2022 39/64

***************Ending Page***************

***************Beginning Page***************
***************page number:40**************
BubbleSort: the algorithm
bubbleSort(out a) {
last = a.size()—1; .
while (last > 0) :SkIthwut a’ 1)
{ . . .
>
oldLast = last; 1f (a[1] a[%+1]) {
_ temp = a[1];
1 = O; a[i] = a[i+1]'
while (i < oldLast) , ’
{ a[1+1] = temp;
last = askIth(a, i); } return 1;
i = i + 1;
} return 0;
}
}
}
m a , E 2 ~OQG
Complexity of Algorithms and of Computatic PA 2021/2022 40/64

***************Ending Page***************


***************Beginning Page***************
***************page number:41**************
The analysis of of the algorithm BubbleSort
Execution time
0 instance size: n (I a.size())
0 measured operations: comparisons involving the array elements
o the worst-case: when the elements of the array are in decreasing order
o the number of the comparisons for this case is
n — 1 n
cl 51 t E :2 QQG
Complexity of Algorithms and of Computatic PA 2021/2022 41/64

***************Ending Page***************

***************Beginning Page***************
***************page number:42**************
lnsertSort: the algorithm
insertSort(0ut a, n) {
for (j=1;j<n; j=j+1){
i = j - 1;
temp = a[j];
while ((i >= 0) && (temp < a[i])) {
a[i+1] = aEi];
i = i - 1;
}
if (i != j-l) a[i+1] = temp;
}
}
Note. lt requires short-circuit evaluation for boolean expressions.
El 5' i E :5 QQG
Complexity of Algorithms and of Computatic PA 2021/2022 42/64

***************Ending Page***************


***************Beginning Page***************
***************page number:43**************
The analysis of the algorithm lnsertSort
Execution time
o instance size: n (I a.size())
o measured operations: comparisons involving the array elements
o the worst-case: when the input sequence is decreasing
— searching i in a[O .. j — 1] requiresj — 1 comaparisons
o the number of comparisons for this case is
n — 1 n
1+2+---—l—(n—1): %: 0(n2)
i:| 51 1 E :5 {JQCV
Complexity of Algorithms and of Computatic PA 2021/2022 43/64

***************Ending Page***************

***************Beginning Page***************
***************page number:44**************
HeapSort: the algorlthm
insertInHeap(out a, n, K) {
isHeap = false; j = E;
while (2*j+1 <= n-1 && ! isHeap) {
k = 2*j +1;
if ((k < n-1) && (a[k] < a[k+1])) k = k+1;
if (a[j] < a[k]) swap(a, j, k); else isHeap = true;
J' = k;
}
}
Note. It requires short-circuit evaluation for boolean expressions.
heapSort(out a, n) {
for (l = (n-1)/2; l >= O; l = l-l)
insertInHeap(a, n, l);
r = n-l;
while (r >= 1) {
swap(a, 0, r);
insertInHeap(a, r, 0);
r = r — 1;
}
} m a r E 2 \oqe
Complexity of Algorithms and of Computatic PA 2021/2022 44/64

***************Ending Page***************


***************Beginning Page***************
***************page number:45**************
HeapSort: the analysis
Execution time
o instance size: n (z a.size())
o operations measured: comparisons involving the array elements
o the worst-case: hard to say
— time complexity for insertInHeap: O(log k), where k is the heap
size
— the construction of the initial heap requires
O(|og ”%1)+---+ O(|og n): O(n log n) (in fact it is @(n), see
Cormen et al., 6.3)
— time complexity for while:
O(log(n — 1)) + O(log(n — 2)) + ' - ‘ + O(log l) : O(n log n)
0 the total number of comparisons O(n log n)
Complexity of Algorithms and of Computatic PA 2021/2022 45/64

***************Ending Page***************

***************Beginning Page***************
***************page number:46**************
Other sortlng algorithms
Exercises for seminar.
E] ﬁ _ _= :E ‘Q ‘KG’
Complexity of Algorithms and of Computatic PA 2021/2022 46/64

***************Ending Page***************


***************Beginning Page***************
***************page number:47**************
Two questions regarding the sorting algorithms
The sorting algorithms studied up to now are based on two primitive
operations: comparison and swapping two array elements. Since the
swapping is preceded by a comparison, we may assume that the essential
primitive operations is the comparison of two array elements.
The following two questions regarding the computational complexity of
sorting are quite natural:

0 What is the minimal number of comparisons in the worst-case?

o Which sorting algorithms requires the minimal number of

comparisons?
To answer these questions we have to formally define the computational
model of comparisons-based algorithms (a special kind of decision trees).
Complexity of Algorithms and of Computatic PA 2021/2022 47/64

***************Ending Page***************

***************Beginning Page***************
***************page number:48**************
Decision trees for sorting: intuitive
Assumption: a,- 7$ aj if i 751'.
Notation: i?j E a[i] and aLi] are compared.
A decision tree for sorting includes the comparisons made by the
algorithm:
o an internal mode is labelled with i?j, i,j € {07 17 . . . , n — 1};
o the left subtree of i?j includes the comparisons for a,- < aj;
o the right subtree of i?j includes the comparisons for a,- > aj;
o the external (frontier) nodes are labelled with permutations
Complexity of Algorithms and of Computatic PA 2021/2022 48/64

***************Ending Page***************


***************Beginning Page***************
***************page number:49**************
The algorithms represented as decision trees
Definition
A decision tree for n elements is a binary tree such that:
O internal nodes: i?j, i,j E {0, 1, . . . , n — 1};
0 external (frontier) nodes: permutations of the set {0, 1, . . . , n — 1}.
Definition
A computation of a decision tree t for the input a I (a0,...,a,,21):
a path from the root to the frontier with the property:
o if a,- < aj: the left child of i?j the current node;
O otherwise the right child becomes the current node
o the computation (should) terminate on the frontier
cl 51 f E :2 one
Complexity of Algorithms and of Computatic PA 2021/2022 49/64

***************Ending Page***************

***************Beginning Page***************
***************page number:50**************
Decision trees for sorting
Definition
A decision tree t solves the sorting problem if
for any input input a I (ao, . . .,a,,_1),
the computation of t for a terminates in 7r s.t. aﬂg) < < aw(,,_1).
A decision tree for sorting is a decision tree that solves the sorting
problem.
El 5' i E :5 QQQ
Complexity of Algorithms and of Computatic PA 2021/2022 50/64

***************Ending Page***************


***************Beginning Page***************
***************page number:51**************
A decision tree representing InsertSort
< >
< > < >
@ @
< > < >
El i5‘ i E :5 Q Q0
Complexity of Algorithms and of Computatic PA 2021/2022 51/64

***************Ending Page***************

***************Beginning Page***************
***************page number:52**************
Time complexity of sorting
Notations:
ADS(n) : the set of decision trees for sorting sequnces of length n.
Fr(t) : the frontier of the decision tree t
/ength(vr, t) : the length in t of the path from the root to 7t E Fr(t).
The time complexity for the worst case:
Tn I min max len thvtt
l l tEADS(n) 1r€Fr(t) g l ’ l
Theorem
The sorting problem has the worst-case time complexity Q(n log n) in the
computational model of the decision trees for sorting.
Corollary
HeapSort is optimal in the computational model of the decision trees for sorting. I
—Omp|exity of Algorithms and ofComputaﬁ; U PA 2021/2021 5%;

***************Ending Page***************


***************Beginning Page***************
***************page number:53**************
Plan
Recap
Algorithm efficiency: cost functions
o Value Size
0 Time cost of operation evaluation
o Time cost of an expression evaluation and of a computation step
o Time/space cost of a computation
The vvorstecase complexity
(Algorithmic) Complexity of Computational Problems
The Complexity of Sorting
a Polynomial reduction of problems
C1 ﬁ - '= :5 oqe
Complexity of Algorithms and of Computatic PA 2021/2022 53/64

***************Ending Page***************

***************Beginning Page***************
***************page number:54**************
Motivation
Mentality: " If l know to solve a problem Q, then l can use this algorithm
to solve P?"
Intuition: A problem P reduces to Q if the algorithms for Q can help to
solve P.
Aplication:
0 algorithm design
0 proof of the limits: if P is difficult then Q is difficult as well
o problem classification
cl 51 r E :2 oqo
Complexity of Algorithms and of Computatic PA 2021/2022 54/64

***************Ending Page***************


***************Beginning Page***************
***************page number:55**************
Turing/Cook Reduction
A problem P polynomially reduces to (a solvable problem) Q, write
P oc Q, if we can design an algorithm for P as follows:
0 let p be an instance of P;
9 preprocesss in polynomial time the input p to obtain an instance (or
instances) of Q;
9 call an algorithm for Q, possible of several times (but of polynomial
times);
0 postprocess the output(s) given by Q in polynomial time to get the
answer P(p).
If the (pre+post)processing time requires O(g(n)) time, then we write
P o<g(n) Q.
Complexity of Algorithms and of Computatic PA 2021/2022 55/64

***************Ending Page***************

***************Beginning Page***************
***************page number:56**************
Example: MAX o< SORT
FieLet MAX be the following problem:
Input A set S totally ordered.
Output The bigest element in S.
The following algorithm solves MAX:
0 represent 5 with an array s (preprocessing);
9 call a sorting algorithm for s;
9 return the last element in s (postprocessing);
So, we have lVlAX o< SORTl?
oc does not necessarily mean "the reduction from a complex problem to an
easier one" !!!
o< is rather a “transformation” ...
Complexity of Algorithms and of Computatic PA 2021/2022 56/64

***************Ending Page***************


***************Beginning Page***************
***************page number:57**************
Variants for the subset sum problem
SSDl
Input A set S of integers, M a positive integer.
Output The bigest integer M* s.t. M* g M and H S’ Q S with
SSD2
Instance A set S of integers, M, K two positive integers with K g M.
Question Does it exists MO s.t. K g MO g M and Exes/X : MO for a
certain set S’ Q 5?
SSD3
Instance A set S of integers, M a positive integer.
Question Does it exists a subset S’ Q S with ZXES’ X : M?
Complexity of Algorithms and of Computatic PA 2021/2022 57/64

***************Ending Page***************

***************Beginning Page***************
***************page number:58**************
Example: SSDl oc SSD2
SSDl
Input A set S of integers, M a positive integer.
Output The bigest integer M* s.t. M* g M and E S’ Q S with
2x65’ X I M*'
SSD2
Instance A set S of integers, M, K two positive integers with K g M.
Question Does it exists MO s.t. K g MO g M and 2x65’ x : MO for a certain
set S’ Q S?
G no preprocessing;
8 ﬁnd M* in (0, M] calling an algorithm that solves SSD2 in a binary
search manner.
This is an example when an optimisation problem is reduced to decision
problem.
cl 51 t E :2 oqo
Complexity of Algorithms and of Computatic PA 2021/2022 58/64

***************Ending Page***************


***************Beginning Page***************
***************page number:59**************
Example: SSD2 oc SSDl
SSDl
Input A set S of integers, M a positive integer.
Output The bigest integer M* s.t. M* g M and H S’ Q S with
ZXGS’ X I M*'
SSD2
Instance A set S of integers, M, K two positive integers with K g M.
Question Does it exists MO s.t. K g MO g M and 2x65’ X I MO for a certain
set S’ Q 5?
9 no preprocessing;
Q compute M* g M calling an algorithm solving SSDl;
6 if M* Z K then return 'YES', otherwise return 'NO';
cl a] , E :5 oqo
Complexity of Algorithms and of Computatic PA 2021/2022 59/64

***************Ending Page***************

***************Beginning Page***************
***************page number:60**************
Example: SSD3 oc SSDl

SSDl

Input A set S of integers, M a positive integer.

Output The bigest integer M* s.t. M* g M and H 5/ Q 5 with

2x65’ X I M*.

SSD3

Instance A set S of integers, M a positive integer.

Question Does it exists a subset S’ Q S with 2X65, x I M?

Q no preprocessing;

Q compute M* g M calling an algorithm solving SSDl;

9 if M* = M return 'YES’, otherwise return 'NO'.

El r51 i E :5 QQG

Complexity of Algorithms and of Computatic PA 2021/2022 60/64

***************Ending Page***************


***************Beginning Page***************
***************page number:61**************
Karp reduction
Let P and Q be decision problems.
The problem P polynomially reduces to (the solvable) Q, write P oc Q, if
we can design an algorithm that solves P as follows:
0 let p be an instance of P;
9 preprocess the input p in polynomial time to get an instance q of Q;
9 call (once) an algorithm solving Q;
0 the answer for Q for q is the same with the answer of P for p (no
post processing).
If the preprocessing time is O(g(n)), then we write P o<g(,,) Q.
The Karp reduction is a particular case of the Turing/Cook reduction.
Complexity of Algorithms and of Computatic PA 2021/2022 61/64

***************Ending Page***************


***************Beginning Page***************
***************page number:62**************
Examplu: SSD3 oc SSD2
SSD2
Instance A set S of integers, M, K two positive integers with K g M.
Question Does it exists MO s.t. K g MO g M and 2x65’ X : Mo for a certain
set S’ Q S?
SSD3
Instance A set S of integers, M a positive integer.
. . . , . _
Quest/on Does |t eXIsts a subset S Q S WIth 2x65’ x _ M?
6 no preprocessing;
6 call an algorithm solving SSD2 for the instance S, M, M.
El 5' ' _= :E ‘)QG
Complexity of Algorithms and of Computatic PA 2021/2022 62/64

***************Ending Page***************


***************Beginning Page***************
***************page number:63**************
Example: 3-SUIVI o< 3-COLLINEAR
3-SUll/l
Instance A set S of n integers.
Question Exist there 3 numbers in S s.t. their sum is O?
3-COLLINEAR
Instance A set S of n points in plane.
Question Exist there three points in S that are colinear?
3-SUM o< 3-COLLINEAR:
0 sconsider a input 5 I {a0,a1,...,a,,21} of3-SUIVI;
e compute KS) I {(30138)1 (313?), ' - '1(anilva?1*1)}
9 return the result given by an algorithm solving 3-COLLINEAR for
t($).
Lemma
If a, b, c are distinct, then a + b + c I O iff(a, a3), (b, b3) and (c7 c3) are
co/inear.
Complexity of Algorithms and of Computatic PA 2021/2022 63/64

***************Ending Page***************


***************Beginning Page***************
***************page number:64**************
Reduction: properties

Theorem

a) If P has the time complexity Q(f(n)) and P o<g(,,) Q (Karp version) the

Q has the time complexity Q(f(n) — g(n)).

b) If Q has the time complexity O(f(n)) and P o<g(,,) Q (Karp version)

then P has the time complexity O(f(n) + g(n)).

El r5] i E :5 ‘)QQ

Complexity of Algorithms and of Computatic PA 2021/2022 64/64

***************Ending Page***************


