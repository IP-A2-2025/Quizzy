[{content={parts=[{text=```
--FlashCardSeparator--
Single
--InteriorSeparator--
What is a decision problem?
--InteriorSeparator--
A decision problem is a problem that has an answer (output) of the form "YES" or "NO" (equivalently, "true" or "false").
--InteriorSeparator--
easy
--InteriorSeparator--
7
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following are ways to define the size of values for data types?
--InteriorSeparator--
(right) Uniform
(right) Logarithmic
(wrong) Exponential
(wrong) Quadratic
--InteriorSeparator--
medium
--InteriorSeparator--
10
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the uniform dimension of the integer 'n'?
--InteriorSeparator--
|n|unif : 1
--InteriorSeparator--
easy
--InteriorSeparator--
11
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What does the time cost of an instruction execution step depend on?
--InteriorSeparator--
(right) The state
(right) The executed instruction
(wrong) The algorithm's name
(wrong) The programming language
--InteriorSeparator--
medium
--InteriorSeparator--
17
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
How is the size (space) of a state defined?
--InteriorSeparator--
The sum of sizes of the values stored in the state.
--InteriorSeparator--
easy
--InteriorSeparator--
20
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
According to the reading, if 'n' is the size of an instance, which of the following is true about the worst-case time complexity?
--InteriorSeparator--
(right) TA(n) = sup{timed(A, p) | p ∈ P, sized(p) = n}
(wrong) TA(n) = inf{timed(A, p) | p ∈ P, sized(p) = n}
(wrong) TA(n) = timed(A, p) where p is the easiest instance to solve
(wrong) TA(n) = sized(p)
--InteriorSeparator--
medium
--InteriorSeparator--
27
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does it mean for a problem P to have the worst-case time complexity O(f(n))?
--InteriorSeparator--
There is an algorithm A that solves P and TA(n) = O(f(n)).
--InteriorSeparator--
medium
--InteriorSeparator--
34
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does it mean for a problem P to have the worst-case time complexity Ω(f(n))?
--InteriorSeparator--
Any algorithm A that solves P has TA(n) : Ω(f(n)).
--InteriorSeparator--
hard
--InteriorSeparator--
36
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
When is an algorithm considered optimal for a problem P?
--InteriorSeparator--
A is an optimal algorithm if it solves P and P has the worst-case time complexity Ω(TA(n)).
--InteriorSeparator--
hard
--InteriorSeparator--
37
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What are the properties of the output of the SORT problem?
--InteriorSeparator--
(right) The output is sorted (non-decreasingly ordered)
(right) The output is a permutation of the input.
(wrong) The output is the reverse of the input.
(wrong) The output contains only unique elements from the input.
--InteriorSeparator--
medium
--InteriorSeparator--
39
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the worst-case time complexity of the sorting problem in the computational model of decision trees?
--InteriorSeparator--
Ω(n log n)
--InteriorSeparator--
hard
--InteriorSeparator--
52
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Define Turing/Cook Reduction
--InteriorSeparator--
A problem P polynomially reduces to (a solvable problem) Q if we can design an algorithm for P using a polynomial-time preprocessor for P to Q and postprocessor for Q to P, possible calling the algorith for Q several times (but of polynomial times).
--InteriorSeparator--
hard
--InteriorSeparator--
55
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following are true regarding polynomial reduction?
--InteriorSeparator--
(right) It can be used for algorithm design.
(right) It can be used to prove the limits of problem-solving.
(wrong) It only applies to optimization problems.
(wrong) It always reduces a complex problem to an easier one.
--InteriorSeparator--
medium
--InteriorSeparator--
54
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is Karp reduction?
--InteriorSeparator--
Let P and Q be decision problems. The problem P polynomially reduces to (the solvable) Q if we can design an algorithm that solves P with a polynomial-time preprocessor from P to Q.
--InteriorSeparator--
hard
--InteriorSeparator--
61
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is the time complexity of InsertSort in the worst case?
--InteriorSeparator--
(right) O(n^2)
(wrong) O(n)
(wrong) O(log n)
(wrong) O(n log n)
--InteriorSeparator--
easy
--InteriorSeparator--
43
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the relationship between Karp reduction and Turing/Cook reduction?
--InteriorSeparator--
Karp reduction is a particular case of the Turing/Cook reduction.
--InteriorSeparator--
medium
--InteriorSeparator--
61
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does the option -m in alki do?
--InteriorSeparator--
Displays the final state.
--InteriorSeparator--
easy
--InteriorSeparator--
4
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What does it mean for an algorithm to be deterministic?
--InteriorSeparator--
(right) For any execution and for any configuration, there is at most one successor configuration.
(wrong) The algorithm always produces the correct output in a predetermined amount of time.
(wrong) The algorithm uses randomness to improve its performance.
(wrong) The algorithm requires minimal memory space.
--InteriorSeparator--
medium
--InteriorSeparator--
5
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the logarithmic dimension of the integer 'n'?
--InteriorSeparator--
|n|10g = log2 abs(n)
--InteriorSeparator--
easy
--InteriorSeparator--
11
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
In the example of the time cost of operations, what is the uniform time complexity of an integer addition operation?
--InteriorSeparator--
(right) O(1)
(wrong) O(log(a+b))
(wrong) O(a+b)
(wrong) O(n)
--InteriorSeparator--
medium
--InteriorSeparator--
14
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does Sized(a) represents, where 'a' is a state?
--InteriorSeparator--
The dimension of a state a.
--InteriorSeparator--
easy
--InteriorSeparator--
26
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What factors are considered when analyzing the complexity of BubbleSort?
--InteriorSeparator--
(right) Instance size
(right) Measured operations
(wrong) Programming language
(wrong) Compiler optimization
--InteriorSeparator--
medium
--InteriorSeparator--
41
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Why is it important to formally define the computational model of comparisons-based algorithms?
--InteriorSeparator--
To answer questions regarding the minimal number of comparisons in the worst-case for sorting algorithms and to determine which algorithms require the minimal number of comparisons.
--InteriorSeparator--
hard
--InteriorSeparator--
47
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What are the nodes in a decision tree for n elements?
--InteriorSeparator--
(right) Internal nodes: i?j, i, j ∈ {0, 1, ..., n-1}
(right) External nodes: permutations of the set {0, 1, ..., n-1}
(wrong) Internal nodes: values from the input array
(wrong) External nodes: sorted array
--InteriorSeparator--
medium
--InteriorSeparator--
49
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
If P has the time complexity Ω(f(n)) and P ≤g(n) Q (Karp version), what can be said about the time complexity of Q?
--InteriorSeparator--
Q has the time complexity Ω(f(n) - g(n)).
--InteriorSeparator--
hard
--InteriorSeparator--
64
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
If Q has the time complexity O(f(n)) and P ≤g(n) Q (Karp version), what can be said about the time complexity of P?
--InteriorSeparator--
(right) P has the time complexity O(f(n) + g(n)).
(wrong) P has the time complexity O(f(n) - g(n)).
(wrong) P has the time complexity O(f(n) * g(n)).
(wrong) P has the time complexity O(f(n) / g(n)).
--InteriorSeparator--
hard
--InteriorSeparator--
64
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the time complexity for the worst case of computing timeSum with uniform cost, as shown in the example?
--InteriorSeparator--
O(n)
--InteriorSeparator--
hard
--InteriorSeparator--
24
--FlashCardSeparator--
```}], role=model}, finishReason=STOP, avgLogprobs=-0.16195601048348196}]