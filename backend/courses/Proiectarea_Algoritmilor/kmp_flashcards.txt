[{content={parts=[{text=--FlashCardSeparator--
Single
--InteriorSeparator--
What does KMP stand for in the context of string searching algorithms?
--InteriorSeparator--
Knuth-Morris-Pratt
--InteriorSeparator--
easy
--InteriorSeparator--
1
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Is KMP commonly used in practice for string searching?
--InteriorSeparator--
No
--InteriorSeparator--
easy
--InteriorSeparator--
1
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is the primary goal of the KMP algorithm?
--InteriorSeparator--
(right) Find a substring within a string
(right) Optimize string searching by reusing comparison information
(wrong) Sort a string alphabetically
(wrong) Compress a string
--InteriorSeparator--
medium
--InteriorSeparator--
1
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In the context of the KMP algorithm, what does 'T' represent?
--InteriorSeparator--
The text string
--InteriorSeparator--
easy
--InteriorSeparator--
1
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In the context of the KMP algorithm, what does 'P' represent?
--InteriorSeparator--
The pattern string
--InteriorSeparator--
easy
--InteriorSeparator--
1
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the output of the KMP algorithm if the pattern P is not found in the text T?
--InteriorSeparator--
-1
--InteriorSeparator--
easy
--InteriorSeparator--
1
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the time complexity of the naive string searching algorithm in the worst-case scenario?
--InteriorSeparator--
O(d^2)
--InteriorSeparator--
medium
--InteriorSeparator--
2
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is meant by "P appears in T at displacement i"?
--InteriorSeparator--
(right) P appears in T starting at position i.
(right) T[i..i+m-1] == P[0..m-1]
(wrong) P is alphabetically before T
(wrong) P is the reverse of T starting at position i
--InteriorSeparator--
medium
--InteriorSeparator--
2
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the core idea behind the KMP algorithm's optimization?
--InteriorSeparator--
Reusing information from previous comparisons to reduce unnecessary comparisons.
--InteriorSeparator--
medium
--InteriorSeparator--
3
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In the KMP algorithm, what is the "OVERLAP" string?
--InteriorSeparator--
The prefix of the pattern that matched the corresponding part of the text.
--InteriorSeparator--
medium
--InteriorSeparator--
3
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In the KMP algorithm, what is a "frontier"?
--InteriorSeparator--
A prefix of the pattern that also matches a suffix of the OVERLAP.
--InteriorSeparator--
medium
--InteriorSeparator--
4
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is the significance of choosing the largest possible frontier in the KMP algorithm?
--InteriorSeparator--
(right) Avoid missing potential matches.
(wrong) Simplifies the computation
(wrong) Reduces memory usage
(right) Ensures the most efficient shift of the pattern
--InteriorSeparator--
hard
--InteriorSeparator--
4
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Why isn't the entire string considered as a frontier in KMP?
--InteriorSeparator--
Because shifting the pattern by the entire string's length results in no progress.
--InteriorSeparator--
hard
--InteriorSeparator--
5
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does the prefix function f[k-1] store in the KMP algorithm?
--InteriorSeparator--
The length of the longest proper prefix of the pattern P[0..k-1] that is also a suffix of P[0..k-1].
--InteriorSeparator--
hard
--InteriorSeparator--
6
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is the condition for the KMP algorithm to return a match at position i?
--InteriorSeparator--
(right) k == m
(wrong) i > n - m
(wrong) k > m
(wrong) i == n - m
--InteriorSeparator--
medium
--InteriorSeparator--
9
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the time complexity of the KMP algorithm?
--InteriorSeparator--
O(n + m)
--InteriorSeparator--
medium
--InteriorSeparator--
10
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the condition under which the KMP search loop terminates when there is no match?
--InteriorSeparator--
i > n - m
--InteriorSeparator--
medium
--InteriorSeparator--
9
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In KMP, if T[i + k] doesn't match P[k] and k is not 0, how is 'i' updated?
--InteriorSeparator--
i = i + k - f[k - 1]
--InteriorSeparator--
hard
--InteriorSeparator--
8
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
In KMP, if T[i + k] doesn't match P[k] and k is not 0, how is 'k' updated?
--InteriorSeparator--
(right) k = f[k - 1]
(wrong) k = k - 1
(wrong) k = 0
(wrong) k = f[k]
--InteriorSeparator--
hard
--InteriorSeparator--
8
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In KMP, if T[i + k] doesn't match P[k] and k is 0, how is 'i' updated?
--InteriorSeparator--
i = i + 1
--InteriorSeparator--
hard
--InteriorSeparator--
8
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the purpose of the 'k' variable in the KMP algorithm?
--InteriorSeparator--
It represents the number of symbols that have matched between the text and the pattern at the current displacement.
--InteriorSeparator--
medium
--InteriorSeparator--
5
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following represents a benefit of using the KMP algorithm over the naive string searching algorithm?
--InteriorSeparator--
(right) KMP avoids unnecessary comparisons by reusing information from previous matches.
(wrong) KMP is simpler to implement
(wrong) KMP uses less memory
(wrong) KMP can be parallelized more easily
--InteriorSeparator--
medium
--InteriorSeparator--
3
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
If the longest frontier of P[0..i-1] has length x, what is guaranteed about P[0..x-1] and P[i-x..i-1]?
--InteriorSeparator--
P[0..x-1] == P[i-x..i-1]
--InteriorSeparator--
hard
--InteriorSeparator--
10
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
When calculating the prefix function, if P[k] == P[i], how is f[i] updated?
--InteriorSeparator--
f[i] = k + 1
--InteriorSeparator--
hard
--InteriorSeparator--
11
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Why can the inner `while` loop in the prefix function calculation execute a maximum of 'm' times in total?
--InteriorSeparator--
(right) The variable `k` only increases by 1 at a time and never goes below 0.
(right) The `while` loop only decreases the value of `k`, which cannot decrease more often than it increases.
(wrong) The length of the string is bounded by `m`
(wrong) It is related to the length of the alphabet
--InteriorSeparator--
hard
--InteriorSeparator--
11
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does the notation S[i..j] represent?
--InteriorSeparator--
The substring of S starting at index i and ending at index j.
--InteriorSeparator--
easy
--InteriorSeparator--
1
--FlashCardSeparator--
}], role=model}, finishReason=STOP, avgLogprobs=-0.1831107385936394}]