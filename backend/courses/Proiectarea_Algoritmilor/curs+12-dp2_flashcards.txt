[{content={parts=[{text=--FlashCardSeparator--
Single
--InteriorSeparator--
What is the core principle behind Dynamic Programming (DP)?
--InteriorSeparator--
Solving a problem instance by using solutions to subproblem instances, based on a recursive formula.
--InteriorSeparator--
easy
--InteriorSeparator--
4
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
When is Dynamic Programming a suitable approach?
--InteriorSeparator--
(right) When subproblems overlap
(wrong) When subproblems are completely independent
(right) When a problem can be broken down into smaller, reusable subproblems
(wrong) When the problem requires a greedy approach
--InteriorSeparator--
medium
--InteriorSeparator--
5
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What are the common steps in designing DP solutions?
--InteriorSeparator--
Deciding on bottom-up or top-down/memoization, finding recurrence relation, base cases, and path reconstruction if required.
--InteriorSeparator--
medium
--InteriorSeparator--
6
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the Longest Common Subsequence (LCS) problem?
--InteriorSeparator--
Finding the longest subsequence common to two sequences.
--InteriorSeparator--
easy
--InteriorSeparator--
7
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
In the context of the LCS problem, what are subsequences?
--InteriorSeparator--
(right) Elements are not necessarily in consecutive positions.
(wrong) Only compact intervals of positions.
(wrong) Must be in consecutive positions.
(right) Can have elements from the original string, in the original order.
--InteriorSeparator--
medium
--InteriorSeparator--
7
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
If X[i] == Y[j] in the LCS problem, what is LCS[i][j]?
--InteriorSeparator--
LCS[i-1][j-1] + 1
--InteriorSeparator--
medium
--InteriorSeparator--
15
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
If X[i] != Y[j] in the LCS problem, what is LCS[i][j]?
--InteriorSeparator--
max{LCS[i-1][j], LCS[i][j-1]}
--InteriorSeparator--
medium
--InteriorSeparator--
15
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What values are assigned to LCS[i][0] and LCS[0][j] in the LCS matrix?
--InteriorSeparator--
0
--InteriorSeparator--
easy
--InteriorSeparator--
17
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the time complexity of the LCS implementation using dynamic programming?
--InteriorSeparator--
O(n*m)
--InteriorSeparator--
medium
--InteriorSeparator--
19
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the Edit Distance problem?
--InteriorSeparator--
Finding the minimum number of operations (insert, delete, replace) to change one string to another.
--InteriorSeparator--
easy
--InteriorSeparator--
22
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What operations are typically considered in the Edit Distance problem?
--InteriorSeparator--
(right) Insertion
(right) Deletion
(wrong) Swapping
(right) Replacement
--InteriorSeparator--
easy
--InteriorSeparator--
22
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the relationship between Edit Distance and sequence alignment in bioinformatics?
--InteriorSeparator--
Sequence alignment is essentially the same problem as Edit Distance in its simple version.
--InteriorSeparator--
medium
--InteriorSeparator--
23
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
If X[i] == Y[j] in the Edit Distance problem, what is editDist[i][j]?
--InteriorSeparator--
editDist[i-1][j-1]
--InteriorSeparator--
medium
--InteriorSeparator--
26
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
If X[i] != Y[j] in the Edit Distance problem, what is editDist[i][j]?
--InteriorSeparator--
min(editDist[i-1][j] + 1, editDist[i][j-1] + 1, editDist[i-1][j-1] + 1)
--InteriorSeparator--
hard
--InteriorSeparator--
26
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What are the base cases for the Edit Distance problem?
--InteriorSeparator--
editDist[0][j] = j and editDist[i][0] = i
--InteriorSeparator--
medium
--InteriorSeparator--
27
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the relationship between Edit Distance and LCS when only insert and delete operations are allowed?
--InteriorSeparator--
insertDeleteDist(X, Y) = |X| + |Y| - 2 * |LCS(X, Y)|
--InteriorSeparator--
hard
--InteriorSeparator--
30
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is an independent set in a graph G = (V, E)?
--InteriorSeparator--
A subset of vertices S from V such that no two vertices in S are adjacent.
--InteriorSeparator--
medium
--InteriorSeparator--
33
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the complexity of finding the Maximum Independent Set (MIS) in a tree?
--InteriorSeparator--
O(n)
--InteriorSeparator--
medium
--InteriorSeparator--
33
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In the context of the MIS on trees, if a node k is *not* added to the MIS, what is the MIS of the subtree rooted at k?
--InteriorSeparator--
The reunion of the MIS of all of k's children.
--InteriorSeparator--
hard
--InteriorSeparator--
37
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In the context of the MIS on trees, if a node k *is* added to the MIS, what is the MIS of the subtree rooted at k?
--InteriorSeparator--
1 + the reunion of the MISs of the subtrees rooted in the grandchildren of k
--InteriorSeparator--
hard
--InteriorSeparator--
37
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What order is used to apply the MIS recurrence on a tree?
--InteriorSeparator--
Bottom-up traversal (e.g., reversed DFS order)
--InteriorSeparator--
medium
--InteriorSeparator--
43
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the recurrence relation for calculating the Maximum Independent Set (MIS) of a tree?
--InteriorSeparator--
MIS(k) = max(1 + Σ MIS(g), Σ MIS(c)), where c ∈ k.children and g ∈ c.children
--InteriorSeparator--
hard
--InteriorSeparator--
43
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What defines a contiguous subsequence in an array v[1...n]?
--InteriorSeparator--
Elements from consecutive positions of v, defined by its left and right endpoints.
--InteriorSeparator--
easy
--InteriorSeparator--
48
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the naive time complexity for calculating the sum of elements between positions left[i] and right[i] for q queries?
--InteriorSeparator--
O(q * n)
--InteriorSeparator--
medium
--InteriorSeparator--
50
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
How can prefix sums be used to efficiently compute the sum of a contiguous subsequence?
--InteriorSeparator--
sum(v[left] + ... + v[right]) = prefix[right] - prefix[left-1]
--InteriorSeparator--
medium
--InteriorSeparator--
53
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
How are prefix sums computed efficiently using dynamic programming?
--InteriorSeparator--
prefix[i] = v[i] + prefix[i-1]
--InteriorSeparator--
medium
--InteriorSeparator--
54
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is the overall time complexity for precomputing prefix sums and answering q range sum queries?
--InteriorSeparator--
(right) O(n + q)
(wrong) O(n*q)
(wrong) O(q^n)
(wrong) O(n^q)
--InteriorSeparator--
medium
--InteriorSeparator--
55
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
How is a query defined in the two-dimensional partial sums problem?
--InteriorSeparator--
By its interval ends on each dimension: startLine, endLine, startColumn, endColumn.
--InteriorSeparator--
easy
--InteriorSeparator--
56
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the naive time complexity for answering a query in the two-dimensional partial sums problem?
--InteriorSeparator--
O(n * m)
--InteriorSeparator--
medium
--InteriorSeparator--
56
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In 2D partial sums, what does topLeft[i][j] represent?
--InteriorSeparator--
The sum of elements v[1...i][1...j].
--InteriorSeparator--
medium
--InteriorSeparator--
59
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What formula is used to compute topLeft[i][j]?
--InteriorSeparator--
topLeft[i][j] = v[i][j] + topLeft[i][j-1] + topLeft[i-1][j] - topLeft[i-1][j-1]
--InteriorSeparator--
hard
--InteriorSeparator--
64
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the formula for calculating a submatrix sum using the topLeft matrix?
--InteriorSeparator--
topLeft[endLine][endColumn] - topLeft[startLine-1][endColumn] - topLeft[endLine][startColumn-1] + topLeft[startLine-1][startColumn-1]
--InteriorSeparator--
hard
--InteriorSeparator--
67
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following are characteristics of Dynamic Programming on Trees?
--InteriorSeparator--
(right) States correspond to subtrees.
(wrong) Subproblems never overlap.
(right) Results are often saved in the nodes themselves.
(wrong) Arrays or matrices are always used to store results.
--InteriorSeparator--
hard
--InteriorSeparator--
32
--FlashCardSeparator--
}], role=model}, finishReason=STOP, avgLogprobs=-0.10032278324423555}]