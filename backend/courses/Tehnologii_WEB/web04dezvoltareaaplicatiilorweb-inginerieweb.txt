***************Beginning Page***************
***************page number:1**************
Tehnologn Web
PLQNNED VS BUDGETED
I
2
m '-
ﬁ-
(23 eccuanu <9"- opennnous © usnalum WWW“
programare Web (III)
de la MVC la ingineria aplicajtiilor Web
Prof. Sabin Corneliu Buraga — profs.info.uaic.rol~busacol

***************Ending Page***************

***************Beginning Page***************
***************page number:2**************
,,Simplitatea este 0 complexitate rezolvaté."
Constantin Bréncugi

***************Ending Page***************


***************Beginning Page***************
***************page number:3**************
Aplicajcii Web
sisteme software complexe,
in evolujcie permanenté

***************Ending Page***************

***************Beginning Page***************
***************page number:4**************
Realitate
mijloace multiple de interac'giune Web cu utilizatorul
mobil laptop PC tableté (smart) TV ecran urban

***************Ending Page***************


***************Beginning Page***************
***************page number:5**************
Realitate
mijloace multiple de interactiune Web cu utilizatorul
mobil laptop PC tableté (smart) TV ecran urban
plus, ,,noii" veniti:
game console smart watch g smart clothing
ﬁgsmart appliances smart home smart transportation

***************Ending Page***************

***************Beginning Page***************
***************page number:6**************
Realitate
cre§terea masei de utilizatori,
avénd agteptéiri tot mai mari din partea software-ului
de la conjcinut (hiper)textual @ la aplicapii Web
cu caracter social é @ng + interacﬁune naturalé s) @

***************Ending Page***************


***************Beginning Page***************
***************page number:7**************
Realitate
suportul privind dezvoltarea de aplica'gii
(limbaje, API-uri, biblioteci de cod, instrumente,...)
oferit de platforma hardware / software
1a nivel de server(e) $1 / sau de client(i)

***************Ending Page***************

***************Beginning Page***************
***************page number:8**************
Realitate
neadaptare la cerinjcele economice (de tip business)
‘X development vs. I? marketing vs. management

***************Ending Page***************


***************Beginning Page***************
***************page number:9**************
Realitate
privind proiectele Web de anverguré
intérzieri in lansare
neincadrare in buget
lipsa functionalité'gii
calitatea precaréi a aplica'giei

***************Ending Page***************

***************Beginning Page***************
***************page number:10**************
scopuri interacyiune functionalitéﬁ indexare instrumente
psihologie controale tehnologii structurare metodologii
comportament limbi naturale algoritmi meta-date stimuli
~ Elli ~ Q ~ Q ~
utilizatori interfa'géi software con'ginut creatori
adaptare dupé Crumlish & Malone, 2009

***************Ending Page***************


***************Beginning Page***************
***************page number:11**************
‘gig 4? evolutia manierei de
é dezvoltare a produselor
Build/Test Ship digitale (software)
Alan Cooper et aI., 2014
Managers llnvnlopcrs
g XQ 4?
Initiate Buildflest Ship
Manage" Developers Designers
Q x1 0/ r?
Initiate Build Test “Look & Feel" Ship
Maud?“ Mandate Designers Specs Code Product
~E"
Feasibility, Bug User
Users Feedback Report Input
Initiate Desin Build Test Shi

***************Ending Page***************

***************Beginning Page***************
***************page number:12**************
Asigurarea calitéjcii aplicajciilor Web
corectitudine 5i robusteye (reliability)
extindere + reutilizare (modularitate)

compatibilitate
eficienjcéi (asigurarea performanyei)
portabilitate

***************Ending Page***************


***************Beginning Page***************
***************page number:13**************
Asigurarea calitéjcii aplicajciilor Web
facilitarea interacyiunii cu utilizatorul (usability)
funcjcionalitate
relevanya momentului lansérii (timeliness)
mentenabilitate
securitate

***************Ending Page***************

***************Beginning Page***************
***************page number:14**************
Asigurarea calitéjcii aplicajciilor Web
alte aspecte de interes:
integritate
reparabilitate
verificabilitate — inclusiv monitorizare (logging)
economie

***************Ending Page***************


***************Beginning Page***************
***************page number:15**************
Asigurarea calitéjcii aplicajciilor Web
esen'gialmente, de considerat:
preluarea $i dirijarea cererilor — dispatch
oferirea funcyionalitéi'gilor de bazéi — core services
asocierea dintre construcyii/abstrac'giuni software
(e.g., obiecte) $i modele de date — mapping
managementul datelor — data
monitorizarea §i evaluarea sistemului — metrics
adaptare dupé Matt Ranney, “What! Wish I Had Known
Before Scaling Uber t0 1000 Services", GOTO Chicago 2016
highscalability.comlblongO16/10/12llessons-learned-from-scaling-uber-to-2000-engineers-1000-ser.html

***************Ending Page***************

***************Beginning Page***************
***************page number:16**************
Necesitéjci
scopuri + cerinye clar specificate
dezvoltare sistematicéi, in faze, a aplicayiilor Web
planificare judicioaséi a etapelor de dezvoltare
control permanent a1 proceselor de dezvoltare

***************Ending Page***************


***************Beginning Page***************
***************page number:17**************
Necesitéjci
scopuri + cerinye clar specificate
dezvoltare sistematicéi, in faze, a aplicayiilor Web
planificare judicioaséi a etapelor de dezvoltare
control permanent a1 proceselor de dezvoltare
> ingineria aplicaﬁilor Web
(Web engineering)

***************Ending Page***************

***************Beginning Page***************
***************page number:18**************
In ce manieré dezvoltém 0 aplicajcie Web?
S'l'llllY 0F [\IEIIY PBUIEB'I'
‘ liﬁIWIHIEKGUEIDM i mam
. z ‘ _
mm 6 mums [111%

***************Ending Page***************


***************Beginning Page***************
***************page number:19**************
modelare
Uzual, se recurge la 0 metodologie
se preferé abordérile conduse de modele
(MDA — model-driven architecture)
www.0mg.orglmdal

***************Ending Page***************

***************Beginning Page***************
***************page number:20**************
'9 Text

a Style

?' Layout

6 Use r Assistance

5 Eriltlng ano Manipulation

4 lillewlng ano Nayigatlon

3 Organizational Model

2 Taslr Flow

t Conceptual Model

Low if User Awareness 4p ngn

ngn 4— lrnoaot on Usability —b~ Low

Low if Teonnloal Flexibility —p ngn
conform Robert Baxley

***************Ending Page***************


***************Beginning Page***************
***************page number:21**************
dezvoltarea aplicagiilor Web
Cerinte (requirements)
Analizé & proiectare (software design)
Implementare (build)

Testare (testing)
Exploatare (deployment)
Mentenanté (maintenance)
Evolutie (evolution)

***************Ending Page***************

***************Beginning Page***************
***************page number:22**************
product as functionality l product as information
aplicatie Web race t Concrete
(produs software) 5"’ tileﬂfwargw
functlonalltate ‘ ele-
_ __ _ _| 5 h/ﬁmiyaﬂﬂaw
informatu oferlte rei ' ,
ruﬁl we”: l"?
Jsi ﬂaw "77.,’ -
r 550 /.7///z'/7/ 3/ fay/1
i $aa/jfz'a/7/ //ﬁs%///zme
r.” m7
Jesse Garrett, The Elements 0f User Experience (2I101 Edition), New Riders, 2011

***************Ending Page***************


***************Beginning Page***************
***************page number:23**************
dezvoltarea aplicagiilor Web
documen-
tare testare
mentenangé
public beta lansare
actualmente, sunt preferate metodologii agile
www.infoq.comlprocess-practicesl

vwvw.webpagefx.comlblog/web-design/agile/

***************Ending Page***************

***************Beginning Page***************
***************page number:24**************
dezvoltarea aplicagiilor Web
Metodologii moderne — exemple:
aim42 — practici 5i gabloane privind evoluﬁa, mentenanjca,
migrarea gi imbunétiijcirea sisternelor software
aim42.github.io
12 Factor App — vizénd aplicayiile aliniate
paradigmei SaaS (Software As A Service)
12factor.net

***************Ending Page***************


***************Beginning Page***************
***************page number:25**************
dezvoltarea aplicatiilor Web: principii
start with needs
do less
design with data
do the hard work to make it simple
iterate. then iterate again
buildfor inclusion
understand context
build digital services, not Websites
be consistent, not uniform
make things open; it makes things better
exemplu pentru gov.uk — Paul Downey & David Heath (2013)

***************Ending Page***************

***************Beginning Page***************
***************page number:26**************
cerinte
Stabilirea standardelor de calitate

***************Ending Page***************


***************Beginning Page***************
***************page number:27**************
ceringe
Objdnere / licitare / negociere
a conjcinutului (datelor) $i/sau codului-surséi
drepturi de autor — copyright
VQT'SUS
cod deschis (Open Source Licenses)
www.0pensource.org/licenseslcategory
+
date deschise
Creative Commons — www.creativecommons.orgllicensesl

***************Ending Page***************

***************Beginning Page***************
***************page number:28**************
cerinte
Documentare privind d0meniul aplicatiei Web
cu atragerea expertilor
— subject matter expert (SME) sau domain expert —
in domeniul problemei
ce trebuie solutionaté de aplicatia Web

***************Ending Page***************


***************Beginning Page***************
***************page number:29**************
cerinte: exemple
Viziune (big idea)
Basecamp: “project management

and team communication software"
Flickr: “almost certainly the best online photo management

and sharing application in the world"

Vimeo: “simple tools for any professional, team,
and organization to create, manage,
and share high-quality videos"
Wikidata: “a free and open knowledge base

that can be read and edited by both humans and machines"

***************Ending Page***************

***************Beginning Page***************
***************page number:30**************
cerinte: exemple
Punctele de plecare in dezvoltarea Flickr

presupuneri inijdale (assumptions):

camenilor 1e place séi-si impéirtéseascéi amintirile
folosirea succesului blogging-ului
partajarea nu doar a insemnéirilor,

ci si a fotografiilor (personale)
suport pentru realizarea de comentarii + tagging

***************Ending Page***************


***************Beginning Page***************
***************page number:31**************
noi tipuri de ceringe
Privitoare la conyinut
audienjca — e.g., internayionalizare
context de navigare
preferinjce
disponibilitate permanenté (7 Zile, 24 de ore / Zi)
recurgerea la surse eterogene de date
céiutare, filtrare, recomandare
etc.

***************Ending Page***************

***************Beginning Page***************
***************page number:32**************
noi tipuri de cerinte
Interacyiunea cu utilizatorul in contextul Web
inclusiv vizénd Web-ul social
content mash-up
“it's yours t0 take, re-arrange and re-use"

***************Ending Page***************


***************Beginning Page***************
***************page number:33**************
noi tipuri de ceringe
Privitoare la mediul de execujcie
(in)dependen';a de navigatorul Web
Wired vs. Wireless
0n-Iine vs. aﬁ-Iine
suport pentru diverse standarde HTML
interactivitate multi-dispozitiv (responsive Web design)

***************Ending Page***************

***************Beginning Page***************
***************page number:34**************
noi tipuri de ceringe
Referitoare la evolujcie
utilizatorii sunt capabili $51 exploateze aplicayia Web
féréi a trebui s-o (re)instaleze pe calculator/dispozitiv

***************Ending Page***************


***************Beginning Page***************
***************page number:35**************
noi tipuri de cerinte: aspecte de interes
initial:
oferirea funcyionalitéi'gilor esenyiale — less is more

***************Ending Page***************

***************Beginning Page***************
***************page number:36**************
noi tipuri de cerinte: aspecte de interes
initial:
oferirea funcyionalitéi'gilor esenyiale — less is more
versiuni ulterioare:
extinderea aplicajdei Web
— uzual, via 0 interfajcéi de programare (API) publicéi,
incurajénd dezvoltarea de solujcii propuse de utilizatori

***************Ending Page***************


***************Beginning Page***************
***************page number:37**************
arhitecturi
Calitatea aplicatiilor Web este influentatii
de arhitectura pe care se bazeazii
Martin Fowler, Software Architecture Guide (2019)
martinfowler.comlarchitecturel

***************Ending Page***************

***************Beginning Page***************
***************page number:38**************
arhitecturi
Web application architecture
body of code
that's seen by developers as a single unit
Q group of functionality
that business customers see as a single unit
@ initiative
that those with the money see as a single budget

***************Ending Page***************


***************Beginning Page***************
***************page number:39**************
arhitecturi
Dezvoltarea unei arhitecturi software ia in calcul:
cerinye funcijonale
impuse de cliengi,
vizitatori,
concurenjcé,
factori decizionali (management),
evolujcie socialé/tehnologicé,

***************Ending Page***************

***************Beginning Page***************
***************page number:40**************
arhitecturi
Dezvoltarea unei arhitecturi software ia in calcul:
factori calitativi
utilizabilitate (usability)
performan'gé (performance)
securitate (security)
refolosire a datelor/codului (reuse)
etc.

***************Ending Page***************


***************Beginning Page***************
***************page number:41**************
arhitecturi
Dezvoltarea unei arhitecturi software ia in calcul:
aspecte tehn(olog)ice
platforma hardware / software (sistem de operare)
infrastructura middleware
servicii disponibile — e.g., via API-uri publice
limbaj (e) de programare
sisteme tradijcionale (legacy)

***************Ending Page***************

***************Beginning Page***************
***************page number:42**************
arhitecturi
Dezvoltarea unei arhitecturi software ia in calcul:
experien§a
recurgerea 1a arhitecturi gi platforme existente
§ab10ane de proiectare (design patterns)
soluﬁi ,,la cheie": biblioteci,framework-uri, instrumente,...
management de proiecte
etc.

***************Ending Page***************


***************Beginning Page***************
***************page number:43**************
client(i)
mandatar (proxy)
Zid de protecyie (ﬁrewall)
intermediarﬁ) (middleware)
server(e) Web
server(e) de aplicatii Web
cadre de lucru, biblioteci, alte componente
server(e) de stocare persistentéi — e.g., baze de date
server(e) de conyinut multimedia
server(e) de management a1 conyinutului — e.g., CMS, wiki
aplicajcii/sisteme tradijcionale (legacy)
,,ingrediente" tipice

***************Ending Page***************

***************Beginning Page***************
***************page number:44**************
client(i)
mandatar (proxy)
Zid de protectie (ﬁrewall)
intermediarﬁ) (middleware)
server(e) Web
server(e) de aplicatii Web
cadre de lucru, biblioteci, alte componente
server(e) de stocare persistenta — e.g., baze de date
server(e) de continut multimedia
server(e) de management a1 continutului — e.g., CMS, wiki
aplicatii/sisteme traditionale (legacy)
eventual, recurgand la servicii in ,,n0ri" — cloud computing
partajarea la cerere a resurselor de calcul §i a datelor cu alte
calculatoare/dispozitive pe baza tehnologiilor Internet (gazduire,
infrastructura scalabila, procesare paralela, monitorizare,...)

***************Ending Page***************


***************Beginning Page***************
***************page number:45**************
(A l ) V
IL 7'. A‘
I , I .___ /
chhard 5 gU1de 4 /
L '\ ‘~\
to suFtwar-e deuelnpment q/Ll I‘
4%
. ' " '- Q c - ' .
3:: "w; "' 7/ )7- ‘- "35. 80% - 3'1: a
14%
HOW THE SOFTWAQE HOW MUCH TIME HA5 TO HOW THE SOFTWAQE LOOKS HOW THE SOFTWAQE LOOKS
(S DESIGNED. 8E SPENT ON EACH PAQT. BEFOQE THE BETA TEST. AFTEQ THE QETA TEST.
\\ ‘w I || " I'll".
1 ." ¢ ,1, . I snu. LIKE
‘1,17 .‘ T 11/ _ . v ﬁ\ vou ANYWAY.
\llt- _ A Vw ‘ 7 \ K”
I HOW THE SOFTWAQE \ WHAT THE CUSTOMEQ HOW THE SOFTWAQE LOOKS ——— 7 I
, IS ADVEQTISED. k QEALLY WANTED. TWO VEQSIONS LATEQ. - \--
Sandra and WOO by O|IVET KHOTZET {WHEY} and POWTEE’. IIGFTESI} — ‘\'1"~""-V sandraandwc-o.com

***************Ending Page***************

***************Beginning Page***************
***************page number:46**************
Existé anumite ,,re’§ete"
privind dezvoltarea de aplicayii Web?

***************Ending Page***************


***************Beginning Page***************
***************page number:47**************
proiectare
Pattern (gablon)
reguléi ce expriméi 0 relayie
dintre un context, 0 probleméi §i 0 soluyie
considerénd punctul de vedere a1 unui expert
context

***************Ending Page***************

***************Beginning Page***************
***************page number:48**************
proiectare
Specificarea si/sau ,,recunoasterea" unui pattern
poate avea loc la diverse niveluri:
prezentare a datelor — UI, user interaction, visualization,...
procesare — business logic, scripting etc.
integrare a componentelor — code library development
stocare a datelor — database queries, database design,...

***************Ending Page***************


***************Beginning Page***************
***************page number:49**************
proiectare
Exemple de colectii de sabloane
(pattern repositories)
privind proiectarea de software
wiki.c2.com/?DesignPatterns
patterns of enterprise application architecture
martinfowler.comleaaCatalogl
interactiunea cu utilizatorul (Adele — a repository of
publicly available design systems and pattern libraries)
adele.uxpin.com

***************Ending Page***************

***************Beginning Page***************
***************page number:50**************
proiectare
Web Patterns

Model View Controller
Page Controller
Front Controller
Template View
Transform View

Application Controller

M. Fowler, Patterns of Enterprise Application Architecture, Addison-Wesley (2003)

***************Ending Page***************


***************Beginning Page***************
***************page number:51**************
prolecta re
Session State Patterns
Client Session State
Server Session State
Database Session State
M. Fowler, Patterns of En terprise Application Architecture, Addison-Wesley (2003)

***************Ending Page***************

***************Beginning Page***************
***************page number:52**************
proiecta re
Data Source Architectural Patterns
Table Data Gateway
Row Data Gateway
Active Record
Data Mapper
M. Fowler, Patterns of Enterprise Application Architecture, Addison-Wesley (2003)

***************Ending Page***************


***************Beginning Page***************
***************page number:53**************
aplicatie Web = interfatﬁ + program + continut (date)
trei strate (3-tier application)
Internet
‘a _ 8
Client Server de aplicatii Stocare
(interface) (application) (persistence)

***************Ending Page***************

***************Beginning Page***************
***************page number:54**************
Fructe — Prezentare
- Frigcé — Marcaje
W: 1 Cremé — Rol specific
leleu — Funcﬁonalitate
Blat — Baza de date
0
C. Henderson, Scalable Web Architectures, Web 2.0 Expo, 2007: iamcal.comltalksl

***************Ending Page***************


***************Beginning Page***************
***************page number:55**************
a % interface ' .
l. .. .-

Q application

Ilia‘ ‘n "‘l

©
—L—_‘_._ML
C. Henderson, Scalable Web Architectures, Web 2.0 Expo, 2007: iamcal.comltalksl

***************Ending Page***************

***************Beginning Page***************
***************page number:56**************
arhitecturi web
Modelul de structurare a datelor este separat
de maniera de procesare
(controlul aplicayiei, business logic) si
de modul de prezentare a acestora (interfajca Web)
principiu:
demarcarea responsabilitéiﬁlor
(separation 0f concerns)

***************Ending Page***************


***************Beginning Page***************
***************page number:57**************
arhitecturi web: mvc
Majoritatea aplicapiilor Web sunt dezvoltate
conform MVC (Model-View-Controller)
Trygve Reenskaug, 1979
folk.universitetetioslo.no/trygverl1979lmvc-2l1979-12-MVC.pdf

***************Ending Page***************

***************Beginning Page***************
***************page number:58**************
arhitecturi web: mvc
View Model
(prezentare + interacjciune) (structura datelor)
Controller
(procesare)

***************Ending Page***************


***************Beginning Page***************
***************page number:59**************
arhitecturi web: mvc
View Model
la nivel de clientﬁ) — e.g., Web stocare persistenté
Controller
aplicaﬁe (server $1 / sau client)

***************Ending Page***************

***************Beginning Page***************
***************page number:60**************
arhltecturl web: mvc
Q <-> 5h E
HTML, CSS, SVG, (N0)SQL, ISON,
HTML APls, WebGL, WebXR etc. XML (XQuery), RDF (SPARQL),...
View Model
la nivel de clientﬁ) — e.g., Web stocare persistenté
servere de aplica’;ii,framew0rk-uri
Controller
aplicaﬁe (server $1 / sau client)

***************Ending Page***************


***************Beginning Page***************
***************page number:61**************
arhitecturi web: mvc
Poate fi implementat si intr-un limbaj neorientat-obiect
incurajat/impus deframework-uri Web specifice
exemplificari diverse:

ASP.NET MVC (.NET — C# et al.), Catalyst (Perl), Conduit (Dart),
Django (Python), Express (N0de.js), Grails (Groovy),
Laravel (PHP), Lift (Scala), Rails (Ruby), Rocket (Rust),
Yesod (Haskell), Spring (lava), Wt (C++)

***************Ending Page***************

***************Beginning Page***************
***************page number:62**************
arhitecturi web: mvc
Controller
responsabil cu preluarea cererilor de 1a client
(cereri HTTP — e.g., GET, POST,... — emise
pe baza acyiunilor utilizatorului)

***************Ending Page***************


***************Beginning Page***************
***************page number:63**************
arhitecturi web: mvc
Controller
responsabil cu preluarea cererilor de la client
(cereri HTTP — e.g., GET, POST,... — emise
pe baza acyiunilor utilizatorului)
gestioneazéi resursele necesare satisfacerii cererilor

***************Ending Page***************

***************Beginning Page***************
***************page number:64**************
arhitecturi web: mvc
Controller
responsabil cu preluarea cererilor de 1a client
(cereri HTTP — e.g., GET, POST,... — emise
pe baza acyiunilor utilizatorului)

gestioneazéi resursele necesare satisfacerii cererilor
uzual, va apela un model conform acjciunii solicitate

$1, apoi, va selecta un view corespunzéitor

***************Ending Page***************


***************Beginning Page***************
***************page number:65**************
arhitecturi web: mvc
Model
resursele gestionate de software — utilizatori, mesaje,
produse etc. — au modele specifice

***************Ending Page***************

***************Beginning Page***************
***************page number:66**************
arhitecturi web: mvc
Model
resursele gestionate de software — utilizatori, mesaje,
produse etc. — au modele specifice
desemneaza datele + regulile (Le. restricyiile)
vizand datele b concepte manipulate de aplicayia Web

***************Ending Page***************


***************Beginning Page***************
***************page number:67**************
arhitecturi web: mvc
Model
resursele gestionate de software — utilizatori, mesaje,
produse etc. — au modele specifice
desemneaza datele + regulile (Le. restricyiile)
vizand datele b concepte manipulate de aplicayia Web
ofera controller-ului 0 reprezentare a datelor solicitate
$1 e responsabil cu validarea datelor menite a fi stocate

***************Ending Page***************

***************Beginning Page***************
***************page number:68**************
arhitecturi web: mvc
View
furnizeazii diverse maniere de prezentare a datelor
furnizate de model via controller

***************Ending Page***************


***************Beginning Page***************
***************page number:69**************
arhitecturi web: mvc
View
furnizeazéi diverse maniere de prezentare a datelor
furnizate de model via controller
pot exista view-uri multiple,
alegerea lor fiind realizaté de controller

***************Ending Page***************

***************Beginning Page***************
***************page number:70**************
6
3 4
Client 1 Dispatcher 2 Controller
etape tipice:
(1) cerere trimisa de client — e.g., navigator Web,
(2) dirijare (routing) a cererii catre controller,
(3) recurgerea la un model, (4) furnizare de date dorite,
(5) selectare a unui view, (6) transmitere continut la client

***************Ending Page***************


***************Beginning Page***************
***************page number:71**************
arhitecturi web: mvc
Arhitectura genericé a unei aplicajdi Web
va consta dintr-un set de resurse referitoare la
controller, madel $1 view

***************Ending Page***************

***************Beginning Page***************
***************page number:72**************
arhitecturi web: mvc
Arhitectura genericé a unei aplicajdi Web
va consta dintr-un set de resurse referitoare la
controller, model $1 view
uzual, framework-ul Web folosit impune 0 anumité
structuréi a fi§ierelor aplicayiei ce va fi implementatéi

***************Ending Page***************


***************Beginning Page***************
***************page number:73**************
assets avansat
images
javascripts
stylesheets
controllers
helpers
mailers
models
views
L———layouts
config
db
doc
lib
log
public
script
test
fixtures
functional
integration
performance n _ _ H
tm unit ,,scheletul unel apllcajcn Web
veﬁdor create 1n Ruby on Ralls
Pluglns rubyonralls.org

***************Ending Page***************

***************Beginning Page***************
***************page number:74**************
app Conﬁg
Console structura de dlrectoare
n r ll r A . . H
Eibt o e 1n cazul unel apllca§11Web
Locale -
Model folosmd framework ul
|:Behavior C ake P H P
Datasource
Plugin cakephp.org
Test
th
Vendor
View
Elements
Errors
Helper
Layouts
Pages
Scaffolds
webroot
css
files
img
S .
lib J altele: Codelgnlter, FuelPHP,
lu ins --
Eengors Laravel, Symfony, Y11

***************Ending Page***************


***************Beginning Page***************
***************page number:75**************
assets avansat
|:j avascripts
stylesheets
apps
Elibs
main
controllers
models
views
conf
project
ublic
images
L———icons
javascripts
structura de dlrectoare in cazul unel apllcapl Web
ce recurge la framework-ul Play pentru lava s1 Scala
www.playframework.com

***************Ending Page***************

***************Beginning Page***************
***************page number:76**************
Soluticzln Explorer Y E X avansat
m ‘<9 — e ﬂE
Search Solution Explorer {Ctrl+;} P '
l> i Solution Items
A il src
J 5'93 WehProject
I‘ Properties
l @“wwvroot
l> i css
l> i images
l> i lib
U _reterences.js
J ,I'jl Dependencies
l> ﬁi Bower
l> gi NPM
l> I‘. References
Q‘ bowerjson
{J conﬁgjson
U gruntfilejs
g package-150“ structura pr01ectulu1 software
proJe ._|50l1
o ProjectReadmemml pentru 0 apllcatle ASP.NET MVC
C“ Startup.cs
. www.asp.netlmvc
SOlUtIOH Explorer Team Explorer Server Explorer

***************Ending Page***************


***************Beginning Page***************
***************page number:77**************
arhitecturi web: mvc
Variante derivate:
HMVC (Hierarchical Model-VieW-Controller)
MVP (Model View Presenter)
MVVM (Model View VieWModel)

***************Ending Page***************

***************Beginning Page***************
***************page number:78**************
User interaction
View exemplu: .
ls used to populate M-V-P-VM (MOdel' VIQW'
the View _
a Presen ter-VlewModeI)
Passes calls to , . . A
utlllzat 1n contextul
* " aplicajciilor Web complexe
I
(Controller) Creates the ViewModel
using the Model data
M . an 'njems't'nmt e 'ew pentru detalll, de parcurs
anlpulates
Herberto Graca, M VC and
u its alternatives (2017)
herbertograca.coml2017/08/17lmvc-and-its-variantsl

***************Ending Page***************


***************Beginning Page***************
***************page number:79**************
rezumat
programare Web b inginerie Web
dezvoltarea aplicayiilor Web — aspecte esenjciale

***************Ending Page***************

***************Beginning Page***************
***************page number:80**************
Server Web
cerere HTTP
(GET, POST,...) server d9 procesor
Client — aplicayii (engine)
Web _ PHP Zend
réspuns
(reprezentare)
HTML, PNG, PDF,
ISON, SVG, ZIP,...
programe =“
g g GEE
resurse (externe)
episodul viitor:
dezvoltarea de aplicaﬁi Web in PHP

***************Ending Page***************

