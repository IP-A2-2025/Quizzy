***************Beginning Page***************
***************page number:1**************
\/\/\/\/\/\/\I\
1W
‘W
1W
‘ﬂ\ﬂ\ﬂ\ﬂ\ﬂ\ﬂ\ﬂ\
I\I\I\I\l\l\l\l
PROGRAMMING IN PYTHON | $311“?ng

***************Ending Page***************

***************Beginning Page***************
***************page number:2**************
Python classes supports both simple and multiple inheritance.
Python 3.x (simple inheritance)
class <name>(Base):
<statementl>
<statementn>
Where statementi is usually a declaration of a method or data member.
Python 3.x (multiple inheritance)
class <name> (Base1,Base2,... Basem) :
<statementl>
<statementn>

***************Ending Page***************


***************Beginning Page***************
***************page number:3**************
Python has two keywords (issubclass and isinstance) that can be used to check it an
obiect is a subclass of an instance of a specific type.
Python 3.x (simple inheritance)
class Base:

X = 10 Output
class Derived(Base): dl<= 10

Y Instance of Derived: True

Instance of Base: True

d I D€riV€d() Derived is a subclass of Base: True
print ("d.X I ",d.X) Base is a subclass of Derived: False
print ("d.Y I ",d.y)
print ("Instance of Derived:",isinstance(d,Derived))
print ("Instance of Base:",isinstance(d,Base))
print ("Derived is a subclass of Base:",issubclass(Derived,Base))
print ("Base is a subclass of Derived:",issubclass(Base,Derived))

***************Ending Page***************

***************Beginning Page***************
***************page number:4**************
lnheritances does not assume that the _init_ function is automatically called for the
base when the derived obiect is created.
Python 3.x (simple inheritance)
class Base:
def _init_(self) =
self.x I 10
_ Execution error — d.X does not
class DerivedlBase) ' exists because base._init_
def _1n1t_ (self) ; was never called
self.y I 20
d I Derived()
print ("d.X I ",d.x)
print ("d.Y I ",d.y)

***************Ending Page***************


***************Beginning Page***************
***************page number:5**************
lnheritances does not assume that the _init_ function is automatically called for the
base when the derived obiect is created.
Python 3.x (simple inheritance)
class Base:
def __init__(self):
self.x = 10
Class Derived (Base) : ln Python 3 you can also write
def _init (self) : super()._init_()
Base. __init__(self)
self.y = 20
d I Derived (> OU'P"*
print ("d.Y I ",d.y) 0”‘ 20

***************Ending Page***************

***************Beginning Page***************
***************page number:6**************
lnheriting from o| closs will overwrite olll bolse class members (methods or doto members).
Python 3.x (simple inheritance)
class Base:
def Print(self):
print("Base class")
class Derived(Base):
def Print(se1f):
print("Derived class")

***************Ending Page***************


***************Beginning Page***************
***************page number:7**************
lnheriting from a class will overwrite all base class members (methods or data members).
Python 3.x (simple inheritance)
class Base:
def Print(self,value):
print("Base class",value)
class Derived(Base):
def Print(self):
print("Deri
Print function from Base class was completely
d I Derived () overwritten by Print function from the derived class.
d . Print () The code will produce a runtime error.
d.Print(lOO)

***************Ending Page***************

***************Beginning Page***************
***************page number:8**************
lnheriting from a class will overwrite all base class members (methods or data members).
ln this case member “x” from Base class will be overwritten by member “x” from the
derived class.
Python 3.x (simple inheritance)
class Base:
X I lO
class Derived(Base):
X I 20
d I Derived()
print (01.x) Output

***************Ending Page***************


***************Beginning Page***************
***************page number:9**************
Polymorphism works in a similar way. In reality the inheritance is not necessary to
accomplish polymorphism in Python.
Python 3.x (simple inheritance)
class Forma:
def PrintName(self): pass DUNN"
class Square(Forma): Sqmre
def PrintName(self): print("Square") Cinﬂe
class Circle (Forma) :
def PrintName(self): print("Circle")
class Rectangle(Forma):
def PrintName(self): print("Rectangle")
for form in [Square(),Circle(),Rectangle()]:
form.PrintName()

***************Ending Page***************

***************Beginning Page***************
***************page number:10**************
Polymorphism works in a similar way. In reality the inheritance is not necessary to

accomplish polymorphism in Python.

Python 3.x (simple inheritance)

class Square:
def PrintName(self): print("Square") Dunn"

class Circle: Swmre
def PrintName(self): print("Circle") Cinﬂe

class Rectangle: Rﬂiamﬂe
def PrintName(self): print("Rectangle")

for form in [Square(),Circle(),Rectangle()]:
form.PrintName()

***************Ending Page***************


***************Beginning Page***************
***************page number:11**************
In case of mulTiple inheritance, PyThon derives from The righT mosT class To The leTT mosT
class from The inheriTance lisT.
PyThon 3.x (muITiple inheriTance)
class BaseA:
def MyFunction (self) : OquuT
print ("Base A") BaﬁaA
def MyFunction(self):
print ("Base B")
class Derived<BaseA, BaseB):
pass
d I Derived()
dLMyFunction()

***************Ending Page***************

***************Beginning Page***************
***************page number:12**************
In case of multiple inheritance, Python derives from the right most class to the left most
class from the inheritance list.
Python 3.x (multiple inheritance)
class BaseA:
def MyFunction(self):
print ("Base A")
class BaseB:
def MyFunction (self) z First MyFunction from BaseB
print ("Base B") is added to Derived class
class Derived (BaseA, -
paSS ——
d = Derived()
dLMyFunction()

***************Ending Page***************


***************Beginning Page***************
***************page number:13**************
In case of multiple inheritance, Python derives from the right most class to the left most
class from the inheritance list.
Python 3.x (multiple inheritance)
class BaseA:
def MyFunction(self):
print ("Base A")
class BaseB: . Then MyFunction from class
def MyFunctlon (self) ; BaseA will overwrite
orlnt ("Base B") MyFunction from BaseB
class Derived :- _ _ .
paSS ——
d = Derived()
d.MyFunction ()

***************Ending Page***************

***************Beginning Page***************
***************page number:14**************
If we reverse the order (BoiseB will be first onol BoseA wil be the lolst one), MyFunction
will print “Bose B” instead of “Boise A”
Python 3.x (multiple inheritance)
class BaseA:
def MyFunction (self) : Output
print ("Base A") BaaaB
def MyFunction(self):
print ("Base B")
class Derived(BaseB, BaseA):
pass
d I Derived()
dLMyFunction()

***************Ending Page***************


***************Beginning Page***************
***************page number:15**************
| CLASSES (SPECIAL METHODS)
Python defines a special set of functions that can be use do add additional properties to
a class. Just like the initialization function (_init_) , these functions start and end with
n u
m—
_repr_, _str_ Called when the obiect needs to be converted into string
_lt_, _le_, _eq_, _ne_, _gt_, Operators used to compare instances of the same class.
_ge_
_bool_ To evaluate the truth value of an obiect (instance of a class)
_getattr_, _getattribute_ For attribute look-ups
_setattr_, _delattr_ For attribute operations
_set_, _get_
_len_, _del_, For len / del operators
_setitem_, _getitem_, _contains_, Iterator operators
_reversed_, _iter_, _next_

***************Ending Page***************

***************Beginning Page***************
***************page number:16**************
Python also defines a set of mathematical functions that can be used for the same
purpose:
‘9 _add_, _sub_, _mul_, _matmu|_, _truediv_, _tloordiv_, _mod_, _divmod_,
_pow_, _lshift_, _rshift_, _and_, _xor_, _or_
‘9 _radd_, _rsub_, _rmu|_, _rmatmul_, _rtruediv_, _rtloordiv_, _rmod_, _rdivmod_,
_rpow_, _rlshift_, _rrshift_, _rand_, _rxor_, _ror_,
‘9 _iadd_, _isub_, _imu|_, _imatmul_, _itruediv_, _ifloordiv_, _imod_, _ipow_,
_ilshift_, _irshift_, _iand_, _ixor_, _ior_
‘9 _neg_, _int_, _float_, _round_

***************Ending Page***************


***************Beginning Page***************
***************page number:17**************
Converting o closs to o string. |t is recommended to overwrite both _str_ olnol
_repr_
Python 3.x
class Test:

X z 10 Output (Python 3)

Test2 with X = lO : Test2 with X = 10

class Test2:

X I lO

def __str;_(self): return "Test2 with X I "+str(self.x)
t I Test()
t2 I Test2()
print (t,”:”,str(t))
print (t2, ”:”, str(t2))

***************Ending Page***************

***************Beginning Page***************
***************page number:18**************
Converting to om integer value.
Python 3.x
class Test:
X I 10
class Test2:
X I 10
def __int__(self): return self.x
t I Test()
t2 I TestZ () This code will produce a runtime error because
Value I int (t) Python don’t know how to translate an obiect of
type Test to an integer

***************Ending Page***************


***************Beginning Page***************
***************page number:19**************
Converting to on integer volue.
Python 3.x
class Test:
X I 10
class Test2:
X I lO
def __int__(self): return self.x
t I Test()
t2 = Test2()
Value = int (t2) This code works, Value will be 10

***************Ending Page***************

***************Beginning Page***************
***************page number:20**************
lteraﬁng through a class instance
Python 3.x
class CarList:
cars I ["Dacia", "BMW", "Toyota"]
def iter (self) =
—— —— BMW
self.pos I —l Towna
return self
def___nex:__(self):
self.pos += l
if self.pos::len(self.cars): raise StopIteration
return self.cars[self.pos]
c I CarList()
for i in c:
print (i)

***************Ending Page***************


***************Beginning Page***************
***************page number:21**************
Using closs operators. In this colse we overwrite _eo|_ (II) operoltor.

Python 3.x

class Number: O t t
def _init_(self, value) = " P"

. False
def___eq__(self, obj):
return self.x+obj.x I: O

n1 I Number(—5)

n2 I Number(5)

n3 I Number(6)

print (nlIInZ)

print (nlIInB)

***************Ending Page***************

***************Beginning Page***************
***************page number:22**************
Overwriﬁng the “in” operfoltor (_con’ro|ins_).
Python 3.x
class Number: O t t
def _init_(self, value) = " P"
self.x I value Tum
. False
def __containa__(self, value): Tum
return str(value) in str(self.x)
n I Number(123)
print (12 in n)
print (5 in n)
print (3 in n)

***************Ending Page***************


***************Beginning Page***************
***************page number:23**************
Overwriﬁng the “len” opertoltor (_|en_).

Python 3.x

class Number: O t t
def _init_(self, value) = " P"
def___len__(self):

return len(str(self.x))

n1 I Number(123)

n2 I Number(99999)

n3 I Number(2)

print (len(nl),len(n2),len(n3))

***************Ending Page***************

***************Beginning Page***************
***************page number:24**************
Building your own dictionary (overwrite _se’ri’rem_ and _ge’ri’rem_)
Python 3.x
class MyDict:
def __init__(self): self.data I []
def __setitem__(self,key,value): self.data +2 [(key,str(value))]
def___getitem__(self,key):
for i in self.data:
if i[O]::key:
return i[l]
()uipui
d = MyDict() python 123
d["numar"] I 123
print (d["test"],d["numar"])

***************Ending Page***************


***************Beginning Page***************
***************page number:25**************
Building o| bit set (overloading operator [])
Python 3.x
class BitSet:
def _init_(self): self.value I O
def _setitem_ (self, indeX,va1ue) z
if value: self.value I: (1 << (index & 31))
else: self.value —: (self.value & (1 << (index & 31))
def _getitem_(self,key) : Output
. return (self.value & (1 << (index & 31))) !:O Bit 0 is True
b I BltS€t() Bit 1 is False
b[0] : TIUG Bit 2 is True
Bit 4 is True
b[4] I True Bit 5 is False
for i in range(0,8): Bit 6 is False
print("Bit ",i," is ",b[i]) Bit 7 is False

***************Ending Page***************


***************Beginning Page***************
***************page number:26**************
A context manager is a mechanism where an obiect is created an notification about the
moment that obiect is being access and the moment that obiect is being terminated.
Context managers are used along with with keyword. The obiects that available in a
context manager should implement _enter_ and _exit_ methods.
with item1 as alias], [item2 as alias2 , itemn as aliasn ]:

<statement l>

<statement 2>

<statement n>
with item], [item2, itemn]:

<statement l>

<statement 2>

<statement n>

***************Ending Page***************

***************Beginning Page***************
***************page number:27**************
Whenever a with command is encounter, the following steps happen:

l. All items are evaluated

2. For all items _enter_ is called

3. If aliases are provided, the result of the _enter_ method is store into the alias

4. The block within the with is executed

5. lf an exception appears, _exit_ is called and information related to the exception
(type, value and traceback) are provided as parameters. lf the _exit_ method
returns false, the exception is re-raised. lf the _exit_ method returns true, the
exception is ignored.

6. If no exception appear, _exit_ is called with None parameters for (type, value and
traceback). The result from the _exit_ method will be ignored.

***************Ending Page***************


***************Beginning Page***************
***************page number:28**************
File context manager
Python 3.x
class CachedFile:
def init (self,fileName):
. eXlt 1s called
self.fileName I flleName __ __
def __enter;_(self):
print("__enter__ is called")
return self
def __exit__(self, exc_type, exc_value, traceback):
print("__exit__ is called")
open(self.fileName,"wt").write(self.data)
return False
with CachedFile("Test.tXt") as f:
f.data I "Python course"

***************Ending Page***************

