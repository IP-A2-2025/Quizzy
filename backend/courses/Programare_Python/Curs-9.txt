***************Beginning Page***************
***************page number:1**************
\/\/\/\/\/\/\I\
1W
‘W
1W
‘ﬂ\ﬂ\ﬂ\ﬂ\ﬂ\ﬂ\ﬂ\
I\I\I\I\l\l\l\l
PROGRAMMING IN PYTHON | $333M“

***************Ending Page***************

***************Beginning Page***************
***************page number:2**************
| TIME M 0 DU LE
Implements function that allows one to work with time:
o Get current time
O Format time
o Sleep
o Time zone information
Details about time module in Python:
o Python 3: httgs:[ [docspythomorg[3Zlibrary[time.html#module-time

***************Ending Page***************


***************Beginning Page***************
***************page number:3**************
Usage:
Python 3.x
import time
W : ["MOn", "Tue", "Wed", "Thu", "Fri", "Sat", "SUI-1"]
print ("Time in seconds:",time.time())
print ("Today :",time.ctime())
. __ . . ()uipui
tmobj — time.localtime()
print ("Year :",tmobj .tm year) Time in seconds: 1604739661.403554
. . — Today : Sat Nov 7 11:01:01 2020
print ("Month :",tmobj.tm_mon) Year :2020
print ("Day :",tmobj.tm_mday) Mmmh =11
print ("Day of week :",w[tmobj.tm_wday]) Day = 7
print ("Day from year :",tmobj.tm_yday) Eiiiiéfiim: iii;
print ("Hour :",tmobj.tm_hour) Ewur ; 11
print ("Min :",tmobj.tm_min) Mn1 =1
print ("Sec :",tmobj.tm_sec) sec ‘1

***************Ending Page***************

***************Beginning Page***************
***************page number:4**************
BoTh localTime and ngime have one parameTer (The number of seconds from 1970). If This
parameTer is provided The Time obiecT will be The Time compuTed based on ThaT number.
OTherwise The Time obiecT will be The Time based on Time.Time () (currenT Time) value.

PyThon 3.x OquuT

import time time.struct_time (tm_year=2019, tm_mon=11, tm_mday=10,
tm_hour=l4, tm_min=30, tm_sec=34,

. . . tm_wday=6, tm_yday=314, tm_isdst=0)
print (t1me.localt1me())

, t t, t, time.struct_time(tm_year=2019, tm_mon=ll, tm_mday=lO,
Pnfin l THEE.gH2;Pﬂ€()) tm_hour=12, tm_min=30, tm_sec=34,
prlnt (t1me.gmtlme(lOO)) I tm_wday=6, tm_yday=3l4, tm_isdst=0)

rin im . m im im . '

p t' (t € Q] t €(tl e tlHK9())) time.struct_time(tm_year=l970, tm_mon=1, tm_mday=l,
tm_hour=0, tm_min=1, tm_sec=40,
tm_wday=3, tm_yday=1, tm_isdst=0)

time.struct_time(tm_year=2019, tm_mon=1l, tm_mday=lO,
tm_hour=12, tm_min=30, tm_sec=34,
tm_wday=6, tm_yday=314, tm_isdst=0)

***************Ending Page***************


***************Beginning Page***************
***************page number:5**************
Use mktime to convert from a time obiect struct to a float number.

Use asctime member to convert from a time obiect to a readable representation of

the time (string format).

Python 3.x

import time

t = time.time()

tobj = time.localtime()

tm = time.mktime(tobj)

print (tm)

print (t)

print (time.asctime(tobj)) Dunn"
1604739710.098777
Sat Nov 7 11 01 50 2020

***************Ending Page***************

***************Beginning Page***************
***************page number:6**************
Use strftime to time obiect to a specified string representation:
%H Hour in 24 hour format %M Minute
%| Hour in i 2 hour format %S Seconds
%Y Year (4 digits) %A Day of week (name)
%m Month (decimal) %d Day of month (decimal)
°/oB Month (name) %p AM or PM
Python 3.x
import time
tobj I time. local time() OWPW
print (time.strftime("%H:%M:%S — %Y—%m—%d",tobj)) 14:17:25 - 2019-11-10
print (time . strftime ("%I%p:%M: %S — %B", tobj)) 32PM1117QZ —dNOV:rgb;gl9
print (time. strftime ("%B, %A %d %Y", tobj)) ovem er’ un ay

***************Ending Page***************


***************Beginning Page***************
***************page number:7**************
strftime if used without a time obiect applies the string format to the current time.
Time module also has a function sleep that receives one parameter (the number of
seconds the current script has to wait until it continues its execution).
Python 3.x
import time
for i in range(0,8):
print (time.strftime("%H:%M:%S" ) OUlIWt
time.sleep(2) 11:46=15
11:46:17
11:46:19
If no time obiect structure is provided, 11:46:21
strftime function will use current time to 11146=23
-. 11:46:25
apply the speclfled format. 11:46:27
11:46:29

***************Ending Page***************

***************Beginning Page***************
***************page number:8**************
| HASHLIB MODULE
Implements function that allows one to compute different cryptographic functions:
o MD5
o SHA-i
O SHA-224
O SHA-384
O SHA-512
o Shake-128
o Shake-256
Details about hashlib module in Python:
o Python 3: https:[ [docspythonprg[3Zlibrary1hashlibhtml

***************Ending Page***************


***************Beginning Page***************
***************page number:9**************
Eolch holshlib obiect hols on update function (to updolte the value of the holsh) and ol
digest or hexdigest function(s) to compute the finoll holsh.

Python 3.x

import hashlib

m I hashlib.md5()

m.update(b"Today")

m.update(b" I'm having")

m. update (b" a Python ") Output

m‘ tpdate (b"‘:09r8e")

print (m.hexd1gest())

import hashlib

print (hashlib.md5(b"Today I'm having a Python course").hexdigest())

***************Ending Page***************

***************Beginning Page***************
***************page number:10**************
Each hashlib obiect has an update function (to update the value of the hash) and a
digest or hexdigest function(s) to compute the final hash.

Python 3.x

import hashlib

. The <b> prefix in front of a string is ignored in

m = haShllb .md5 (l Python 2. In Python 3 means that the string is a

m. updat (a I‘ ' ' ' ' . byte list. update method requires a list of bytes

m. update l "l I 'm haVing") (not a string). However, in Python 2 it can be

m. update lb" a Python "l used without the prefix <b>

m.update(b"course")

print (m.hexdigest())

import hashlib

print (hashlib.md5(b"Today I'm having a Python course").hexdigest())

***************Ending Page***************


***************Beginning Page***************
***************page number:11**************
Hashes ore often use on files (to associate the content of o tile to ol specific holsh).
Python 3.x
import hashlib
def GetFileSHAl(filePath):
m I hashlib.shal()
m.update(open(filePath,"rb").read())
return m . hexdi gest () Output
print (GetFileSHAl("< a file path >"))
While this exolmple is ok, keeQ in mind tholt it loolols the entire file content in memory !!!

***************Ending Page***************

***************Beginning Page***************
***************page number:12**************
The correct way to do This (having a support for large files is as follows):
Python 3.x
import hashlib
def GetFileSHAl(filePath):
try:
m I hashlib.shal()
f I open(filePath,"rb")
while True:
data I f.read(4096)
if len(data)IIO: break
m.update(data)
f.close()
return m.hexdigest()
except:
return ""

***************Ending Page***************


***************Beginning Page***************
***************page number:13**************
Python has several implementations for data serialization.

o JSON

0 Pickle

o Marshal

Documentation for JSON:

o Python 3: htth:[ [docspythomorg[3Zlibrary['|son.html

Documentation for PICKLE :

O Python 3: https:[ [docs.python.org[3Zlibrarylpickle.html

Documentation for Marshal :

O Python 3: htth:[ [docspythomorg[3ZlibraryZmarshal.html#module-marshal

***************Ending Page***************

***************Beginning Page***************
***************page number:14**************
JSON functions:
o ison.dump (obi, fp,
)
o ison.dumps(obi,
) -) to obtolin the string
representation of the obi in JSON format

o ison.load(fp,

)
o ison.loc|ds(s,

)

***************Ending Page***************


***************Beginning Page***************
***************page number:15**************
Usage (serialization):
Python 3.x _ _ _ .
_ . sermhzahonqson
1mport json .
FlleAddr 000 001 002 003 004 005 006 007 Text
c1 = { "a"~ Pl 2 :3] 000000000 123 034 099 034|058 032 116 114 {"c": tr
"b"-1100 ’ ’ 000000008 117 101 044 032|034 097 034 058 ue, "a":
' I 000000016 032 091 049 044|032 050 044 032 [1, 2,
"cﬂ':T111e 000000024 051 093 044 032|034 098 034 058 3], "b":
} 000000032 032 049 048 048|125 100}
s = json.dumps(d)
open("serialization.json","wt").write(s)
prlnt (s) Output
{"a": [1, 2, 3], "b": lOO, "c": true}

***************Ending Page***************

***************Beginning Page***************
***************page number:16**************
Usage (ole-serialization):

Python 3.x

import json

data = open("serialization.json","rt").read()

d = json.loads(data)

print (d)

import json

d = json.load(open("serialization.json","rt"))
r'nt d

P) l ( ) ()uiput

{"a": [1, 2, 3], "b": 100, "c": true}

***************Ending Page***************


***************Beginning Page***************
***************page number:17**************
Pickle is another way to serialize obiects in Python. The serialization is done in a
binary mode.

Pickle can also serialize:

o Functions (defined using def and not lambda)

o Classes

o Functions from modules

Documentation for PICKLE :

O Python 3: https:[ [docs.p1thon.org[3Zlibrarygpicklehtml

***************Ending Page***************

***************Beginning Page***************
***************page number:18**************
PICKLE functions:

o pickle.dump (obi, tile, )

O pickle.dumps(obi, ) 9 to obtain the buffer representation of the
obi in pickle format

o pickle.load(tile, )

o pickle.loads(byte_obiect, )

PICKLE support multiple version. Be careful when you serialize with Python 2 ancl try to

ole-serialize with Python 3 (not all version supported by Python 3 are also supported by

Python 2).

If you are planning to switch between versions, either check pickle.HlGHEST_PROTOCOL

to see if the highest protocol is compatible or use O as the protocol value.

***************Ending Page***************


***************Beginning Page***************
***************page number:19**************
Python 3.x
:meort plel€ serializationpickle
d __ { FileAddr 000 001 002 003 004 005 008 007 Text
"64.:[1 :2 3] 000000000 128 003 125 113|000 040 088 001 0v}q (xe
"b"'1()0 ’ ' 000000008 000 000 000 099|113 001 138 088 cq©éX
' , 000000018 001 000 000 000|097 113 002 093 e an]
"c":Trn1e 000000024 113 003 040 075|001 075 002 075 qv<KeKeK
} 000000032 003 101 088 001|000 000 000 098 vexe b
000000040 113 004 075 100|117 048 qQKdu.
buffer = pickle.dumps(d)
open("serialization.pickle","wb").write(buffer)
Pickle need Cl file To be open in binary mode !

***************Ending Page***************

***************Beginning Page***************
***************page number:20**************
Usage (ole-serialization):

Python 3.x

import pickle

data I open("serialization.pickle","rb").read()

d I pickle.loads(data)

print (d)

import pickle

d I pickle.load(open("serialization.pickle","rb"))
print (d) Output

***************Ending Page***************


***************Beginning Page***************
***************page number:21**************
Marshal is another way to serialize obiects in Python. The serialization is done in a
binary mode. Designed for python compiled code (pyc). The binary result is platform-
dependent !!!

Marshal functions:

o marshal.dump (value, tile, ) marshal

O marshal.dumps(value, ) 9 to obtain the binary representation of the obi in marshal format
o marshal.load(ti|e)

o marshal.loads(string/butfer)

Documentation for Marshal :

o Python 3: https:[ [docs.python.org[31libraryZmarshal.html#module-marshal

***************Ending Page***************

***************Beginning Page***************
***************page number:22**************
Usage (serialization):

Python 3.x

import marshal _. .

serlallzqhon.marshal

c1 I { FileAddr 000 001 002 003 004 005 006 007 Text
"aJ';[]_,2,13], 000000000 251 218 001 099|084 218 001 097 VpDcTﬂDa
‘W3"'ILOO 000000008 091 003 000 000|000 233 001 000 [v 0©
‘I H' ' 000000016 000 000 233 002|000 000 000 233 0o 0
c .Trnle 000000024 003 000 000 000|218 001 098 233 v r©b®

} 000000032 100 000 000 000|048 d 0

buffer I marshal.dumps(d)

open("serialization.marshal","wb").write(buffer)

***************Ending Page***************


***************Beginning Page***************
***************page number:23**************
Usage (ole-serialization):

Python 3.x

import marshal

data = open("serialization.marshal","rb").read()
d = marshal.loads(data)

print (d)

import marshal

d = marshal.load(open("serialization.marshal","rb"))
print (d)

Marshal serialization has a different format in

Python 2 and Python 3 (these two are not Quip"t

***************Ending Page***************

***************Beginning Page***************
***************page number:24**************
| RANDOM MODULE
Implements different random base functions:
o random.random() 9 a random float number between O and l
o random.randint(min,max) 9 a random integer number between [min max]
o random.choice(list) 9 selects a random element from a list
o random.shuffle(list) 9 shuffles the list
o random.sample(list,count) 9 creates another list from the current one containing count elements
Details about random module in Python:
o Python 3: httgs:[ [docspythonorg[3Zlibrar11randomhtml

***************Ending Page***************


***************Beginning Page***************
***************page number:25**************
Usage:
Python 3.x
import random
print (random.random())
print (random.randint(5,10)) Ouﬂnﬂ
O . 9410874890940395
l I [2,3,5,7,1l,13,l7,l9] 9
print (random.choice(l)) 5
print (random.sample(l,3)) [1% 1% 1U
[13, 17, 11, 5, 2, 19, 7, 3]
random.shuffle(l)
print (l)

***************Ending Page***************

***************Beginning Page***************
***************page number:26**************
| ZIPFILE MODULE
lm|olements clifferent functions to work with a zip archive:
o List all elements from a zip archive
o Extract files
O Add files to archive
O Get file information
o etc
Details about zipfile module in Python:
o Python 3: htth:[ [docspvthonorg[3Zlibrarﬂzigfilehtml

***************Ending Page***************


***************Beginning Page***************
***************page number:27**************
Listing the content of 0| zip archive:
Python 3.x
import zipfile
. . . . . , Output
z = leflle . leFlle("arch1ve . 21p")
for i in z infolist()' MathOPS/ O O
. ' . . ' MathOps/Complex/ O O
ijth (l._fll£3nan%9, MathOps/Complex/Series.py 117 79
i..fil£9 siize, MathOps/Complex/__init__.py 38 38
i.compress size) MathOpS/Stmple/ 0.0 .
—- MathOps/Slmple/Arlthmetlc.py 54 52
Z'Close() MathOpS/Simple/Bits.py 60 55
MathOpS/Simple/__init__.py 87 84
MathOps/__init__.py 30 3O
a.py 43 43
all.CSV 62330588 8176706

***************Ending Page***************

***************Beginning Page***************
***************page number:28**************
To extract a file from an archive:
Python 3.x
import zipfile
z = zipfile.ZipFile("archive.zip")
z.extract("MathOps/Simple/Arithmetic.py","MyFolder")
z.close()
Arithmetic.py will be extracted to “MyFololer/MathOps/Simple/Arithmetic.py”
To extract all tiles:
Python 3.x
import zipfile
z = zipfile.ZipFile("archive.zip")
z.extractall("MyFolder")
z.close()

***************Ending Page***************


***************Beginning Page***************
***************page number:29**************
A tile can also be opened directly from an archive. This is usually required it one wants
to extract the content somewhere else or it the content needs to be analyzed in memory.
Python 3.x

import zipfile

z = zipfile.ZipFile("archive.zip")

f = z.open("MathOps/Simple/Arithmetic.py")

data = f.read()

f.close()

open("my_ar.py","wb").write(data)

z.close()

Method open from zipfile returns a file-like obiect. You can also specify a password:
Format: ZipFile.open(name, modeI'r', pdeNone)

***************Ending Page***************

***************Beginning Page***************
***************page number:30**************
The following script creoltes ol zip archive ond odd files to it:

Python 3.x

import zipfile

z I zipfile.ZipFile("new_archive.zip","w",zipfile.ZIB_DEFLATED)
z.writestr("test.txt","some texts ...")
z.write("serialization.json")

z.write("serialization.json", "/dir/a.json")
z.writestr("/dir/a.txt","another text ...")

z.close()

writestr method writes the content of ol string into ol zip file.

write methods o|dd ol file to the olrchive.

When creolting oln olrchive one coin specify Cl desire compression: Z|P_DEFLATED,
Z|P_STORED, Z|P_BZ|P2 or Z|P_LZMA.

***************Ending Page***************

