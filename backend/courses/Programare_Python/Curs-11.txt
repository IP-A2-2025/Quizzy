***************Beginning Page***************
***************page number:1**************
\I\I\I\I\I\I\I\
I Qﬂ\ﬂ\ﬂ\ﬂ\ﬂ\ﬂ\ I
\ ﬂ\ﬂ\ﬂ\ﬂ\ﬂ\ﬂ\ﬂ \
I \ﬂ\ﬂ\ﬂ\ﬂ\ﬂ\ﬂ\ I
\ ﬂ\ﬂ\ﬂ\ﬂ§ﬂ\ﬂ\ﬂ \
I\I\I\I\I\I\I\l
PROGRAMMING IN PYTHON ‘ if;1“',?'°g°‘

***************Ending Page***************

***************Beginning Page***************
***************page number:2**************
Pylhon threading support is achieved through lwo modules:

o Jhriad -) old meihods, low»level melliods

is ilneosling -) new inevnosls, based an a class model
Details about these modules can be found on:

~:‘ Python 3s hﬁgsﬂldncsnghomovg 1; [llornixg lhleuduhlml

~t~ Pyllion 3: hllgssggdoesmllionsorg [a Ll'lbraryllhread'lngh'ml
Besides Ihese a series of synchronization obieel lliol include locks, semaphores, evenls
are also available.
As llnenol module was renamed ln python 3 lo Jhreud. It is besl lo use threading if you
wum o code ilioi will run in ilie same way in Pyllion 2 and Pyllion 3s

***************Ending Page***************

***************Beginning Page***************
***************page number:3**************
To start a new thread, use sluanethreud method from class thread. The method
receives a function that will be executed on the new thread and functions parameters‘
Python 31
import ithread, time
Output
def MyPrlnt(sleepPetlod,name,count) : Thread 01:»:
fa: i in nnge(0,counc)= Thread "1”
. . Thread t2:>0
prlnt (name+"=>“+stril)) Thread nan
time.slccp(sleepPeriod) Thread ﬁ2l>1
Thread 01:>2
ithreaistaztinewithxeacl (MyPrint, (1, “Thread t1", 3t)
_threada5téift new thread (MyPrint, <2, “Thread t2", 2H
ithread.s:artincwithrcad (MyPrint, (3, "Thread #3", lb)
timeaﬁieepﬂo)

***************Ending Page***************

***************Beginning Page***************
***************page number:4**************
In case of ob'ects the. are not thread-safe a lock can be used. 0|»va Ouapun
when 3.x Thread v1:>o Thread New
. Thread new Thread new
import ithreadmlme Thread new Thread new
lock : ithreadjllocatciloclﬂ) Thread we» Thread n1:>1
def MyPrlnt (sleepPerlod,name,count) : Thlead '1'” Thread “201
lobal lock Thread vz:>1 Thread n1e>2
9 > _ Thread use» Thread we»
£0: 1 1n nnge10,count) z Thread 42e>2 Thread 02e>2
lockaacqufreU Thread vae>2 Thread use»
print ‘namera:>..*5tz(i)) Thread y3->3 Thread n1»:
lock‘ releaséU
timealeeI-HsleepPeriod)
ithreadrstartinewithzead (MyPTinc, (1,"Thread #1“, 3))
_thread,start new thread (MyPrint, (2,"Thread #2“, 3))
ithread.5tartincwitbrcad (MyPrint, (3,"Thredd #3", 4))
tlmeasieepUO)

***************Ending Page***************

***************Beginning Page***************
***************page number:5**************
Locks can also be used with with statement (in this case the acquire and release are
culled m _en|er _ and _ex||_ code cum" I cum". 2
Pym" “'x Thread 411:» Thzead v2:>o
import thread,tlme Thread #3:» Thxead 01:»
Z i , 11 a 1 k Thread new Thread new
1°“ thread a “Fee °c 0 Thread tt]:>1 Thread n=>1
def MyPrlnt (SleepPerlod,name,count) : “Read 4,102 Thread t2.»
global lock Thread 402:» Thread v1:>2
for i in zangeiD,COuntt c Thread #3:); Thiead “Z”
with lock Thread n2:>z Thread 42:»
‘ Thread new Thread n=>2
prlnt tname+":>"+str(1t) Thread #303 Tame t3->3
time.slccptsleepPeriod)
ithreadastartinewithread (MyPrint, (1, "Thread #1", 3n
ithread.startinewithread (MyPrint, (2,"Thread #2“, 3))
ithreadnstartinewithzead (MyPrint, (3,"Thread #3", 4))
tlmeasleeptlﬂ)

***************Ending Page***************

***************Beginning Page***************
***************page number:6**************
Locks curl also be used f0 wait for u ihread to finish.
Pym» 3.x
import ithread,time
lock Z ithreadnaliccateiiOCkU
lock‘ acqu; I9 0 °""‘"'
def MyPrint (sleepPeriod,name,count) : “awn? “I a ‘mead 1° mus“
Thzead N1:>U
910ml 106k
£0: i in zange10,count): Thread n1:>2
prlnt (name+":>"+!tt(l)) Thread fimshéd
timensleepwleepPeriod)
lock.xelease()
_thread,start [ww thread (MyPrint, (1,"Thread #1", 3)»
print ("Waiting for a thread to finish ...")
locknacqulreU
print ("Thread flnlshed")

***************Ending Page***************

***************Beginning Page***************
***************page number:7**************
Locks can also be used to waif for q ‘bread to finish.
Pyrhonlx
import ithread,time
lock = ithreadJiiccateiiOCkU 5.9,, |=
lock 809w re (b lock vnrinble Is acquired
def MyPrint (SleepPeriod,name,count) = be,“ “7,ha 15%,,“
global lock
£0: i in zangeiO,count):
print (name+“:>"+!tt(1))
t1me.sleep1sleepl>eriod)
lock.xelease(l
_thtead,start néw thread (MyPrint, (1,"Thread #1", 3)»
pzint 1"Waiting for a thread to finish ...")
lockuacqulreﬁ
prim: 1"Thread finished")

***************Ending Page***************


***************Beginning Page***************
***************page number:8**************
Locks can also be used to wait for c ‘breed to finish.
Pym" 3.x
import ithread, time Sm: 1‘
1°C)‘ : thread-EUDC'EEEJUCM' Main thencl was w acquire
l°°k~ 501191“ U ' again the lock variable. As
def MyPrlnt (sleepPeIlod,name,count) = lhis mime was (‘heady
91°b§1I1°°k acquired, ma main thread
for 1 1n fanqquountb - will wan Wm lock variable is
prlnt (name+“:>"+stz (1)) ,e‘ecsed_
t1me.sleep1sleepPer' »
lock. zeleasell
_thread,start_new_thre--1nt, (1, "Thread #1", 3H
pzint ("Waiting £0 read to finish an")
lock‘ acquireU
prim: 1"Thread finished")

***************Ending Page***************

***************Beginning Page***************
***************page number:9**************
Locks can also be used to wait for c ‘bread to finish.
Pym" 3.x
import ithread, time 5m, 3‘
lock = ithreadallocateilockU When “Thread #1., k
l°°k~ 501191 I? U ' ﬁnished me luck variable is
def MyPrlnt(sleepPeIlod,name,count): leleused Anhmpoim'he
91°b§1I1°°k :11“ m lnckmcquile from me
5°‘ 1 1“ Fanqe'orcofft'f- Inuinvhread mu be executed
Punt (name+ ’> *5 (1nd'hesclip'wmcominue.
t1me.sleep1s ~ V.
lock.zelease(l
_thread,start_new_thread (MyPrint, (1,"Thread #1", 3)»
pzint ("Waiting for a thread to finish ...")
lockacqulreU
prim: 1"Thread finished")

***************Ending Page***************

***************Beginning Page***************
***************page number:10**************
Exceptions not caught in u different thread than the main thread will not stop the
program.
Python 1X
impart ithread, time
def MyPrint(sleep?ericd,name,count)z
global lock
£0: i in :angekcountmmunt):
prlnt (name+":>“+str110/i))
t1me.slccp(sleepPeriod)
ithreadtstartinewithread (MyPrlnt, 11, "Thread t1", 3))
for i in xanqe(0,10t:
prlnt ("Main thread : "+st::(i))
timedleepﬂt

***************Ending Page***************

***************Beginning Page***************
***************page number:11**************
Exceptions not caught in u different thread than the main thread will not stop the
ro rum.
p g Output
Pymmﬂ" Mam thread : 0
impart t mm w17>73.3333333333333335
def MyP;i Thread M:>*S.Cl
Mam thread = 1
‘11- Thread “$10.0
for Mam thread : 2
\Inhlndlod inception in Lhtuld suxmd by (function Mthint n museum)
Txacebaak (“It recent call last):
Mam thread = a
theaisl 911; "s=\nocumntnrmlt-“Wyutumzunrzozow.py", u“ 5, in IyPrint
for i in Pane (whet-"=>"+scz(10/iy)
n laxohivisiunlxtorz division by zero
p. Man-A thread : a
t1“ Mam thread = 5
Mann Lhzead = s
Mam thread : v
Man-A thread : s
Man-A thread : 9

***************Ending Page***************

***************Beginning Page***************
***************page number:12**************
l THREADING AND SYNCHRONIZATION
Threading module provides high level functions for thread workers end synchronization.
It also provides a class Thread lhat can be used to derive thread-based obiectsu When
deriving from e Thread class iwe rneilieds are usually implemen'ed:
0 iunll 9 cede illei will be execuled when me lhlead star's
e iinili 9 vlneed eenslrueler (ii ls impenenl re :all iiniri from llie base :lass before deing
unyihlng will. Ihe ilueed
Thread class has the following methods:
o nenl) 9 5mm me ihvecd
o ieinniineeul) 9 waits for llie llueed Io flnlsh
e gevNeine/semeine end neine emibuie 9 lndicuve Ihe name of Ihe ilneed (ii needed)
o iUilivell 9 rewrn lrue lf lee vineed is alive

***************Ending Page***************

***************Beginning Page***************
***************page number:13**************
Using Ohreudinglhreud withoui sub-clossing

Pym" 3.x

mp": thlsadlngytlme 0mm

def NaitSomeSecondS (seconds) 1

t1me.sleep1seconds)

c = threading‘Thread(target=WaitSon\eSeccnds, arqs = (5,)|

LstartU

print("Wait for the thread to complete ...") Themrgelhmcﬁon expects

t - join 1) loup\e mm urgvmems, If mm

mple ccnkﬁns
,CITmus'be

added '0 Specify a Vouple.

***************Ending Page***************

***************Beginning Page***************
***************page number:14**************
Using Ohreadinglhread withouﬁ SUb-C|0§Siﬂg
Pym" 3.x
import threadlnq,tlme OHM"
30
def WaitSomeSecondS (secondSniyY):
mmeﬁleemseconds»
print(x+y)
t : threading.Thread(targetIWaitSomeSeconds, arqs : (5,10,20n
Lstaxti)
print("Wa1t for the thread to complete H»)
t.]oin1)

***************Ending Page***************


***************Beginning Page***************
***************page number:15**************
Sub-classing threadinglhredd Thread code will be added in “run" method.
Pym" 3.x
llllpOrt threadlng, tlme om".
elm Mythread‘threadlnwhrew1
def ilnltilself, seconds):
threadinqﬁhread‘ . 1m: (self)
self.sz:ccmds : seconds
def run1self):
time4sleep(self,second5)
t = Mythreadﬂ)
t . start 1)
print("walt for the thread to complete Hu')
t. 101,11)

***************Ending Page***************

***************Beginning Page***************
***************page number:16**************
‘ SYNCHRONIZATION
The following synchronizulion cbiect are available in Ihreuding module:
c l k
a :ch (reemrum \ock)
£7 Condiﬁon obiecrs
. Semaphere
Q Evem
O Timer
0 Barrier

***************Ending Page***************

***************Beginning Page***************
***************page number:17**************
Allows synchronized access to a resource‘

Lock obiecvs have two functions:

1. Python 3: Lockrucquirelblocking=True, timeout=-1) (timeout means how many seconds
the Lock has m wait until it is acquired.

2‘ Lockrreleaseﬂ 9 releases the lock‘ If culled on an unlocked lock, cm error will be
raised‘

Lock obiecis also suppori working wim with keyword,

***************Ending Page***************

***************Beginning Page***************
***************page number:18**************
Using Lock Obied (there is no guarantee that the numbers will be ordered ll!)
Pym" 3.x
import threading,time
1 : thread1ng.Lock(1 0MP"!
a“ Threadrnumwmjisc,start»=
Eu: 1 in :lllg:(0,lO): [100, 1000, 1001, U11, 1002, 102, 1003, 103,
lecherqmzslﬂ 1004, 104, mus, lus, we, mus. 1m, 1001.
Llisnﬂﬁﬁﬁﬂ] 103, 1008, 109, mus]
lOCk.zr:lcaSL'U
time.sleep11)
15¢ Z [1
t1 : chreadlmyThread(tarqet:Threaanc, Bzgs:ll,lst,100))
c2 = chreadmgxrhreadnarqerﬂmeadrnc, args=(l,lst,1000))
tl.stalrt U
{2.5mm n
t1.;01n 0
122.1011‘ ()

***************Ending Page***************

***************Beginning Page***************
***************page number:19**************
Using Lock obied wi'h wilh keyword
Pyrlvorle
import threading,tin\e
1 : chreadingmocku
def ThreaancUockmilist,start)I
Ea: i in :ange10,10):

with lock: n_list+=[start+i]

time.slccp11)
lst Z [1
t1 : threading.Thread(tatget:Threaanc, args:(l,lst,lOD))
c2 = threading.Thread(target=Threaanc, args=(l,lst,1000))
tl.sca[t U
t2.s£art (b
clqom 0
t2.jmn ()

***************Ending Page***************

***************Beginning Page***************
***************page number:20**************
Allows reenrrunr lock (rhe some rhread can lock a resources mulliple times)‘

RLock abiecls have two functions:

1. Python 3: RLockuucqui|e(blocking=True, limeout=-1) (timeout means how many
seconds the Lock has lo wail until il is acquired.
RLaclcacquire relurrrs rrue if llre lock was acquired, false arherwlser If rlre lock was
already acqulre by the sarrre vlrread, a caumer is increased 0nd lrue is revurned.

2c RLockJelecseU -) decreases the counters Once it reaches O, lhe lock is unlocked,

RLock obiecls also supporl working wilh wi'h keyword,

Wirhin lhe some lhreud, be sure char rhe number of acquire queries is rhee same as the

number of release (otherwise you risk keeping rlre lock unlocked llll

***************Ending Page***************

***************Beginning Page***************
***************page number:21**************
whom.’
1"‘P°“ th'ead‘ "9 Currenf program wiH never end.
(lie; Eigijéggltigtlg 1 When Thre-chnd ccHsThreuchnc'l,
with 10“: pununw‘: 1 “Him,” Ohebck|so\recdyb\ockzvnclu
def Threamcumckw ’ ’ deadJock is produced.
Vith ‘OCkI
printwfnftiiimilhn")
ThIEBanCl‘lOCKJ
l1 Z theadjnq.T’lIPad{LaIgQLZThleddFﬁC/l, args:(L,H
c2 i threadinq.'l‘nread(targetiThreaquc'Z, args*(;,H
m .start u
(2.5mm U
tl.j01r1 0
L2.joln r)

***************Ending Page***************


***************Beginning Page***************
***************page number:22**************
Mm 3.x
import threadlng
l = threadinq.RLock( If we replace Lock wiih
def Threaancl ﬂock): the some code will function as
with lock: printP'fncilicalled") ‘
def ThreaancZ (lock): n ShOUId‘
with lock:
print("fnci2icalled")
Threaancl ﬂock)
c1 : threading.Thread(targetIThreaancl, arqs:11,n
:2 = threading‘Thread(target=ThreaancZ, arq5=il,))
tl.start (J
t2.start ()
:1. join u
£2.71)”; u

***************Ending Page***************

***************Beginning Page***************
***************page number:23**************
‘ SYN(HRON|ZAT|ON ((ONDITION OBJECT)
Provides a notification system Io other systems based On a condition‘ Ir has the following
me'hods:
o “quire
o "has.
u wuii
o waiOJor (Pyuwn a)
U “my
o ncmyiull
Conditional objects also Support working with wiIh keyword.

***************Ending Page***************

***************Beginning Page***************
***************page number:24**************
nyhon 3.x
M Thresdcmumeﬂn Ouipu' (after 1 5mm“)

***************Ending Page***************

***************Beginning Page***************
***************page number:25**************
nyhon 3.x
M Thresdcmumeﬂn Ouipu' (after 1 5mm“)

***************Ending Page***************

***************Beginning Page***************
***************page number:26**************
‘ SYN(HRON|ZAT|ON (SEMAPHORES)
Provides access to a limited number of threads m a resource‘ Ir has the following
functions:
o “quire
o "has.
Conditional objects also support working with wiIh keyword‘

***************Ending Page***************

***************Beginning Page***************
***************page number:27**************
‘ ( ) Quip!"
Pym" 3.x Thread>UC enter
import threading,tin\e 12:23:21 22::
s Z threadingﬁelnaphcreﬂ) mew“ enter
def WorkerThteadUd): Threadib3 exit
Thread-,2 em
931°“ 5 Thzead-JD em
‘II-Ch 5: Threadiﬂé enLez
print("Thread—#"+5t!(id)+" enter“) mew») ex):
mmeéieepﬂ) T“‘e“d'“5 Mm‘
,, ,, ,, ,, New“ Em:
print( Thread># +stx‘(1d)+ exit ) Thread47 entgr
t = [1 mew“ em
for i in range10,10): mew“ aw
t +: [threading.Thread(targetIWorkerThre-ad, args:1i,)i] 1331333;
£0: ith in t: ith‘start (b “1,5149 enter
for ith in t; ithqoln u ThreackW em
ThxeadiUi ex):
Thread*59 exit

***************Ending Page***************

***************Beginning Page***************
***************page number:28**************
Timer is an obiect deriver from Thread. It allows to run a code Qﬂer Q Specific period. A
timer also have u cancel method to stop |he timer.
Pyvhon 3.x
import threading, tlme
Ouipm
def TimerFunction(mesaj):
prlnt (mesaj) “E
time: : threadinngimer (5, TimerFunctlon, ("test after 5 seconds", )l
t1me:.start(l
timer. 701m)
print ("Done")

***************Ending Page***************


***************Beginning Page***************
***************page number:29**************
Event obiect provides a way lo synchronize execution between two or more Ihreﬂdsl
It has the following functions:

o se' -) ve signal Ihe currem slule of me eyenv

o clear -) m clear ihe =urrenl sieve of me eyenl

<> wciv -) welt umil Ihe eyenv is signaled l q cull w sea me'hod was mode]

e isiset -) lo check if cm eyenl was signaled

Evan's can not be used with wilh keyword.

To synchronize lwo thread, Iwo Evenls are usually used‘

***************Ending Page***************

***************Beginning Page***************
***************page number:30**************
Pym» 3.x
mp“: threading
el 1 threading-EventU Ouipui
92 1 threading-EventU
el.=cZU
daf AddNumberLstartyeventlyeventZJistaY:
for i in tangalstart,10,21:
eventlm'aitl]
evenn.c:c5m
115m »= [i]
event2.rctU
1 = i]
:1 = threading.ThreadLtarqetﬂkddﬂumbery args=Uyely92ylH
c2 1 threading.Thread[targetZAddNumbery args=Y2ye2ye1ylH
£1.5t5rtU
£2.5t5rtU
£1.701nl1
chown
Prlnt L11

***************Ending Page***************

***************Beginning Page***************
***************page number:31**************
Provides a mechanism la wait for mulriple rhreads m svarr at the some time‘

It has the following functions:

e wail -) waiv until Ihe number ir lhrecds vnar need ve puss a burrler ls eernplered. Only rhen cll vnreuds
are released and will :onrinue their execurion

<> Resel -) resets lhe barrier

e aborl -) abons currenr barrier

e ponies -) number of parties (threads) rhmhos r0 pussvhe barrier

Barriers can nor be used with wi'h keyword.

Barriers are available only on Pylhon 3r

***************Ending Page***************

***************Beginning Page***************
***************page number:32**************
Pyrlvonlx
import threading,tin\e
b Z threadingJBarrierQ)
def WorkerThreadlb,id) =
b_1d = luwaitU
princ("¢0"+stz(id)+" pass the barler :> "+stz(biidH
mmeéieepm
print("#"+stl‘(id)+" exit")
c = l]
for i in zange10,10)t
c +: [threadingffhreacﬂtargetZWorkerThread, args:1b,l,))]
for ith in t; ith.sLarl (b
Ea: ith in t: ith.joln 0

***************Ending Page***************

***************Beginning Page***************
***************page number:33**************
Pym,» 3.x amp“.
import threading,tin\e n pass the bancr s> 1
b Z chrssdingjsnisnz) an p555 the sans, s> u
n pass (he bans; :> 1
. a2 pass the banex :> n
def WorkerThreadlb,1d): ‘,5 Pm [he Wm Z> 1
b_1d = bswaim d4 pass the barley s> <1
prinuwowsrnmw" pass the barier :> "+st!(b id») "7 Pass the ban“ a 1
time slee ‘2) i as psss ms bane! s> 0
‘ p _ _ as pass the banex :> 1
print("#"+str(ld)+" exlt") as pass the barler s> o
c = [1
for i in zangeiD,lD)t
c +: [threadingﬂfhread1targetZWorkerThread, args:(b
for ith in t; ith.SLQFL (D
Ea: ith in t: ith.j0ln ()

***************Ending Page***************

***************Beginning Page***************
***************page number:34**************
Pym" 3.x Om“,
import threading,time n pass m bancr :> 1
s - - 0 ass he ballet s a
b threadlngjarne ® Each bmnsrwni'sm 2 :3 Sass the bane! Z; 1
_ thread‘ The biid n pass the barlex :> o
def “Mgerghfegmbfld' ' pnwme'er irldicmesvhe H pass [he owe: :> 1
4 s swavu! id ofqmrendwdea ' '4 pass m pixie: i> <1
punuwwstzudw" pa . . (b 1d») "7 Pa“ ‘he “"9! *> 1
1 2 burner. The :ull'c wall i .m psss the aaxléz :> o
““.“e‘5,,efp‘ ) . ,, _ sxnsonvy Ms" nll n pass the baxxex :> 1
Pnnn d} +str(1d)+ eXl Mreudsvhumeedoo as pass the baner :> o
puss Ihe barrieI me ,
c = [1 - ~ I
, , presenf(vn|h\sccse
for 1 1n rangeWJD):
from 2 Q0 2 IlveudsL
c += [threadingxrhrssdq args=1b V
for _th in c: _th.sLerL (b
£0: ith in t: ith.joln 0 V '

***************Ending Page***************

***************Beginning Page***************
***************page number:35**************
SYNCHRONIZATION BARRIER “"“““"""”’“"°"”"‘
( ) groups Dr 3. A; mm
are IO'hreads,vhread
Pvnm" 3.x no. 10 mu "eve! end
mpg“ threadlnq, Um (bmui' mu mi. unm
b Z threaqugarne Q Mo moreﬁhrecldswm
enter 'm "we barrier).
def NOIkEIThIEBdUJ, 1d);
b \d , b.wait[>
prlrt{"#"+stz(1d)+" pas‘: \hr» hall»; :> "+strfbilcj)
Clme.sieep12)
puruw'wSuwa" PXH")
t i [1
for l in range(D,lU):
z +: Lthreadlngihread(targetzworkerThread, args:1b,1,m
for iLh in L: iLmsLarl ()
fa: ich in t: itﬂujoln ()

***************Ending Page***************

