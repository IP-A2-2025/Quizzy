***************Beginning Page***************
***************page number:1**************
\/\/\/\/\/\/\I\
1W
‘W
1W
‘ﬂ\ﬂ\ﬂ\ﬂ\ﬂ\ﬂ\ﬂ\
I\I\I\I\l\l\l\l
PROGRAMMING IN PYTHON | gjujjffmgos

***************Ending Page***************

***************Beginning Page***************
***************page number:2**************
Classes exists in Python but have a different understanding about their functionality than
the way classes are defined in C-like languages. Classes can be defined using a special
keyword: class
Python 3.x
class <name>z
<statementl>
<statementn>
Where statementi is usually a declaration of a method or data member.
Documentation for Python classes can be found on:
O Python 3: htth:[ [docs.|gython.org[3Ztutorial1classes.html

***************Ending Page***************


***************Beginning Page***************
***************page number:3**************
Classes have a special keyword (self) that resembles the keyword this from c-like languages.
Whenever you reference a data member (variable that belongs to a class) within the class
definition the self keyword must be used.
Constructors can be defined by creating a “_init_” function. “_init_” function must have the
first parameter self.
Python 3.x
class Point:
def _init_ (self) :

self.x I O

self.y I O
p I P01nt () Output
Class Point has two members (x and y)

***************Ending Page***************

***************Beginning Page***************
***************page number:4**************
For 0| function defined within 0| c|0|ss to be 0| method of thc|t c|0|ss it h0|s to hc|ve the first
parameter self.
Python 3.x
class Point:
def __init__(self):
self.x = O
self.y = O
def GetX(self):
return self.x
p = Point()
I . X
print (p Get ()) Output

***************Ending Page***************


***************Beginning Page***************
***************page number:5**************
Defining a function within a class without having the first parameter self means that that
function is a static function for that class.
Python 3.x Python 3.x
class Point: class Point:
def___ini:__(self): def___inic__(self):
self.x I O self.X I O
self.y I O self.y I O
def GetY(): def GetY():
return self.y print(”Test”)
p I Point() Point.GetY()
print (p.GetY())
Output
(GetY is static)

***************Ending Page***************

***************Beginning Page***************
***************page number:6**************
A dotol member con o||so be defined directly in the closs definition. However, if mutolble
obiect ore used the behavior is different (similor in terms of behovior to o stoltic
Python 3.x Python 3.x
class Point: class Point:
x I O numbers I [1,2,3]
y I O def AddNUmber(self,n):
self.numbers +: [n]
p1 I Point() pl I Point()
p2 I Point() p2 I Point()
p1.x I 10 pl.AddNUmber(4)
p2 . x I 2O Output p2 . AddNumber(5)
print (pl.X,p2.X) 1020 print (p1.numbers) ouwmf
- print (p2 . numbers)
[1, 2, 3, 4, 5]

***************Ending Page***************


***************Beginning Page***************
***************page number:7**************
To ovoid problems with mutolble obiects it is better to defined them in o constructor
(_init_) function:
Python 3.x
class Point:
def __init__(self):
self.numbers = [1,2,3]
def AddNUmber<self,n):
self.numbers += [n]
p1 = Point()
p2 = Point()
p1.AddNUmber(4)
p2.AddNUmber(5)
print (pl . numbers) Output
print (p2 . numbers)
H,L3,M

***************Ending Page***************

***************Beginning Page***************
***************page number:8**************
It is not required tor two instances of the same class to have the same members. A class
instance is more like a dictionary where each key represent either a member function or
a data member
Python 3.x
class Point:
def _init_(self) :

self.x = O

self.y = O
p1 I Point()
p2 I Point()
p1 . z = 10
print (pl.x,pl.y,pl.z) Output

***************Ending Page***************


***************Beginning Page***************
***************page number:9**************
|t is not required for two instances of the same class to have the same members. A class
instance is more like a dictionary where each key represent either a member function or
a data member
Python 3.x
class Point:
def _init_(self) :
self.x = O
self.y = O
p1 = Point()
p2 Z Point U Error during runtine. “p2" does not have a
p1 T Z = 10 data member “z” (only “pi ” has a data
prlnt (p1 'X’p1 “M member “Z”)

***************Ending Page***************

***************Beginning Page***************
***************page number:10**************
It is not required tor two instances of the same class to have the same members. A class
instance is more like a dictionary where each key represent either a member function or
a data member
Python 3.x
class Point:
def __init__(self):
self.X = O
self.y = O
p1 = Point()
p2 = Point()
p1.z = 10
print ("X" in dir(p1))
print ("2" in dir (p1) > Quip"t
print ("2" in dir(p2))
True
False

***************Ending Page***************


***************Beginning Page***************
***************page number:11**************
We can write an equivalent representation of the functionality olone by classes by using
dictionaries:
Python 3.x Python 3.x (dictionary representation)
class Point: def PointClass__init__(obj):
def___inic__(self): Obj["X"] z 0
self.X I O Obj["y"] I O
self.y I O
p1 I Point() Point = { "__init__":PointClass__init__ }
p2 I Point() pl = dict(Point)
pl.z I 10 pl["__init__"](pl)
p2 = dict(Point)
P2["__init__"](P2)
pl["z"] = 10

***************Ending Page***************

***************Beginning Page***************
***************page number:12**************
We can write an equivalent representation of the functionality olone by classes by using
dictionaries:
Python 3.x Python 3.x (dictionary representation)
class Point: def PointClass_init_(obj) :
def___inic__(self): Obj["X"] z 0
self.X I O Obj["y"] I O
self.y I O
l— Point = { " init ":PointClass_init_ }
pl.z I 10 pl["__init__"](P1)
p = olct(Polnt)
P2["__init__"](p2)
pl["z"] = 10

***************Ending Page***************


***************Beginning Page***************
***************page number:13**************
We can write an equivalent representation of the functionality olone by classes by using
dictionaries:
Python 3.x Python 3.x (dictionary representation)
class Point: def PointClass__init__(obj):
def _init_(self) = obj ["X"] z 0
self.X I O Obj["y"] I O
self.y I O
01 I Point Point = { "__init__":PointClass__init__ }
l_ p1 = di¢t<P<>int>
M 1i" init "1<1>
p2 = dict(Point)
p1["Z"] = 10

***************Ending Page***************

***************Beginning Page***************
***************page number:14**************
We can write an equivalent representation of the functionality olone by classes by using
dictionaries:
Python 3.x Python 3.x (dictionary representation)
class Point: def PointClass__init__(obj):
def _init_(self) = obj ["X"] z 0
self.X I O Obj["y"] I O
self.y I O
pl I Point() Point = { "__init__":PointClass__init__ }
02 I Point() pl = dict(Point)
|_‘ p1["_init_"1 <p1>
p2 = dict(Point)
-2[" init "1(p2)

***************Ending Page***************


***************Beginning Page***************
***************page number:15**************
What happens if a class has some obiects defined directly in class ?

Python 3.x Python 3.x (dictionary representation)

class Test: numbers_vector I [1,2,3]
numbers I [1,2,3] def TestClass_AddNumber(obj,n):
def AddNumber(self,n): obj["numbers"]+:[n]

self.numbers += [n]

pl I Test() TestClass = {

p2 I Test() "AddNumber":TestClass_AddNumber,

pl.AddNUmber(4) "numbers":numbers_vector

p2.AddNUmber(5) l

As looth pl.numbers and p2.numbers refer p1 = dict<T€8tClass)

to the same vector (numbers_vector) they p2 = dict (T€Stc1ass)

will booth moolify_the same oloiect thus p1 ["AddNumber"] (p1, 4)

creatmg the |llus|on of a stat|c varlable. p2 ["AddNumbgrn] (p2, 5)

***************Ending Page***************

***************Beginning Page***************
***************page number:16**************
What happens if a class has some obiects defined directly in class ?
Python 3.x Python 3.x (dictionary representation)
class Test: numbers_vector I [1,2,3]
numbers I [1,2,3] def TestClass_AddNumber(obj,n):
def AddNumber<self,n): obj["numbers"]+:[n]
self.numbers += [n]
lpl I Test() TestClass I {
p2 I Test() "AddNumber":TestClass_AddNumber,
pl.AddNUmber(4) "numbers":numbers_vector
p2.AddNUmber(5) }
As looth pl.numbers and p2.numbers re "I p1 = dict(TestClass)
to the same vector (numbers_vector) they p2 = dict (TestClass)
will lo.oth modifyothe same oloiect thus p1 ["AddNumber"] (p1, 4)
creatlng the |llu5|on of a statlc varlable. p2 ["AddNumber"] (p2, 5)

***************Ending Page***************


***************Beginning Page***************
***************page number:17**************
What happens if a class has some obiects defined directly in class ?
Python 3.x Python 3.x (dictionary representation)
class Test: numbers_vector I [1,2,3]
numbers I [1,2,3] def TestClass_AddNumber(obj,n):
def AddNumber<self,n): obj["numbers"]+:[n]
self.numbers += [n]
.1 I Test TestClass I {

l— "AddNumber" :TestClass_AddNumber,
pl.AddNUmber(4) "numbers":numbers_vector
p2 .AddNumber < 5) }

As looth pl.numbers and p2.number eter .1 = dict TestClass

to the same vector (numbers_vector) they |_
will looth modify the same oloiect thus p1 ["AddNumber"] (p1, 4)
creating the illusion of a static variable. p2 ["AddNumber"] (p2, 5)

***************Ending Page***************

***************Beginning Page***************
***************page number:18**************
What happens if a class has some obiects defined directly in class ?
Python 3.x Python 3.x (dictionary representation)
class Test: numbers_vector I [1,2,3]
numbers I [1,2,3] def TestClass_AddNumber(obj,n):
def AddNumber<self,n): obj["numbers"]+:[n]
self.numbers += [n]
pl I Test() TestClass I {
.2 I Test "AddNumber":TestClass_AddNumber,
l— "numbers" :numbers_vector
}
As looth pl.numbers and p2.nu ers refer p1 = dict(TestClass)
to the same vector (numbers_vector ey 2 = dict TestClass
will looth modify the same oloiect thus |_
creating the illusion of a static variable. p2 ["AddNumber"] (p2, 5)

***************Ending Page***************


***************Beginning Page***************
***************page number:19**************
What happens if a class has some obiects defined directly in class ?
Python 3.x Python 3.x (dictionary representation)
class Test: numbers_vector I [1,2,3]
numbers I [1,2,3] def TestClass_AddNumber(obj,n):
def AddNumber<self,n): obj["numbers"]+:[n]
self.numbers += [n]
pl I Test() TestClass I {
p2 I Test() "AddNumber":TestClass_AddNumber,
ol.AddNUmber 4 "numbers":numbers_vector
l—. }
As looth pl.numbers and p.umbers refer p1 = dict(TestClass)
to the same vector (numbers_ve r) they p2 = dict (TestClass)
will looth modify the same oloiect thus ,1 ["AddNumber"] (1 4)
creating the illusion of a static variable. l_

***************Ending Page***************

***************Beginning Page***************
***************page number:20**************
You cdn ollso delete d member of ol cldss instance by using the keyword del.
Python 3.x
class Point:
def _init_ (self) :

self.x I O

self.y I O
p I Point()
print (p.X,p.y)
p.x I lO
print (p.X,p.y)
del p . x “x” is no longer o member of p. Code will
print @I produce or runtine error.

***************Ending Page***************


***************Beginning Page***************
***************page number:21**************
It a class member is like a dictionary — what does this means in terms of POO concepts:
A. method overloading is NOT possible (it would mean to have multiple functions with
the same key in a dictionary). You can however create one method with a lot of

parameters with default values that can be used in the same way.

B. There are no private/protected attributes tor data members in Python. This is not
directly related to the similarity to a dictionary, but it is easier this way as all keys
from a dictionary are accessible.

C. CAST-ing does not work in the same way as expected. Up-cast / Down-cast are
usually done with specialized functions that create a new obiect

D. Polymorphism is implicit (basically all you need to have is some classes with some
functions with the same name). Even if this supersedes the concept of polymorphism,
you don’t actually need to have classes that are derived from the same class to
simulate a polymorphism mechanism.

***************Ending Page***************

***************Beginning Page***************
***************page number:22**************
Just like normal variables in Python, data members can also have ’rheir Type changed
dynamically.
Python 3.x
class MyClass:
X = lO
y = 20
m = MyClass()
print (m.x,"=>",type(m.§))
m.x = "a string"
print (m.x,"=>",type(m.§))
Output
10 => <class 'int'>
a string => <class 'str'>

***************Ending Page***************


***************Beginning Page***************
***************page number:23**************
The some com be applied tor closs methods — however in this cose there olre some
restrictions reloted to the self keyword.
Python 3.x
class MyClass:
X = lO
y = 20
def Test(self,value):
return ((self.x+self.y)/2 == value)
def MyFunction(self,vl,v2):
return str(v1+v2)+" — "+str(self.x)+","+str(self.y)
m = MyClass()
print (m.Test(15),m.Test(l6))
m.Test = m.MyFunction Output
3 - 10,20

***************Ending Page***************

***************Beginning Page***************
***************page number:24**************
The some con be dpplied for clolss methods — however in this colse there olre some
restrictions reloted to the self keyword.
Python 3.x
class MyClass:
X I lO
y I 20
def Test(self,value):
return ((self.x+self.y)/2 I: value)
def MyFunction(self,vl, -
return Str (V1+V Runtime error becouse “MyFunction” is o I f - Y)
m I MYClaSS () method thot needs to be bound to on
print (m. T‘ , rm ’ ' obiect instance!
m. Test —@ yFunction
print (m. - ’,2))

***************Ending Page***************


***************Beginning Page***************
***************page number:25**************
The some com be applied tor closs methods — however in this cose there olre some
restrictions reloted to the self keyword.
Python 3.x
class MyClass:
X = lO
y = 20
def Test(self,value):
return ((self.x+self.y)/2 == value)
def MyFunction(self,vl,v2):
return str(v1+v2)+" — "+str(self.x)+","+str(self.y)
m = MyClass()
print (m.Test(15),m.Test(l6))
m.Test = MyClass().Mnynction Ounnn
3 - 10,20

***************Ending Page***************

***************Beginning Page***************
***************page number:26**************
The some com be applied tor closs methods — however in this cose there olre some
restrictions reloted to the self keyword.
Python 3.x
class MyClass:
X = lO
y = 20
def Test(self,value):
return ((self.x+self.y)/2 == value)
def MyFunction(self,vl,v2):
return str(v1+v2)+" — "+str(self.x)+","+str(self.y)
m = MyClass()
m2 = MyClass()
print (m.Test(15),m.Test(l6)) Output
m. Test I m2.MyFunction True False

***************Ending Page***************


***************Beginning Page***************
***************page number:27**************
MeThods are bound To The self obiecT of The class They were iniTialized in. Even if you
associaTe a meThod from a differenT class To a new meThod, The self will belong To The
oriinal class.
PyThon 3.x
class MyClass:
X = 10
def Test(self,value):
return ((self.x+self.y)/2 == value)
def MyFunction(self,vl,v2):
return str(vl+v2)+" — "+str(self.x)
m = MyClass()
m2 = MyClass()
m2.x = 100
m. Test = m2 .MyFunction I m.TesT acTually refers To OquuT
print (m. Test (1’ 2)) m2.MyFuncTion 3 - 100
print (m.MyFunction (1, 2))

***************Ending Page***************

***************Beginning Page***************
***************page number:28**************
A method from another class can also be used, but it will refer to the self from the original class.
Python 3.x
class MyClass:
X = lO
y = 20
def Test(self,value):
return ((self.x+self.y)/2 == value)
class AnotherClass:
def MyFunction(self,vl,v2):
return str(vl+v2)+" — "+str(self.x)+","+str(self.y)
m = MyClass()
print (m.Test(l5),m.Test(l6))
m. Test = AnotherClass () .MyFunction The code will produce a runtime error
print (m. Test (l I 2) ) because the self obiect from AnotherClass
does not have “x” and “y” members.

***************Ending Page***************


***************Beginning Page***************
***************page number:29**************
Normal functions coln ollso be used. However, in this colse, the self obiect will not be send
when calling them olnol it will not be olccessible.
Python 3.x
class MyClass:

X = lO

y = 20

def Test(self,value):

return ((self.x+self.y)/2 == value)

def MyFunction(self,vl,v2):

return str(v1+v2)
m = MyClass()
print (m.Test(15),m.Test(l6))
m.Test = MyFunction Output

3

***************Ending Page***************

***************Beginning Page***************
***************page number:30**************
Similarly a class method can be associated (linked) to a normal variable and used as
such. It will be able to use the self and it will be affected if self members are changed.
Python 3.x
class MyClass:
X = lO
def MyFunction(self,v1,v2):
return str(v1+v2)+" — self.x:"+str(self.x)
m = MyClass()
fnc = m.MyFunction
print (fnc(l5,35))
m.x = 123
print (fnc(l5,35))
Output
50 - self.x: 123

***************Ending Page***************


***************Beginning Page***************
***************page number:31**************
self obiecT is assign during The construction of an obiecT. This means ThaT a TuncTion can
be defined ouTside The class and used wiThin The class if iT is seT during The consTrucTion
phase.
PyThon 3.x
def MyFunction(self,vl,v2):
return str(vl+v2)+" — X = "+str(self.x)
class MyClass:
X = 10
Test = MVFUnction
m = MyClass()
m2 = MyClass () Ouipui
print (m.Test(l,2)) 30- Xz=15
print (m2.Test(lO,20))

***************Ending Page***************


***************Beginning Page***************
***************page number:32**************
This type of assignment can not be done within the constructor method (_init_), it must
be done Through direct declaration in the class body.
Python 3.x
def MyFunction(self,vl,v2):

return str(vl+v2)+" — X = "+str(self.x)
class MyClass:

X = lO

def __init__(self):

self.Test :.MyFunction

m I MyClass()
m2 I MyClass()
m2 X I 15 The code will produce a runtime error
print (m Test (l 2) ) because MyFunction is not bound to any self
print (m2 . Test (10, 20)) O" ‘his P°inl

***************Ending Page***************


***************Beginning Page***************
***************page number:33**************
The s0|me error will c|ppe0|r it we try to link 0| method from 0| cl0|ss using it’s instance with
0| non-cldss function.
Python 3.x
def MyFunction(self,vl,v2):
return str(vl+v2)+" — X = "+str(self.x)
class MyClass:
X = lO
m I MyClass()
m.Test :.MyFunction
print (m. Test (l I 2) ) The code will produce 0| runtime error
bec0|use MyFunction is not bound to 0|ny self
0|t this point

***************Ending Page***************


***************Beginning Page***************
***************page number:34**************
A class can be used like a container of data (a sort of name dictionary). lt’s closest
resemblance is to a struct in C-like languages. For this an empty class need to be create
(using keyword pass)
Python 3.x
class Point:
pass
p I Point()
10.x I lOO
p. y I 200
p_3d I Point()
p_3d.x I lO
p_3d.y I 20 Output
—, ' 3D: 10 20 30
print ("P I ",p.x,p.y)
print ("BDI ",p_3d.x,p_3d.y,p_3d.z)

***************Ending Page***************


