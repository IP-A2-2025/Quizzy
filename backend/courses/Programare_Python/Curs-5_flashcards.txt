[{content={parts=[{text=--FlashCardSeparator--
Single
--InteriorSeparator--
What type of inheritance does Python classes support?
--InteriorSeparator--
Both simple and multiple inheritance
--InteriorSeparator--
easy
--InteriorSeparator--
2
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which keywords can be used to check if an object is a subclass or an instance of a specific type?
--InteriorSeparator--
(right) issubclass
(right) isinstance
(wrong) subtype
(wrong) instanceOf
--InteriorSeparator--
medium
--InteriorSeparator--
3
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What happens if the __init__ function is not automatically called for the base class when the derived object is created?
--InteriorSeparator--
An execution error will occur because the base class's members are not initialized in the derived class.
--InteriorSeparator--
medium
--InteriorSeparator--
4
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
How do you explicitly call the base class's __init__ method within a derived class's __init__ method in Python 3?
--InteriorSeparator--
super().__init__() or Base.__init__(self)
--InteriorSeparator--
medium
--InteriorSeparator--
5
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What happens when a derived class inherits from a base class and defines a method with the same name as a method in the base class?
--InteriorSeparator--
The derived class's method overwrites the base class's method.
--InteriorSeparator--
medium
--InteriorSeparator--
6
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
If a derived class's method overwrites a base class's method that expects a parameter, and the derived class's method doesn't accept any parameters, what happens when you try to call the original base class method through the derived class object?
--InteriorSeparator--
A runtime error occurs.
--InteriorSeparator--
hard
--InteriorSeparator--
7
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In the context of inheritance, what happens to a data member 'x' in a base class if the derived class also defines a data member 'x'?
--InteriorSeparator--
The derived class's data member 'x' overwrites the base class's data member 'x'.
--InteriorSeparator--
medium
--InteriorSeparator--
8
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following are true regarding polymorphism in Python?
--InteriorSeparator--
(right) Inheritance is not necessary to accomplish polymorphism in Python.
(wrong) Polymorphism is only achievable through abstract classes.
(right) Polymorphism allows objects of different classes to respond to the same method call in their own way.
(wrong) Polymorphism is not possible without inheritance.
--InteriorSeparator--
medium
--InteriorSeparator--
9, 10
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In multiple inheritance, what determines the order in which Python derives from base classes?
--InteriorSeparator--
Python derives from the left most class to the right most class from the inheritance list.
--InteriorSeparator--
hard
--InteriorSeparator--
11, 12, 13
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In multiple inheritance, if two base classes have a method with the same name, which method is called when the derived class object calls that method?
--InteriorSeparator--
The method from the first base class listed in the inheritance list is called.
--InteriorSeparator--
hard
--InteriorSeparator--
14
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following special methods are used for attribute look-ups?
--InteriorSeparator--
(right) __getattr__
(right) __getattribute__
(wrong) __setattr__
(wrong) __delattr__
--InteriorSeparator--
medium
--InteriorSeparator--
15
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following are special methods for arithmetic operations?
--InteriorSeparator--
(right) __add__
(wrong) __len__
(right) __mul__
(wrong) __str__
--InteriorSeparator--
medium
--InteriorSeparator--
16
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Which special method is recommended to overwrite when converting a class to a string?
--InteriorSeparator--
Both __str__ and __repr__
--InteriorSeparator--
medium
--InteriorSeparator--
17
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What happens if you try to convert an object of a class to an integer using `int()` and the class does not have an `__int__` method defined?
--InteriorSeparator--
A runtime error occurs.
--InteriorSeparator--
hard
--InteriorSeparator--
18
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What special method do you need to define in a class to allow it to be converted to an integer using the `int()` function?
--InteriorSeparator--
__int__
--InteriorSeparator--
easy
--InteriorSeparator--
19
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What two methods are required to iterate through a class instance?
--InteriorSeparator--
__iter__ and __next__
--InteriorSeparator--
hard
--InteriorSeparator--
20
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Which special method is overwritten to define the behavior of the equality operator (==) for instances of a class?
--InteriorSeparator--
__eq__
--InteriorSeparator--
easy
--InteriorSeparator--
21
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Which special method is overwritten to define the behavior of the `in` operator for instances of a class?
--InteriorSeparator--
__contains__
--InteriorSeparator--
easy
--InteriorSeparator--
22
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Which special method is overwritten to define the behavior of the `len()` function for instances of a class?
--InteriorSeparator--
__len__
--InteriorSeparator--
easy
--InteriorSeparator--
23
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Which special method is used to set an item in a class that behaves like a dictionary?
--InteriorSeparator--
__setitem__
--InteriorSeparator--
medium
--InteriorSeparator--
24
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which special method are used to create a class that acts like a dictionary, allowing you to set and get items using bracket notation (e.g., `my_object[key] = value`)?
--InteriorSeparator--
(right) __setitem__
(wrong) __str__
(right) __getitem__
(wrong) __len__
--InteriorSeparator--
medium
--InteriorSeparator--
24
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
How do you overload the [] operator to implement bitwise operations on a BitSet class?
--InteriorSeparator--
By using the __setitem__ and __getitem__ methods.
--InteriorSeparator--
hard
--InteriorSeparator--
25
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What are the two methods that a class must implement to be used as a context manager?
--InteriorSeparator--
__enter__ and __exit__
--InteriorSeparator--
easy
--InteriorSeparator--
26
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
When does the `__enter__` method get called in a context manager?
--InteriorSeparator--
When a `with` statement is encountered, and before the block within the `with` statement is executed.
--InteriorSeparator--
medium
--InteriorSeparator--
27
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the purpose of the `__exit__` method in a context manager?
--InteriorSeparator--
To handle cleanup and resource management when exiting the `with` block, including exception handling.
--InteriorSeparator--
medium
--InteriorSeparator--
27
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What parameters does the `__exit__` method receive when an exception occurs within the `with` block?
--InteriorSeparator--
exc_type, exc_value, and traceback
--InteriorSeparator--
hard
--InteriorSeparator--
27
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What happens if the `__exit__` method returns `False` when an exception occurs within the `with` block?
--InteriorSeparator--
The exception is re-raised.
--InteriorSeparator--
hard
--InteriorSeparator--
27
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What happens if the `__exit__` method returns `True` when an exception occurs within the `with` block?
--InteriorSeparator--
The exception is ignored.
--InteriorSeparator--
hard
--InteriorSeparator--
27
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What arguments are passed to `__exit__` if no exceptions occur within the `with` block?
--InteriorSeparator--
None for (exc_type, exc_value, traceback).
--InteriorSeparator--
hard
--InteriorSeparator--
27
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In the provided CachedFile example, when does the __exit__ function get called?
--InteriorSeparator--
After the with block is executed
--InteriorSeparator--
easy
--InteriorSeparator--
28
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In the provided CachedFile example, what will happen to the exception?
--InteriorSeparator--
It will be re-raised
--InteriorSeparator--
hard
--InteriorSeparator--
28
--FlashCardSeparator--}], role=model}, finishReason=STOP, avgLogprobs=-0.11479302901255933}]