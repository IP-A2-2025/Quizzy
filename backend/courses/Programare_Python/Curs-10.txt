***************Beginning Page***************
***************page number:1**************
\/\/\/\/\/\/\I\
1W
‘W
1W
‘ﬂ\ﬂ\ﬂ\ﬂ\ﬂ\ﬂ\ﬂ\
I\I\I\I\l\l\l\l
PROGRAMMING IN PYTHON | gggggqgmgos

***************Ending Page***************

***************Beginning Page***************
***************page number:2**************
Sockets are implemented Through socket module in Python.

A socket obiect in Python has the same functions as a normal socket from C/C++:
accept, bind, close, connect, listen, recv, send,

Besides this several other functions are available for domain translation, time outs, etc
Documentation for Python socket module can be found on:

o Python 3: htth:[ [docs.python.org[3Zlibrarylsockethtml

***************Ending Page***************


***************Beginning Page***************
***************page number:3**************
How To build 0| simple server/client in Python:

Python 3.x (Server)

import socket

s I socket.socket(socket.AF_INET, socket.SOCK_STREAM)

s.bind(("127.0.0.l",1234))

s.listen(1)

(connection, address) I s.accept()

print ("Connectd address:",address);

while True:
data I connection.recv(lOO).decode("UTF-8")
if not data: break
print("Received: ",data)
if "exit" in data: break

connection.close()

print ("Server closed")

***************Ending Page***************

***************Beginning Page***************
***************page number:4**************
How To build a simple server/client in Python:
Python 3.x (Server)
import socket
s I socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s .bind <
s.listen(l)
(connection, address) I s.accept()
print ("Connectd address:",address); Addnnsondpon
while True:
data I connection.recv(100).decode("UTF-8")
if not data: break
print("Received: ",data)
if "exit" in data: break
connection.close()
print ("Server closed")

***************Ending Page***************


***************Beginning Page***************
***************page number:5**************
How To build a simle server client in P Thon:
Python 3.x (Server)
import socket
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.bind(("127.0.0.l",1234))
s . listen
(connection, address) = s.accep .
print ("Connectd address:",address); mamnwmrwmbér0f
- queued connechons
whlle True:
data = connection.recv(100).decode("UTF-8")
if not data: break
print("Received: ",data)
if "exit" in data: break
connection.close()
print ("Server closed")

***************Ending Page***************

***************Beginning Page***************
***************page number:6**************
How To build a simple server/client in Python:
Python 3.x (Server)
import socket
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.bind(("127.0.0.l",1234))
s.listen(l)
(connection, address) I s.accept()
print ("Connectd address: ", addreSS) ; Number of bytes To redd
while True:
data I connection.recv . oe 00- . i
if not data: break
print("Received: ",data)
if "exit" in data: break
connection.close()
print ("Server closed")

***************Ending Page***************


***************Beginning Page***************
***************page number:7**************
How To build a simple server/client in Python:
Python 3.x (Server)
import socket
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.bind(("127.0.0.1",1234))
s.listen(l) “ H
(connection, address) = s.accept() andeaxm(UTR8)to
print ("Connectd address:",address); cmweHchWeonoytoo
. string. Encoding in This case
while True: . .
data = connection.recv(lOO ‘S d°"e Wm‘ UTF'8
if not data: break
print("Received: ",data)
if "exit" in data: break
connection.close()
print ("Server closed")

***************Ending Page***************

***************Beginning Page***************
***************page number:8**************
How to build 0| simple server/client in Python:

Python 3.x (Client)

import socket,time

s I socket.socket(socket.AF_1NET, socket.SOCK_STREAM)

s.connect(("127.0.0.1",1234))

s.send(b"Mesaj 1")

time.sleep(1)

s . send (b"Mesaj 2 H) Output from the server

time . Sl€€p (1) Connectd addrese: ('127 . O. 0.1 ' , 61266)
H . H R€C€lV€d2 Mesa] 1

S ' SGnd (b €Xlt ) Received: Mesaj 2

s.<:lcmse() Received: exit

Server closed

***************Ending Page***************


***************Beginning Page***************
***************page number:9**************
Getting current system |P

Python 3.x

import socket

print (socket.gethostbyname(socket.gethostname()))
Convert o host to on IP:

Python 3.x

Output
import socket
. . 85.122.16.23

prlnt (socket . gethostbyname( 'ualc . ro' )) —
Getting the nolme associated with on lP:

Python 3.x Output

import socket (.jad_uaic_ro., [1,

print (socket . gethostbyaddr("85 . 122 . l6 . 7")) ['85.122.16.7'])

***************Ending Page***************

***************Beginning Page***************
***************page number:10**************
Checking if o port is open:
Python 3.x (Client)
import socket
ip = "127.0.0.l"
ports = [20, 21, 23, 25, 80, 443, 530, 8080]
s = socket.socket(socket.AF INET, socket.SOCK STREAM)
. —. — connect_ex returns
s.settlmeout(3) #3 seconds timeout _
. on error code It the
for port 1n ports: t' , t
if s . connect ex( (ip, port) ) == m 7 connec |on IS no
. — . pOSSlble. O means
pr1nt("Port ",port," lS open")
no error.
else:
print("Port ",port," is closed")

***************Ending Page***************


***************Beginning Page***************
***************page number:11**************
Python has several implementation for accessing the content of a URL.

These modules work in a similar way as wget or curl utilities (allowing one to
download the content of a web page).

These are very useful for creating crawlers or scrappers.

O Python 3: httgsq [docs.python.org[31libraryZurllib.html#module-urllib

***************Ending Page***************

***************Beginning Page***************
***************page number:12**************
The following code extracts The nome of The deon of our faculty.
Python 3.x
import urllib
from urllib import request
urlManagement = 'http://www.info.uaic.ro/bin/Structure/Management'
try:
response = urllib.request.urlopen(urlManagement).read()
text = response.decode("utf—8")
dn = text.split("class=strong>Decan</strong>:",1)[l].split("</span>",l)[O]
dean_name = dn.split("wikilink>",l)[1]
print ("Our dean is : ",dean_name)
except Exception as e:
print ("Error —> ",e)

***************Ending Page***************


***************Beginning Page***************
***************page number:13**************
| FTP M 0 DU LE
Python has a module (ttplilo) develop to enable working with FTP servers:
o Retrieve and store files
O Enumerate files from an FTP server
o Create folder on the FTP Server
o Support for password protected servers
o Support for custom FTP commands
Documentation
o Python 3: https:[ [docspvthonprg[3Zlibrar11ttplibhtml

***************Ending Page***************

***************Beginning Page***************
***************page number:14**************
The following snippet lists olll directories from ttp.deloio|n.org from folder debioln.
Python 3.x
from ftplib import FTP
def parse_line (line) : Output
1f lln€.SltartSWIlth( d l 230 Login successful.
print (line.rsplit(" ",l) [1]) dists
try: doc
client = FTP("ftp.debian.org") lndTms
OO
res = client.login() gnnect
print (res) tools
client.retrlines("LIST /debian/",parse_line) ZZZ“h5tS
client.quit()
except Exception as e:
print (e)

***************Ending Page***************


***************Beginning Page***************
***************page number:15**************
The following snippet downloads 0| file from a FTS server.
Python 3.x
from ftplib import FTP
cdeoDownload = "RETR /debian/extrafiles"
try:
client = FTP("ftp.debian.org")
res = client.login()
f = open("debian_extrafiles","wb")
client.retrbinary(cdeoDownload ,lambda buf: f.write(buf))
f.close()
client.quit()
except Exception as e:
print (e)

***************Ending Page***************

***************Beginning Page***************
***************page number:16**************
| FTP M 0 DU LE

List of all supported FTP commands:

FTP.connect Connect to a specified host on a specified port (default is 21)

FTP.login Specifies the user name and password for ftp login

FTP.retrlines Send a command to the FTP server and retrieves the results. The result is send line by line
to a callback function

FTP.storbinary Stores a file in a binary mode on the FTP server

FTP.retrbinary Retrieves a binary file from the server. A callback must be provided to write the binary
content.

FTP.rename Rename a file/folder from the server

FTP.delete Deletes a file from the server

FTP.rmd Deletes a folder from the server.

***************Ending Page***************


***************Beginning Page***************
***************page number:17**************
Python has a module (smtp) develop to enable working with emails.

While tor simple emails (a subiect and a text) the smtp module is enough, for more
complex emails (attachment, etc) there is also another module (email.mime) that can
be use to create an email.

Documentation

o Python 3: https:[ [docs.python.org[3Zlibrarygsmtplibhtml

o Python 3: https:[ [docs.python.org[3[librarygemaiLmimehtml

***************Ending Page***************

***************Beginning Page***************
***************page number:18**************
The following com be used To send on emolil.

Python 3.x

im-ort smtolib

mail I smtplib.SMTP('smtp.gmail.com', 587)
mail.ehlo()

mail.starttls()
mail.login("<user_name>@gmail.com", "<Password>")
msg I MIMETeXt("My first email")

msg['Subject'] I "First email"

msg['From'] I "<user_name>@gmail.com"

msg['To'] I "<recipient email address>"
mail.sendmail("<from>", "<to>", msg.as_string())
mail.quit()

***************Ending Page***************


***************Beginning Page***************
***************page number:19**************
For the previous snippet to work with gmail servers you need to activate “Access for
less secure apps" from you google account (
httgszg [www.goog le.com Z settings Z security Z lesssecurea 99s )
é LESS SEGLIFE apps
Some apps and devices use less secure sign-in technology, which makes yeur acceurit mere 1iiulneralale.
‘i'eu can turn eff access fer these apps, which we recommendj cr turn Dl'l access if you want tc use them
despite the risks. Learn mere
Frum: —@-gmail.ecm
Tm —m
abject‘ : First email
Access fur less secure apps Tu rn eff —
Hy first email
I Turn en

***************Ending Page***************

***************Beginning Page***************
***************page number:20**************
Sending multiple attachments.

Python 3.x

import smtplib

from email.mime.multipart import MIMEMultipart

from email.mime.image import MIMEImage

mail = smtplib.SMTP('smtp.gmail.com', 587)
mail.ehlo()

mail.starttls()

mail.login("<user_name>@gmail.com", "<Password>")
msg = MIMEMultipart ()

msg['Subject'] I "First email"

msg['From'] = "<user_name>@gmail.com"

msg['To'] I "<recipient email address>"
msg.attach(MIMEImage(open("image.png","rb").read()))
msg.attach(MIMEImage(open("image2.png","rb").read()))
mail.send;message(msg)

mail.quit()

***************Ending Page***************


***************Beginning Page***************
***************page number:21**************
Python 3.x

import smtplib

from email.mime.multipart import MIMEMultipart

from email.mime.image import MIMEImage

from email.mime.text import MIMEText

mail = smtplib.SMTP('smtp.gmail.com', 587)
mail.ehlo()

mail.starttls()

mail.login("<user_name>@gmail.com", "<Password>")
msg = MIMEMultipart ("mixed")

msg['Subject'] = "First email"

msg['From'] = "<user_name>@gmail.com"

msg['To'] = "<recipient email address>“
msg.attach(MIMETeXt("The body of the email", 'plain'))
msg.attach(MIMEImage(open("image.png","rb").read()))
mail.send;message(msg)

mail.quit()

***************Ending Page***************


***************Beginning Page***************
***************page number:22**************
Python has some build in modules that can simulate a http server.

Python 3.x

from http.server import HTTPServer

from http.server import SimpleHTTPRequestHandler

httpd I HTTPServer(('127.0.0.1', 8000), SimpleHTTPRequestHandler)
httpd.serve_forever()

This script will create a HTTP server that listens on port 8000. If a file named
“index.html” exists near the python script, it’s content will be server when
127.0.0.l :8000 is accessed from the browser.

We will discuss more about these servers after we learn about classes.

***************Ending Page***************



***************Beginning Page***************
***************page number:23**************
The default behavior for such a server is to produce a directory listing for the root
where the script is.

However, if within the root a index.html file is found, that file will be loaded and send to
the client.

These modules can also be executed automatically from the command line as follows:

o Python 3: python -m http.server 9000

The last parameter from the command line is the port number.

***************Ending Page***************


