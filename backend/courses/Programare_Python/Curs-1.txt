***************Beginning Page***************
***************page number:1**************
\I\I\I\I\I\/\/\
1 \ﬂ\ﬂ\ﬂ\ﬂ\ﬂ\ﬂ\l
\ ﬂ\ﬂ\ﬂ\ﬂ\ﬂ\ﬂ\ﬂ \
1 \ﬂ\ﬂ\ﬂ\ﬂ\ﬂ\ﬂ\l
\ ﬂ\ﬂ\ﬂ\ﬂ\ﬂ\ﬂ\ﬂ \
/\1\1\/\1\1\1\,
PROGRAMMING m PYTHON |

***************Ending Page***************

***************Beginning Page***************
***************page number:2**************
Final grade tor the Python course is computed using Gauss over the total points
accumulated.
One can accumulate a maximum of 300 of points:
' A lab proiect (developed between week 8 and week l4) - up to lOO points. Proiects selection will be
decided in week 8
' Lab activity - maximum of 8 points / lab (starting with lab2) => 8 x 6 = 48 points
' Lab test (week 8) - up to 52 points
' Maximum lOO points at the final examination (course)
The minimum number of points that one needs to pass this exam:
' 120 points summed up from all tests
' 3O points minimum for each category (course, proiect and lab activity + lab test)
Course page: https:[ [sites.google.com[site [tiipythonprog ramming Z

***************Ending Page***************


***************Beginning Page***************
***************page number:3**************
| H ISTO RY
1980 — first design of Python language loy Guido voln Rossum
1989 — implementation of Python longuolge storted
2000 — Python 2.0 (gorbolge collector, Unicode support, etc)
2008 — Python 3.0
2020 — Python 2 is discontinued
Current Versions:
‘z. 2.x e 2.7.18 (20.Apr.2020)
‘z. 3.x e 3.10.7 (6.5ep.2022)
Downloold python from: https:[ [www.pythonprg
Help ovoiloble olt : https:[ [docs.python.org[3[
Python coding style: https:[ [www.pythonorg[devlpepslpep-0008Z#id32

***************Ending Page***************

***************Beginning Page***************
***************page number:4**************
> Companies that are using Python: Google, Reddit, Yahoo, NASA, Red Hat, Nokia, IBM, etc

> TIOBE lndex for September 2021 9 Python is ranked no. 2 (Sep. 2021) Q
https://www.tioloe.com/tiobe-index/python/

> Default for Linux and Mac OSX distribution (both 2.x and 3.x versions)

> Open source

> Support for almost everything: web development, mathematical complex computations,
graphical interfaces, etc.

> .Net implementation 9 lronPython ( http:[[iron|c_>1thon.net ) for 2.x version

***************Ending Page***************


***************Beginning Page***************
***************page number:5**************
| CHARACTERISTICS

‘9 Un-nolmed Type variable

‘9 Duck Typing 9 Type consTrolins ore noT checked during compilolTion phase

‘9 Anonymous TuncTions (lambda expressions)

‘9 Design for reoololbiliTy (whiTe-spolce inolenTolTion)

‘9 ObiecT-orienTed programming supporT

‘9 ReflecTion

‘9 MeTolprogromming 9 The orbiIiTy To modify iTsehc olnol creoTe new Types during
execuTion

***************Ending Page***************

***************Beginning Page***************
***************page number:6**************
Beautiful is better than ugly. Errors should never pass silently. lf the implementation is hard to
explain, it's a load idea.
Explicit is better than implicit. ln the face of ambiguity, refuse the
_ _ temptation to guess. lf the implementation is easy to
Slmple |s better than complex. explain, it may be a good idea.
_ There should be one-- and

Complex 'S better than preferably only one --obvious way Namespaces are one honking
compllcated. to do it. great idea -- let's do more of

. rh !
Flat IS better than nested. Although that way may not be ose
Sparse is better than dense. obVIous at f|rst unless you re Dutch.
Readability counts. Unless expl|c|tly Sllenced.

. | . Now is better than never.
Speclal cases arent speclal enough
to break the rules. Although never is often better than

>x< - >x<

Although practicality beats purity. r|ght now.

***************Ending Page***************


***************Beginning Page***************
***************page number:7**************
| PYTHON EDITORS
Notepcd++ 9 httgs:[ [notegad-Qlus-Qlusorg[downloadst7.7.1 Z
Komodo IDE 9 httg:[ [komooloidexom
PyCha rm 9 htth:[ [www.ietbrainscom Z gycholrmg
VSCode 9 httgs:[ Zmarkefglaceyisuol|sTudio.com1ifems?ifemNameIdoniayamonnqufrhon
Eclipse 9 Mtg! [www.licligsesom
PyDev 9 https:[ [wikipfrhomorg [moin Z PyDev
WingWolre 9 Mtg! [wingwaresom
PyZO 9 h’r’r|c_>:[ [www.gyzoorg
Thonny 9 http:[ [thonn1.cs.ut.ee

***************Ending Page***************

***************Beginning Page***************
***************page number:8**************
| FIRST PYTHON PROGRAM
C/C++
void main(void)
}
Python3.x

***************Ending Page***************


***************Beginning Page***************
***************page number:9**************
Variable are defined and use as you need Them.
PyThon 3.x

X = 10 #X is a number

s = "a string” #s is a string

b = True #b is a Boolean value
Variables don’T have a fixed Type — during The execuTion of a program, a variable
can have mulTiple Types.

PyThon 3.x

X = 10

#do some operations with X

X = "a string”

#X is now a string

***************Ending Page***************

***************Beginning Page***************
***************page number:10**************
Python 3.x

X I lO #X is an integer (32 bit precision)

X = 999999999999999999999999999999999 #X is a long (unlimited precision)
X I 1.123 #X is an float

X I 1.2j #X is a compleX number

X I True #X is a bool ( a special case of integer )

X I None #X is a NoneType(the closest C/C++ equivalent is NULL/nullptr)
Python 3.x Output

print (X, type (X))

***************Ending Page***************


***************Beginning Page***************
***************page number:11**************
Arithmetic operators (+, - , *, /, °/o ) — similar to C like languages
Python 3.x
X I 10+20*3 #X will be an integer with value 70
X I 10+20*3.0 #X will be a float with value 70.0
Operator ** is equivalent with the pow function from C like languages
Python 3.x
X I 2**8 #X will be an integer with value 256
X I 2**8.l #X will be a float with value 274.374
A number can be casted to a specific type using int or float method
Python 3.x
X = int(10.123) #X will be an integer with value 10
X = float(10) #X will be a float with value 10.0

***************Ending Page***************

***************Beginning Page***************
***************page number:12**************
Division operator has a different behavior in Python 2.x and Python 3.x

Python 3.x

X = 10.0/3 #X will be a float with value 3.3333

X = 10.0%3 #X will be a float with value l.O
Division between integers is interpreted differently

Python 2.x Python 3.x

X = lO/3 X = lO/3

#X is 3 (int) #X is 3.33333 (float)
A special operator exists // that means integer division (for integer operators)

Python 3.x

X I l0.0//3 #X will be a float with value 3.0

X I ll.9//3 #X will be a float with value 3.0

***************Ending Page***************


***************Beginning Page***************
***************page number:13**************
Bit-wise operators (& , | , A , <<, >> ). In particular & operator can be used to make
sure that a behavior specific to a C/C++ operation can be achieve
C/C++ Python 3.x
void main(void> x I OXFFFFFFFE
{
unsigned int X; y = 123
X I OXFFFFFFFE; y = (y + y) & OxFF
X I X + X,’
unsigned char y;
y I 123;
y = y + y;
}

***************Ending Page***************

***************Beginning Page***************
***************page number:14**************
| NUMERICAL OPERATIONS

Compare operators ( >, < , >=, <=, ==, != ). C/C++ like operators && and | | are
replaced with ﬂ and g Similar “! operator" is replaced with n_ot keyword. However,
unlike C/C++ languages Python supports a more mathematical like evaluation.

Python 3.x

#identical to (10<20) and (20>15)

All of these operators produce a bool result. There are two special values (keywords)
defined in Python tor constant bool values:

‘9 True

‘9 False

***************Ending Page***************


***************Beginning Page***************
***************page number:15**************
Python 3.x

s I "a stringlgwith lines”

s = 'a stringlgwitn lines’

s = r”a string\nwithout any line”

s = r’a string\nwithout any line’

Python 3.x Python 3.x

s = ”””multi—line s = ”’multi—line
string string

II II II I I I

***************Ending Page***************

***************Beginning Page***************
***************page number:16**************
Strings in python have support for different types of formatting — much like in C/C++
language.

Python 3.x

s = "Name: %8s Grade: §§"%("Ion",10)

lf only one parameter has to be replaced, the same expression can be written in a
simplified form:

Python 3.x

s I "Grade: §§"%10

Two special keywords s_tr and repr can be used to convert variables from any type to
string.

Python 3.x

s = str (lO) #S is "10”

s = repr (10.25) #s is "10.25"

***************Ending Page***************


***************Beginning Page***************
***************page number:17**************
Formatting can be extended by adding naming to formatting variables.

Python 3.x

s I "Name: Grade: %(student oorade)' % {"name":"Ion" ,

"student_grade":10}

A special character “\” can be place at the end of the string to concatenate it with
another one from the next line.

Python 3.x

s I "Python"\

"Exam“

#S is ”PythonExam”

***************Ending Page***************

***************Beginning Page***************
***************page number:18**************
Starting with version 3.6, Python also supports formatted string literals. These are strings
preceded by an “f” or “F” character
Python 3.6+
a I 100
s I f"A I {a}" #s will be ‘A = 100’
s I f"A I {a+10}" #5 will be ‘A = 110'
s I f"A I {float(a)}" #s will be ‘A = 100.0’
s I f"A I {float(a):10}" #s will be ‘A I 100.0’ (preceded by spaces)
s I f"A I {a#:0x}" #s will be ‘A I 0x64’
There are some special characters that can be used to trigger a string representation for an
obiect: !s (means str), !r (means repr), !a (means ascii)
More on this topic: https:[ [docs.python.org[3 [tutorial [inputoutputhtml

***************Ending Page***************


***************Beginning Page***************
***************page number:19**************
Strings also support different ways to access characters or substrings

Python 3.x

s I "PythonExam" #s is “PythonExam”

s[l] #Result is "y" (second character, first index is O)

s[—1] #Result is ﬁW”'§ “PythonExaE”(last character)

s[—2] #Result is ”aW'-§ “PythonExEm”

s[:3] #Result is ”E@d¥"§ “PzthonExam”(first 3 characters)

s[4:] #Result is ”onExam”'9'“PythonExam”
#(all the characters starting from the 5th character
#of the string until the end of the string)

s[3:5] #Result is ”tmf"§ “PythgnExam” (a substring that
#starts from the 3m1character until the 5th one)

s[2:—4] #Result is “Ummf"§ “PythonExam”

***************Ending Page***************

***************Beginning Page***************
***************page number:20**************
Strings also support o variety of operators
Python 3.x
s = "Python"+"Exam"#s is “PythonExam”
s = "A"+"12"*3 #s is “A121212”'9'”12” is multiplied 3 times
"A" in "Python" #Result is False (”A” string does not exists in
# "Python" string)
"A" not in "ABC" #Result is False (”A” string exists in ”ABC”)
len (s) #Result is lO (lO characters in “PythonExam” string)
And slicing:
Python 3.x
s = "PythonExam" #s is “PythonExam”
s[l:7:2] #Result is ”yhn” (Going from index l, to index 7
#with step 2 (l,3,5)'§ PXtEoEExam

***************Ending Page***************


***************Beginning Page***************
***************page number:21**************
Every string is considered a class and has member functions associated with it.
These methods are accessible through “." operator.
‘9 Str.startswith(“...”) 9 checks it a string starts with another one
‘9 Str.endswith(“...”) 9 checks it a string ends with another one
‘9 Str.replace(toFind,replace,[count]) 9 returns a string where the substring <toFind> is replaced by
substring <replace>. Count is a optional parameter, if given only the firs <count> occurrences are
replaced
‘9 Str.index(toFind) 9 returns the index of <toFind> in current string
‘9 Str.rindex(toFind) 9 returns the right most index of <toFind> in current string
‘9 Other functions: lower(), upper(), strip(), rstrip(), lstrip(), format(), isalpha(), isupper(), islower(),
find(...), count(...), etc

***************Ending Page***************

***************Beginning Page***************
***************page number:22**************
Strings splitting via .split function

Python 3.x

S I "ABI ICDI IEFI IGH"

s.split("||")[2] #Result is "EF". Split produces an array of 4
#elements AB,CD,EF and GH. The second element is EF

s.split("||")[—l] #Result is "GH".

s.split("||",l)[O] #Result is "AB". In this case the second parameter
#tells the function to stop after <count> (in this
#case l) splits. Split produces an array of 2
#elements AB and CDllEFllGH. The fist element is AB

s.split("||",2)[2] #Result is "EF||GH". Split produces an array of 3
#elements AB, CD and EFllGH.

Strings also support another function .rsplit that is similar to .split function with the only

difference that the splitting starts from the end anol not from the beginning.

***************Ending Page***************


***************Beginning Page***************
***************page number:23**************
| BUILT-IN FUNCTIONS FOR STRINGS

Python has several build-in functions design to work characters and strings:

‘9 chr (charCode) 9 returns the string formed from one character corresponding to the
code charCode. charCode is a Unicode code value.

‘9 ord (character) 9 returns the Unicode code corresponding to that specific character

‘9 hex (number) 9 converts a number to a lower-case hex representation

‘9 oct (number) 9 converts a number to a base-8 representation

‘9 format 9 to format a string with different values

***************Ending Page***************

***************Beginning Page***************
***************page number:24**************
Python is heavily based on indentation to express o| complex instruction
C/C++ Python 3.x
if a>bz
{ a = a + b
a I a + b b = b + a
b I b + a
} Python 3.x
a I a + b
b I b + a
Complex instruction —

***************Ending Page***************


***************Beginning Page***************
***************page number:25**************
While python coding style recommends using indentation, complex instruction can be
written in a different way as well by using a semicolon and add simple expression on
the same line:
For examle, the followin exression:
Python 3.x
if a>bz Recommended Format
a I a + b for readability
b I b + a
b = a * b
Can also be written as follows:
Python 3.x
—m_

***************Ending Page***************

***************Beginning Page***************
***************page number:26**************
Python 3.x Python 3.x
complex or simple statement complex or simple statement
elif expression:
PY""°" 3-X complex or simple statement
if expression; elif expression:
complex or simple statement compl€X OI Simpl€ statement
else: elif expression:
complex or simple statement complQX OI simple Statgmgnt
Python 3.x else:
if expression: complex or simple statement
complex or simple statement
elif expression:
complex or simple statement

***************Ending Page***************


***************Beginning Page***************
***************page number:27**************
Python (until 3.10 version) does not have cl special keyword to express o switch
statement. However, it-elit-else keywords com be used to describe the some behavior.
C/C++ Python 3.x
switch (var) { if var I: value_l:
case value_l: complex or simple statement
statements; elif var I: value_2:
break; complex or simple statement
case value_2: elif var I: value_3:
statements; complex or simple statement
break; .u
... else: #default branch from switch
default: complex or simple statement
statements;
break; Python 3.10 match...case statements will be
} discussed in course no. 2

***************Ending Page***************

***************Beginning Page***************
***************page number:28**************
C/C++ Python 3.x

while (expression) { a I 3
statements; while a > O:

} a I a — l

print (a)

Python 3.x else:

while expression: print ("Done")
complex or simple statement

Python 3.x Ouipuf

while expression: 2
complex or simple statement 1

else: Q
complex or simple statement Dome

***************Ending Page***************


***************Beginning Page***************
***************page number:29**************
The break keyword coin be used to exit the while loop. Using the break keyword will
not move the execution to the else stoltement if present !
Python 3.x
a = 3
while a > O:
a = a _ 1 Output
if a==2z break
else:
print ("Done")

***************Ending Page***************

***************Beginning Page***************
***************page number:30**************
Similarly, The conTinue keyword com be used To swiTch The execution from The while
loop To The poinT where The while condiTion is TesTed.
PyThon 3.x OquuT
a I 10 9
while a > O:
7
a I a — l 5
if a % 2 I: O: continue
. 3
prlnt (a)
i
else: D
print ("Done") one

***************Ending Page***************


***************Beginning Page***************
***************page number:31**************
Python does not have a special keyword to express a do while statement. However, using
the while...else statement a similar behavior can be achieved.
C/C++ Python 3.x
do { while test_condition:
statements; statements Same
} else: Statements
while (test_condition) ; statements
EXCIm|ez
C/C++ Python 3.x
do { while X > 10:
X = X — 1; X = X — 1
} else:
while (X>10); X=X—1

***************Ending Page***************

***************Beginning Page***************
***************page number:32**************
For statement is different in Python that the one mostly used in C/C++ like languages.
lt resembles more a toreach statement (in terms that it only iterates through a list of obiects,
values, etc). Besides this, all of the other known keywords associated with a for (break and
continue) work in a similar way.
Python 3.x
for <list_of_iterators_variables> in <list>z
complex or simple statement
Python 3.x
for <list_of_iterators_variables> in <list>z
complex or simple statement
else:
complex or simple statement

***************Ending Page***************


***************Beginning Page***************
***************page number:33**************
A special keyword range that can be used to simulate 0| C/C++ like behavior.
Python 3.x Output
for index in range (0,3): ?
print (index) 2
Python 3.x Output
for index in range (O, 3) : O
print (index) i
else: 2
print ("Done") Done

***************Ending Page***************

***************Beginning Page***************
***************page number:34**************
range operator in Python 3.x returns an iterealole obiect
range is declared as follows range (start, end, [step] )
Python 3.x OUlPUl
for index in range (O, 8, 3): g
print (index) 6
for statement will be further discuss in the course no. 2 after the concept of list is
presented.

***************Ending Page***************


***************Beginning Page***************
***************page number:35**************
| FUN (Tl 0 NS
Functions in P thon are defined usin def ke word
Python 3.x
complex or simple statement
Parameters can have a default value.
Python 3.x
complex or simple statement
And finally, return keyword can be used to return values from a function. There is no
notion of void function (similar cu C/C++ language) 9 however, this behavior can be
duplicated by NOT using the return keyword.

***************Ending Page***************

***************Beginning Page***************
***************page number:36**************
Example of a function that performs a simple arithmetic operation
Python 3.x
def myFunc (X, y, z):
return X * lOO + y * lO + z
print ( myFunc (1,2,3) ) #OutputleB
Parameters can be explicitly called
Python 3.x
def sum (X, y, z):
return X * lOO + y * lO + z
print ( sum (2:1, y:2,X:3) ) #Outputz321

***************Ending Page***************


***************Beginning Page***************
***************page number:37**************
Function parameters can have default values. Once a parameter is defined using a
default value, every parameter that is declared after it should have default values.
Python 3.x
def myFunc (X, y=6, z=7):

return x * 100 + y * 10 + z
print (myFunc (l) ) #Outputzl67
print (myFunc (2,9) ) #Outputz297
print (myFunc (z=5,x=3) ) #Output:365
print (myFunc (4,z=3) ) #Outputz463
print (myFunc (z=5) ) #ERROR: missing x
Python 3.x
def myFunc (X=2, y, z=7):

return X * lOO + y * 10 + z

***************Ending Page***************

***************Beginning Page***************
***************page number:38**************
A function can return multiple values at once. This will also be discussed in course no. 2
along with the concept of tuple.
Python also uses global keyword to specify within a function that a specific variable is in
fact a global variable.
Python 3.x Python 3.x
X = lO X = lO
def ModifyX (): def ModifyX ():

X = 100 global X
ModifyX () X = 100
print ( X ) #Outputle ModifyX ()

print ( X ) #Output:100

***************Ending Page***************


***************Beginning Page***************
***************page number:39**************
Functions can have a variable — length parameter ( similar to the from C/C++).
lt is preceded by “*” operator.
Python 3.x
def multi_sum (*1ist_of_numbers):

s = O

for number in 1ist_of_numbers:

s += number

return s
print ( multi_sum (1,2,3) ) #Outputz6
print ( multi_eum (1,2) ) #Output:3
print ( multi_sum (1) ) #Outputzl
print ( multi_sum () ) #OutputzO

***************Ending Page***************

***************Beginning Page***************
***************page number:40**************
Functions can reTurn values of differenT Types. In This case you should check The Type
before using The reTurn vcllue.
PyThon 3.x
def myFunction(x):
if x>O:
return "Positive"
elif x<Oz
return "Negative"
else:
return O
result I myFunction (0)
if type(result) is int:
print("Zero")
else:
print(result)

***************Ending Page***************


***************Beginning Page***************
***************page number:41**************
Functions ccin olso contciin cinother function embedded into their body.
Tholt function coln be used to compute results needed in the first function.
Python 3.x
def myFunction(x):
def add (X,y):
return X+y
def sub (X, y) :
return X—y
return add(x,x+1) + sub(x,2):
print (myFunction (5))
The previous code will print l4 into the screen.

***************Ending Page***************


***************Beginning Page***************
***************page number:42**************
Functions can also be recursive (see the following implementation for computing a
Fibonacci number)
Python 3.x
def Fibonacci (n):
if n == 1:
return 1
elif n == 2:
return 1
else:
return Fibonacci (n-1) + Fibonacci (n-2)
print ( Fibonacci (10) )
The previous coole will print 55 into the screen.

***************Ending Page***************


***************Beginning Page***************
***************page number:43**************
It is recommended to add a short explanation for every defined function by adding a
multi-line string immediately after the function definition
httgs:[ [www.gythonorg [devZQerggeQ-0257Z #idi 5
Python 3.x
def Fibonacci (n):
Computes the n-th Fibonaci number using recursive calls
if n == l:
return l
elif n == 2:
return l
else:
return Fibonacci (n-l) + Fibonacci (n-2)

***************Ending Page***************


***************Beginning Page***************
***************page number:44**************
‘9 Create a file with the extension .py
‘9 lf you run on a Linux/OSX operation system, you can add the following line at the
beginning of the file (the first line of the file):
‘9 it ! /usr/bin/python3 -) for python 3
‘9 # I /usr/bin/python 9 for python (current version — usually 2)
‘9 These lines can be added for windows as well (“#" character means comment in
python so they don’t affect the execution of the file too much
‘9 Write the python code into the file
‘9 Execute the file.
‘9 You can use the python interpreter directly (usually C:\Python27\python.exe or
C:\Python3l O\python.exe for Windows) and pass the file as a parameter
‘9 Current distributions of python make some associations between .py files and their interpreter. In this
cases you should be able to run the file directly without using the python executable.

***************Ending Page***************


