[{content={parts=[{text=--FlashCardSeparator--
Single
--InteriorSeparator--
Which module is considered the newer, class-based approach to threading in Python?
--InteriorSeparator--
threading
--InteriorSeparator--
easy
--InteriorSeparator--
2
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following are synchronization objects available in the `threading` module?
--InteriorSeparator--
(right) Lock
(right) Semaphore
(wrong) Queue
(wrong) Dictionary
--InteriorSeparator--
medium
--InteriorSeparator--
2, 16
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the primary purpose of the `run()` method when subclassing the `threading.Thread` class?
--InteriorSeparator--
It contains the code that will be executed when the thread starts.
--InteriorSeparator--
easy
--InteriorSeparator--
12
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What methods are typically implemented when deriving from the Thread class?
--InteriorSeparator--
(right) run()
(right) __init__()
(wrong) start()
(wrong) join()
--InteriorSeparator--
medium
--InteriorSeparator--
12
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does the `join()` method of a `Thread` object do?
--InteriorSeparator--
Waits for the thread to finish its execution.
--InteriorSeparator--
easy
--InteriorSeparator--
12
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What are the functions of a Lock object?
--InteriorSeparator--
(right) acquire()
(right) release()
(wrong) notify()
(wrong) wait()
--InteriorSeparator--
medium
--InteriorSeparator--
17
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
If `Lock.release()` is called on an unlocked lock, what happens?
--InteriorSeparator--
An error will be raised.
--InteriorSeparator--
medium
--InteriorSeparator--
17
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What synchronization objects support working with the `with` keyword?
--InteriorSeparator--
(right) Lock
(right) RLock
(wrong) Event
(wrong) Barrier
--InteriorSeparator--
medium
--InteriorSeparator--
17, 20
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is a reentrant lock also known as?
--InteriorSeparator--
RLock
--InteriorSeparator--
easy
--InteriorSeparator--
16
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What happens if the number of acquire queries is not the same as the number of release calls within the same thread when using an RLock?
--InteriorSeparator--
You risk keeping the lock unlocked.
--InteriorSeparator--
hard
--InteriorSeparator--
20
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What methods does a Condition object have?
--InteriorSeparator--
(right) wait()
(right) notify()
(wrong) start()
(wrong) clear()
--InteriorSeparator--
medium
--InteriorSeparator--
23
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does the `notify()` method do on a Condition object?
--InteriorSeparator--
Signals one waiting thread that the condition is met.
--InteriorSeparator--
medium
--InteriorSeparator--
23
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does a Semaphore provide access to?
--InteriorSeparator--
A limited number of threads to a resource.
--InteriorSeparator--
medium
--InteriorSeparator--
26
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What functions does a Semaphore have?
--InteriorSeparator--
(right) acquire
(right) release
(wrong) set
(wrong) clear
--InteriorSeparator--
medium
--InteriorSeparator--
26
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What method can stop a Timer?
--InteriorSeparator--
cancel()
--InteriorSeparator--
medium
--InteriorSeparator--
28
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What are the functions available on an Event object?
--InteriorSeparator--
(right) set
(right) clear
(wrong) acquire
(wrong) release
--InteriorSeparator--
medium
--InteriorSeparator--
29
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does the `set()` method do in the Event Object?
--InteriorSeparator--
Signals the current state of the event
--InteriorSeparator--
easy
--InteriorSeparator--
29
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which are the functions available in Barriers?
--InteriorSeparator--
(right) wait
(wrong) lock
(right) reset
(wrong) unlock
--InteriorSeparator--
medium
--InteriorSeparator--
31
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does the `abort()` method do on a Barrier object?
--InteriorSeparator--
Aborts current barrier
--InteriorSeparator--
medium
--InteriorSeparator--
31
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
On which Python version are Barriers available?
--InteriorSeparator--
Python 3
--InteriorSeparator--
easy
--InteriorSeparator--
31
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What happens to the program if an exception is not caught in a different thread than the main thread?
--InteriorSeparator--
The program will not stop
--InteriorSeparator--
hard
--InteriorSeparator--
10
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the purpose of allocate_lock() function?
--InteriorSeparator--
Allocate a lock object for thread synchronization
--InteriorSeparator--
hard
--InteriorSeparator--
4
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
How can locks be used?
--InteriorSeparator--
(right) with with statement
(right) to wait for a thread to finish
(wrong) to reset a thread
(wrong) to start a thread
--InteriorSeparator--
hard
--InteriorSeparator--
5, 6
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is the effect of calling lock.acquire() twice in the same thread without releasing in between when using a regular lock?
--InteriorSeparator--
(wrong) It unlocks the lock
(wrong) It raises an exception
(right) It leads to a deadlock
(wrong) It creates a new lock
--InteriorSeparator--
hard
--InteriorSeparator--
8
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In the context of threading, what does "thread-safe" mean?
--InteriorSeparator--
It refers to objects that can be safely accessed and modified by multiple threads concurrently without causing data corruption or unexpected behavior.
--InteriorSeparator--
hard
--InteriorSeparator--
4
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is the difference between `_thread` and `threading` modules?
--InteriorSeparator--
(wrong) `_thread` is newer than `threading`
(right) `threading` is based on a class model, while `_thread` provides low-level methods
(wrong) `_thread` is preferred for Python 3 only
(right) `threading` is recommended for code compatibility between Python 2 and Python 3
--InteriorSeparator--
hard
--InteriorSeparator--
2
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Why is it important to call `Thread.__init__(self)` in the constructor of a subclassed Thread class?
--InteriorSeparator--
To properly initialize the thread object and ensure it inherits necessary attributes and methods from the base class.
--InteriorSeparator--
hard
--InteriorSeparator--
12
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What does the timeout parameter in `Lock.acquire(timeout=-1)` mean?
--InteriorSeparator--
(right) It specifies how many seconds the lock has to wait until it is acquired
(wrong) It specifies the number of threads that can access the lock
(wrong) It disables the lock for the specified time
(wrong) It is required and cannot be omitted.
--InteriorSeparator--
hard
--InteriorSeparator--
17
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What potential issue can arise when using threading with shared resources without proper synchronization mechanisms?
--InteriorSeparator--
Race conditions and data corruption.
--InteriorSeparator--
hard
--InteriorSeparator--
18
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is a deadlock in the context of threading?
--InteriorSeparator--
(right) A situation where two or more threads are blocked indefinitely, waiting for each other to release resources.
(wrong) A situation when a single thread crashes the entire program
(wrong) A mechanism that prevents race conditions
(wrong) A thread that is running indefinitely
--InteriorSeparator--
hard
--InteriorSeparator--
21
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the purpose of the `wait_for` method in a Condition object?
--InteriorSeparator--
It waits until a condition becomes true.
--InteriorSeparator--
medium
--InteriorSeparator--
23
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What are the advantages of using a Timer object in threading?
--InteriorSeparator--
Execute code after a specific period.
--InteriorSeparator--
medium
--InteriorSeparator--
28
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the role of Event objects in synchronizing threads?
--InteriorSeparator--
To signal and wait for specific events or conditions to occur between threads.
--InteriorSeparator--
hard
--InteriorSeparator--
29
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the main purpose of using Barrier objects in threading?
--InteriorSeparator--
To synchronize multiple threads, ensuring that they all reach a specific point in their execution before proceeding further.
--InteriorSeparator--
hard
--InteriorSeparator--
31
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What does the `parties` attribute of a Barrier object indicate?
--InteriorSeparator--
(right) The number of threads that must pass the barrier.
(wrong) The number of threads currently waiting at the barrier.
(wrong) The maximum number of threads allowed to use the barrier.
(wrong) The time each thread has to wait at the barrier.
--InteriorSeparator--
medium
--InteriorSeparator--
31
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
If a Barrier object is initialized with a `parties` value of 3, but only 2 threads call `wait()` on it, what will happen?
--InteriorSeparator--
The two threads will block indefinitely, waiting for the third thread to arrive at the barrier.
--InteriorSeparator--
hard
--InteriorSeparator--
35
--FlashCardSeparator--
}], role=model}, finishReason=STOP, avgLogprobs=-0.17256767565285147}]