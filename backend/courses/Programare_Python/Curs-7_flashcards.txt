[{content={parts=[{text=--FlashCardSeparator--
Single
--InteriorSeparator--
What is the name of the folder created after the execution of a Python script that imports a module?
--InteriorSeparator--
_pycache_
--InteriorSeparator--
easy
--InteriorSeparator--
2
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What file extension is found within the _pycache_ folder?
--InteriorSeparator--
.pyc
--InteriorSeparator--
easy
--InteriorSeparator--
2
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What happens when a module is loaded in Python?
--InteriorSeparator--
(right) Any code residing directly in the module (not within a function or class) is executed.
(wrong) Only the defined functions and classes are loaded into memory.
(right) The main code of a module is only executed once, the first time the module is loaded.
(wrong) An error is raised if the module contains any executable code outside of functions or classes.
--InteriorSeparator--
medium
--InteriorSeparator--
3
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What error is raised if a module is not located in the same folder as the script trying to import it?
--InteriorSeparator--
ImportError: No module named 'MyModule'
--InteriorSeparator--
medium
--InteriorSeparator--
4
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
How can you specify an alternate location for a module in Python?
--InteriorSeparator--
By modifying the `sys.path` list.
--InteriorSeparator--
medium
--InteriorSeparator--
5
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What function is used to list all the attributes and methods of a module?
--InteriorSeparator--
dir()
--InteriorSeparator--
easy
--InteriorSeparator--
6
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Which attribute gives the full path of the file that corresponds to the module?
--InteriorSeparator--
__file__
--InteriorSeparator--
medium
--InteriorSeparator--
7
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What attribute stores the name of the module?
--InteriorSeparator--
__name__
--InteriorSeparator--
easy
--InteriorSeparator--
7
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What attribute stores the name of the package a module belongs to?
--InteriorSeparator--
__package__
--InteriorSeparator--
medium
--InteriorSeparator--
7
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
How can you access the docstring of a module using an alias?
--InteriorSeparator--
m.__doc__ (if the module is imported as `import MyModule as m`)
--InteriorSeparator--
easy
--InteriorSeparator--
8
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What keyword is used to display the docstring and other information about a module?
--InteriorSeparator--
help()
--InteriorSeparator--
easy
--InteriorSeparator--
9
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
If a Python script is executed directly, what is the value of the `__name__` parameter?
--InteriorSeparator--
__main__
--InteriorSeparator--
medium
--InteriorSeparator--
11
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is the purpose of the `if __name__ == "__main__":` block?
--InteriorSeparator--
(right) It allows code to be executed only when the script is run directly.
(wrong) It prevents the code from being executed when the script is imported as a module.
(right) It defines the main entry point of the program.
(wrong) It is used to define the global variables of the module.
--InteriorSeparator--
medium
--InteriorSeparator--
12
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the file that must exist in each folder for it to be considered a Python package or sub-package?
--InteriorSeparator--
__init__.py
--InteriorSeparator--
easy
--InteriorSeparator--
13
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the purpose of the `__init__.py` file in a Python package?
--InteriorSeparator--
It serves as an entry point for the package/sub-package.
--InteriorSeparator--
medium
--InteriorSeparator--
13
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What happens when you import a package in Python?
--InteriorSeparator--
(right) The `__init__.py` file in that package, and any parent packages, is executed.
(wrong) Only the specified modules within the package are loaded.
(wrong) The package folder is added to the Python path.
(wrong) All modules within the package are automatically imported.
--InteriorSeparator--
medium
--InteriorSeparator--
14
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
How do you import a specific function from a module within a package?
--InteriorSeparator--
`import MathOps.Simple.Arithmetic` then call with `MathOps.Simple.Arithmetic.Add(2,3)`
--InteriorSeparator--
medium
--InteriorSeparator--
20
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
How do you import a module from a package using an alias?
--InteriorSeparator--
`from MathOps.Simple import Arithmetic as a`
--InteriorSeparator--
easy
--InteriorSeparator--
20
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Why does `from MathOps.Simple import *` fail without the `__all__` variable defined?
--InteriorSeparator--
Because Python needs to know which modules to import when using the `*` wildcard.
--InteriorSeparator--
hard
--InteriorSeparator--
21
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the purpose of the `__all__` variable in a Python package?
--InteriorSeparator--
It specifies a list of modules that should be imported when using `from <package> import *`.
--InteriorSeparator--
medium
--InteriorSeparator--
22
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Where should you copy a module or package to make it available to all scripts on the system?
--InteriorSeparator--
On the Python search path, typically in the `<PythonFolder>\Lib` directory (Windows) or `/usr/lib/<PythonVersion>` (Linux).
--InteriorSeparator--
medium
--InteriorSeparator--
24
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What library is used to dynamically import a module in Python?
--InteriorSeparator--
importlib
--InteriorSeparator--
easy
--InteriorSeparator--
25
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What function from the `importlib` library is used to import a module?
--InteriorSeparator--
importlib.import_module()
--InteriorSeparator--
easy
--InteriorSeparator--
25
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What function from the `importlib` library is used to reload a module that has already been loaded?
--InteriorSeparator--
importlib.reload()
--InteriorSeparator--
easy
--InteriorSeparator--
25
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What keyword is used to dynamically compile and execute Python code?
--InteriorSeparator--
exec()
--InteriorSeparator--
medium
--InteriorSeparator--
26
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What are the three arguments of the `exec()` function?
--InteriorSeparator--
`code`, `globals` (optional), and `locals` (optional)
--InteriorSeparator--
hard
--InteriorSeparator--
26
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is a potential security risk of using the `exec()` function?
--InteriorSeparator--
It allows Python code to obfuscate or modify itself during runtime.
--InteriorSeparator--
hard
--InteriorSeparator--
27
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Why is using `exec()` considered dangerous?
--InteriorSeparator--
(right) It can introduce security vulnerabilities if the code executed is from an untrusted source.
(wrong) It can slow down program execution significantly.
(wrong) It is not supported in all Python versions.
(right) It can make code difficult to understand and debug.
--InteriorSeparator--
hard
--InteriorSeparator--
27
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Explain how `exec()` can be used to create a function dynamically.
--InteriorSeparator--
By passing a string containing the function definition to the `exec()` function.
--InteriorSeparator--
hard
--InteriorSeparator--
27
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
How can the `exec` function be used to achieve multiple layers of code obfuscation?
--InteriorSeparator--
By having `exec` decode a string that contains more `exec` statements.
--InteriorSeparator--
hard
--InteriorSeparator--
29
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Explain the role of `ord()` and `chr()` in simple code obfuscation using `exec`.
--InteriorSeparator--
`ord()` converts a character to its ASCII number, and `chr()` converts an ASCII number back to a character, allowing character manipulation for encoding.
--InteriorSeparator--
hard
--InteriorSeparator--
30
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Explain the sample usage of a for loop when trying to run an exec statement.
--InteriorSeparator--
Characters are itterated through and assigned some operation through the char function and concatenated onto a final string to be passed to exec.
--InteriorSeparator--
hard
--InteriorSeparator--
31
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following is true about modules in Python?
--InteriorSeparator--
(right) A Python script can be used as a module.
(wrong) Modules must be located in the same directory as the script that imports them.
(right) Importing a module executes its main code.
(wrong) Modules cannot contain functions or classes.
--InteriorSeparator--
medium
--InteriorSeparator--
2
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What happens if you try to access a module that has not been imported?
--InteriorSeparator--
A NameError is raised
--InteriorSeparator--
medium
--InteriorSeparator--
21
--FlashCardSeparator--
}], role=model}, finishReason=STOP, avgLogprobs=-0.17287044921109967}]