***************Beginning Page***************
***************page number:1**************
\/\/\/\/\/\/\I\
1W
‘W
1W
‘ﬂ\ﬂ\ﬂ\ﬂ\ﬂ\ﬂ\ﬂ\
I\I\I\I\l\l\l\l
PROGRAMMING IN PYTHON | $311M“

***************Ending Page***************

***************Beginning Page***************
***************page number:2**************
Any Python code (python script) can be used as a module.
Python 3.x Python 3.x
File: M yModule.py File: test.py
def Sum(X,y) : import MyModule Output

return X+y

print (MyModule . Sum(lO, 20))

Both files test.py and MyModule.py are located in the same folder.
After the execution of test.py a folder with the name _pycache_ that contains a file
called MyModuIe.cpython-37.pyc will appear in the same folder (for Python 3.7) 9
the version will be different for different versions of Python 3 (pyc I python compiled
files)

***************Ending Page***************


***************Beginning Page***************
***************page number:3**************
Any Python code (python script) can be used as a module.

Python 3.x Python 3.x

File: MyModule.py File: test.py

def Sum(X,y): import MyModule

return X+y
print ("MyModule loaded") print (MyModule.Sum(lO,20))
import MyModule

Loading a module will automatically execute any code (main code) that Output
re5|des |n that module. MyModule loaded
The main code of a module (code that is written directly and not within a 3O
function or a class) will only me executed once (the first time a module is
loaded)

***************Ending Page***************

***************Beginning Page***************
***************page number:4**************
Any Python code (python script) com be used ds d module.

Python 3.x Python 3.x

File: MyModule.py File: test.py

def Sum(X,y) : import MyModule

return X+y

print ("MyModule loaded") print (MyModule.Sum(lO,20))
import MyModule

What it MyModule is not located in the some folder as test.py tile ?

Output

Trolcebolck (most recent colll lost):

File “test.py", line l, in <module>
import sys,MyModule
lmportError: No module nolmed 'MyModule'

***************Ending Page***************


***************Beginning Page***************
***************page number:5**************
Any Python code (python script) com be used CIS ol module.

Python 3.x Python 3.x

File: MyModule.py File: testpy

def Sum(x,y): import sys

return x+y

print ("MyModule loaded") sys.path += ["<folder>"]
import MyModule
print (MyModule.Sum(lO,20))
import MyModule

In the olbove piece of code “<folder>” represents Cl polth to the folder OWPW

where the file MyModule.py resides. MyModule loaded

3O

***************Ending Page***************

***************Beginning Page***************
***************page number:6**************
Any Python code (python script) can be used as a module.

Python 3.x Python 3.x

File: MyModule.py File: festpy

def Sum(x,y) : import MyModule

return X+y

print ("MyModule loaded") print (dir (MyModule))

Output

['Sum' , '_builtins_' , '_cached_' , '_doc_' , '_file_' , '_10ader_' ,
'_name_' , '_package_' , '_spec_']

***************Ending Page***************


***************Beginning Page***************
***************page number:7**************
Any Python code (python script) can be used as a module.

Python 3.x Python 3.x

File: MyModule.py File: test.py

def Sum(x,y): import MyModule

return x+y

print ("MyModule loaded") print (MyModule ._file_)
print (MyModule.__name__)
print (MyModule.__package__)

Attributes:

o _file_ 9 full path of the ﬁle that corresponds to the module (it could be a pyc file as well)

o _name_ 9 name of the module (in this example : MyModule)

O _package_ 9 name ot the package

***************Ending Page***************

***************Beginning Page***************
***************page number:8**************
Any Python code (python script) com be used as o module.

Python 3.x Python 3.x

File: MyModule.py File: festpy

def Sum(x,y): import MyModule as m
return x+y

_doc_ = "Computes the sum of two numbers" print (m._doc_)

Output

Computes the sum of two numbers

***************Ending Page***************


***************Beginning Page***************
***************page number:9**************
Alternatively, The keyword “help” ccm be used ols well
Python 3.x Python 3.x
File: MyModule.py File: festpy
def Sum(x,y): import MyModule as m
return x+y
__doc__ = "Computes the sum of two numbers" help (m)
Output
Help on module MyModule:
NAME
MyModule - Computes the sum of two numbers
FUNCTIONS
Sum(x, y)
FILE
m\facultate\python_modu1es\mymodule.py

***************Ending Page***************

***************Beginning Page***************
***************page number:10**************
Alternatively, ’rhe keyword “help” con be used ols well
Python 3.x Python 3.x
File: MyModule.py File: festpy
def Sum(x,y): import MyModule as m
"""returns the sum of x plus y"""
return x+y help (m)
__doc__ = "Computes the sum of two numbers"
()ulpul
Help on module MyModule:
NAME
MyModule - Computes the sum of two numbers
FUNCTIONS
Wmv,y)
returns the sum of x plus y
FILE
e:\documente\facu1tate\python\2029-2021\mymodu1e.py

***************Ending Page***************


***************Beginning Page***************
***************page number:11**************
Any Python code (python script) can be used as a module.
Python 3.x Python 3.x
File: MyModule.py File: test.py
def Sum(x,y): import MyModule
return x+y

print (__name__)

Output Output
It a python script is executed directly, the value of _name_ parameter will be
_main_.
It it is executed using import, the value of _name_ parameter will be the name of the
module.

***************Ending Page***************

***************Beginning Page***************
***************page number:12**************
Any Python code (python script) cdn be used as d module.
Python 3.x Python 3.x
File: MyModule.py File: test.py
def Sum(x,y): import MyModule
return x+y
if __name__ == "__main__":
print("Main code")
print("Testing sum(lO,20) I ",Sum(lO,20))
else:
print("Module loaded")
Output Output
Main code Module loaded
Testing sum(10,20) = 3O

***************Ending Page***************


***************Beginning Page***************
***************page number:13**************
Python scripts com ollso be grouped in packages. Packages must be grouped in fololer,
omol in eoch tololer o| _init_.py must exist. Tholt file is om entry point for tholt
package/sub-pockoge.
MathOps
|:_init_.py
Simple
__init;_.py
Arithmetic.py
Bits.py
Complex
|:_init_.py
Series.py

***************Ending Page***************

***************Beginning Page***************
***************page number:14**************
Python scripts can also be grouped in packages. Packages must be grouped in folder,
and in each folder a _init_.py must exist. That file is an entry point for that
package/sub-package.
MathO S P.ython.3:.x
b Flle: _|n|t_.py
1mp e print ("Package MathOps init")
__init;_.py
Arithmetic.py
Bits.py
Complex
t::___init__.py
Series.py

***************Ending Page***************


***************Beginning Page***************
***************page number:15**************
Python scripts can also be grouped in packages. Packages must be grouped in folder,
and in each folder a _init_.py must exist. That file is an entry point for that
package/sub-package.
MathOps P.ython.3:.x
b— 1'. nit_ . py Flle: _|n|t_.py
Simle print ("Package MathOps . Simple init")
APlt met1c.py
Bits.py
Complex
t::___init__.py
Series.py

***************Ending Page***************

***************Beginning Page***************
***************page number:16**************
Python scripts can also be grouped in packages. Packages must be grouped in folder,
and in each folder a _init_.py must exist. That file is an entry point for that
package/sub-package.
MathOps P.ython.3.x .
b_ini t— . py Flle: Arlthmetlcpy
Simple def Add<XIY) :
‘ini'L' . n return X+y
E- def Sub<><,y>=
Bit5_py return X-Y
Complex
|:_init_.py
Series.py

***************Ending Page***************


***************Beginning Page***************
***************page number:17**************
Python scripts can also be grouped in packages. Packages must be grouped in folder,
and in each folder a _init_.py must exist. That file is an entry point for that
package/sub-package.
MathOps P.ytho.n 3.x
b_ 1'. n 1'. t_ . py File: B|t$.py
Simple def SHL (XIY) 1
_'i_n'i_t__py return X << y
E Arithmetic.py def SHR(X/Y) :
return x >> y
Complex
|:_init_.py
Series.py

***************Ending Page***************

***************Beginning Page***************
***************page number:18**************
Python scripts can also be grouped in packages. Packages must be grouped in folder,
and in each folder a _init_.py must exist. That file is an entry point for that
package/sub-package.
MathOps P.ython.3:.x
b— 1'. nit_ . py File: _|n|t_.py
Simple print ("Package MathOps .Complex init")
_1'.m'.t_.py
E Arithmetic .py
Bits.py
Com.1ex
Series.py

***************Ending Page***************


***************Beginning Page***************
***************page number:19**************
Python scripts can also be grouped in packages. Packages must be grouped in folder,
and in each folder a _init_.py must exist. That file is an entry point for that
package/sub-package.
MathOps P.ython ‘3.x
b_ 1'. nit_ . py File: Series.py
Simple def Sum(*P) r
_1'.m'.t_.py C I 0
E Arithmetic.py for i in PI
Bits.py 6+: i
Complex return C
init . a def Product (*p) :
I— c I 1
for i in p:
c *2 i
return c

***************Ending Page***************

***************Beginning Page***************
***************page number:20**************
Usage:

Python 3.x

import MathOps.Simple.Arithmetic

print (MathOps.Simple.Arithmetic.Add(2,3))
from MathOps.Simple import Arithmetic as a
print (a.Add(2,3))

Output

Package MathOps init

Package MathOps.Simp|e init

5

***************Ending Page***************


***************Beginning Page***************
***************page number:21**************
Usage:
Python 3.x
from MathOps . Simple import *
print (Arithmetic.Add(2,3))
print (Bits.SHL(2,3))
Output
Package MathOps init
Package MathOps.Simple init
Traceback (most recent call last):
File “test.py", line 3, in <modu|e>
print (Arithmetic.Add(2,3))
NameError: name 'Arithmetic' is not defined

***************Ending Page***************

***************Beginning Page***************
***************page number:22**************
To be able To use a syntax similar ’ro “from <module> im|c_>or’r *” a module variable
“_aII_” must be defined. That variable will hold a lis’r of all modules That belongs To
That package.
MathOps Python.3:.x
b_ini t— . py File: _|n|f_.py
Simle print ("Package MathOps . Simple init
E— with _all_ set")
Arithmetic _ py _all_ = [ "Arithmetic" , "Bits " ]
Bits.py
Complex
|:_1'.nit_.py
Series.py

***************Ending Page***************


***************Beginning Page***************
***************page number:23**************
Usage:

Python 3.x

from MathOps.Simple import *
print (Arithmetic.Add(2,3))
print (Bits.SHL(2,3))

Output

Package MathOps init

Package MathOps.Simple init with _a||_ set
5

1 6

***************Ending Page***************

***************Beginning Page***************
***************page number:24**************
If you wanT a module and/or package To be available To all The scrist ThaT are
execuTed on ThaT sysTem iusT copy The module or The enTire package folder on The
PyThon search paTh anol you will be able To access iT clirechy. These paThs are:
O Windows: <PyThonFololer>\Lib

Exemple: C:\PyThon27\Lib or C:\PyThon37\Lib
o Linux: /usr/lib/<PyThon\/ersion>

Example: /usr/lib/pyThon2.7 or /usr/lib/pyThon3.7)

***************Ending Page***************


***************Beginning Page***************
***************page number:25**************
Python also has a special library (importlib) that can be used to dynamically import a

module.

o importlib.import_module (moduleName,package=None) 9 to import a module

o importlib.reload (module) 9 to reload a module that was already loaded

Python 3.x Python 3.x

File: C:\Python3\Lib\MyModule.py File: test.py

def Sum(x,y): import importlib

return x+y
print ("MyModule loaded") m = importlib . import_module("MyModule")
print (m.Sum(lO,20))

Output
MyModule loaded
3O

***************Ending Page***************

***************Beginning Page***************
***************page number:26**************
Python hols d keyword (exec) tholt coin be used to dynamically compile dnd execute
python code.
The tormolt is exec (code, [globoll],[loco|l] ) where [global] ond [locoll] represents d list
of globoll ond locoll definition tholt should be used when executing the code.

Python 3.x Output

print(X)

exec("def num_sum(x,y) : return x+y") Output
print(num_sum(10,20))
s I "abodefg"

exec ("52:5 . upper () ") OUlPUl

***************Ending Page***************


***************Beginning Page***************
***************page number:27**************
Becoluse of this keyword, python code com obfuscate or modify itself during runtime.

Python 3.x

data I [OX65, 0X66, 0X67, 0X21, 0X54, 0X76, OX6E, 0X62, 0X29, 0X79,
OXZD, OX7A, OXZD, OX7B, OXZA, OX3B, OXOE, OXOB, OXOA, 0X73,
0X66, 0X75, 0X76, 0X73, OX6F, 0X21, 0X79, OXZC, OX7A, OXZC,
OX7B]

S : II"

for i in data:

s +2 chr (i-l) Output
exec(s)
print<5uma<1,2,3>> —

***************Ending Page***************

***************Beginning Page***************
***************page number:28**************
Because of this keyword, python code con obfuscate or modify itself during runtime.

Python 3.x

data = [OX65, 0X66, 0X67, 0X21, 0X54, 0X76, OX6E, 0X62, 0X29, 0X79,
OXZD, OX7A, OXZD, OX7B, OXZA, OXBB, OXOE, OXOB, OXOA, 0X73,
0X66, 0X75, 0X76, 0X73, OX6F, 0X21, 0X79, OXZC, OX7A, OXZC,
OX7B]

S I I."

for i in data: def Sumo(x,y,z):

exe —

priﬂlma(l,2,3))

***************Ending Page***************


***************Beginning Page***************
***************page number:29**************
Multiple layers of encryption are also possible:

Python 3.x

buf =
[OX74,0X21,0X3E,OX21,0X23,0X67,0X68,0X69,0X5D,0X23,0X76,0X2B,OX64,0X2F,OX65,
OXZC,OXBD,OX5D,0X23,0X75,0X68,0X77,0X78,0X75,0X71,0X5D,OX23,0X64,0X2E,OX65,0
X23,0XOE,OXOB,OX74,0X33,0X21,0XBE,0X21,0X23,0X23,0XOE,OXOB,OX67,0X70,0X73,0X
21,0X64,0X21,0X6A,OX6F,OX21,0X74,0X3B,OXOE,OXOB,OXOA,OX74,0X33,0X21,0X2C,OX3
E,0X21,0X64,0X69,0X73,0X29,0X70,0X73,0X65,0X29,0X64,0X2A,OX2E,OX33,0X2A,OXOE
,OXOB,OX66,OX79,OX66,OX64,OX29,OX74,OX33,OX2A]

s = n"

for i in buf:

exec (S)
print(s(lO,20))

***************Ending Page***************

***************Beginning Page***************
***************page number:30**************
Multiple layers of encryption are also possible:

Python 3.x

buf =
[OX74,0X21,0X3E,OX21,0X23,0X67,0X68,0X69,0X5D,0X23,0X76,0X2B,OX64,0X2F,OX65,
OXZC,OXBD,OX5D,0X23,0X75,0X68,0X77,0X78,0X75,0X71,0X5D,OX23,0X64,0X2E,OX65,0
X23,0XOE,OXOB,OX74,0X33,0X21,0X3E,0X21,0X23,0X23,0XOE,OXOB,OX67,0X70,0X73,0X
21,0X64,O, ‘ ‘ ‘ ' ' ‘ ' ' ' ‘E,OXOB,OXOA,OX74,0X33,0X21,0X2C,OX3
E,OX21,0 5 = "fgh\"U*c,d+<\"tngtp\"c-d" 0X29,0X64,0X2A,OX2E,OX33,0X2A,OXOE
,OXOB,Oxi 52 = "" IXZA]

S = "" for c in s:

for i i 52 += chr(or'd(c)—2)

" exec ( 52) Output
prln s(lO,20))

***************Ending Page***************


***************Beginning Page***************
***************page number:31**************
Multiple layers of encryption are also possible:

Python 3.x

buf =
[OX74,0X21,0X3E,OX21,0X23,0X67,0X68,0X69,0X5D,0X23,0X76,0X2B,OX64,0X2F,OX65,
OXZC,OXBD,OX5D,0X23,0X75,0X68,0X77,0X78,0X75,0X71,0X5D,OX23,0X64,0X2E,OX65,0
X23,0XOE,OXOB,OX74,0X33,0X21,0X3E,0X21,0X23,0X23,0XOE,OXOB,OX67,0X70,0X73,0X
21,0X64,O, ' *‘ ‘ * ' ' ‘ ' ' ‘ IE,OXOB,OXOA,OX74,OX33,OX21,OX2C,OX3
E,OX21,0< 5 = "fgh\"U*c,d+<\"tngtp\"c-d" 0X29,0X64,0X2A,OX2E,OX33,0X2A,OXOE
,OXOB,OX€ 52 = "" IXZA]

S = "" for c in s:

for i i s += chr(or'd(c)—2)

' exe 1 a Output
prin‘ s(lO,20)) ’ '

***************Ending Page***************





