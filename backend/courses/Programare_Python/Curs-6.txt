***************Beginning Page***************
***************page number:1**************
\/\/\/\/\/\/\I\
1W
‘W
1W
‘ﬂ\ﬂ\ﬂ\ﬂ\ﬂ\ﬂ\ﬂ\
I\I\I\I\l\l\l\l
PROGRAMMING IN PYTHON | fjuvrjgfmgos

***************Ending Page***************

***************Beginning Page***************
***************page number:2**************
Exceptions in Python hove the following form:
Python 3.x Python 3.x
try: try:
#code X = 5 / O
except : except :
#code that will be executed in print("Exception")
#case of any exception
()utput

***************Ending Page***************


***************Beginning Page***************
***************page number:3**************
Exceptions in Python hove the following form:
Python 3.x Python 3.x
try: try:
#code x = 5 / l
except: except:
#code that will be executed in print("Exception")
#case of any exception else:
else: print("All ok")
#code that will be executed if
#there is no exception
()utput
AHok

***************Ending Page***************

***************Beginning Page***************
***************page number:4**************
All exceptions in python ore derived from BaseException clolss. There ore multiple
types of exceptions including: ArithmeticError, BufferError, AttributeError,
FloatingPointError, lndexError, Keyboardlnterrupt, NotlmplementedError,
OverflowError, IndentationError, and mony more.

A list of oll the exceptions com be found on:

' https:[ [docs.python.org [3.8 Z libro ry Z exceptionshtmI#Exception

' https:[ [docs.python.org [3.9 Z libraryZexceptionshtmI#Exception

A custom (user-defined) exception type coln CllSO used (more on this topic olt
“Clo|sses”).

***************Ending Page***************


***************Beginning Page***************
***************page number:5**************
Exceptions in Python hove the following form:
Python 3.x Python 3.x
try: def Test (y) :
#code try:
except ExceptionTypel: x = 5 / y
#code for exception of type 1 except ArithmeticError:
except ExceptionTypeZ: print("ArithmeticError")
#code for exception of type l except:
except: print("Generic exception")
#code for general exception else:
else: print ("All ok") Output
#code that will be executed if . .
. . ArlthmetlcError
#there lS no exception Test(0) . .
H H Generlc exceptlon
TeSt( aaa >
Test(l)

***************Ending Page***************

***************Beginning Page***************
***************page number:6**************
Exceptions in Python hove the following form:
Python 3.x Python 3.x
try: def Test (y):
try:
except ExceptionTypel: X I 5 /
except:
excep ‘r1 e 1c rror:
except: print ("ArithmeticError")
else:
else: print ("All ok")
Test (O) Generic exception mpst be
the last one. Code WIll not
Test("aaa") _
Test (1) complle.

***************Ending Page***************


***************Beginning Page***************
***************page number:7**************
Python ollso holve ol finally keyword tholt coln be used to executed something olt the
end of the try block.
Python 3.x Python 3.x
try: def Test (y):
it code try: Output
except: x I 5 / y Test(0)=
#code for general exception except: Ewor
else: print("Error") Hnd
#code that will he executed else:
#if there is no exception print("All ok") 1bﬂﬂy
finally: finally: AHok
#code that will he executed print("Final") Hnm
#after the try block execution Test(O)
#is completed Test(l)

***************Ending Page***************

***************Beginning Page***************
***************page number:8**************
Python also hove ol finally keyword tholt com be used to executed something olt the
end of the try block.
Python 3.x Python 3.x
try: def Test (y):
try: Finally must be the last
except: X I 5 / y statement
except:
else: orin "Error"
finally:
finally: e se:
print("All ok")
Test(0)
Test(l)

***************Ending Page***************


***************Beginning Page***************
***************page number:9**************
Exceptions in Python hove the following form:
Python 3.x Python 3.x
try: def Test (y):
#code try:
except (Type1,Type2 ,...Typen) : x I 5 / y
#code for exception of type except (ArithmeticError,TypeError):
#1,2,m print("ArithmeticError")
except: except:
#code for general exception print("Generic exception")
else: else:
#code that will be executed print("All ok") quwt
#lf there lS no GXCthlOD Anmmemfnor
T€St (O) ArithmeticError
Test("aaa") AHok
Test(l)

***************Ending Page***************

***************Beginning Page***************
***************page number:10**************
Exceptions in Python hove the following form:
Python 3.x Python 3.x
try: try:
#code x = 5 / O
except Type1 as <va;_name>: except Exception as e:
#code for exception of type print( str(e) )
#1.
except:
#code for general exception
#code that will be executed ...
#lf there lS no exception

***************Ending Page***************


***************Beginning Page***************
***************page number:11**************
Exceptions in Python hove the following form:

Python 3.x

try:
#code

except (Type1,Type2,...Typen) as <var>z
#code for exception of type 1,2,m n

try:
X = 5 / O

except (Exception,ArithmeticError,TypeError) as e:
print( str(e), type(e) )

Output

Python3: division by zero <c|o|ss 'ZeroDivisionError'>

***************Ending Page***************

***************Beginning Page***************
***************page number:12**************
Python also hols onother keyword (raise) tholt coln be used to creolte / throw oln
excepﬁon:
Python 3.x
raise ExceptionType (parameters)
raise ExceptionType (parameters) from <exception_var>
try:
raise Exception("Testing raise command")
except Exception as e:
print(e)
Output

***************Ending Page***************


***************Beginning Page***************
***************page number:13**************
Each exception has a list of arguments (parameter args)
Python 3.x
try:
raise Exception("Paraml",10,"Param3")
except Exception as e:
params I e.args
print (len(params))
print (params[0])
Output
3
Param]

***************Ending Page***************

***************Beginning Page***************
***************page number:14**************
raise keyword can be used without parameters. In this case it indicates that the
current exception should be re-raised.
Python 3.x
try:
try:
X = 5 / O
except Exception as e:
print(e)
raise III-IIIIIIIIIIIIIIIIIIIIII:
except Exception as e:<----------------'
print("Return from raise —> ",e)
Output (Python 3.x)
division by zero
Return from raise -> division by zero

***************Ending Page***************


***************Beginning Page***************
***************page number:15**************
Python 3.x supports chaining exception viol from keyword.
Python 3.x
l try:
2 X = 5 / O
3 except Exception as e:
4 raise Exception("Error") from e
Output
Trocebolck (most recent coll lost):
File "o|.py", line 2, in <modu|e>
x = 5 / O
ZeroDivisionError: division by zero
The above exception was the direct cause of the following exception:
Trocebolck (most recent coll lost):
File "o.py", line 4, in <modu|e>
raise Exception("Error") from e
Exception: Error

***************Ending Page***************

***************Beginning Page***************
***************page number:16**************
Python has a special keyword (assert) that can be used to raise an exception based
on the evaluation of a condition:
Python 3.x
age I —l
try:
assert (age>O),"Age should be a positive number"
except Exception as e:
print (e)
Output
Age should be a positive number

***************Ending Page***************


***************Beginning Page***************
***************page number:17**************
pass keyword is usually used it you want to catch an exception but do not want to
. rocess it.
Python 3.x
try:
X I lO / O
except:
pass
Some exceptions (it not handled) can be used for various purposes.
Python 3.x . _ .
rint ("Test") Thls exceptlon ( ) If Output
p ' ' "°' h°"°"e Wi" imedi"'e"y
ratse SystemEx1t terminate your program est
pr1nt("Test2")

***************Ending Page***************

***************Beginning Page***************
***************page number:18**************
| M0 DU LES
Modules are python’s libraries and extends python functionality. Python has a special
ke word im ort that can be used to imort modules.
Format (Python 3.x)
Classes or items from a module can be imported separately using the following
syntax.
Format (Python 3.x)
from module import *
When importing a module aliases can also be made using “as” keyword
Format (Python 3.x)

***************Ending Page***************


***************Beginning Page***************
***************page number:19**************
Python has a lot of default modules (os, sys, re, math, etc).
There is also a keyword (dir) that can be used to obtain a list of all the functions and
ob'ects that a module exorts.
Format (Python 3.x)
import math
print ( dir(math) )
Output (Python 3.x)
['_doc_', '_loader_', '_name_', '_package_', '_spec_', 'acos', lacosh', 'asin', 'asinh', 'atan', latan2', 'atanh', 'ceil', 'copysign', lcos',
'cosh', ldegrees', 'e', lerf', 'erfc', 'exp', 'expml ', lfabs', Ifactorial', 'floor', 'fmod', 'frexp', 'fsum', 'gamma', 'gcd', 'hypot', 'inf', 'isclose', lisfinite',
'isinf', 'isnan', 'ldexp', 'lgamma', 'log', 'logl O', 'logl p', llog2', 'modf', 'nan', 'pi', lpow', Iradians', 'sin', Isinh', 'sqrt', 'tan', 'tanh', 'trunc']
The list of functions/items from a module may vary from Python 2.x to Python 3.x and
from version to version, or from different versions of Python.

***************Ending Page***************

***************Beginning Page***************
***************page number:20**************
Python distribution modules:
o Python 3.x 9 https:[ [docs.python.org 1 3 Z py-modindexhtml
m-_ m-_
collections Implementation of different containers re Regular expression implementation
ctype Packing and unpacking bytes into c-like random Random numbers
structures socket Low-level network interface
datetime Date and Time operators
subprocess Processes
ema|l Support for worklng w'lh ema|ls sys System specific functions (stdin,stdout,
hashlib Implementation of different hashes (MD5, SHA, arguments, loaded modules, ...)
"'l traceback Exception traceback
|son JSON encoder and decoder urllib Handling URLs / URL requests, etc
math MathematIcal functlons xml XML file parser
os Different functions OS specific (make dir,
delete files, rename files, paths, ...)

***************Ending Page***************


***************Beginning Page***************
***************page number:21**************
| MODULES - svs
Python documentation page:
o Python 3.x 9 https:[ [docs.python.org[3Zlibrary[sys.html#sys.modules
m—
sys.argv A list of all parameters send to the python script
sys.platform Current platform (Windows / Linux / MAC OSX)
sys.stdin Handlers for default l/O operations
sys.stdout,
sys.stderrr
sys.path A list of strings that represent paths from where module will be loaded
sys.modules A dictionary of modules that have been loaded

***************Ending Page***************

***************Beginning Page***************
***************page number:22**************
sys.argv provides a list of all parameters that have been send from the command line
to a python script. The first parameter is the name/path of the script.

File ‘ ’ (Python 3.x)

import sys

print (“First parameter is”,sys.argv[0])

Output

>>> python.exe C:\test.py

First parameter is C:\test.py

***************Ending Page***************


***************Beginning Page***************
***************page number:23**************
Python 3.x (File: )
import sys
suma I O
try:
for val in sys.argv[l:]:
suma +: int(val)
print("Sum:",suma)
except:
print("Invalid parameters")
Ouiput
>>> python.exe C:\sum.py 1 2 3 4
Sum = IO
>>> python.exe C:\sum.py 1 2 3 fest
Invalid parameters

***************Ending Page***************

***************Beginning Page***************
***************page number:24**************
| M 0 D u L ES - 0 s
Python documentation page:
0 Python 3.x 9 https:[ [docspythonprg[3(librarygos.html
Includes functions for:
o Environment
o Processes (PID, Groups, etc)
o File system (change dir, enumerate files, delete files or directories, etc)
o File descriptor functions
o Terminal informations
o Process management (spawn processes, fork, etc)
O Working with file paths

***************Ending Page***************


***************Beginning Page***************
***************page number:25**************
| M 0 DU LES - 05
Listing the contents of a folder (os.listdir 9 returns a list of child files and folders).
Python 3.x
import os
Output
'Python27', IPython38', 'System Volume lnformation', 'Users', 'Windows‘, ...]
File and folder operations:
o os.mkdir / os.mkdirs 9 to create folders
o os.chdir 9 to change current path
o os.rmdir / os.removedirs 9 to delete a folder
o os.remove / os.unlink 9 to delete a file
o os.rename / os.renames 9 rename/move operations

***************Ending Page***************

***************Beginning Page***************
***************page number:26**************
os hos ol submodule (path) that con be used to perform different operations with
file directories oths.
Python 3.x
import os
print (os.path.join (”C:”,”Windows”,”System32”)) Oukmt
print (os.path.dirname (”C:\\Windows\\abc.txt”)) QVNmmw§§wmm$2
print (os.path.basename (”C:\\Windows\\abc.txt”)) C2“mﬂmm
' ' n - I, q C.TXf
print (os.path.spiitext ( C:\$Windows\\abc.txt )) Faywmmwnpmﬂﬁmﬂ
print (os.path.ex1sts (”C:\\Windows\\abc.txt”)) Fdw
print (os.path.exists (”C:\\Windows\\abc.txt”)) Twe
print (os.path.isdir (”C:\\Windows”)) Fdw
print (os.path.isfile (”C:\\Windows”)) Pd“
print (os.path.isfile (”C:\\Windows\\abc.txt”))

***************Ending Page***************


***************Beginning Page***************
***************page number:27**************
Listing the contents of a folder recursively.
Python 3.x
import os
for (root,directories,files) in os.walk("."):
for fileName in files:
full_fileName = os.path.join(root,fileName)
print (full_fileName)
()utput
os module can also be used to execute a system ,\q
command or run an application via system function lull”
. G .CSV
Python 3.x .\run.bat
_ .\Folderl \version.l .6.0.0.txt
1mport OS .\Folderl\version.l.6.0.l.txt
OS . system ( "dir * . * /a" ) .\Folderl \Folder2\version.l .5.0.8.txt

***************Ending Page***************

***************Beginning Page***************
***************page number:28**************
| INPUT/OUTPUT
Python has 3 implicit ways to work with l/O:
A) IN: via keyboard (with input or raw_input keywords)
- There are several differences between python 2.x and python 3.x regarding reading from stdin
B) OUT: via print keyword
C) lN/OUT: via open keyword (to access files)

***************Ending Page***************


***************Beginning Page***************
***************page number:29**************
In Python 3.x, the content read from the input is considered to be o string ond returned
Format (Python 3.x) Python 3.x
input () >>> Enter: 10
input (message) iO <c|oss 'str'>
Python 3.x >>> Enter: i+2*3.0
_ i+2*3.0 <c|oss 'str'>
X = 1nput("Enter: ")
print (X, type (X) ) >>> Enter: 123
"123" <closs 'str'>
o
>>> Enter: test
test <c|oss 'str'>

***************Ending Page***************

***************Beginning Page***************
***************page number:30**************
print com be used to print o| string or on obiect/volriolble tholt coln be converted into o|
string.
Format (Python 3.x)
print (*obiects, sep=' ', end: '\n', file=sys.stdout, flushIFoIse)
Python 3.x
>>> print (“test”) >>> print (“test”,i O)
test test iO
>>> print (“test”,i O,sep=“---”) >>> print (“test”);print(“test2”)
test-“i O test
test2
>>> print (“test”,end=“***”);print(“test2”)
test***test2

***************Ending Page***************


***************Beginning Page***************
***************page number:31**************
| FILE MANAGEMENT
A file can be open in python using the keyword open.
Format (Python 3.x)
errors=None, newline=None, cl osefd=True, opener=None)
Where mode is a combination of the following:
o “r” — read (default)
O “w” —write
o “x” — exclusive creation (fail if file exists)
o “a” —append
o “b” — binary mode
o “t” — text mode
o “+" — update (read and write)

***************Ending Page***************

***************Beginning Page***************
***************page number:32**************
| FILE MANAGEMENT
Python 3 also supports some extra parameters such as:
o encoding 9 if the file is open in text mode and you need translation from different encodings (UTF, etc)
o error 9 specify the way conversion errors for different encodings should be processed
o newline 9 also for text mode, specifies what should be consider a new line. If this value is set to None
the character that is specific for the current operating system will be used
Documentation for open function:
0 Python 3.x 9 https:[ [docs.python.org[3Zlibrary[functions.html#open

***************Ending Page***************


***************Beginning Page***************
***************page number:33**************
| FILE MANAGEMENT
A tile obiect hols the following methods:
o t.close 9 closes current tile
o f.te|| 9 returns the current file position
o t.seek 9 sets the current file position
o t.reo|d 9 redds or number of bytes from the file
o t.write 9 write ol number of bytes into the tile
o t.reo|d|ine 9 reolds or line from the file
Also — the file ob'ect is iterolble and returns o||l text lines from or tile.
Python 3.x
print (line . strip())
Lines redd using this method contolin the line-feed terminoltor. To remove it, use strip or
rstrip methods.

***************Ending Page***************


***************Beginning Page***************
***************page number:34**************
Functional programming can also be used:

Python 3.x

X I [line for line in open("file.txt") if "Gen" in line.strip()]

print (len(x))

To read the entire content of the file in a buffer:

Python 3.x

data I open("file.txt","rb").read()

print (len(data))

print (data[O])

read method returns a string in Python 2.x and a buffer or string depending on how the
file is opened (“rt” vs “rb”) in Python 3.x 9 The output of the previous code will be a
character (in Python 2.x) and a number representing the ascii code of that character in
Python 3.x

To obtain a string in Python 3.x use “rt” instead of “rb”

***************Ending Page***************


***************Beginning Page***************
***************page number:35**************
To creolte ol tile olnol write content in it:
Python 3.x
open("file.txt","wt").write("A new file ...")
It is o good policy to embed file operation in o try block
Python 3.x
try:

f I open("abc.txt")

for line in f:

print<line.strip())

f.close()
except:

print("Unable to open file abc.tXt")

***************Ending Page***************


***************Beginning Page***************
***************page number:36**************
Once a file is open, the file obiect handle can be used to retrieve different information
regarding that file:

Python 3.x

f = open("a.py","rb")

print ("File name : ", f.name)

print ("File open mode : ", f.mode)

print ("Is it closed ? : ", f.closed)

***************Ending Page***************

