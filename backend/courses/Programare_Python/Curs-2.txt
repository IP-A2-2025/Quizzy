***************Beginning Page***************
***************page number:1**************
\I\I\I\I\I\I\I\
I Qﬂ\ﬂ\ﬂ\ﬂ\ﬂ\ﬂ\ I
\ ﬂ\ﬂ\ﬂ\ﬂ\ﬂ\ﬂ\ﬂ \
I \ﬂ\ﬂ\ﬂ\ﬂ\ﬂ\ﬂ\ I
\ ﬂ\ﬂ\ﬂ\ﬂ§ﬂ\ﬂ\ﬂ \
I\I\I\I\I\I\I\l
PROGRAMMING IN PYTHON ‘ ‘$31M

***************Ending Page***************

***************Beginning Page***************
***************page number:2**************
A lambda function is a function without any name. It has multiple roles (for example it
is often use as a pointer ta function equivalent when dealing with other functions that
expect a callback).

Lambdas are useful to implement closures‘
A lambda function is defined in the following way:

lambda <Z/l'n of puturvleferx>zreturrl value
The following example uses lambda to define a simple addition function

Python lxlwithout lambda) Python 3.x(with lambda)

def addition (x,y)z addition e lambda X,y1 x+y

Xetuxn x+y print laddition(3,5))
print (dddl tion (3, 5))

***************Ending Page***************

***************Beginning Page***************
***************page number:3**************
Lambdas are bind during the run-time. This mean that a lambda with a specific
behavior can be build al the run-lime using the data dynamically generated‘
Python 3.x
def CreeteDivizibleCheckFunctiOn(n) :
return lambda X: X%n::0
£nDiv2 : CreateDivizibleCneckFunctlon (2b
aniV'l I CreeteDlVizlbleCheCkFunctiUn (7i
X : 14
print < X, mnvz (x), aniv7 1x) )
In this case aniv2 and aniv7 are dynamically generated. Oulpul
This prngramming paradigm is called closure. l4 Tn“? 1'“

***************Ending Page***************

***************Beginning Page***************
***************page number:4**************
A sequence in pyvhen is a duh: structure represented by c vecior of elements 'hut
don’| need to be of ihe some type.
Lists have lwo represenmﬁon in python:
~Z~ lisI ‘)muiubie vecior (eiemenis from IhuI lisi can be added, deleted, eve). Lisi edn be defined
using [...] cpelu'ov er Ihe lisl keyword
~:~ iupls -) Tmmu'ubie vecior (me :losesi equivaleni is u consiunf list) -) addition, deleﬁon, ere
opevc'ion can nor be used an rm; Iype of ebiecr. A mple is usuciiy deﬁned using [...] or by using
rhe luple keyword
lisI and luple keywords can also be used to initialized o tuple or lisI from another lisi
of iuple

***************Ending Page***************

***************Beginning Page***************
***************page number:5**************
Pylhon3.X

X : list () (1X is an empty 1ist

X = [1 (0X is sn sinpty iist

X I [10,20,"rest”] (0X is list

X = [10,1 (1X is 1ist Contalnlnq [10]

X = [1,2] * 5 (0X is 1ist Containing [1,2, 1,2, 1,2, 1,2, 1,2]
X,y : [1,2] (0X is 1 and y is 2

X = tupie () (1X is an empty tiipis

X = () (0X is an empty tuple

X : (10,20,”test”) (X is a tuple

X = 10,20,”test” (X is s tiipis

X = (10,) (0X is tuple Contawﬁng (10)

X = (1,2) * 5 (1X is tiipit containlnq (1,2, 1,2, 1,2, 1,2, 1,2)
X = 1,2 ~ 5 (0X is tuple containing (1,10)

X,y : (1,2) (X is 1 and y is 2 (the same happens for XN s 2,2 )

***************Ending Page***************

***************Beginning Page***************
***************page number:6**************
Elements from u list can be accessed in the following way
Pyihonlx

X Z [‘A', 'B‘, 2, 3, ‘C']

x[U] ~

Mil] 71f.‘ ,

x[—2] ~ ,

x[z3] 7: L '7', ':', 7

mm H » ' '

x[l:3] , ,~~ ':', Z

x[l:*3] 71H. ,

***************Ending Page***************

***************Beginning Page***************
***************page number:7**************
Elements from u tuple can be accessed in Ihe same way
Pythonlx

x Z ('A’, ‘B', Z, 3, ‘C'l

XHJ] I‘ T

x[*1] :i» . \

x[-Z] <1 ; W, ~,

X[l:3] I‘ if L "5', Z‘

x[l:*3] 7:» . rm

***************Ending Page***************

***************Beginning Page***************
***************page number:8**************
ivple and lisl keywords can also be used m convert q tuple m q lm and vice-verso.
Py'h0n3.x

X = (‘an ‘B’, 2, 3, 'c')

y:list(x)

x = [‘A', 'E', 2, 3, ‘C‘]

y:cuple1x)

Both lists and mples can be concatenuled, but not wiIh each other.
Py'h0n3.x

x = (‘AH Z) X = [‘A', 2] X = ('A‘, 2)
Y Z (‘5" 3) y : VB’, 3] y : ['B', 3]
z:x+y z:x+y Z:X+y

***************Ending Page***************


***************Beginning Page***************
***************page number:9**************
Tuples are also used lo return multiple values from q funclion.
The following example computes both the sum and product of a sequence of numbers
Python 3.x
def ComputesumAndProduct(*llstiofinumbersl :
S : O
P = l
for 1 in list_of_numbezs:
s +: i
P ‘Z i
return (s, p)
suma,produs = ComputeSumAndProduct(1,2,3,4,5)

***************Ending Page***************

***************Beginning Page***************
***************page number:10**************
luple and lisl can also be organized in mmrixes:

Pylhonlx

X=‘(17213,r (4,576))

x = 1[l,2,3], (4,5,6H ‘matrix subcomponents don’t have to be of the
#sanp rype

X= l ((1123), (4,5,6'), ((7,8), (9,10,11, 12H)

#9 matnx noes not have to hamA fhP SamE lumuer 0‘ Elemerts on each

#dlmcnslcn

#me same rules from tuples apply to 115:5 as well

x= [[1,2,3]v [4,5,6]1

X=[[17213]y (4,576)]

***************Ending Page***************

***************Beginning Page***************
***************page number:11**************
Bolh Iuplu and lisls can be enumerated wilh u for keyword:
Python a.‘
Ovipui
{0121111 [l,2,3,4,5]z 1
tint (1)
P 2
Pym" 3.x 3
for 1 in (1,2,3,4,5>; 5
print (1)
Lists and luples have u special keyword (Ien) that can be used to find out the size of
a llsl lu-le:
Python 3.x
X = [1,2,3,4,51 WW“
print (1en(X) , len (y))

***************Ending Page***************

***************Beginning Page***************
***************page number:12**************
One can also use the enumerate keyword to enumerate u list and get the index of

the item at the some time:

Pylhon 3.x

£0: index,name in enumerate t ["Draqos", "Mlhal", "Nlcu", “Vla0"]) =
prlnt("1ndex:’éd :> is"%lindex,nam&l)

Or use an external variable: l

Python 3.x Oulpul

index e 0 lndeX:O :> Dragns

for name in ["DranS", "Minei", "N;cu", "Vlad"]) z —v lndex=l => Mlhal
print("Index:¥d :> as"% lindex,namel) lndexﬂ :> Ntw
index += 1 lndex:3 :> Vlad

***************Ending Page***************

***************Beginning Page***************
***************page number:13**************
enumerule functions also allows u second parameter lo specify the index base
(default is 0 9 iust like in C-like languages)‘
Pyllmn 3.x
£0: index,name in enumerate < ["Dragos“, "Mlhai", "Nlcu", "Vlad"] , a);
print("1nnex:“nd :> %s“% (index, namei)
In this example, the index base will be 2:
'r Dingosiineiirsinnnieiwiii have index 2 Oquul
r Minni (the second name) wiil have index a indenz :> Drcgos
'r And so on index=3 => MIhuI
\ndexvﬁ :> Nicu
index:5 :> Viad

***************Ending Page***************

***************Beginning Page***************
***************page number:14**************
l LISTS AND FUNUIONAI. PROGRAMMING
A list can also be build using functional programming.
‘1' A list of numbers from i to 9
Pytlmn 3.x
'i' A list of all divisor of 23 smaller than 100
Pythun 3.x
4‘ A list of all square values for number from 'l to 5
Python 3.x

***************Ending Page***************

***************Beginning Page***************
***************page number:15**************
A lisl can also be build using functional programming.
‘i' A lisI of pairs of numbers from i to 10 "IGI summed up produce a number Ohm
divides with 7
Pym" 3.x
X:[ [x, y] £0: x in :ange11,1o) for y in :anqe(l,10) if buy) “67:01
‘F A lisr of ruples of numbers from 1 to 10 rhur summed up produce u number rhcl
divides with 7
Python 34X
X:[ (x, y) for x in zanqeil,10) for y in tanqﬁﬂ, 10) if 1x+yi g7::0]

***************Ending Page***************

***************Beginning Page***************
***************page number:16**************
A llsi can also be build using functional programming,
‘1' A list of prime numbers that a smaller than 100

Pylhon 3.x
Using \‘undional programming in Python drastically reduces the size of code‘ However,
depending on how large the expression is Io build c lisr, functional programming may
not be advisable if ‘he program purpose is readability‘

***************Ending Page***************


***************Beginning Page***************
***************page number:17**************
Lists supporl u set of funclions Ihut can be used to modify and access elemenls and
modify the list of elemenis. Some of lhese funclioncliﬁes can also be achieve by using
some operators.
‘1' Add a new elemem in Qhe list (either use the member function(me|hod) append or
the operator +=). To add lists or iuples use exiend method
Pthon 3.x
x = [1 , 2 , 3] r ,
x.append(4) , , ,
X+:[5] , , , ,
x+: [ 6, 7] , , , , , v
x+:(s,9,10) , , , , v v , , ,
x[len1x)z] Z [ll] , , , , , , , , v ,
X.eXtend([12,13]) , , , , , v , ', , v v ,
X‘5Xtend(114,l5)) , , , , , , , , , , , , ,

***************Ending Page***************

***************Beginning Page***************
***************page number:18**************
Lists supper! a set of funcﬁons that can be used to modify and access elemems and
modify the list of elements. Some of Ihese functionali'ies can also be achieved by
using some operclcrs.
ez~ Insen c new elemem m the lisﬁ using member function(me0hod] inseﬂ

Pyllwn 3.x

x : [1, 2, 3] , ,

x.inset€(l, "A") , "A", ,

x.inSert(-1,"B") , " h , "a",

xeinsett(1en(Xl ,"C") , ' ", , " 'H , "C"

***************Ending Page***************

***************Beginning Page***************
***************page number:19**************
Lists supper! d set of funcﬁons that CGI'I be used to modify and access elemems and
modify the list of elements. Some of Ihese functionali'ies can also be achieve by using
some operators.
ez~ Insen d new element or mumple elements can be done using [1] operator‘ Similarly

[1 operclﬁcr CCII’! be used to change the value of one elemem

Pylhon 3.x

X: [112,314,51 , , , v

x [2] = 20 , , Q, ,

“3:1 Z ["A“,"B","C"] , V V HA”, "EH, “CH

x[:4] : [10] E’ " " "

H113] Z [.anynlzq [x y Hz”

***************Ending Page***************

***************Beginning Page***************
***************page number:20**************
Lists supper! a set of functions mm can be used w modify and access elements and
modify rhe list of elemen's. Some of Ihese functionali'ies can also be achieve by using
some operators.
‘F Remove On element in the list -) using member function(method] remove‘ This
method removes the ﬁrs‘ element with u given value
_ Python 3.x
x : [1 I 2 , 3] , ,
x . remaveﬂ) ,
)utemoveﬂoo) H ‘

***************Ending Page***************

***************Beginning Page***************
***************page number:21**************
lisvs supper’ u set of functions vhm :un be used ve modify and access elemems and modify Ihe list of
elemems. Some of these functionaliﬂes can also be achieve by using some opermols.
¢1~ To remove an elemem from u specific peemen me del keyword can be used‘
Pylhull 3.x
X: [1,2,3,4,51 , , n ,
del X [2] , , , ,
del x [-1] , ,
del x [01 ,
del x [10001 ' ‘ ‘ ‘ ~ '
X: [112,314,51 , , , v
del x [4 1 1 , , ,
die]. x [ :2] ' ,
X: [112,314,551 , , , v
del x [2 1 41 , ,

***************Ending Page***************

***************Beginning Page***************
***************page number:22**************
Lisrs supper! e ser of funcﬁons mer can be used re modify and access elemerus and
modify the list of elements. Some of Ihese functionali'ies can also be achieve by using
some operators.

‘F To pop method can be used m remove an element from a desire position Gn return
1r. This method ccln be use without clny parameter (and in this cclse n refers re me
last elemem)

Python 34X

x: [1,2,3r4r5] r r r r
y:X-P°P12i r r r

y Z x,POP10D r r

y : x.POp1>l) r

y = X.pOPU

y : x,pop11000) “ ‘

***************Ending Page***************

***************Beginning Page***************
***************page number:23**************
Lists support q set Qt functions that can be used to modify and access elements and
modify the list of elements, Some of these functionalities can also be achieve by using
some operators.
t2~ To clear the entire list the del command can be used
Python as!
x= [1,23,41,51 ' t w t t
del X [ :1
t2~ Python Six also has a method clear that can be used to clear an entire list
Py'hcm 3.x
x= [172,374,51 t t t t
x , clearll '

***************Ending Page***************


***************Beginning Page***************
***************page number:24**************
Be aware that using the operator (=) does not make u copy but only a reference of
a lisL

Python 3.x

x = [1,2,3]

y : x

y.append(10)

#X : [\,7,3,10]

#y : [1,2,3,;0]

If you want to make a copy of a lisl, use Ihe list keyword:
Python 3.x

x = [1,2,3]

y : list (x)

y.append(10)

#x I [1, 7, 3]

#y : {1,2,},10]

***************Ending Page***************

***************Beginning Page***************
***************page number:25**************
Lisis suppen e set of funcﬁcns me: can be used to modify and access elemems and
modify ihe iisi of eiemems. Some of iiiese funcﬁoncli'ies can also be achieve by using
some operators.
‘:~ Python ax also has a method copy iiiei can be used to create q shallow copy of
a list

Py'hqll a.‘

x = [1, 2, 3] i , i

b = X>C°PYU i , i , i

b +: [4] i i i i , i i
‘F The o-ermor i can also be use to achieve the same result

Pynieii 34x

X : [1, 2, 31 i , ,

b I x[:] i , , i‘ i i

b +: [4] i i i i i y,

***************Ending Page***************

***************Beginning Page***************
***************page number:26**************
Us“ supper? u se' of functions mm can be used m modify and access element and modify the
lisl of elemems, Some of these functionalities can also be achieve by using some operators.
'2' Use index method to find ouv vhe posilion of a specific element in a list

Pyihon 3,1

X , [UNI..B"'..C"'..D"] ,7 ,1 H,”

y : X,1ndex("c"i 7 ,

y 7 X.index("¥") H 7,,,,~ H 7 , ~,: v,,,: ,i ,,,i
~17 The operuvor in can be used w check if cm elemem exisis in ihe lisi

Pyihon 34x

X , ["A“,"E","C","D"] , , ,4,’ ,, v, U

y="C“inx 1,,

y:"Y"inx 777*. 77

***************Ending Page***************

***************Beginning Page***************
***************page number:27**************
Lists suppoﬂ u se' of functions mm can be used ta modify and access element and modify the
lisl of elemems, Some of these functionalities can also be achieve by using some operators.
'2' Use ccum method w find euv how many elements of c: specific value exists in a lisr
Pylhan 3.x
X I [172,372,573I172i4i2] V * I", if, T ‘My’, >7,’
y:x,count(2) s ,3, ,3, ,3, ,3
y : x,counc10> : , "
‘1' The Ieverse method can be used Io reverse vhe elemenis order from a lisv
Pym" 3.x
X: [1,2,3] , 7,7,
x,tevetse (D ’/ ‘//r

***************Ending Page***************

***************Beginning Page***************
***************page number:28**************
Lists support u set of functions that can be used to modify and access elements and
modify the list of elements. Same of these functionalities can also be achieve by using
some operators.
'1‘ Use sort method to sort elements from the list
sort (WWW, revers'QZFalxel
Python 3.x t )
x = [2,1,4,3,5]
x.!o:t(l lx l ,2,<,,i,
x.sort(reverse:Truet ‘/ i l2, l, H n
X.50:C(key= lambda i: 1%3) \\ i l'Jt MU,
X.SO!C(key = lambda i: i%3,reverse=Truel ‘Y i l ,/, t t ‘

***************Ending Page***************

***************Beginning Page***************
***************page number:29**************
Python hos severol build-in functions design to work with list (iterators). These functions
rely heavily an lambda expressions:
‘1' Use map to create a new list where each element is obtained based on the
lambda expression provided‘
map r mum», iterableflemenly, [lterubleflemervliﬂu iterableflementJ)
Python 3.x
x : [1,23,41,51
y = liltlmapllalnbda element: element’elemeﬂt, X)l '7 i r l, M r /' l
x : [1 , 2 r 3]
Y : [4 r 5 t 6]
z = liltlmapllalnbda e1,eZ: el+62,x,y)) " / M

***************Ending Page***************

***************Beginning Page***************
***************page number:30**************
Pylhon has several build-in funclions design Io work willl list (kennels). These functions rely heavily on
lambda expressions:
‘1- may function returns an iieruble obie'c in Pyihorl 3.x
Python
X = [1 , 2, 31
y : map(1ambda element: element*elementl x)
4' v0 creme a llsi from D" ilemble obiecv, use Ihe lisl keyword
Pyvhon
X Z [1 , 2, 31
Y Z [4 , 5 l 6, 7]
z : listlmapuambda e1,e2: el+e2,x,y)) , , a

***************Ending Page***************

***************Beginning Page***************
***************page number:31**************
Python has several build-in functions design to work with list (iterators). These functions
rely heavily on lambda expressions:
‘1' Use filter to create a new list where each element is ﬁltered based on the lambda
expression provided.

Filler 1 mm", iiembleflement)

Python 1x

X I [l,2,3,4,5]

y : list(filterilalnbda element: element%2::0,xii s e /, i

***************Ending Page***************


***************Beginning Page***************
***************page number:32**************
Python has several build-in functions design 00 work with list (iﬁeratorsl. These functions
rely heavily on lambda expressions:
~1~ Both ﬁner and map can also be used to create a lis! (usually in coniuncvion with
range keyword]
Python 3.x
X I listhllapdanbda x: x"X, :anqe(lrl[)) H
x = list(filtar(lan\bd.a x: x%7==1,zanga(l, 100)) )

***************Ending Page***************

***************Beginning Page***************
***************page number:33**************
Python has several build-in functions design lo work with list [iterators]. These functions
rely heavily on lambda expressions:
‘I’ Use min and max functions to find out the biggest/smallest element from an itercible
list based on the lambda expression provided.
max (rterobresremenr, [key]) inin (itemhlenemenh [keyjl
max (eh, elz, [key]) min (eh, ell, [key])
Python 34x
x I [1,2,3,4,5]
y = max lx) \- e a
y=max 11,3,2,7,9,3,5) 1, e a
y:max lx,key:lalnbdai: 1%3) ‘,7;
~Z' If you want to use o k_ey for mGX and/or min function, be sure thot you odded with
the parameter name decoration: key I <function>, and not 'ygl the keyifunction or o
lambda.

***************Ending Page***************

***************Beginning Page***************
***************page number:34**************
Python has several build-in functions design to work with list (iterators). These functions
rely heavily on lambda expressions:
‘1' Use sum to add all elements from on iteroble obiect. Elements from the iterable

obiects should allow the possibility of addition with other elements.

sum llielubleElemem, [rlrrrtVellreD
~Z' siaﬂl/ulue represent the value from where to stert summing the elements. Deteult is 0

Pylherr a.‘

X : [1,2,3,4,5]

y Z sum 1X) "_

y:sumlx,li)0) :‘7 Tl‘,l'l

X : l1,2,"3",4,51

yIsumlx) l Iflﬁil'l ml ll l,l l

***************Ending Page***************

***************Beginning Page***************
***************page number:35**************
mile" has several build-In functions design Io work wiIh IIsI liiemlers). These functions rely heuvlly on
lambda expressions:
~:~ Use soriid to son the elemeni from a list (iiemble obiesi). The key in mis cuss reprasanls a compare
function be'ween Iwo elements a‘ the iveruble ob'eci.
soiled ('llerubleElemem, [key],[rever:e])
4' The reverse ummelel if no‘ seciﬁed ls considered lo be False
Py'hﬂll 3.x
x = l2,1,4,3,51
y=eorted(xl *1’ l
y : sorted (x,zeverse:True) i i F, a i, l
y::ozted (X,key:lambda i! m3) ‘s ~,l,l,;,al
y : sorted (X,key : lambda i: i%3,reverse:True) e '~l
+ Jus' like i" me precedem case, you mun use Ihe optional pcrame'er with lheir name

***************Ending Page***************

***************Beginning Page***************
***************page number:36**************
Python has several build-in functions design 00 work with lisﬁ [Hermon]. These functions
rely heavily on lambda expressions:
‘1' Use Ieversed to reverse the element from u list (iterable obiect).

Python 34x

y : list (zevezseCHXl) , , , ,
~:' Use any and all la check if al laasl one or all elements from a lisO (iterclble obiects)

can be evaluated 00 Irue,

Pyﬂmn 3.x

X : [2,1,0,3,5]

y Z anylx) l ‘

y I all (x) ,

***************Ending Page***************

***************Beginning Page***************
***************page number:37**************
Python has several build-in functions design 00 work with lisi (iﬁerutorsl. These functions
rely heavily on lambda expressions:
‘1' Use zip to group 2 or more iterable abiects into one iterable obiea
Python 34x
x : [1, 2, 3]
y = [10,20,301
z : liSCHiphhyH ‘ , , r v ‘ r ‘
‘1' Use zip with * character to unzip such a lists The unzip variables are Ouples
Python 34X
X = [(1,2) , (3,4) , (5,6)]
a,b:zip(~x> ‘ , , , ‘ , ,

***************Ending Page***************

***************Beginning Page***************
***************page number:38**************
l BUILT-IN FUNUIUNS FUR LIST
Python has several build-in functions design to work with list [iterators]. These functions
rely heavily on lambda expressions:
‘1' Use del to delete a list or a tuple
Pym" 3.x
del X
print, (x) ‘ ‘ ‘ ‘

***************Ending Page***************

