***************Beginning Page***************
***************page number:1**************
\I\I\I\I\I\/\/\
1 \ﬂ\ﬂ\ﬂ\ﬂ\ﬂ\ﬂ\l
\ ﬂ\ﬂ\ﬂ\ﬂ\ﬂ\ﬂ\ﬂ \
1 \ﬂ\ﬂ\ﬂ\ﬂ\ﬂ\ﬂ\l
\ ﬂ\ﬂ\ﬂ\ﬂ\ﬂ\ﬂ\ﬂ \
/\1\1\/\1\1\1\,
PROGRAMMING m PYTHON | 55511;)“;me

***************Ending Page***************

***************Beginning Page***************
***************page number:2**************
A lambda function is a function without any name. lt has multiple roles (for example it
is often use as a pointer to function equivalent when dealing with other functions that
expect a callback).
Lambdas are useful to implement closures.
A lambda function is defined in the following way:

lambda <Iist_of_parameters> : return_value
The following example uses lambda to define a simple addition function

Python 3.x(without lambda) Python 3.x(with lambda)

def addition (X,y): addition = lambda X,y: x+y

return X+y print (addition(3,5))
print (addition (3,5))

***************Ending Page***************


***************Beginning Page***************
***************page number:3**************
Lambdas are bind during The run-Time. This mean ThaT a lambda wiTh a specific
behavior can be build aT The run-Time using The daTa dynamically generaTed.
PyThon 3.x
def CreateDivizibleCheckFunction(n):
return lambda X: x%n::O
aniv2 = CreateDivizibleCheckFunction (2)
aniv7 = CreateDivizibleCheckFunction (7)
X = 14
print ( X, aniv2(X), aniv7(X) )
In This case aniv2 and aniv7 are dynamically generaTed. OquuT
This programming paradigm is called closure. l4 True True

***************Ending Page***************

***************Beginning Page***************
***************page number:4**************
A sequence in python is a data structure represented by a vector of elements that
don’t need to be of the same type.
Lists have two representation in python:
‘9 list 9mutable vector (elements from that list can be added, deleted, etc). List can be defined
using [...] operator or the list keyword
‘9 tuple 9 immutable vector (the closest equivalent is a constant list) 9 addition, deletion, etc
operation can not be used on this type of obiect. A tuple is usually defined using (...) or by using
the tuple keyword
list and tuple keywords can also be used to initialized a tuple or list from another list
of tuple

***************Ending Page***************


***************Beginning Page***************
***************page number:5**************
Python 3.x

X = list () #X is an empty list

X = [] #X is an empty list

X = [10,20,”test”] #X is list

X = [10,] #X is list containing [10]

X = [1,2] * 5 #X is list containing [1,2, 1,2, 1,2, 1,2, 1,2]
X,y = [1,2] #X is 1 and y is 2

X = tuple () #X is an empty tuple

X = () #X is an empty tuple

X = (10,20,”test”) #X is a tuple

X = 10,20,”test” #X is a tuple

X = (10,) #X is tuple containing (10)

X I (1,2) * 5 #X is tuple containing (1,2, 1,2, 1,2, 1,2, 1,2)
X I 1,2 * 5 #X is tuple containing (1,10)

X,y I (1,2) #X is 1 and y is 2 (the same happens for X,y I 1,2 )

***************Ending Page***************

***************Beginning Page***************
***************page number:6**************
Elements from a lis’r can be accessed in The following way
Python 3.x

X I ['A'I ‘Bl! 2/ 3I lcll

X[O] #Result is A

X[—l] #Result is C

X[—2] #Result is 3

X[:3] #Result is ['A’, ’B’, 2]

X[3:] #Result is [3, 'C’]

X[l:3] #Result is ['B’, 2]

X[l:—3] #Result is ['B’]

***************Ending Page***************


***************Beginning Page***************
***************page number:7**************
Elements from a Tuple can be accessed in The some way
Python 3.x

X: ('A'! 'B'! 2! 3I 'c')

X[O] #Result is A

x[—l] #Result is C

X[—2] #Result is 3

X[:3] #Result is ('A’, ’B’, 2)

X[3:] #Result is (3, 'C’)

X[1:3] #Result is ('B’, 2)

X[1:—3] #Result is ('B’)

***************Ending Page***************

***************Beginning Page***************
***************page number:8**************
tuple anol list keywords can also be used to convert a tuple to a list anol vice-versa.
Python3.x

X I (IAI, th, 2, 3, vct)

y I list (x) #y I ['A’, ’B’, 2, 3, 'c']

X = ['A'I ‘B'I 2! 3I 'C‘]

y = tuple (x) #y I ('A’, ’B’, 2, 3, 'c'>

Both lists and tuples can be concatenated, but not with each other.

Python3.x

X = (‘AU 2) X = ['A', 2] X = (‘AU 2)
y = ('B', 3) y = ['B', 3] y = ['B', 3]
z=x+y Z=X+y Z=X+y
#2: ('A’,2, 'B’, 3) #Z:[’A’,2, 'B’, 3] #lllError!!!

***************Ending Page***************


***************Beginning Page***************
***************page number:9**************
Tuples are also used to return multiple values from a function.
The following example computes both the sum anol product of a sequence of numbers
Python 3.x
def ComputeSumAndProduct(*list_of_numbers):
s = O
p = l
for i in list_of_numbers:
s += i
p *= i
return (s,p)
suma,produs = ComputeSumAndProduct(l,2,3,4,5)
#suma :15, produs I 120

***************Ending Page***************

***************Beginning Page***************
***************page number:10**************
iuple and lisi can also be organized in matrixes:

Python3.x

X I ([1,2,3], (4,5,6)) #matrix subcomponents don't have to be of the
#same type

#a matrix does not have to have the same number of elements on each

#dimension

#the same rules from tuples apply to lists as well

***************Ending Page***************


***************Beginning Page***************
***************page number:11**************
Both tuples dnd lists can be enumerated with d for keyword:
Python 3.x
Output
for i in [l,2,3,4,5]:
. . i
pr1nt(l)
2
Python 3.x j
for i in (1,2,3,4,5): 5
print(i)
Lists and tuples have d special keyword (len) that can be used to find out the size of
d list tule:
Python 3.x
X = [1,213,415] Output3.x
print (len(x), len(y))

***************Ending Page***************

***************Beginning Page***************
***************page number:12**************
One can also use the enumerate keyword to enumerate a list and get the index of
the item at the same time:
Python 3.x
for index,name in enumerate(["Dragos","Mihai","Nicu","Vlad"]):
print("Index:%d => %s"%(index,name))
Or use an external variable: l
Python 3.x Output
index I O |ndex:0 => Dragos
for name in ["Dragos", "Mihai", "Nicu", "Vlad"]) : _ |ndex=l => Mihqi
print ("Index:%d :> %s"% (index, name) ) |ndex=2 => Nicu
index += l lndex:3 => Vlad

***************Ending Page***************


***************Beginning Page***************
***************page number:13**************
enumerate functions also allows a second parameter to specify the index base
(default is O 9 iust like in C-like languages).
Python 3.x
for index, name in enumerate( ["Dragos", "Mihai", "Nicu", "Vlad"] , e) :
print("IndeX:%d :> %s"%(index,name))
ln this example, the index base will be 2: l
> Dragos (the first name) will have index 2 Output
> Mihai (the second name) will have index 3 |ndex:2 => Dragos
> And so on lndex:3 => Mihai
lndex:4 => Nicu
lndex:5 => Vlad

***************Ending Page***************

***************Beginning Page***************
***************page number:14**************
A list can also be build using functional programming.
‘9 A list of numbers from l to 9
Python 3.x
X I [i for i in range(1,10)] #X I [1,2,3,4,5,6,7,8,9]
‘9 A list of all divisor of 23 smaller than lOO
Python 3.x
X I [i for i in range(1,100) if i % 23 II O] #X I [23, 46, 69, 92]
‘9 A list of all square values for number from l to 5
Python 3.x
X I [i*i for i in range (1, 6)] #X I [1, 4, 9, l6, 25]

***************Ending Page***************


***************Beginning Page***************
***************page number:15**************
A list can also be build using functional programming.
‘9 A list of pairs of numbers from l to lO that summed up produce a number that
divides with 7
Python3.x
X:[[X, y] for X in range(l,10) for y in range(l,10) if (x+y)%7::O]
#X: [[1, 6], [2, 5], [3, 4], [4, 3], [5, 2], l5, 9], l6, ll,
it l6, 8], l7, 7], l8, 6], [9, 5]]
‘9 A list of tuples of numbers from l to lO that summed up produce a number that
divides with 7
Python3.x
x=[(x, y) for X in range(1,lO) for y in range(l,10) if (X+y)%7==0]
#X: [(1, 6), (2, 5), (3, 4), <4, 3), (5, 2), (5, 9), (6, l),
it (6, 8), (7, 7), (8, 6), (9, 5)]

***************Ending Page***************

***************Beginning Page***************
***************page number:16**************
A list can also be build using functional programming.
‘9 A list of prime numbers that a smaller than lOO

Python 3.x

x=[x for X in range(2,lOO) if len([y for y in range(2,x//2+l) if x % y==O])==O]

#X I [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,

59, 61, 67, 71, 73, 79, 83, 89, 97]

Using functional programming in Python drastically reduces the size of code. However,
depending on how large the expression is to build a list, functional programming may
not be advisable if the program purpose is readability.

***************Ending Page***************


***************Beginning Page***************
***************page number:17**************
Lists support a set of functions that can be used to modify and access elements and
modify the list of elements. Some of these functionalities can also be achieve by using
some operators.
g. Add a new element in the list (either use the member function(method) append or
the operator +=). To add lists or tuples use extend method
Python 3.x
X I [1,2,3] #X I [1, 2, 3]
X.append(4) #x I [1, 2, 3, 4]
X+=[5] #X I [1, 2, 3, 4, 5]
X+I[6,7] #X I [1, 2, 3, 4, 5, 6, 7]
X+=(8,9,10) #X I [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
X[len(X):] I [11] #X I [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
X.extend([12,13]) #X I [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]
X.extend((14,15)) #X I [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
ll 14,15]

***************Ending Page***************

***************Beginning Page***************
***************page number:18**************
Lists support a set of functions that can be used to moolity anol access elements ancl
modify the list of elements. Some of these tunctionalities can also be achieved by
using some operators.
‘9 lnsert a new element in the list using member tunction(methool) insert
Python 3.x
X I [1,2,3] #X I [1, 2, 3]
X.insert(1,"A") #X I [1, "A", 2, 3]
X.insert(—l,"B") #x I [1, "A", 2, "B", 3]
X.insert(len(x),"C") #x I [1, "A", 2, "B", 3, "C"]

***************Ending Page***************


***************Beginning Page***************
***************page number:19**************
Lists support a set of functions that can be used to moolity anol access elements ancl
modify the list of elements. Some of these functionalities can also be achieve by using
some operators.
‘9 Insert a new element or multiple elements can be clone using [:] operator. Similarly

[] operator can be useol to change the value of one element

Python 3.x

X= [1,2,3,4,5] #X I [1, 2, 3, 4, 5]

X[2] = 20 #X I [1, 2, Q, 4, 5]

X|:3:] = ["AI'IHBHIHCH] #X : [1, 2, 20, [IA/I, I/B/II I/C/I]

X|::l_:3] = ['Xlllylllzll #X : [10’ [Ix/I, My!!! I/z/I]

***************Ending Page***************

***************Beginning Page***************
***************page number:20**************
Lists support a set of functions that can be used to moolity anol access elements ancl
modify the list of elements. Some of these functionalities can also be achieve by using
some operators.
‘3 Remove an element in the list 9 using member tunction(methocl) remove. This
method removes the first element with a given value
, Python 3.x
X I [1,2,3] #X I [1, 2, 3]
X.remove(l) #x I [2, 3]
X.remove(lOO) #lll ERROR ll! — lOO is not a value from X

***************Ending Page***************


***************Beginning Page***************
***************page number:21**************
Lists support a set of functions that can be used to modify and access elements and modify the list of
elements. Some of these functionalities can also be achieve by using some operators.
‘9 To remove an element from a specific position the del keyword can be used.
Python 3.x
X I [1,2,3,4,5] #X I [1, 2, 3, 4, 5]
del X[2] #X I [1, 2, 4, 5]
del X[—1] #X I [1, 2, 4]
del X[0] #X I [2, 41
del X[1000] #lll ERROR ll! — 1000 is not a valid index
X I [1,2,3,4,5] #X I [1, 2, 3, 4, 5]
del X[4:] #X I [1, 2, 3, 4]
del X[:2] #X I [3, 4]
X I [1,2,3,4,5] #X I [1, 2, 3, 4, 5]
del X[2:4] #X I [1, 2, 5]

***************Ending Page***************

***************Beginning Page***************
***************page number:22**************
Lists support a set of functions that can be used to modify and access elements and
modify the list of elements. Some of these functionalities can also be achieve by using
some operators.

‘9 To pop method can be used to remove an element from a desire position an return
it. This method can be use without any parameter (and in this case it refers to the
last element)

Python 3.x

X I [l,2,3,4,5] #X I [1, 2, 3, 4, 5]

y I X-P°P(2) #X I [1, 2, 4, 5] y I 3

y I X.pop(O) #X I [2, 4, 5] y I 1

y I X-p0p<—1) #X I [2, 4] y I 5

y I X-POP() #X I [2] y I 4

y I X.pop(1000) it! I! ERROR ll! — lOOO is not a valid index

***************Ending Page***************


***************Beginning Page***************
***************page number:23**************
Lists support a set of functions that can be used to modify and access elements and
modify the list of elements. Some of these functionalities can also be achieve by using
some operators.
‘9 To clear the entire list the del command can be used
Python 3.x
X I [l,2,3,4,5] #X I [1, 2, 3, 4, 5]
del X[ z] #X I ll
‘z' Python 3.x also has a method clear that can be used to clear an entire list
Python 3.x
X I [1,2,3,4,5] #X I [1, 2, 3, 4, 5]
x.clear() #X I [l

***************Ending Page***************

***************Beginning Page***************
***************page number:24**************
Be aware that using the operator (=) does not make a copy but only a reference of
a list.
Python 3.x
X = [1,2, 3]
y I X
y.append(lO)
#y I [l,2,3,lO]
If you want to make a copy of a list, use the list keyword:
Python 3.x
X I [1, 2, 3]
y I list (X)
y.append(10)
#X = [1,2, 3]
#y I [1,2,3, 10]

***************Ending Page***************


***************Beginning Page***************
***************page number:25**************
Lists support a set of functions that can be used to modify and access elements and
modify the list of elements. Some of these tunctionalities can also be achieve by using
some operators.
g. Python 3.x also has a method copy that can be used to create a shallow copy of
a list

Python 3.x

X I [1,2,3] #X I [1, 2, 3]

b = X.copy() #X I [1, 2, 3] b I [1, 2, 3]

b +I [4] #X I [1, 2, 3] b I [1, 2, 3, 4]
‘9 The oerator : can also be use to achieve the same result

Python 3.x

X I [1,2,3] #X I [1, 2, 3]

bIX[:] #XI [1, 2, 3] bI [1, 2, 3]

***************Ending Page***************

***************Beginning Page***************
***************page number:26**************
Lists support a set of functions that can be used to modify and access elements and modify the
list of elements. Some of these functionalities can also be achieve by using some operators.
‘9 Use index method to find out the position of a specific element in a list

Python 3.x

X = ['IA'IIHBHIHC",I'DH] #X : [I/A/II l/B/II l/c/II [ID/l, [IE/l]

y = X.index("C") #y I 2

y = X.index("Y") #lll ERROR 1!! — "Y" is not part of list X
‘9 The operator in can be used to check if an element exists in the list

Python 3.x

X : ["A","B","C","D":| #X : [I/A/II l/B/II IIc/I, [ID/I, [IE/I]

y I "C" in X #y I True

y I "Y" in X #y I False

***************Ending Page***************


***************Beginning Page***************
***************page number:27**************
Lists support a set of functions that can be used to modify and access elements and modify the
list of elements. Some of these functionalities can also be achieve by using some operators.
‘9 Use count method to find out how many elements of a specific value exists in a list

Python 3.x

X I [l,2,3,2,5,3,1,2,4,2] #X I[1,2,3,2,5,3,1,2,4,2]

y I x.count(2) #y I 4 [l,2,3,g,5,3,1,g,4,g]

y I X.count(O) #y I O
‘9 The reverse method can be used to reverse the elements order from a list

Python 3.x

X I [1,2,3] #X I [1,2,3]

x.reverse () #x I [3,2,1]

***************Ending Page***************

***************Beginning Page***************
***************page number:28**************
Lists support a set of functions that can be used to modify anol access elements anol
modify the list of elements. Some of these functionalities can also be achieve by using
some operators.
‘9 Use sort method to sort elements from the list
sort (keyINone, reverseIFalse)
Python 3.x ( )
X = [2,1,4,3,5]
X.Sort() #X I [l,2,3,4,5]
X.sort(reverse=True) #X I [5,4,3,2,1]
X.sort(key = lambda i: i%3) #X I [3,4,1,2,5]
X.sort(key = lambda i: i%3,reverse=True) #X = [5,2,4,l,3]

***************Ending Page***************


***************Beginning Page***************
***************page number:29**************
Python has several build-in functions design to work with list (iterators). These functions
rely heavily on lambda expressions:
‘z' Use map to create a new list where each element is obtained based on the
lambda expression provided.
map ( function, iterableEIement7, [iterableEIement2,... iterableEIementn] )
Python 3.x
X I [1,2,3,4,5]
y I list(map (lambda element: element*element,x)) #y I [1, 4, 9, 16, 25]
X I [l , 2 , 3]
y I [4 , 5, 6]
z I list(map(lambda e1,e2: e1+e2,x,y)) #2 I [5, 7, 9]

***************Ending Page***************

***************Beginning Page***************
***************page number:30**************
Python has several build-in functions design to work with list (iterators). These functions rely heavily on
lambda expressions:
‘9 map function returns an iterable obietc in Python 3.x
Python
X = [1 , 2 , 3]
y = map (lambda element: element*element, X)
#y I iterable object 9Python 3 . X
‘9 to create a list from an iterable obiect, use the list keyword
Python
X = [1 , 2 , 3]
Y = [4 I 5 I 6, 7]
z = list(map(lambda el,e2: e1+e2,X,y)) #2 I [5, 7, 9] 9 Python 3.X

***************Ending Page***************


***************Beginning Page***************
***************page number:31**************
Python hols several build-in functions design to work with list (iterators). These functions
rely heavily on lolmbdo expressions:
‘t. Use filter to creote o new list where eoch element is filtered bolsed on the lolmbdol
expression provided.
Filter ( function, itercrbleElement )
Python 3.x
y I list(filter(lambda element: element%2::O,X)) #y I [2,4]

***************Ending Page***************

***************Beginning Page***************
***************page number:32**************
Python hols several builol-in functions design to work with list (iterators). These functions
rely heolvily on lambda expressions:
'i‘ Both filter and map con olso be used to creolte o list (usuollly in coniunction with
range keyword)
Python 3.x
x = list(map(lambda x: x*x, range(l,lO)))
#X I [1, 4, 9, 16, 25, 36, 49, 64, 81]
x = list(filter(lambda X: X%7==l,range(l,lOO)))
#X I [1, 8, 15, 22, 29, 36, 43, 50, 57, 64, 71, 78, 85, 92, 99]

***************Ending Page***************


***************Beginning Page***************
***************page number:33**************
Python has several build-in functions design to work with list (iterators). These functions
rely heavily on lambda expressions:
‘9 Use min and max functions to find out the biggest/smallest element from an iterable
list based on the lambda expression provided.
max (iterabIeElement, [key] ) min (iterabIeElement, [key] )
max (ell, el2, [key] ) min (el1, el2, [key] )
Python 3.x
y = max (X) #y I 5
y=max (X,key= lambda i: i % 3) #y: 2
‘9 If you want to use a key for max and/or min function, be sure that you added with
the parameter name decoration: key I <function>, and not '|ust the key_function or a
lambda.

***************Ending Page***************

***************Beginning Page***************
***************page number:34**************
Python has several build-in functions design to work with list (iterators). These functions
rely heavily on lambda expressions:
‘9 Use sum to add all elements from an iterable oloiect. Elements from the iterable
obiects should allow the possibility of addition with other elements.
sum (iterableElement, [startVaIue])
‘z' startVaIue represent the value from where to start summing the elements. Default is O
Python 3.x
X = [1,2,3,4,5]
y = sum (X) #y I 15
y = sum (X,100) #y I 115 (100+15)
X = [1,2, "3”, 4,5]
y = sum (X) #ERROR9 Can’ t add int and string

***************Ending Page***************


***************Beginning Page***************
***************page number:35**************
Python hols several build-in functions design to work with list (iterators). These functions rely heavily on
lolmlodo expressions:
‘9 Use sorted to sort the element from o list (iteroble obiect). The key in this cose represents o compare
function between two elements of the iterolble ob'ect.

sorted (iterololeElement, [key],[reverse])

‘9 The reverse orolmeter if not secified is considered to be Folse
Python 3.x
X = [2,114,315]
y I sorted (x) #y I [1,2,3,4,5]
y I sorted (X,reverse:True) #y I [5,4,3,2,1]
y I sorted (X,key I lambda i: i%3) #y I [3,1,4,2,5]
y I sorted (X,key I lambda i: i%3,reverse:True) #y I [2,5,l,4,3]

‘9 Just like in the precedent cose, you must use the optionol porometer with their nome

***************Ending Page***************


***************Beginning Page***************
***************page number:36**************
Python has several build-in functions design to work with list (iterators). These functions
rely heavily on lambda expressions:
‘t. Use reversed to reverse the element from a list (iterable obiect).
Python 3.x
X I [2,1,4,3,5l
y I list (reversed(x)) #y I [5,3,4,l,2]
‘t. Use any and all to check if at least one or all elements from a list (iterable obiects)
can be evaluated to true.
Python 3.x
X = [2,l,O,3,5l
y = any(X) #y I True, all numbers except O are evaluated to True
y = all(X) #y I False, O is evaluated to False

***************Ending Page***************

***************Beginning Page***************
***************page number:37**************
Python has several builol-in functions design to work with list (iterators). These functions
rely heavily on lambda expressions:
‘t. Use zip to group 2 or more iterable obiects into one iterable obiect
Python 3.x
X = [l , 2 , 3]
y = [10,20,301
z = list(zip(X,y)) #2 I [(1,10) , (2,20) , (3,30)]
‘9 Use zip with * character to unzip such a list. The unzip variables are tuples
Python 3.x
a,b I zip(*X) #a I (1,3,5) and b I (2,4,6)

***************Ending Page***************


***************Beginning Page***************
***************page number:38**************
| BUILT-IN FUNCTIONS FDR LIST
Python hols several builol-in functions design to work with list (iterators). These functions
rely heolvily on lombdo expressions:
‘t. Use del to delete o list or ol tuple
Python 3.x
del X
print (X) #lllERROR!!! x no longer exists

***************Ending Page***************

