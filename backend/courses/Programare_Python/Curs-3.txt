***************Beginning Page***************
***************page number:1**************
\I\I\I\I\I\I\/\
I \ﬂ\ﬂ\ﬂ\ﬂ\ﬂ\ﬂ\ I
\ ﬂ\ﬂ\ﬂ\ﬂ\ﬂ\ﬂ\ﬂ \
1 \ﬂ\ﬂ\ﬂ\ﬂ\ﬂ\ﬂ\ I
\ ﬂ\ﬂ\ﬂ\ﬂ\ﬂ\ﬂ\ﬂ \
'\’\’\l\l\l\l\1
PROGRAMMING m PYTHON | 555%“?9“

***************Ending Page***************

***************Beginning Page***************
***************page number:2**************
| SETS

A list of unique data (two elements g and b are considered unique if g is different
than b 9 this Translates as g is of a different type than b or if g and b are of the
same type, that a != b )
A special keyword set can be used to create a set. The { and } can also be used to
build a set. Set keyword can be used to initialize a set from tuples ,lists or strings.
Sets supports some special mathematical operations like:

‘9 Intersection

‘9 Union

‘9 Difference

‘9 Symmetric difference

***************Ending Page***************


***************Beginning Page***************
***************page number:3**************
Python 3.x

X = set() #X is an empty set

X = {1,2,3} #X is a set containing 3 elements: 1,2 and 3

X = {1,2,2,3,1,1} #X is a set containing 3 elements: 1,2 and 3

X = {1,2,”AB”,”ab”} #X is a set containing 4 elements: 1,2,“AB” and “ab”
X = set((1,2,3,2)) #X is a set containing 3 elements: 1,2 and 3

X = set([1,2,3,2]) #X is a set containing 3 elements: 1,2 and 3

X = set("Hello”) #X is a set containing 4 characters: H,e,l and o

***************Ending Page***************

***************Beginning Page***************
***************page number:4**************
Elements from a set can NOT be accessed (they are unordered collections):

Python 3.x

XI {lAlI ‘Bl! 2! 3! lC'}

X [O] , x[l] , x[l :2] , -) all this expression will produce an error
Similarly — there is no addition operation defined between two sets:

Python 3.x

X: {IAII ‘Bl! 2! 3I lc'}

Y={'D', ‘E', 1}

z = y + z #lllERROR l!

***************Ending Page***************


***************Beginning Page***************
***************page number:5**************
Sets support a set of functions that can be used to modify its content. Some of these functionalities can also be
achieved by using some operators.
‘9 Add a new element in the set (either use the member function(method) add )
Python 3.x
XI {1,2,3} #XI {1, 2, 3}
X.add(4) #X I {1, 2/ 3, 4}
X.add(l) #X I {1, 2, 3, 4}
'I' Remove an element from the set ( methods remove or discard ). Remove throws an error if the set does not
contain that element. Use clear method to empty an entire set.
Python 3.x
X= {1,2,3} #XI {1, 2, 3} X= {1,2,3} #XI {1, 2, 3}
X.remove(l) #X I {2, 3} X.clear() #X I {}
x.discard(2) #X I {3}
x.discard(2) #X I {3}

***************Ending Page***************

***************Beginning Page***************
***************page number:6**************
Sets support a set of functions that can be used to modify its content. Some of these
functionalities can also be achieved by using some operators.
‘9 Several elements can be added to a set by either use the member
function(method) update or by using the operator | =
Python 3.x
X= {1,2,3} #X: {1, 2, 3}
X |= {3,4,5} #X: {1, 2, 3, 4, 5}
X.update({5,6}) #X I {1, 2, 3, 4, 5, 6}
X.update({8}, {6}, {9}) #X I {1, 2, 3, 4, 5, 6, 7, 8, 9}
‘9 update method can be called with multiple parameters (sets)

***************Ending Page***************


***************Beginning Page***************
***************page number:7**************
Sets support o set of functions thot coin be used to modify its content. Some of these
functionollities con olso be ochieved by using some operoltors.
g. Union operotion con be performed by using the operotor | or the method union
Python 3.x
X = {1,2,3}
y = {3, 4, 5}
t = {2,4,6}
z = X | y | t #z I {1, 2, 3, 4, 5, 6}
S = {7, 8}
w I X.union(s) #w I {1, 2, 3, 7, 8}
w I X.union(s, y, t) #w I {1, 2, 3, 4, 5, 6, 7, 8}
‘9 union method con be colled with multiple polrdmeters (sets)

***************Ending Page***************

***************Beginning Page***************
***************page number:8**************
Sets support a set of functions that can be used to modify its content. Some of these
tunctionalities can also be achieved by using some operators.
‘9 Intersection operation can be performed by using the operator & or the method
intersection
Python 3.x
X I {l , 2 , 3 , 4 }
t I {3 , 4 , 5 , 6}
z I X & y & t #z I {3, 4}
w I X.intersection(y) #w I {2, 3, 4}
w I X.intersection(y, t)#w I {3, 4}
‘9 intersection method can be called with multiple parameters (sets)

***************Ending Page***************


***************Beginning Page***************
***************page number:9**************
Sets support a set of functions that can be used to modify its content. Some of these
functionalities can also be achieved by using some operators.
‘9 Difference operation can be performed by using the operator - or the method
difference
Python 3.x
X I {l , 2 , 3 , 4 }
y I {2 , 3 , 4 , 5}
z I X — y #z I {l}
z I y — X #z I {5}
w I X.difference(y) #w I {l}
s I {1 , 2 , 3}
w I X. difference (y, s) #w I {} 9 empty set
‘z' difference method can be called with multiple parameters (sets)

***************Ending Page***************

***************Beginning Page***************
***************page number:10**************
Sets support a set of functions that can be used to modify its content. Some of these
functionalities can also be achieved by using some operators.
‘9 Symmetric difference operation can be performed by using the operator A or the
method symmetric_difference
Python 3.x
X I {1,2,3,4}
z I X A y #2 I {1, 5}
z I y A X #2 I {1, 5}
w I X.symmetrie_difference(y) #w I {1, 5}
w I X.symmetrie_difference(y,s) #!!! ERROR ll!
‘9 symmetric_difference method can NOT be called with multiple parameters (sets)

***************Ending Page***************


***************Beginning Page***************
***************page number:11**************
All sets operations also support some operations that apply to one variable such as:
Q o
v Intersectlon
El intersection_update
El &=
‘9 Difference
El difference_update
E] -:
‘9 Symmetric difference
El symmetric_difference_update
El "=

***************Ending Page***************

***************Beginning Page***************
***************page number:12**************
Sets support o set of functions that coin be used to modify its content. Some of these
functionalities con olso be ochieveol by using some operoltors.
‘9 To test if on element exists in oi set, we con use the in operator
Python 3.x
X = {l , 2 , 3 , 4 }
y = 2 in X #y I True
z = 5 not in X #z I True
‘9 Totol number of elements from oi set coin be found out using the len keyword
Python 3.x
X I {10,20,30,40}
y I len (X) #y I 4

***************Ending Page***************


***************Beginning Page***************
***************page number:13**************
Sets support a set of functions that can be used to modify its content. Some of these functionalities
can also be achieved by using some operators.
‘9 Use method isdisioint to test if a set has no common elements with another one
Python 3.x
X = { l , 2 , 3 , 4 }
y = {lO,20,30,40}
z I X.isdisjoint(y) #2 I True
‘9 Use method issubset or operator <= to test if a set is included in another one
Python 3.x
X I { l , 2 , 3 , 4 }
Y I {1,213/4,516}
z I X.issubset(y) #2 I True
t I X <2 y #t I True

***************Ending Page***************

***************Beginning Page***************
***************page number:14**************
Sets support a set of functions that can be used to modify its content. Some of these functionalities
can also be achieved by using some operators.
‘is Use method issuperset or operator >= to test if a set is included in another one
Python 3.x
X = {1 I 2 I 3 I 4 }
y ={11213I41516}
z I y.issuperset(X) #z I True
t I y >I X #t I True
‘9 Operator > can also be used 9 it checks if a set is included in another BUT is not identical to
it. Operator < can be used in the same way.
Python 3.x
XI {l,2,3,4} XI {l,2,3,4}
y= {1,213/4,516} y={1,2,3,4}
t I y > X #t I True t I y > X #t I False

***************Ending Page***************


***************Beginning Page***************
***************page number:15**************
Sets support a set of functions that can be used to modify its content. Some of these

functionalities can also be achieved by using some operators.

‘t. Use method pop to remove one element from the set. The remove element is
different from Python 2.x to Python 3.x in terms of the order the element are kept in
memory. Even if sets are unordered collection, in order to have quick access to
different elements of the set these elements must be kept in memory in a certain way.

Python 3.x
X : {"A",'IaIIIIIB'IIIIbHIll2l3}
print (X) Output (Python 3)
print (X .pop () ) {l I 2, 3, 'b', ‘Bl, ‘All '0'}
l
g. Use copy method to make a shallow copy of a set.

***************Ending Page***************

***************Beginning Page***************
***************page number:16**************
A set can also be built using functional programming
‘9 The main difference is that instead of operator [...] to build a set one need to use {...}
Python 3.x
X I {i for i in range(l,9)} #X I {1,2,3,4,5,6,7,8}
X I {i for i in range(l,lOO) if i % 23 II O} #X I {23, 46, 69, 92}
X I {i*i for i in range(l,6)} #X I {1, 4, 9, 16, 25}
‘9 The condition of the set (all elements are unique) still applies. ln the next case, only the
first elements that meet the required criteria will be added.
Python 3.x
X I {i%5 for i in range(O,100)} #X I {0, l, 2, 3, 4}

***************Ending Page***************


***************Beginning Page***************
***************page number:17**************
The default build-in functions for list can also be used with sets and lambdas.
‘9 Use map to create a new set where each element is obtained based on the
lambda expression provided.
Python 3.x
y = set(map(lambda element: element*element,x)) #y I {l,4,9,l6,25}
X = [1,2,3]
y = [4, 5, 6]
z I set(map(lambda el,e2: el+e2,X,y)) #2 I {5,7,9}

***************Ending Page***************

***************Beginning Page***************
***************page number:18**************
The default build-in functions for list can also be used with sets and lambdas.
‘9 Use filter to create a new set where each element is filtered based on the lambda expression
provided.
Python 3.x
y = set(filter(lambda element: element%2==O,X)) #y I {2,4}
‘9 Both filter and map are used to create a set (usually in coniunction with range keyword)
Python 3.x
X = set (map (lambda X: X*X, range (l, 10)) )
#X I {1, 4, 9, 16, 25, 36, 49, 64, 81}
X = set(filter(lambda X: X%7==1,range(1,1OO)))
#X I {1, 8, 15, 22, 29, 36, 43, 50, 57, 64, 71, 78, 85, 92, 99}

***************Ending Page***************


***************Beginning Page***************
***************page number:19**************
The default build-in functions for list can also be used with sets and lambdas.
‘9 Other functions that work in a similar way as the build-in functions for list are min, max, sum, any,
all, sorted, reversed
‘9 for statement can also be used to enumerate between elements of a set
Python 3.x
for i in {1,2,3,4,5}:
print(i)
‘9 Python language also has another type 9 frozenset. A frozen set has all the characteristics of a
normal set, but it can not be modified. To create a frozen set use the frozenset keyword.
Python 3.x
X I frozenset ({l,2,3})
X.add(10) #lllERROR!!!

***************Ending Page***************

***************Beginning Page***************
***************page number:20**************
A dictionary is python implementation of a hash-map container. Design as a (key — value pair) where Key
is a unique element within the dictionary.
A special keyword dict can be used to create a dictionary. The { and } can also be used to build a
dictionary — much like in the case of sets.
Python 3.x
X I dict() #X is an empty dictionary
X I {} #X is an empty dict (typeof(X):“dict”)
X I {"A”:1, ”B”:2} #X is a dictionary with 2 keys

#(“A” and “B”)
X I dict(abc:1,aaa:2) #equivalent to X: {"abc”:1, ”aaa”:2}
X = dict({”abc”:1,”aaa”:2}) #equivalent to X: {"abc”:1, ”aaa”:2}
X = dict([(”abc”,1) ,("aaa”,2)]) #equivalent to X: {"abc”:1, ”aaa”:2}
X = dict(((”abc”,1) ,("aaa”,2))) #equivalent to X: {"abc”:1, ”aaa”:2}
X = dict(zip([”abc”,”aaa”],[1,2]))#equivalent to X: {"abc”:1, ”aaa”:2}

***************Ending Page***************


***************Beginning Page***************
***************page number:21**************
To set a value in a dictionary use [] operator. The same operator can be used to read an existing
value. If a value does not exist, an exception will be thrown.

Python 3.x

X I {} #X is an empty dictionary

X[”ABC”] I 2 #X is a dictionary with one key (ABC)

y I X[”ABC”] #y z 2

y I X[”test”] #lll ERROR ll!
To check if a key exists in a dictionary, use in operator; len can also be used to find out how may
keys a dictionary has.

Python 3.x

X = {"A”:l, ”B”:2} #X is a dictionary with 2 keys

"A" in X #True

len (X) #2

***************Ending Page***************

***************Beginning Page***************
***************page number:22**************
Values from a dictionary can also be manipulated with setdefault member.
Python 3.x
X = {"A”:l, ”B”:2} #X I {"A”:l,”B”:2}
y I X.S€td€fault(”C”,3) #X I {"A”:l,”B”:2,”C:3”}, yIB
y I X.setdefault(”D”) #X I {"A”:l,”B”:2,”C:3”,”D”:None}, yINone
y I X.S€td€fault(”A”) #X I {"A”:l,”B”:2,”C:3”,”D”:N0ne}, yIl
y I X.S€td€fault(”B”,ZO) #X I {"A”:l,”B”:2,”C:3”,”D”:N0ne}, yIZ
Method update can also be used to change the value associated with a key.
Python 3.x
X = {"A”:l, ”B”:2} #X I {"A”:l,”B”:2}
X.update({”A”:lO}) #X I {"A”:lO,”B”:2}
X.update({”A”:100,”B”:5}) #X I {"A”:lOO,”B”:5}
X.update({”C”23}) #X I {"A”:lOO,”B”:5,”C”:3}
X.update(DI123,EIlll) #X I {"A”:lOO,”B”:5,”C”:3,”D”:123,”E”:lll}

***************Ending Page***************


***************Beginning Page***************
***************page number:23**************
To delete an element from a dictionar use del ke word or clear method

Python 3.x

X : {I/A//:1, IIB//:2} #X : {IIA//:l,/IBII:2}

del X[”A”] #X I {"B”:2}

X.clear() #X is an empty dictionary

del X["C"] #lll ERROR 1!! “C” is not a key in X
To create a new dictionary you can use copy or static method fromkeys

Python 3.x

X : {I/A//:1, ,,B,,:2} #X:{IIAII:1,,,BII:2}

y I X.copy() #makes a shallow copy of x

y|://cll:|:3 #X:{IIA/I:1II/B//:2},yz{/IAII:1Il/B//:2,//c/I:3}

X I dict. fromkeys( ["A", "B"]) #x I {"A" :None, "B" :None}

X I dict. fromkeys( ["A”, ”B”] , 2) #X I {"A” : 2 , "B" : 2}

***************Ending Page***************

***************Beginning Page***************
***************page number:24**************
Elements from the dictionar can also be accessed with method et

Python 3.x

X : {IIAII:1, [IE/1:2} #X : {I/A/I:l,/IBII:2}

y = X get(”A”) #y I 1

Y = X-g€t(”C”) #y I None

y = X.g€t(”C”,123) #y I 123

An element can also be extracted using pop method.

Python 3.x

X = {,,A,,:l, [IE/1:2} #X:{//A//:l,/IBII:2}

y = X.pop(”A”) #X:{”B”:2}, y I l

y = X.pOp(”C”,123) #X:{"B";2}, y : 123

y = X.pop(”D”) #lll ERROR 1!! Key “D” does not exist
#and no default value was provided

***************Ending Page***************


***************Beginning Page***************
***************page number:25**************
A dictionary can also be built using functional programming
Python 3.x

X = {izi for i in range(1,9)}

#X I {1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8}

X = {izchr(64+i) for i in range(1,9)}

#X : {1:IIA/ll2:/IB//I3:llclll4://D//,5:IIE//,6://F//,7:IIG//,8:IIHII}
X = {i%3:i for i in range(l,9)}

#X I {Oz6,l:7,2:8} -> last values that were updated
X = {i:chr(64+i) for i in range(l,9) if i%2==O}

#X : {2:IIB/II 4:’,DIII 6:’,FIII 8://H//}

X = {i%3:chr(64+i) for i in range(l,9) if i<7}

#X : {1:IID/II 2://E//, Uzi/Elli}

***************Ending Page***************

***************Beginning Page***************
***************page number:26**************
Keys from the dictionary can be obtained with method keys
Python 3.x
X : {HA/1:1, "BI/:2} #X : {I/A/I:1,/IBII:2}
y I X.keys() #y I ["A”,”B”]-9 an iterable object
To iterate all keys from a dictionary:
Python 3.x Output
X : {IIAII:1, "BI/:2} A
for i in X: B
print (i)
X : {IIAII:1, [IE/1:2}
for i in X.keys():
print (i)

***************Ending Page***************


***************Beginning Page***************
***************page number:27**************
Values from the dictionar can be obtained with method values

Python 3.x

X : {,,A,,:l, I/B//:2} #X : {l/A/IzllllB/l:2}

y = X. values() #y I ["l”, "2"] 9 an iterable object
To iterate all values from a dictionary:

Python 3.x OUfPUl

X = {IIAII:1, [IBI!:2} 1

for i in X.values(): 2

print (i)

Output order may be different for different versions of python depending on how
data is stored/ordered in memory.

***************Ending Page***************

***************Beginning Page***************
***************page number:28**************
All polirs from ol dictionary coin be obtained using the method items
Python 3.x
X : {I/A//:1, IIB//:2} #X : {l/A/I:1IIIBII:2}
y = X.items() #y I an iterable object (Python 3) or
#a list of tuples for Python 2.
To iterate all keys from o dictionary:
Python 3.x Output
X : {llA//:1, ,,B,,:2} (HAN, 'I)
for i in X. i tems () = ("5", 2)
print (i)

***************Ending Page***************


***************Beginning Page***************
***************page number:29**************
Using the items method elements from ol dictionary coin be sorted according to their
vollue.
Python 3.x
X z { Dunn"
"Dacia" : 120,
"Toyota" 1 140 ("TOYOTG", 140)
} (“BMW”, 160)
for i in sorted(x.items(),key I lambda element : element[l]):
print (i)

***************Ending Page***************

***************Beginning Page***************
***************page number:30**************
Operator ** can be used in a function to specify that the list of parameters of that
function should be treated as a dictionary.
Python 3.x
def GetFastestCar(**cars):
min_speed I O
name I None
for car_name in cars:
if cars[car_name] > min_speed:
name I car_name
min_speed I cars[car_name]
return name
fastest_car I GetFastestCar(Dacia:120,BMWIl6O,Toyotazl40)
print (fastest_car)
#fastest_car I "BMW"

***************Ending Page***************


***************Beginning Page***************
***************page number:31**************
Build-in functions such ols filter coin also be used with dictionaries.
Python 3.x
X = {
"Dacia" : 120,
"BMW" : 160,
"Toyota" : 140
}
y I dict(filter (lambda element : element [1] >214O,X. items() ))
#y I {"Toyota”:140, ”BMW”:160}
To delete oln entire dictionary use del keyword.

***************Ending Page***************



***************Beginning Page***************
***************page number:32**************
enumerate keyword can also be used with dictionaries.

Python 3.x Output

X I { (O, 'Dacia')
"Dacia" : 120, (1, 'BMW')
"BMW" : 160, (2, 'Toyota')
"Toyota" : 140, (3, 'Volvo')
"Volvo" : 115, (4, 'Renault')
"Renault" : 120,

l

for a in enumerate (x):
print (a)

In this case, the resulted tuple contains the index and the key !

Just like in the case of lists (sequences), enumerate can receive a secondary parameter that states the

initial index 9 “enumerate (x,2)” will start with the index 2.

***************Ending Page***************



