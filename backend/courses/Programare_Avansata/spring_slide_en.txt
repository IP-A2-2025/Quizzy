***************Beginning Page***************
***************page number:1**************
g) Java"
Advanced Programming
Spring Framework
(REST Services)

***************Ending Page***************

***************Beginning Page***************
***************page number:2**************
The Context
- Most applications use various technologies
(GUI, ORM, services, logging, testing, Dl, etc)
- Integrating all these technologies may be a
difficult and repetitive task
- The common usage of some technologies may
be simplified (implicit middleware)
- We want to expose network services.
- We need:
— application frameworks or/and
— application servers

***************Ending Page***************


***************Beginning Page***************
***************page number:3**************
Application Server

- An application server hosts applications
- An application contains components

— Ul components (for creating presentation)

— Bussines components (for implementing logic)

— Services (for communication)

— Administrative objects: data sources, queues, etc.
- Components exist inside containers

— Web, EJB, IOC, etc.
- An AS implements speciﬁcations (Java EE)
- Tomcat, Glassfish, WildFIy, TomEE ,etc.

***************Ending Page***************

***************Beginning Page***************
***************page number:4**************
Application Framework

- Simplifies the creation of an application

- Provides modules for:
— Logging, Testing, Data access, Security
— MVC, AOP, ICC, etc.

~ A lightweight approach to the functionalities
offered by the heavier application servers

- For Web functionalities, they still need an
embedded server (small, light).

- SpringFramework, Apache Tapestry, Google
Guice, etc.

***************Ending Page***************


***************Beginning Page***************
***************page number:5**************
Service Oriented Architecture

- An architectural style that focuses on discrete
services instead of a monolithic design.

- A service is a self-contained unit of software
designed to complete a specific task.

- Promotes reusability and extensibility.

' Creates interoperability between apps and services
— Application-to-Application (A2A)
— Business-to-Business (BZB)

- May offer on-demand scalability.

- Uses standard protocols.

***************Ending Page***************

***************Beginning Page***************
***************page number:6**************
Network Services
- Network services use protocols
' Transport protocols:
— TCP, UDP, etc. —> Data transfer
' Application protocols (on top of transport):
— HTTP, HTTPS —> Data representation
- How to expose/communicate with a service?
— Rigurous (heavy) model
' Describe: WSDL, etc
- Locate: UDDI, etc.
- Invoke (communicate): SOAP, etc.
— Simple model: REST paradigm

***************Ending Page***************


***************Beginning Page***************
***************page number:7**************
Spring Framework
spnngjo

- “Spring makes programming Java quicker,

easier, and safer.”
' Focus on speed, simplicity, and productivity
- Developed by Pivotal Software (2002—> today)
' The world's most popular Java framework

— Intersects with and offers alternatives to Java EE
- Organized in a modular fashion

— Web apps, Data access, Micro services, etc.

***************Ending Page***************

***************Beginning Page***************
***************page number:8**************
Spring Boot
- Spring Boot makes it easy to create stand-
alone applications that you can "just run".
' Simple way to create (Micro)Services.
- Embed Tomcat, Jetty or Undertow directly (no
need to deploy WAR files)
- Spring initializr: https://start.spring.io/
— Choose the language: Java, Kotlin, Groovy,
— Build system: Maven, Gradle,
— JVM version, Spring version, Dependencies

***************Ending Page***************


***************Beginning Page***************
***************page number:9**************
7
Let s look at pomxml
<dependencies>
<dependency>
<group1d>_</group1d>
<artifactId>spring—boot—starter-web</artifactId>
</dependency>
</deoendencies> Starter for building weld, including RESTfuI,
applications using Spring MVC. Uses Tomcat
, as the default embedded container
<bUlld>
<plugins>
<plugin>
<groupId>org.springframework.boot</groupId>
<artifactId>spring-boot-maven-plugin</artifactId>
</plugin>
</plugins>
</build>

***************Ending Page***************

***************Beginning Page***************
***************page number:10**************
package com.example.demo;
@SpringBootApplication
public class DemoApplication {
public static void main(String[] args) {
SpringApplication.run(DemoApplication.class, args);
System.out.println("Hello worldl");
}
}
The entry point of the Spring Boot Application is the class containing the
@SpringBootApplication annotation. This class should have the main
method to run the Spring Boot application.
@SpringBootApplication annotation includes Auto-Configuration,
Component Scan, and Spring Boot Configuration.

***************Ending Page***************


***************Beginning Page***************
***************page number:11**************
“Running” the application
z: Spring Boot :: (v2.2.6.RELEASE)
: Starting DemoApplication on Cristi-PC with PID 5232
: Tomcat initialized with port(s): 8080 (http)
: Starting Servlet engine: [Apache Tomcat/9.0.33]
: Initializing Spring embedded WebApplicationContext
: Initializing ExecutorService 'applicationTaskExecutor'
: Tomcat started on port(s): 8080 (http) with context path "
: Started DemoApplication in 1.994 seconds
Hello world!
Q le-calhestBDBU I
é {3 {j} lucalhcstﬂﬁﬁil
I
Whitelab el E rmr Page
This application has ne explicit mapping for fen'nir= sn jmu are seeing this as a fallback-
Tue Apr ll 13:16:53 EEST EDIE
Thensamsaaumeapmjedenciﬁype=lkﬁlﬁauuLsﬁﬂquHFH.
Nu message available

***************Ending Page***************

***************Beginning Page***************
***************page number:12**************
package com.example.demo;
http://localhost:8080/hello
@RestControl 1er Greetings from Spring Boot!
public class HelloController {
@RequestMapping("/hello")
public String sayHello() {
return "Greetings from Spring Bootl";
}
The Sprlng Web model-Vlew-oontroller (MVC) framework IS deSIgned
around a DispatcherServlet that dispatches requests to handlers, with
configurable handler mappings.
The default handler is based on the @Controller and @RequestMapping
annotations.

***************Ending Page***************


***************Beginning Page***************
***************page number:13**************
Creatl ng a SI mple test
package com.example.demo;
@SpringBootTest
@AutoConfigureMockac
public class HelloControllerTest {
@Auwwned Autowired: Spring's dependency injection.
private Mockac mVC; This is an alternative to Java EE Inject annotation.
@Test
public void getHello() throws Exception {
mvc.perform(MockacRequestBuilders.get("/hello")
.accept(MediaType.APPLICATION_JSON))
.andExpect(status().isOk())
.andExpect(
content().string(equalTo("Greetings from Spring Boot!"))
) ;
}
}

***************Ending Page***************

***************Beginning Page***************
***************page number:14**************
public class HelloService {
i public String sayHello(String name) { i
i return "Greetings from " + name; i
§} We can use @Component across
the application to mark the beans
as Spring's managed components.
@RestController
public class HelloController { W? mark beans W'th @SerV'Ce t0
@A t _ d |nd|cate that they're holdlng the
u Oere business logic. Besides being used
private HelloService hGllOSGIViCG; in the service |ayer, there isn't any
other special use for this
@ReguestMapping("/hello") annoﬁmon.
public String sayHello() {
return helloService.sayHello("Spring Boot");
}
}

***************Ending Page***************


***************Beginning Page***************
***************page number:15**************
RESTful Web Services
' Service implementation over HTTP that
conforms to the REST architectural style.
' Data and functionality are considered
resources and are accessed using an uniform
interface:
— Identification —> URI, for example:
http://example.com/resources
— Representations —> Standard MIME types:
Text, JSON, XML, YAML, etc.
— Operations —> Standard HTTP methods:
HTTP POST, GET, PUT, DELETE

***************Ending Page***************

***************Beginning Page***************
***************page number:16**************
HTTP Methods

' GET: Used to request data from a specified resource.
Should not produce any side effect.

' PQSTI Used to create a new child resource, at a server
defined URL. POST is non-idempotent which means
multiple reguests will have different effects

' PUT: Used to create or replace if exists a resource, at a
URL known by the client. ldempotent, which means
multiple requests will have the same effect.

' PATCH: Used to update part of the resource at the client
defined URL.

' DELETE: Used to remove a specified resource (from
the database, for example)

***************Ending Page***************


***************Beginning Page***************
***************page number:17**************
' Java Script Object Notation
- Format for storing and exchanging textual data
- Examples:
{"name": "Java", "age": 26, "parent": "Sun Microsystems"}
{"languages":[
{ "name":"Java", "age":26},
{ "name":"Python", "age":32},
{ "name":"C++", "age":37}]
}
- MIME: "application/json"
- Parsers: GSON, Jackson, etc.
' JSON vs. XML

***************Ending Page***************

***************Beginning Page***************
***************page number:18**************
Spring REST API support
- @RestController — @Controller and @ResponseBody
- @RequestMapping(va|ue, method)
Mapping web requests onto methods in request-
handling classes with flexible method signatures.
@GetMapping, @PostMapping, @PutMapping, @DeleteMapping
- @RequestBody: HttpRequest body —> domain object
- @ResponseBody: domain object —> HttpResponse
~ @PathVariable: for custom or dynamic request URI
- @RequestParam: read a param from the request URI
- ResponseEntity: Builder for creating the response

***************Ending Page***************


***************Beginning Page***************
***************page number:19**************
@RequestMapping(value = "/path", method = RequestMethod.GET,
produces = "application/json")
@RestController
—
public class ProductController {
private final List<Product> products = new ArrayList<>();
public ProductController() {
products.add(new Product(l, "Mask"));
products.add(new Product(2, "Gloves"));
} localhost:8080/products
[{"id":l,"name":"Mask"},
— {"id":2,"name":"Gloves"}]
public List<Product> getProducts() {
return products; localhost:8080/products/count
} 2
@GetMapPlng ( H / count H) localhost: 8080/products/1
public int countProducts() { {Hidnﬂqnnamenﬂwmshw
return products.size();
}
_
public Product getProduct(@PathVariable("id") int id) {
return products.stream()
.filter(p —> p.getld() =2 id).findFirst().orElse(null);
}
}

***************Ending Page***************

***************Beginning Page***************
***************page number:20**************
@RequestMapping(value = "/path", method = RequestMethod.POST)
@PostMapping is a composed annotation that acts as a shortcut
@RestController for @RequestMapping(method = RequestMethod.POST)
@RequestMapping(“/products")
public class ProductController {
—
public int createProduct(@RequestParam String name) {
int id = l + products.size();
products.add(new Product(id, name));
return id;
}
@PostMapping(value = "/obj", consumes=”application/json”)
public ResponseEntity<String>
createProduct(@RequestBody Product product) {
products.add(product);
return new ResponseEntity<>(
"Product created successfully", HttpStatus.CREATED);
}
}
<html> <body>
<form action:"http://localhost:8080/products" method="POST">
Product: <input type="text" name="name"/> <br/>
<input type="submit" value="Submit"/>
</form>
</bodY> </html>

***************Ending Page***************


***************Beginning Page***************
***************page number:21**************
@RequestMapping(value = "/path", method = RequestMethodPUT)
@RestController
@RequestMapping(“/products")
public class ProductController {
_
public ResponseEntity<String> updateProduct(
@PathVariable int id, @RequestParam String name) {
Product product = findById(id);
if (product == null) {
return new ResponseEntity<>(
"Product not found", HttpStatus.NOT_FOUND); //or GONE
}
product.setName(name);
return new ResponseEntity<>(
"Product updated successsfully", HttpStatus.OK);
}
}
Postman:
PUT
http://localhost:8080/products/l
Query params:
key="name" value="The Mask of Zorro"

***************Ending Page***************

***************Beginning Page***************
***************page number:22**************
@RequestMapping(value = "/path", method = RequestMethodDELETE)
@RestController
@RequestMapping(“/products")
public class ProductController {
public ResponseEntity<String> deleteProduct(@PathVariable int id) {
Product product = findById(id);
if (product == null) {
return new ResponseEntity<>(
"Product not found", HttpStatus.GONE);
}
products.remove(product);
return new ResponseEntity<>("Product removed", HttpStatus.OK);
}
}
Postman:
DELETE
http://localhost:8080/products/l

***************Ending Page***************


***************Beginning Page***************
***************page number:23**************
Naming Conventlons
~ The URL is a sentence, where resources are nouns
and HTTP methods are verbs.
' The resource should always be plural.
- Specify an id to access one instance of the resource.
— GET /products
— GET /products/123
— POST /products
— PUT /productS/123
— DELETE /products/123
' Searching, sorting, filtering and pagination
— GET /products?sort=name_asc
— GET /products?category=food&country=Romania
— GET /products?search:Pizza
— GET /products?page=2
- Versioning /proolucts/vl

***************Ending Page***************

***************Beginning Page***************
***************page number:24**************
HTTP Response Status Codes

- 2xx (Success category)

— 200 0k, 201 Created, 202 Accepted, 204 No Content
- 3xx (Redirection Category)

— 301 Moved Permanently, 304 Not Modified
' 4xx (Client Error Category)

— 400 Bad Request, 401 Unauthorized,

— 403 Forbidden, 404 Not Found, 410 Gone
~ 5xx (Server Error Category)

— 500 Internal Server Error, 503 Service Unavailable

***************Ending Page***************


***************Beginning Page***************
***************page number:25**************
Synchronous client to perform HTTP requests.
Uses the Java ServletAPl, which is based on the thread-per-request model.
@RestController
public class CallService {
final Logger log = LoggerFactory.getLogger(CallService.class);
final String uri = "http://localhost:8080/products";
@GetMapping("/call")
public List<Product> getProducts() {
log.info("Start");
ResponseEntity<List<Product>> response = restTemplate.exchange(
uri, HttpMethod.GET, null,
new ParameterizedTypeReference<List<Product>>(){});
List<Product> result = response.getBody();
result.forEach(p —> log.info(p.toString()));
log.info("Stop");
return result;
} RestTemp/ateexchange executes the HTTP method to the given URI template, writing
} the given request entity to the request, and returns the response as ResponseEntity.
The given ParameterizedTypeReference is used to pass generic type information

***************Ending Page***************

***************Beginning Page***************
***************page number:26**************
Calling a SerVIce: WebClient
Asynchronous, non-blocking solution.
WebClient is part of the Spring WebFlux library.
<dependency>
<groupId>org.springframework.boot</group1d>
<artifactId>spring—boot—starter-webflux</artifactId>
</dependency>
@GetMapping(value = "/flux",
produces = MediaType.TEXT_EVENT_STREAM;VALUE)
public Flux<Product> getProductsNonBlocking() {
log.info("Start");
Flux<Product> productFlux = —. create ()
est ()
.uri (uri) asynchronous data stream
.retrieve()
.bodyToFlux(Product.class);
productFluX.subscribe(p —> log.info(p.toString()));
log.info("Stop");
return productFlux;
l
Reactive programming is about non-blocking applications that are asynchronous and event-
driven and require a small number of threads to scale vertically (i.e. within the JVM) rather
than horizontally (i.e. through clustering)

***************Ending Page***************


***************Beginning Page***************
***************page number:27**************
Calllng a Serwce: JQuery
jQuery is a lightweight, "write less, do more", JavaScript library.
<html>
<head>
<script
src:"https://ajax.googleapis.com/ajax/libs/jquery/B.4.l/jquery.min.js"/>
<script>
$(document).ready(function() {
$.ajax({
url: "http://localhost:8080/products/1"
}).then(function(product) {
$('.product—id').append(product.id);
$('.product—name').append(product.name);
});
P/SCHPD AJAX = Asynchronous JavaScript And XML
</head>
<bOdy>
<div>
<p class="product—id">The ID is </p>
<p class="product—name">The name is </p>
</div>
</bodY>
</html>

***************Ending Page***************

***************Beginning Page***************
***************page number:28**************
Creating a Web Page
- Thyme/eaf: server-side Java template engine
for both web and standalone environments.
(default in Spring, can be replaced)
<depigiiﬁgig>org.springframework.boot</groupId>
<artifactId>spring—boot—starter-thymeleaf</artifactId>
</dependency>
- Put HTML pages in resources/templates
- Create a Controller
@Controller
public class PageController {
@GetMapping(value = "/page")
public String demoPage() {
return "demo"; //demo.html must exist in resources/templates
}
}

***************Ending Page***************


***************Beginning Page***************
***************page number:29**************
- Model = data, View = page
' In HTML
<span th:text="'Hello, ' + —"></span>
- In Controller
@GetMapping(value = "/page")
public ModelAndView demo() {
ModelAndView modelAndView = new ModelAndView();
modelAndView.setViewName("demo");
modelAndView.addObject("user", "Duke");
return modelAndView;
}

***************Ending Page***************

***************Beginning Page***************
***************page number:30**************
- REST serwces may throw exceptlons
@GetMapping(value = "/{id}")
public Product getProduct(@PathVariable("id") int id) {
return products.stream()
.filter(p —> p.getld() I: id).findFirst()
.orElseThrow( () —> new MyException("Product not found");
}

- Exceptlon Handllng Vla @ResponseStatus
@ResponseStatus(value = HttpStatus.NOT_FOUND, reason = "Karma")
public class MyException extends RuntimeException { m }

' Global Exceptlon Handllng

@RestControllerAdvice
public class MyExceptionAdvice {
@ExceptionHandler(value = MyException.class)
public ResponseEntity<MyErrorResponse>
handleGenericNotFoundException(MyException e) {
MyErrorResponse error = new MyErrorResponse(e.getMessage());
error.setTimestamp(LocalDateTime.now());
return new ResponseEntity<>(error, HttpStatus.NOT_FOUND);
}
}

***************Ending Page***************


***************Beginning Page***************
***************page number:31**************
lnterceptor Pattern
- A mechanism to change the usual
communication between two components.
' Client —> [lnterceptor(s)] —> Service
- Transparent, declarative
- Spring lnterceptorHand/er
— prehandle() — called before the actual handler is
executed, but the view is not generated yet
— postHand/e() — called after the handler is executed
— afterComp/etion() — called after the complete
request has finished and view was generated

***************Ending Page***************


***************Beginning Page***************
***************page number:32**************
Hyper Text Transfer Protocol, Secure

- HTTPS = HTTP protocol over TLS/SSL

- We need a SSL certificate (digital certificate)

- SSL (Secure Sockets Layer) enables encrypted
communication between a web browser and a web server.
lt authenticates the identity of the website and encrypts the
data that’s being transmitted

- Using Java keytool we can create a self-signed certificate:
keytool —genkeypair —alias demo —keyalg RSA —keysize 2048

—storetype PKCSlZ —keystore demo.p12 —validity 3650

- PKCS12: Public Key Cryptographic Standards

JKS: Java KeyStore (limited to the Java environment)

***************Ending Page***************



***************Beginning Page***************
***************page number:33**************
- Copy the SSL certificate demo.p12 in
resources/k eyst ore

- Modify applicationproperties file
server.port: 443
server.ssl.key-store-type=PKCS12
server.ssl.key—store=classpath:keystore/demo.p12
server.ssl.key—store-password=spring
server.ssl.key—alias=demo

- Test your application
443 is used for secure web browser communication. Data transferred across such
connections are highly resistant to eavesdropping and interception. Moreover, the
identity of the remotely connected sen/er can be verified with significant confidence.
Web servers offering to accept and establish secure connections listen on this port for
connections from web browsers desiring strong communication security.

***************Ending Page***************


