***************Beginning Page***************
***************page number:1**************
£2, Java"
Advanced Programming
Spring Framework
(REST Services)

***************Ending Page***************

***************Beginning Page***************
***************page number:2**************
The Context
~ Most applications use various technologies
(GUI, ORM, services, logging, testing, Dl, etc)
~ Integrating all these technologies may be a
difficult and repetitive task
~ The common usage of some technologies may
be simplified (implicit middleware)
- We want to expose network services.
- We need:
a application frameworks or/and
— application servers

***************Ending Page***************

***************Beginning Page***************
***************page number:3**************
Application Server

- An application server hosts applications
- An application contains components

a Ul components (for creating presentation)

— Bussines components (for implementing logic)

a Services (for communication)

— Administrative objects: data sources, queues, etc.
~ Components exist inside containers

a Web, EJB, IOC, etc.
- An AS implements speciﬁcations (Java EE)
- Tomcat, Glassfish, WildFly, TomEE ,etc.

***************Ending Page***************

***************Beginning Page***************
***************page number:4**************
Application Framework

~ Simplifies the creation of an application

- Provides modules for:
a Logging, Testing, Data access, Security
— MVC,AOP, IOC, etc.

- A lightweight approach to the functionalities
offered by the heavier application servers

~ For Web functionalities, they still need an
embedded server (small, light).

- SpringFramework, Apache Tapestry, Google
Guice, etc.

***************Ending Page***************

***************Beginning Page***************
***************page number:5**************
Service Oriented Architecture

- An architectural style that focuses on discrete
services instead of a monolithic design.

- A service is a self-contained unit of software
designed to complete a specific task.

- Promotes reusability and extensibility.

- Creates interoperability between apps and services
, Application—to-App|ication (A2A)
, Business-to-Business (BZB)

- May offer on-demand scalability.

- Uses standard protocols.

***************Ending Page***************

***************Beginning Page***************
***************page number:6**************
Network Services
- Network services use protocols
- Transport protocols:
a TCP, UDP, etc. a Data transfer
- Application protocols (on top of transport):
— HTTP, HTTPS —> Data representation
- How to expose/communicate with a service?
a Rigurous (heavy) model
- Describe: WSDL, etc
- Locate: UDDI, etc.
- Invoke (communicate): SOAP, etc.
— Simple model: REST paradigm

***************Ending Page***************

***************Beginning Page***************
***************page number:7**************
Spring Framework
springio

~ “Spring makes programming Java quicker,

easier, and safer."
~ Focus on speed, simplicity, and productivity
- Developed by Pivotal Software (2002—> today)
- The world's most popular Java framework

a Intersects with and offers alternatives to Java EE
- Organized in a modular fashion

— Web apps, Data access, Micro services, etc.

***************Ending Page***************


***************Beginning Page***************
***************page number:8**************
Spring Boot
- Spring Boot makes it easy to create stand-
alone applications that you can "just run".
- Simple way to create (Micro)Services.
~ Embed Tomcat, Jetty or Undertow directly (no
need to deploy WAR files)
- Spring initializr: https://start.spring.io/
a Choose the language: Java, Kotlin, Groovy,
— Build system: Maven, Gradle,
a JVM version, Spring version, Dependencies

***************Ending Page***************

***************Beginning Page***************
***************page number:9**************
a
Lets look at p0m.xml
<dependencies>
<dependency>
<gwup1d>—</gmpm>
<51tlfactLd>spring—baot—starter-web</a:t1factld>
</dependency>
</de;->éédencies> Slarler for building web, including RESTful,
applications using Spring MVC‘ Uses Tomcal
as the deVault embedded container
<bulld>
<p]ug\ns>
<pquln>
<groLpId>org.springframpwork.bOOL</gr0upld>
<artitactId>sptinqibootimaveniplugin</azt1tactld>
</pluq1n>
</p1ugirs>
</bulld>

***************Ending Page***************

***************Beginning Page***************
***************page number:10**************
package com.¢=xample.dem;
@SpringBootApplicaticn
public class DemOAppllcatlon l
publlC Stath VOld maln (stnnq [l arqs) l
SpringApplication.run(DemoApplication.class, args);
Systﬂnalutlprlntln ("HEllO world! ");
l
l
The entry point oiihe Spring Boot Application is the class containing (he
@SpringBooiApplicaiipn annotation. This class should have (he main
meihod 10 run the Spring Boot application.
@SpringBOOiApplicaiiDn annotation includes Auto-Configuraiion,
Componenk Scan, and Spring Boot Configuration.

***************Ending Page***************

***************Beginning Page***************
***************page number:11**************
“Running” the application
z Tomcat. initialized with perms]: SOHO {httpi
1 Starting Sexvlet engine: [Apache Tomcat/9.0433]
: Initializing Spring embedded HebAPPliCatwi-icontext
H.011:- Iﬂlldl
Q lxalhustXUSU x

<- C ® klcalhustﬁOBO

Whltelabel Error Page

Thai lpphcnlmnhasno :Xphtll mapping fol/mm so yml are mg [his as a fallback

TueAper 13.16:58EEST2010

Thu: was m Imcxpeckd mm’ (lprNM Found, mmFum

No mkssug: “liable

***************Ending Page***************

***************Beginning Page***************
***************page number:12**************
packagP com.¢=xample.d@m;
http://Iocalhost:8080/hello
@RestController Greelings from Spring Boat!
pubi ‘c ci ass lie] 1 QCOFiYOi 1 er <
@Raqlcsﬂdapping("/hello")
prllC Strlnq sayHello () i
return "Greetings from Sprqu Eco: Z ";
i
i
The Spring Web model-view-controller (MVC) iramework is designed
around a DispatcherServlet that dispatches requests to handiers, With
conﬁgurable handler mappings.
The deiault handler is based on the @Contmller and @RequestMapping
annotations.

***************Ending Page***************

***************Beginning Page***************
***************page number:13**************
package Com.examp\5,d€m0;
@szinchotTest
@Autoconfiguremckldvc
publu: cl<=>s Hcl‘uControllurTcst
@“te'ileﬂ Aufowired: Spring's dependency injection.
PI"its “WWW: “WC? This is an alternative to Java EE Inject annolalion.
@Test
pmnc vmd qetHe'ToU (hvnws FXCeptlo" t
m'Jc.pezfnrm[MockkvciequestBullders.get["/"ellc"]
.accept (kedlnu [pa .AyaLiAmeNJ sow)
.and-Expectbtdtue 1) .150k0)
.andixpecbl
ronfsnto ‘strlngﬁgqual'fo("Gree'lng's fmn Spring Boot”),
y;
)
)

***************Ending Page***************

***************Beginning Page***************
***************page number:14**************
EService
publlc class HelloServlce i
public String sayHelloiStrlng name) i
return "Greetlngs from " + name;
i
i We can use @Component across
ihe applicaiion io mark ihe beans
as Spring's managed Componenls.
@RestConczolle:
public class HelloController i w? mark beans Wllh @Serwce 1°
@A t . a indlcate that they're hoiding (he
u “are business logic. Besides being used
peraU: HelloService 1cllo£crv;cc; in me service layer, there isn'i any
oiher special use for this
@quuesLMapplng("/hello") a""°ta“°"'
public SLrsng sayiielloii i
[eLurn helloServiceusayHello("Spring BooL");
i

***************Ending Page***************


***************Beginning Page***************
***************page number:15**************
RESTful Web Services
~ Service implementation over HTTP that
conforms to the REST architectural style.
~ Data and functionality are considered
resources and are accessed using an uniform
interface:
— Identification a» URI, for example:
http://example.com/resources
— Representations —> Standard MIME types:
Text, JSON, XML, YAML, etc.
— Operations —> Standard HTTP methods:
HTTP POST, GET, PUT, DELETE

***************Ending Page***************

***************Beginning Page***************
***************page number:16**************
HTTP Methods

° GET: Used to request data from a specified resource.
Should not produce any side effect‘

° POSTI Used to create a new child resource, at a server
defined URL. POST is non-idempotent which means
multiple requests will have different effects

' PUT; Used to create or replace if exists a resource, at a
URL known by the client. ldempotent, which means
multiple requests will have the same effect.

' PATCH: Used to update part of the resource at the client
defined URL.

' DELETEI Used to remove a specified resource (from
the database, for example)

***************Ending Page***************

***************Beginning Page***************
***************page number:17**************
JSON
- Java Script Object Notation
- Format for storing and exchanging textual data
- Examples:
("name": "Java", "age": 26, "parent": "Sun Mictosystems")
' "narr~":"li'>", "a'yc":3")
- MIME: "application/json"
- Parsers: GSON, Jackson, etc.
- JSON vs. XML

***************Ending Page***************

***************Beginning Page***************
***************page number:18**************
Spring REST API support
- @RestController — @Controller and @ResponseBody
- @RequestMapping(value, method)
Mapping web requests onto methods in request-
handling classes with flexible method signatures.
@GetMapping, @PostMapping, @PutMapping, @DeleteMapping
' @RequestBody: HttpRequest body —> domain object
- @ResponseBody: domain object —> HttpResponse
- @PathVariable: for custom or dynamic request URI
- @RequestParam: read a param from the request URI
- ResponseEntity: Builder for creating the response

***************Ending Page***************

***************Beginning Page***************
***************page number:19**************
@RequeslMapping(value = "lpath", method = RequestMethodGET,
produces = "application/json")
@RestContrcller
publlc class PruductControlleI [
private Erna; Llst<PznducT> products : new ArrayLlst<>U;
pubhc ProductControllerU l
products.add(new Producui, "Mask'WH
products.add(new ProducHZ, "Gloves"H;
> JocalhostIBDBU/Products
[(“1u“:1,"na|l\2":"Mask")r
— i")d":2,"name":“GloveS"H
publlc Llst<Product> getPrndchSU t
return pmducts; localhoat:BORE/preducta/co'unt
) 2
@GBWPPi“9"'/°°““‘"J 1Q nlhuatYEDED rndu c! 1
publlc m: countProouctsO r ["fdm',,;\ame,,{§lqaskf, /
return productssizet);
>
publlc Prchct getProduct[@Pathva:i.ab1e("id") int id) (
return pruducts.strealr()
.leter(p ,> p.gEtId() :: id) .flndFlIstL) .QIElsE(null];
)
)

***************Ending Page***************

***************Beginning Page***************
***************page number:20**************
@RequeslMapping(value = "/path", method = RequeslMelhodPOST)
@Posmlawing is a composed annotah'on max acts as a snuncul
@RestContrcller (or @RequssiMapplng(|r\elhnd : quueslMelnndFOST)
@Requesmsppinq("/pmduces")
publlc class PruductControlleI [
—
publlc mt creamproduct(@RaquestPazam String name] (
int 1d : 1 + products.slze(17
produc:s.add(new Produccud, nameH;
:etuzn 5a;
)
@PostMappinq(value : "/Dbj", consumes:"application/15cm"I
public ‘ResponseEntity<StI1"g>
c:eatePer_ct(@RequestEcdy onduct pxoduct) 4
products v add (PIOdUCU7
xeturn new RBsponseEntity<>(
"Product created successfully", Httpstatus.CRZATZD);
>
)
<hcm1> <body>
<56!“ u:v-iun:"hktpzNiccalhcit:8080/productt" mnhud="POS'l'">
Product: <1nput typc:"tcxt" namc:"nm"/> <brl>
(Input type:“subm1t" value:“5ubm1t"/>
</fozm>
</bod¥> </h[ml>

***************Ending Page***************


***************Beginning Page***************
***************page number:21**************
@RequestMapping(value = "/pa'h". method = RequestMethodrPUT)
@RestContrcller
Ekequestldapping(“/ptoduzxs“)
publlc class PruductControlleI [
_
public ResponseEntlty<Str1ng> updateProduct<
UPathVaziable wt 1d, @RequestPazam scnnq name) r
Product product = fandEyIdUd);
if (product :: nun» (
return new ResponseEntlty<>(
"Product nor inund", urrpsrarnsmmjounm; //nr com:
)
product. setNamE (name) r
return new ResponseEntity<>(
"Product updated successsfully", HttpStatusvoK);
\
)
Postman:
PUT
'virp:’/ (‘cimcstcialFO/pradurts"
Qucry Params:
key-mane" value*"1he Mask n; Zorxn“

***************Ending Page***************

***************Beginning Page***************
***************page number:22**************
@RequestMapping(value = "/palh", method = RequestMethodDELETE)
@RestContrcller
@Requestldapping(“/ptoduzxs")
publlc class PruductControlleI [
publlc Responsesnnry<5rrmg> deletePrOdnct(@Pathvarlahle int 1d) 4
Product product : flndEyIdUdH
Jf (product =: null) 4
rerurn new ResponseEnLlLy<>(
"Product: rot found", HttpStdius.GONE);
)
products . remuvs (product);
return new Responseintlty<>("Pruduct removed", HttpStatus-CK);
)
)
Postal-n:
DELETE
hrrp:/,loraihna':Bﬂ2ﬁ,grciu'ta/l

***************Ending Page***************

***************Beginning Page***************
***************page number:23**************
Namlng Conventions
- The URL is a sentence, where resources are nouns
and HTTP methods are verbs.
- The resource should always be plural.
- Specify an id to access one instance of the resource.
- GET /products
e GET /products/i73
e POST /Products
, PUT /products/123
i DELETE /pIOducts/123
- Searching, sorting, filtering and pagination
i GET /products?so:t=name_asc
i GET /products?categoryefood&countryeRomania
i GET /products?search:Plzza
, GET /products?paqe:2
- Versioning /pr0duCt$/Vl

***************Ending Page***************

***************Beginning Page***************
***************page number:24**************
HTTP Response Status Codes

- 2xx (Success category)

i 200 0k, 201 Created, 202 Accepted, 204 No Content
- 3xx (Redirection Category)

— 301 Moved Permanently, 304 Not Modified
- 4xx (Client Error Category)

— 400 Bad Request, 401 Unauthorized,

— 403 Forbidden, 404 Not Found, 410 Gone
- 5xx (Server Error Category)

— 500 Internal Sewer Error, 503 Service Unavailable

***************Ending Page***************

***************Beginning Page***************
***************page number:25**************
Synchronous client to perlorm HTTP requests.
Uses the Java ServletAPl. which is based on (he thread-per-request model.
@Restcontruslsr
publlc clsss ::s1,ssm;cs (
flna] Logger log s chqswsccorvvqszwqqerwallsswmsmssss»:
fwva] Stnnq uri s "http:/WoesWhosczsoso/pmducrs":
@sem/xsppmgw/csig'w
psbllc Llst<Pruduct> gctProdscisU 1
log.1nfu("St-1rt");
ResponseEntlty<Llst<Per4ct>> zespnnse s I65t1'9mp]ate.exchange(
uzi, BtcpMethnd.GZT, null,
new PazmeterizadTypaRefetence<List<PIoduct>> () n) ;
MsL<ProducL> resulL , respon2e~qeLRodv0 :
ICSMLLJlOLEdChQ: ,> ‘oanloLpAoSLUncO>1;
log.1nfol"iiop"l .-
IEtuIn result;
) Resﬂemplate.exchange execules the HTTP memod to ms glven URI 1emp|a\s, wrmng
) the given request snmy m the request, and returns the response as ResponseEnUly
The given ParamsxerizsdTypsRslemme is used m pass generic type inmrmauon

***************Ending Page***************

***************Beginning Page***************
***************page number:26**************
Calllng a Serwce: WebCllent
Asynchronous, non-blocking solution.
WebClient is part of the Spring WebFlux library.
\teﬂenlel y»
\qrorudwzv smmmm“ be'VmAleD
‘W '5"me whmmrws/Wm Molly's-Hm
</dc’/<ndcr0y>
@GFfiiepplanralue : "mum",
produces = MediaType . TEXT_EVENT_STREAM_VALUE)
pvbl vc F1ux<onduct> qeLProaucLsNoanock l nqtl l
loq.lnlul"‘lzazL");
numeum pluLiuctFlux : —v Guam n
.get 11
.un lurl) asynchronous data stream
.ratrleve (l
.bndchFl uleznducr .class);
proourtFl\1><.su-b5cribelp 7> lOij-lnfothoEtrlngll l l;
loq.ln'0l"510p"l?
rcLuLn procuctFlux;
)
Reactive programming is aboul non'blocking applicatinns that are asynchronous and evenl'
driven and require a Small number 0f threads l0 scale vertically (i e within the JVM) rather
than horizontally (Le. through clustenng)

***************Ending Page***************

***************Beginning Page***************
***************page number:27**************
Calllng a SerVIce: jQuery
jQuery is a lightweight, "write less, do more", JavaScript library.
<himl>
<head>
<scI1pt
S:C:"—t:psz//a;ax.gong1@ap1=.com/ajax/,1bs/jquery/2.4.1/;qu&ry.m1n.js"/>
<scrlpt>
5(d0i‘mﬁnr).reaJy4tu"trlan) 4
$.ajax((
“:1: "http://localhost:8060/products/1"
).Lhc'kLuncL10n(pLOduCL1 <
$('vprudyLi*1d').appcnd(!10duct.1d)7
$(‘.prod,:i*nnn?').append{prod,:i.nnnel7
' ) r
y/anpv AJAX = Asynchronous JavaScripl And XML
</heed>
<body>
<d1v>
<p class:"pzoducL-1a">Tne ID is </p>
(p class:"productiname“>The “awe 15 </p>
</d1v>
</bnd¥>
</html>

***************Ending Page***************


***************Beginning Page***************
***************page number:28**************
Creating a Web Page
- Thyme/eaf: server-side Java template engine
for both web and standalone environments.
(default in Spring, can be replaced)
- Put HTML pages in resources/templates
~ Create a Control/er
@Ccntrolle:
publlc clzss Pzgetjontruller '
@Ge’}lapp1ng(value : "/page")
ptbllr S’r1“g QenC/Pagel) l
xenirn "demo"; Maemoth'nl must exlst 1n tesmnres/tenpla'es
) l

***************Ending Page***************

***************Beginning Page***************
***************page number:29**************
ModelAndVIew
- Model = data, View = page
~ In HTML
<span :lv:te><t:"'llello, v + —"></span>
~ In Controller
@GQLMapplngWaluc 7 "/pagu'w
pghllc Model“nc‘\llew denot) l
MadelAndView modelkchJPW Z new ModelAndK/JewU;
modelAndUlew. sEtVJewNamE ("demo")?
modelAndViewladdObject ["user", "Duke");
l

***************Ending Page***************

***************Beginning Page***************
***************page number:30**************
- REST services may throw exceptions
LﬂGeiMapplngWalue Z "/llcil")
prlJc Prodect getPrcduct[@PathVaI,zblei"Jd") Jnt 10) [
rEtuIn pruducts.5tream()
.fllterlp 7> p.9et1dl] :: 1di.f1ndF1rst[i
‘orElseThrowl i) i> new MyExceptlonl"Product th found");
i
- Exception Handling via @ResponseStatus
@RespcnseSCatuslvalue : l-lttpStatusMOTiECUND, reason : "Kanna")
puleC class MyExcethon Extends Ru“t1meExcept;un i )
' Global Exception Handling
@RestContznllezAdvice
publlc class VyEXceptlonAdvlce i
@Exceptionl-landlerlvalue = MyException.class)
public ResponseEntltyqvtyEx:0!Rs$punse>
handleGenericNotFoundException(MyException e) l
Myfrral'Response error : new MyErrchesporise(e.getl{essagelii;
error.setTJmestamp iLocalDaieTlme.nui/ri] ) ;
return "ew ResponseEntlty<>(errcI, attpstatus.mo1"jouuz);
i
i

***************Ending Page***************

***************Beginning Page***************
***************page number:31**************
Interceptor Pattern
~ A mechanism to change the usual
communication between two components.
~ Client —> [lnterceptor(s)] _> Service
- Transparent, declarative
- Spring lnterceptorHand/er
a prehandle() — called before the actual handler is
executed, but the view is not generated yet
a postHand/e() — called after the handler is executed
— afterComp/etion() — called after the complete
request has finished and view was generated

***************Ending Page***************

***************Beginning Page***************
***************page number:32**************
Hyper Text Transfer Protocol, Secure

- HTTPS = HTTP protocol over TLS/SSL

- We need a SSL certificate (digital certificate)

- SSL (Secure Sockets Layer) enables encrypted
communication between a web browser and a web server.
It authenticates the identity of the website and encrypts the
data that's being transmitted

- Using Java keytool we can create a self-signed certificate:
keytool *germsypalr 111:: derm *keyalg 15A *keyslze 204B

istarerype PKCSJZ *(eysrnre 'Iew',tpll *vaJuL'v “am

- PKCS12: Public Key Cryptographic Standards

JKS: Java KeyStore (limited to the Java environment)

***************Ending Page***************

***************Beginning Page***************
***************page number:33**************
- Copy the SSL certificate demo.p12 in
resources/keystore

- Modify applicationproperties file
servanpaxt: 443
genre:.eel.kefe-mreetypeewcslz
server.s:l.kej*:~tu:e’:l;isspath:keystcre/ce'uo_p12
server.eel.keyeetureepesewereesprenq
server.ssl,key*aelas:demc

- Test ‘our application
443 is used for secure web browser communicalion. Data transferred across such
connections are highly reslslanl lo eavesdropping and interception. Moreover, \he
identity of the remotely connected server can be veriﬁed wilh signiﬁcant conﬁdence.
Web Servers Offering (D accept and establish Secure conneclions llslen on lhis port (or
connectlons from web browsers desiring slrong communlcatlon securlty.

***************Ending Page***************

