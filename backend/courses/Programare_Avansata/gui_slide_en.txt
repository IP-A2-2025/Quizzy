***************Beginning Page***************
***************page number:1**************
£2, Java"
Advanced Programming
Graphical User Interface
(GUI)

***************Ending Page***************

***************Beginning Page***************
***************page number:2**************
Human-Machine Interfaces
The ways in which a software system
interacts with its users.
- Command Line
- Graphical User Interface - GUI
' Touch User Interface - TUI
- Multimedia (voice, animation, etc.)
' Inteligent (gesture recognition, conversational,
etc.)

***************Ending Page***************

***************Beginning Page***************
***************page number:3**************
Graphical User Interfaces
Visual communication between software and users.
0 AWT(Abstract Windowing Toolkit)
0 Swing - part of JFC (Java Foundation Classes)
- SWT (IBM) _~ ;; _ w a U n l _ W
K ‘ .1 O
-Java2D
- Java 3D in

***************Ending Page***************

***************Beginning Page***************
***************page number:4**************
The Stages of Creating a GUI
Application
i‘- Design
— Create the containers g
— Create and arrange the components
ﬁ Functionality
a Define the user-components interaction ~
— Attach actions to components
a Create the action handlers \d
*- Considerations
— Programatic — Declarative — Visual I
a Separation between the GUI and application logic.

***************Ending Page***************

***************Beginning Page***************
***************page number:5**************
AWT lerary
unport javaaawtf;
public class AWTExample (
publlc Stath VOld main (String args [1) (
// Create the w1ndow (frame)
Frame i = new Frame("0 fereastra")?
// Set the layout of the frame
LsetLaycut (new FlowLayoth); AMislhevrisinﬂl
Java GUI ||brary.
// Create the components
Button b1 = new ButtonU'OK");
Button b2 I new Button<"Cance1");
// Add the components to the frame
ftadd(b1);
f.add(b2) 7 E X
f.pack();
OK Came‘
Lsetvisible (true) ;
)
‘r

***************Ending Page***************

***************Beginning Page***************
***************page number:6**************
AWT Components
I Button I List
“ Checkbox , TextField
/ CheckBoxGroup “ TextArea
y Choice A
“ Container a
v Label
AWT Components are platform-depended,
each of them having an underlying native peer.

***************Ending Page***************

***************Beginning Page***************
***************page number:7**************
Infrastructure
~ Components: Button, CheckBox, etc.

e A component is an object having a graphical representation that
can be displayed on the screen and that can interact with the
user. Properties common to all components are:
location, x, y, size, height, width, bounds, foreground, background,
font, visible, enabled, . ..

' Containers: Window, Frame, Dialog, Panel, etc.

— A generic component containing other components.
' LayoutManagers: FlowLayout, GridLayout, etc.

— The interface for classes that know how to lay out Containers.
' EventObjects: ActionEvent, TextEvent, etc.

— An event indicates that a component-defined action occurred.

***************Ending Page***************

***************Beginning Page***************
***************page number:8**************
La youtManager
Relative positioning
A layout manager is an object that controls the size and
arrangement (position) of components inside a container.
Each Container object has a layout manager.
All classes that instantiate objects for managing
positioning implements LayoutManagerinterface.
Upon instantiation of a container it is created an implicit
layout manager associated with it:
9 frames: BorderLayout
-) panels: FIowLayout
Absolute positioning
container t set-.Laycut: (null) ;

***************Ending Page***************

***************Beginning Page***************
***************page number:9**************
Jmpoxt java_a\~t.‘;
Wm cm @emm ( _1_u-:1|
publlC statlc vold maun l Strlng args [1) ' Buﬂum ‘ 7
£.setLayout (new GridLayout (3, 2)); Buﬂnnﬁ
Button b1 I new Button (" Button 1");
Button b2 I new Button ("Z");
Button b3 I new Button (“ Button 3“);
Button b4 I new Button (“Long — Named Button 4");
Button b5 I new Button (" Button 5“)?
f.zdd(bl); f.add {b2}; f. addlbi); f.ac\d(b4l; Laddlbﬁ);
mack Ur —_-m|1|
) f-Imsmlélméw ‘Mi .11 BM Lam-WM“ m5
_.Am1|
15-min; A Mun;
Frame f I new Framel'Tlow Layout"); LﬂﬂrNimEﬂBlmﬂM Ml
£.setLayeut (new nanny“: u):

***************Ending Page***************

***************Beginning Page***************
***************page number:10**************
import jaV84aWC 4*:
public class TestBQrderLayout l
publle Static Void maln ( Strlng argS [1) (
Frame f = new Frame 1" Border Layout ");
// This 1s the default for frames
{.setLayout (new BordezLayouco )r
Leanne" Button(" North ") , BomerLayoucmox'm );
f.add(new Button(" South"), BorderLayout.SOUTH );
Laddmew Button(" East“), BordetLayout.EAST >,-
f.add(new Button(" West ‘W, BorderLayout.WEST 1;
f.add1new Buttom" Center "l. BorderLavout.CENTER H
f,pack o: 2- BurdErLaynut '__ El x
f.set\/1sible(true); . ' - Fl
) x Nnrd E
)
Vest Centru Est
Sud

***************Ending Page***************


***************Beginning Page***************
***************page number:11**************
User Interactions
_
Event: clicking a button, altering the text, checking an
option, closing a frame, etc.
Source: the component that generates an event.
Listener: the responsible for receiving and handling
(consuming) events.

***************Ending Page***************

***************Beginning Page***************
***************page number:12**************
class Myfrdnc extends Emu; l
publlc Myrrama 4 String title > 1
1-:ujlt-ztcn.addhctiun1.isten:r( new Actianistenerl) l
@{Jverrlde
public void actionPexfcmed(Actiunivent e) [
IdyFrame.tlnS.setT1rlel
"VON pressed the button " + e.qet7\cnwncownand(1);
\
H,-
)
)
Usmg Lambda Expressmns
\QQQ-zwnadAActionLiucm-mq (Action-liven: e) 7> 4
MyFrame4thlS4SetTltleL
"You pressed the button " + e.getAcnoncommandUH
h:
l
)

***************Ending Page***************

***************Beginning Page***************
***************page number:13**************
class MyFIame Extends Frame 4

pub'\c ‘4yF‘“awe n sw-nq rue] ;
bucton.addActionLiscener( this: :onEuttonPressed ) ;
checkbox.add1temL1.stenet( ch15: :onltemﬂhanged > ;

1

Hm“: own, suggeﬁnvely mum, “weds

private void onEuttonPressed(ActionEvenb e) (
nun-.SMMMMWm [)IC>;FCL1 the Dummwr

l

pxivate void onItemChanqed(ItelnEvent e] 1
this.setT1tlE("ChEc<b/o>< state: " 7 checkqstiitateﬁ);

)

***************Ending Page***************

***************Beginning Page***************
***************page number:14**************
Swing

0 Extends the core concepts and mechanisms of AWT;
we still have components, containers, layout
managers, events and event listeners.

0 Replaces completely the AWT componet set,
providing a new set of components, capable of sorting,
printing, drag and drop and other “cool” features.

' Brings portability to the GUI level; no more native
peers, all components are “pure”.

- Based on Separable Model-and-View design pattern.

' “Component Oriented Programming"

***************Ending Page***************

***************Beginning Page***************
***************page number:15**************
Swmg Components
O Atomic Components
JLabel, JEu(:on, JCheckBox, JRadloEutton, JToggleButton,
JSczollBaI, JSliaer, JPtogzessBaz, JSepaIator
Q Complex Components
JTable, JTree, Jcomboeox, JSpinner, JLlst, JFlleChooser,
JColorCnooser, JOpClonPane
O Text Editing Components
JTextPiEld, JFuImattedTextFleld, JPasswnIuPleld, JTextArEa,
JEthjorPane, JTextPane
O Menus
JMenuBar, mew, JPopupMenu, J'Me'mltem,
JCheckboxMenuItem, JRadloButtonMenuIten'
O Intermediate Containers
JPanel, JScrollPane, JSplltPane, JTabbedPane, JDesktopPane,
JIoolBaz
O High-Level Containers
JFIame, JDlaloq, JWlndow, JInt'er'malFran'P, JAppler

***************Ending Page***************

***************Beginning Page***************
***************page number:16**************
Slmllarltles and leferences WIth
"J" Convention
ia‘la.ﬁwf‘Euf’nr 7 javax.sw1rq.J'Button
java.awt.Laz>El 7 j;Vax.sw1“g.JLahel
New Layout Managers
EnxLagclr, SpringLsynuf, ﬁrnupLEynur, (Iverlsyjayouh err.
HTML Aware Components
(‘Lttcn swmple : nPw 1Hu::or("mm text“:
JZLttr/n Ftnvl Z new JEutrc/n("<hbnl><u>Cool</u> <i>text</i></html>"l;

***************Ending Page***************

***************Beginning Page***************
***************page number:17**************
JComponent
JComponent is the base class for all Swing components,
except top-level containers: JFrame, JDialog, JAppIet.
JCoonnent extends Container
Q Support for tool tips - setToolTip
w Support for borders — setBorder
* Enhanced suppon for sizing and positioning
setPreferredSiZe, . . .
t Opacitiy control - setOpaque
w Keyboard bindings
§ “Pluggable” look and feel
w Double-Buffering, Support for accessibility, etc.

***************Ending Page***************

***************Beginning Page***************
***************page number:18**************
Swing Architecture
Swing architecture is “rooted” in the MVC design:
~ Model — the data for the application
' View- the visual representation of the data
0 Control/er- takes user input on the view and
translates that to changes in the model.
Separable Model Architecture
Model + (Presentation, Control)

***************Ending Page***************

***************Beginning Page***************
***************page number:19**************
class MyTableHodel extends Abeereeuweblmedel 1
private 5\rlng[] columns e ("NumP", "VarsLa", "SLudenL")r
privete Objeetu l1 elements e l
("Ionescu", new IntegeerO), Boolean.TRUE),
("Popescu", new IntegerlBO), Boolean,FALSE));
public int qetcblumncounto l vama Student I
—-20 Ame
return column5.lenqth; terrtﬂrri
) Pupaslzu ISD irelse
public int getRowCountO {
return elements.lenqth;
)
public Object getValueAt(int row, int col) I
re\urn elemean[zow] [col];
>
public String getColumnName(int col) (
return eolumns[eol];
)
public boolean isCellEditable(im-. row, int col) (
// Boa: numele este edltabil
return (col e: 0):
)
)

***************Ending Page***************

***************Beginning Page***************
***************page number:20**************
Customizing the View
CellRenderes and CellEditors
V \wmw-J KNEE
@FWEEQTQZETﬁHWEﬁ

***************Ending Page***************


***************Beginning Page***************
***************page number:21**************
Intermlsswn...
W- u x {
worm cum-ms ‘
Inclement 5n ("whims e some 5L3,‘ We M.‘
Raul: \ 57!ng iimkquM“
/ ir n strn n TquIeChooszr
U

***************Ending Page***************

***************Beginning Page***************
***************page number:22**************
The “Drawing” Concept
- Graphical interfaces are built using components.
The “system” draws the components automatically:
— when they are displayed for the first time,
— at minimize, maximize operations,
— when resizing the display area;
- The support methods for defining the graphical
representation of a Component are:
a void paint(Graphics g)
— void update(Graphics g)
a void repaint()

***************Ending Page***************

***************Beginning Page***************
***************page number:23**************
Java 2 D

° Two-dimensional graphics, text, and imaging
~ A uniform rendering model for display devices and printers
~ Geometric primitives: any geometric shape
- Hit detection on shapes, text, and images
- Ccontrol over how overlapping objects are rendered
- Enhanced color support that facilitates color management
- Support for printing complex documents
- Control of the quality of the rendering (hints)

EQ< a ll. u n a

\ Tings eﬁ ﬁaéen

***************Ending Page***************

***************Beginning Page***************
***************page number:24**************
This method is called when the contents of the component should
be painted; such as when the component is first being shown or is
damaged and in need of repair. The clip rectangle in the Graphics
parameter is set to the area which needs to be painted.
public class MyFrame extends Frame r
public MyFrame(Strinq title) i
superititle) ;
SQCSLZQ (200, 100i;
i
public void paint(Gtaphics q) i
supez.paint(qi r
// Apelam metoda Paint a (215561. Frame
g.setFont (new Font ("Arial", Font .EOLD, 11)] F
g.setColor (Colonredi;
g.drawStIlng("DEMO Version", 5, 35);
i
i

***************Ending Page***************

***************Beginning Page***************
***************page number:25**************
- JComponentpa/‘nt delegates the work of painting to three
protected methods: paintComponent, paintBorder, and
paintChildren‘ They're called in the order listed to ensure that
children appear on top of component itself.

- Swing components should 'ust override paintComponent.

/* Creating e custom component x/
class MyCustOmCOmponent extends JPanel (
// Deflne the representatlon of the component
public void paintColnpcnent (Graphics g) (
super .paintCompanent (qt r
GxaphiCBZD g2d = (GraphicsZD) g;
1
// Methods used by the layout managers
public Dimension qetPreferredSizeU t return l;
public Dimension qetMinlmumSlZeU l return l
public Dimension qetMax1mum51ze<> l return l
l

***************Ending Page***************

***************Beginning Page***************
***************page number:26**************
Creatlng a Custom Component
public class HyCcmponent extends JPanel ¢
prn/ate \nt x, y, radius?
pmnc MyCcmponertU <
lnlt U;
)
prlvate VOld 1n1t() (
setPreferredSi ze [new D\mens\OP (400, 400) )7
thls.ac1d.MouseLlstener(new MouseAdapterU (
public void mousePressed(MouseEvent e) (
X i e.qec><<),- y i e.getYU;
radlus : 50 + (1rt) (100 * Math.random(Hr
repeWItU;
)
‘1);
@Override
public void painthunponent(Graphics g) (
supenpairtcomponent (9»:
g.draw0val(x 7 radiLs / 2, y i radlus / 2, radius, radlus);
l JFrame frame = new JFrameV'demo")?
) framejddmew IyOomponentO7;
frame.pack1)i
frame.setvisible(true)7

***************Ending Page***************

***************Beginning Page***************
***************page number:27**************
Graphics, GraphicsZD

- Graphics is the base class for all graphics contexts that
allow an application to draw onto components realized on
various devices, as well as onto off-screen images.

- GraphicsZD class extends the Graphics class to provide
more sophisticated control over geometry, coordinate
transformations, color management, and text layout.

' A graphic context offers:

— Methods for configuring the drawing properties:
color, paintMode, font, stroke, clip, renderingHints,

— Geometric primitives

— Support for working with texts and images

a Support for printing

***************Ending Page***************

***************Beginning Page***************
***************page number:28**************
Geometrlc Prlmitlves
- Coordinates

a User space — in which graphics primitives are speciﬁed

— Device space — screen, window, or a printer

— The origin of user space is the upper-left corner E

- Primitives:

— drawLine, drawPolyline, drawOval, fillOval,
dram/Polygon, fillPolyqon, drawRect, flllRect,

— draw(Shape) , fill (Shape)

i The Shape Interface provtdes deﬁnitions tor objects that represent some form of
geometnc shape‘ The Shape IS descrlbed by a Pathlterator object, which can
express the outiihe oi the Shape as well as a rule for determining how the outiihe
divrdes the 2D piane into interior and exterior points.

Kermizli) “inhuman time mun

***************Ending Page***************

***************Beginning Page***************
***************page number:29**************
Worklng With Texts
- Font - A collection of glyphs (unique marks that collectively
add up to the spelling of a word) a name, style, size
Label label Z new Labeli"So:ne text");
label . :ctFont (new Font("Dialog" , Font.PLAIN, 12) );
void palnt(GIapl"lCS q) l
g . seLFO'tl (new Pont("Couziex" , Font.EOLD, 10) li
q.drawString("Anothet text", 10, 20); l
- FontMetrics » encapsulates information about the
rendering of a particular font on a particular screen.
Font f i new For.:("Ar1al", Font.BOLD, 11); iicendevllne
FontMetrics flu = g.getFontMetxics();
int height: : fungatlleightO;
mt wldth i fm.strlngwldtl"("froq")7 Wm» bzsvlvw
int, leaLh : [moharwmlh ('g' l; mum ﬂESlEnﬂéillni
' TextLayout - highlighilng, Strings with mlxed (unis, mixed languages‘ bidlrecliunal text

***************Ending Page***************

***************Beginning Page***************
***************page number:30**************
Using Colors

- Paint interface defines how color patterns can be
generated for GraphicsZD operations.

- Color encapsulates colors in the sRGB space
Color stendardRed i ColorJZED; Rad Green BIueAIpha
Color plalrlwhlte a new Colorllﬁ, 1,0, 1,0); (0’2551'04'0)
Color iransluceriRed a new ColorlZSS, U, U, 129);

- SystemColor encapsulate symbolic colors representing
the color of native GUI objects on a system.
SystemColortdesktop

- GradientColor provides a way to fill a Shape with a linear
color gradient pattern. —

- TexturePaint provides a way to ﬁll a Shape with a texture
that is specified as a Buffered/mage. n

***************Ending Page***************


***************Beginning Page***************
***************page number:31**************
Usmg Images
- Image is the superclass of all classes that
represent graphical images.
- Bufferedlmage
a Loadind from a ﬁle
Bufferedlmage image Z Image10.tead(rew Filel"hellc.jpg"))
a Creating in memon/ (off-screen)
Bufferedlmage 11'“an : new Bufferedlmagem, h, type);
Graphlcs g s lmage.getGraphlcs();
a Drawing using a graphic context
graphlcs.draw1magellmagel ;
— Saving in a file (GIF, PNG, JPEG, etc.)
Tillag€TO4wvii€lllllBg9, "pug", new r‘ le("d*aw\ng.png") ):

***************Ending Page***************

***************Beginning Page***************
***************page number:32**************
' Dlsplaymg a large Image
Butteredlmaqe imq : ImageIOireadL
new URL ("littpz//www.:emoteServertcom/hugelrnagerg") ):
public‘ v0id pair‘ [Graphics qt i o
g.d:awImage(ilng, o, 0, this); .
i
' ImageObserver - an asynchronous update interface for
receiving notifications about information as the Image is constructed.
public boolean imagellpdateﬂmage image, int flags, int x, int y,
int width, int: height) i
// Tf the \niage has Ftﬁig'Wed ‘ceding, rEpétnt the WindUW.
if ((flags & ALLBITS) if (J) i
repaint 0;
return false; // fin;5h6d, no further notification.
i
return true; //H0t ﬁnished loading, need Further notiﬁcaton.
i

***************Ending Page***************

***************Beginning Page***************
***************page number:33**************
Intermlssmn...
Em‘ = 5 A
JavaFX Ensemb\e W“ <Q
‘ WW1,“ ruminants
ixlij‘ U a

***************Ending Page***************

***************Beginning Page***************
***************page number:34**************
Java FX

- Aset of graphics and media packages that
enables developers to design, create, test,
debug, and deploy rich client applications.

~ High-performance, modern user interface that
features audio, video, graphics, and animation.

- Deployed across multiple platforms: desktop,
browsers, mobile, etc.

- Coexists with Swing — however, it may replace
Swing as the standard GUI library;

***************Ending Page***************

***************Beginning Page***************
***************page number:35**************
Java FX Key Features

- FXML a MVC Pattern Support
' WebView (embed web pages within a JavaFX application)
- Built-in UI controls, CSS and Themes (Modena, Caspian,etc.)
' 3D Graphics Features (Shape3D)
- MultHouch Support, Hi-DPI support, Rich Text Support
- Hardware-accelerated graphics (uses oplirnally the GPU)
- High-performance media engine (playback oiweb multlmedla oontent)
' Self-contained application deployment model
- lDEs offer tools for rapid application development

a JavaFX Scene Builder

***************Ending Page***************

***************Beginning Page***************
***************page number:36**************
Hello World
//The nain class extends Appllcatlcn
public class Hellowozld extends Application l
@override
public void start(Stage primazystage) ( //Tne main entry point
Button nelldBtn e new Buttonl);
helloBtn.setText ("Hello Worldl")?
Fldeane rddt = new Fldeaneu;
xeet.get¢hildzen() ‘add (hellestn);
Theater Metaphor
Scene scene = new Scenemset, 300, 250);
//The u1 is deflned by a stage and a scene.
//stage class is the top-level JavaFX Container,
//The Scene class is tne container for all content.
prlmarystageisetTltle(“Hello world Application");
primazystage . eetScene (scene) ;
primaryStageiShOwUF
)
public static Void nain<$trian args) (
launchlarqs); //n0t required fdr Javan applicationsin
)
l

***************Ending Page***************

***************Beginning Page***************
***************page number:37**************
The JavaFX scene graph is a retained mode API
Rum NUDE 5W
LEAF NUDE LEAF [\DDE BRANCH NODE Cvde Aennnne Fegmn
LEAFNODE LEAFNODE Tm “"5"”
Group group : new Group (1.-
Rectangle blueSquare n new Reciangle (so, 50>;
bluesquaresewlll (Color.ELUE);
groupgetchildzerﬂ) acid (bluesquare) ,-
C\rc]e rean'cle : new circlewo, new Color(1,0,0,0‘5fl);
group.getChi1dzen() .add (redCircle);

***************Ending Page***************

***************Beginning Page***************
***************page number:38**************
, m .1; javafxscnneﬂode
r Base alas ror scene graph nodes.
isvsmscsnemmm
ShapeBD pll'etlt Shape The base Classlorsll "Odesihﬂt
A A have children in the Scene graph
o ‘ I l , Z ‘A /
- I 0 - x javafmscnneﬁegion
Re El‘ Q" The base alas tor all JaVaFX
Node»based Ul CflﬂtrDlSv and all
|—T Ti layout containers,
—
l ‘l
::| "I" lE O javahrscanecontml
— Base class for all user interface
Each item in the scene graph is called a Nude, °°ml°|5-
Each node in the scene graph can be given a unique id.
Each node has a bounding rectangle and a style.
Any Node can have transformations applied to it: translation, rotation, scaling. or shearing.

***************Ending Page***************

***************Beginning Page***************
***************page number:39**************
Layout Management
Setting the position and size for Ul element.
~ A “combo” of a Swing JPane/ + LayoutManager
- javafx.scene.lay0ut. Pane - Base class for layout
panes; used directly in cases where absolute
positioning of children is required.
- Uses proffered, minimum and maximum properties
- FIowPane, BorderPane, ‘WW ""m
AnchorPane, StackPane,
TiIeF'ane, GridPane,
TextF/ow, HBox, VBox, etc‘ , ‘
- bc'derpane4 SetCenterl
new LlstVleWO )7
bOFLlEYPéYYE.d€tRnttCH(
new Labe; ("l-le;l<:"] )7

***************Ending Page***************

***************Beginning Page***************
***************page number:40**************
Addlng Functlonallty
publlc class HelloWorld extends Application (
@Overrlde
public void stazt(stage primatystage) ¢
Button helloEtn : new Euttonf);
hellQBtnisetText ("Hello Wendi").-
helloEtn , setOnAction (new BvsntHandlechtionEvent> () <
@Ovezzide
public void handle1ACthnEvent event) <
Systemicutlprlntln("Hello Button was clicked!">;
)
)1;
//The anonymous inner class
//<:an be turned into a lambda expresslon
Button ClaOBtn = new Butt0ﬂ("Ciac Mendel");
claoBtn.set0nAutloﬂ((Actianlvent event) —> (
Systerruoutiprintln("Cleo Mondo e stato cllccatol");
H;
)
)

***************Ending Page***************


***************Beginning Page***************
***************page number:41**************
JavaFX Events
An event represents an occurrenoe of something of interest to the application
javafxevenLEvent - Base class for FX events.
— source H origin of the event
— target —> the path through which the event will
travel when posted.
— type —> hierarchy W“““—m=‘“
mmmmv w wmxsvjswszn
"FMKEVJVFED
EMUNV IdllriurllwlON t mEmtANY WMMJRPRESSED
¥ hue-MMOUEHRELEEED
m w
M

***************Ending Page***************

***************Beginning Page***************
***************page number:42**************
Event Delivery Process
- Target Selection
— the node that has focus, ll? é’
— the node location ofthe cursor, etc. Scans
- Route Construction l m x
— the event dispatch chain -> iii
- Event Capturing Pm l Reclanotn
E passed down to the target t
— filters are invoked ‘ We l Mm
- Event Bubbling
E the event returns up from the target to the root
— handlers are invoked

***************Ending Page***************

***************Beginning Page***************
***************page number:43**************
lntercepting Filter Design Pattern

- EventHand/er functional interface

- Filters (going down...)
reoClrcle.addEventFilt-.er(

MutiseFlvent,MOUSFI CLTCKFJ, (Wouseiveri 6i *> (
Syste'n.th_prlntln("Cllcc gong down");
//e.con5i,neii;

ll;

- Handlers (going up...)
reoClrcle .addEventl-landler(

MOJSerAnt.MOUSFicliTCKFJ, (‘-lousel'uvevz El *> (
Syste'n.cu:_println(‘l/111cc gong hp");

ll;

- Convenience methods
setOnEventitype(Eventl-landler<? ste: eventiciass> value)
helloB:n.setDnAction(ncw Evcntkandlcr<A2tlonEvcnt> (l l,. i);
redC\rclesetOnMouseEl-nteredhww Eventl'awdler<MoLgeEvent>U (1.));

***************Ending Page***************

***************Beginning Page***************
***************page number:44**************
Translate'lransition translate I

new Translate'rranslcionmutatiommillls1750)b;
chanslate.setToX(300); translatesetToYiZSOH
FillTxansitiox-A £111 : new Filszansitlon(Durat10n.mllli5(750)li
flll .setTOValue (COlor.RED)7
RotateTransition rotate : new

RotateTransltloﬂ (DuratioanilllS (750) ):
rotate . setToAnglE (360):
ScaleTzansitiox-A scale :

new ScaleTransitlon(Duratlon.mllllS(755)]7
scale.setToX(O.1); Scale.sEtToY (0.1]?
Parallethansiticn transition Z

new ParallelTransltiOn(bluesquare,

translate, fill, rotate, scale);
transition,setCycleCcunt(TimelinetINDEFINITE);
transition,setAutoReverSe (true);
transimonplayU;

***************Ending Page***************

***************Beginning Page***************
***************page number:45**************
P u l se

- A pulse is an event that indicates to the JavaFX scene graph
that it is time to synchronize the state of the elements on the
scene graph with Prism.

- A pulse is throttled at 60 frames per seconds (fps) maximum
and is fired whenever animations are running or when
something in the scene graph is changed. For example, ifa
position of a button is changed, a pulse is scheduled.

~ When a pulse is fired, the state of the elements on the scene
graph is synchronized down to the rendering layer.

- A pulse enables application developers a way to handle events
asynchronously. This important feature allows the system to
batch and execute events on the pulse.

~ The Glass Windowing Toolkit is responsible for executing the
pulse events. lt uses the high-resolution native timers to make
the execution.

***************Ending Page***************

***************Beginning Page***************
***************page number:46**************
Styling Withs CSS
Cascading Style Sheets
- Deﬁne Style Sheets Files
.root l
—fx—bacquound—image: url ("background.qu") :
l
.label t
ifxifontisize: 12px;
—fx—font—welght: bold;
*fx*text*fill: #333333;
l
- Specify the CSS
scenetqetStylesheetS (l tadd("path/stylesheet.css");
~ lnline
helloBtnisetstylel
"*bkbackgroundicolor: slateblue; " +
"*fxitextifill: white;");

***************Ending Page***************

***************Beginning Page***************
***************page number:47**************
~ XML-based language that provides the structure for
building a user interface separate from the
application logic of your code.
- Java (Programatic)
BordezPane border I new BorderPal-Ael);
Label helloLabel : new Labell"Hello");
bordeztsetTcplhellQLabell;
Label worldLabel : new Label ("world")?
border‘ setCenter(wor1dLabel) r
~ FXML (Declarative)
<BorderPane>
<top>
</cop>
<center>
<Label text:"World"/>
</center>
</BOrderPane>

***************Ending Page***************

***************Beginning Page***************
***************page number:48**************
Usmg FXML to Create UI
- FXML Loader
Parent roct : mLoadez.lead(
geLClassll .geLResQurCe["exa'nple,[xm1") l;
Scene SCEJE Z new Scene(roct, 300, 2w):
- Create the link between view and control
<Gr1dPane fXICOIZCIOllEI*"FWX8II\pleCOnCIOlleIH>
<EJttOn teXi*"Slgn tr"
onAction:"hhandleSubmitButtonAction" />
<Text tx:1d:"actlontarqet" />
</cmdPane>
- Define the code to handle events
publlc class FXMLExampleContzoller l
@FXMTi
pnvate Tex: actiontarqet;
@FXML
Erotecied VOld handleSmeliButtonActhn(Actlcrhlvent everi) l
echontargebsetText("Smyri in button pressed“);
l
l

***************Ending Page***************

***************Beginning Page***************
***************page number:49**************
Swing or JavaFX?
' Swing
P Maturity, Stability
P Component Libraries and Frameworks
> Large amount of resources
- JavaFX
> Modern, MVC friendly, CSS, FXML
P Spectacular (3D, Animations, etc.)
P May not be “rock-solid" in production, yet
‘P Not so many resources

***************Ending Page***************

