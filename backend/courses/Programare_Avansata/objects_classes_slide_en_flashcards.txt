[{content={parts=[{text=--FlashCardSeparator--
Single
--InteriorSeparator--
What is the primary function of a Class in Java?
--InteriorSeparator--
A prototype describing objects. An object is an instance of a class.
--InteriorSeparator--
easy
--InteriorSeparator--
2
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is a Java Reference?
--InteriorSeparator--
An entity used to uniquely locate an object (may be a pointer to a memory location).
--InteriorSeparator--
medium
--InteriorSeparator--
2
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What happens to objects that are no longer referenced in Java?
--InteriorSeparator--
They are automatically destroyed by the garbage collector.
--InteriorSeparator--
easy
--InteriorSeparator--
7
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the purpose of the `System.gc()` method?
--InteriorSeparator--
It "Suggests" JVM to start the Garbage Collector.
--InteriorSeparator--
medium
--InteriorSeparator--
8
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Which garbage collector partitions the heap into equal-sized regions?
--InteriorSeparator--
G1 Garbage Collector
--InteriorSeparator--
medium
--InteriorSeparator--
9
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What are the main components of Java memory?
--InteriorSeparator--
(right) Heap
(right) Stack
(wrong) Registers
(wrong) Cache
--InteriorSeparator--
medium
--InteriorSeparator--
11
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is Metaspace used for in Java?
--InteriorSeparator--
Native memory for the representation of class metadata.
--InteriorSeparator--
medium
--InteriorSeparator--
11
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the root of the class hierarchy in Java?
--InteriorSeparator--
Object
--InteriorSeparator--
easy
--InteriorSeparator--
18
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What happens if two objects are equal according to the `equals` method?
--InteriorSeparator--
They must produce the same integer `hashCode`.
--InteriorSeparator--
hard
--InteriorSeparator--
21
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following are methods of the Object class?
--InteriorSeparator--
(right) toString
(right) equals
(wrong) run
(wrong) start
--InteriorSeparator--
easy
--InteriorSeparator--
19
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What restrictions apply to Java constructors?
--InteriorSeparator--
(right) Has the same name as its class
(wrong) Must have a return type
(right) Cannot be abstract
(wrong) Must be static
--InteriorSeparator--
medium
--InteriorSeparator--
24
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What happens when a subclass overrides a method from its superclass and calls `super.methodName()`?
--InteriorSeparator--
It invokes the superclass's implementation of that method.
--InteriorSeparator--
medium
--InteriorSeparator--
26
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Does Java support pass-by-reference or pass-by-value?
--InteriorSeparator--
Always pass-by-value!
--InteriorSeparator--
medium
--InteriorSeparator--
27
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What does the 'final' modifier do to a variable, method and class?
--InteriorSeparator--
(right) Variables, once initialized, cannot be modified
(wrong) Methods can be overloaded
(right) Classes cannot be extended
(wrong) Objects can't be instantiated
--InteriorSeparator--
medium
--InteriorSeparator--
29
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the primary purpose of the `static` keyword when applied to a variable?
--InteriorSeparator--
Hold values specific to a certain class and not for every instance.
--InteriorSeparator--
hard
--InteriorSeparator--
30
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Can a static method directly access non-static members of its class?
--InteriorSeparator--
No, it can only access static variables.
--InteriorSeparator--
hard
--InteriorSeparator--
30
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
When is a static initializer block executed?
--InteriorSeparator--
Only one time, and it is run before any usage of that class.
--InteriorSeparator--
medium
--InteriorSeparator--
32
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Can an abstract class be instantiated directly?
--InteriorSeparator--
No, abstract classes cannot be instantiated.
--InteriorSeparator--
medium
--InteriorSeparator--
34
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is unboxing in Java?
--InteriorSeparator--
Automatic conversion of wrapper class to it's primitive type
--InteriorSeparator--
medium
--InteriorSeparator--
35
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following statements about Inner Classes are true?
--InteriorSeparator--
(right) Have access to all members of the outer class
(wrong) Are automatically static
(right) It is a class declared within another class
(wrong) Are implicitly final
--InteriorSeparator--
hard
--InteriorSeparator--
33
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is Single-responsibility principle?
--InteriorSeparator--
A class should have only one reason to change.
--InteriorSeparator--
easy
--InteriorSeparator--
14
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is Runtime modularization?
--InteriorSeparator--
Module
--InteriorSeparator--
medium
--InteriorSeparator--
2
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What happens if you try to assign null to a primitive type in Java?
--InteriorSeparator--
Compile-time error
--InteriorSeparator--
hard
--InteriorSeparator--
5
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the difference between object and class?
--InteriorSeparator--
A class is a blueprint or a template that defines the characteristics of objects. An object is an instance of a class.
--InteriorSeparator--
easy
--InteriorSeparator--
2
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What are valid access modifiers in Java?
--InteriorSeparator--
(right) public
(right) private
(wrong) friend
(wrong) protected internal
--InteriorSeparator--
easy
--InteriorSeparator--
16
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Which principle says that objects of a superclass can be replaced with objects of its subclasses without breaking the application?
--InteriorSeparator--
Liskov substitution principle (LSP)
--InteriorSeparator--
hard
--InteriorSeparator--
23
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Why must objects be aligned to 8-byte boundaries on the heap in JVM?
--InteriorSeparator--
For performance reasons and in order to conform with most of the hardware architectures.
--InteriorSeparator--
hard
--InteriorSeparator--
12
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the key characteristic of a Serial Garbage Collector?
--InteriorSeparator--
Stop the world
--InteriorSeparator--
hard
--InteriorSeparator--
9
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is the weak generational hypothesis, relevant to garbage collection?
--InteriorSeparator--
(right) Most allocated objects are not referenced (considered live) for long, that is, they die young.
(wrong) All references from older to younger objects exist
(right) Few references from older to younger objects exist.
(wrong) All allocated objects are referenced for long, that is, they are kept live
--InteriorSeparator--
hard
--InteriorSeparator--
10
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the purpose of the `finalize()` method?
--InteriorSeparator--
Invoked just before the removal of an object from memory.
--InteriorSeparator--
hard
--InteriorSeparator--
8
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which creational design pattern ensures only one instance of a class exists?
--InteriorSeparator--
(right) Singleton
(wrong) Prototype
(wrong) Builder
(wrong) Object Factory
--InteriorSeparator--
medium
--InteriorSeparator--
37
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In Java enums, what happens if we don't provide a default case in a switch statement?
--InteriorSeparator--
The code would still be valid, but it's good practice to include a default case to handle unexpected or future enum values.
--InteriorSeparator--
hard
--InteriorSeparator--
36
--FlashCardSeparator--
}], role=model}, finishReason=STOP, avgLogprobs=-0.17982987827241909}]