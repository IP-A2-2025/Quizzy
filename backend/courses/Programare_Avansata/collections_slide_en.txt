***************Beginning Page***************
***************page number:1**************
gig) Java“
Advanced Programming
Java Collections
Framework

***************Ending Page***************

***************Beginning Page***************
***************page number:2**************
Collections

~ A collection is an object that groups multiple
elements into a single unit.

~ Vectors, Lists, Stacks, Sets, Dictionaries, Trees,
Tables, etc.

- Promotes software reuse

~ Reduces programming effort

- Increases program speed and quality

- Benefits from polymorphic algorithms

~ Uses generics

***************Ending Page***************

***************Beginning Page***************
***************page number:3**************
Collections Framework

- Interface List
~ Abstract class AbstraftList
I A_rrayLi_st
- Concrete implementation “32:32:”

***************Ending Page***************

***************Beginning Page***************
***************page number:4**************
The Core Collection Interfaces
onnecnon Map

EFL \ﬁ maue Deque smum

SortedSet _ _ _

***************Ending Page***************

***************Beginning Page***************
***************page number:5**************
lnteﬂaga Hash Array Tree Linked Ha5h+Linked

Set Has-‘521 megs“ ankedHashSe:
List knyydt Ll'vkeuLlst

Vestal
Queue Lnkeuust,

ArrayB‘onknq ConturzentLJn

QueLe Game“
Deque Arraylieque Linkeolleque
yap Hns'vMap TresMap hnke/iHnshMap

Haswranlv
I I I

***************Ending Page***************

***************Beginning Page***************
***************page number:6**************
The Collection interface
- A collection represents a group of ob'ects (elements)
- Some collections are indexed, others are not.
- Some collections allow duplicate elements, others do not.
- Some are ordered and others unordered.
- Some are thread-safe, others are not.
- All collections are iterab/e: Iterator pattern
i public interface Collection<E> extends Iterable<E>
- Dedicated subinterfaces: List, Set, Queue, etc.
- Many (indirect) implementing classes.

***************Ending Page***************


***************Beginning Page***************
***************page number:7**************
Common operatlons
PUbllC interface Collect10n<E> extends Iterable<E> (
1n: size()7
boolean ismptyo:
boolean containsﬂlbject o);
Iterator<E> iteratorl)7
ObjectH tonnnaym
<T> T[] tonzzay(T[] a):
default <T> T[] toArzay(IntFunctlon<T[]> generator) (
return toAnay(qene:acor,apply(0) >;
}
boolean adeE e)?
boolean removewbject o);
boolean containsAll(Collect10n<?> c); > Inclusion
boolean addAll(Collectlon<? extends 15> c); ~ Union
boolean removeA111CollecLiz>n<7> C); > Difference
boolean zetainAll1Collect1cn<ﬂ>> c); ~ Intersection
VOld clearU;
)

***************Ending Page***************

***************Beginning Page***************
***************page number:8**************
Lists: ArrayList, LinkedList

- Alist is an indexed collection (sequence).

- Each element has a position (integer), starting

from 0. Just like an array.

~ Duplicates are allowed.

- A list can be implemented in various ways
—
—

Bad practice:

Using implementations as reference types:
A-Hsa-yList<Strinq> llSt : new ArrayList<>l);
Using raw generics:

List list : new Arralesttjr

***************Ending Page***************

***************Beginning Page***************
***************page number:9**************
Using a List

T\st<5tr\nq> list : new ArrayT.'st<>();
LlSt,add1"B")i
l1st,add("b")r
sysrem.m1t.pnnnln4l;sri; // ha, b];
asserL lisLsizef) Z: 27 Toenableassenions
assert llSt_gBt(O) .equals ("a"); use \he JVM oplion ea
assert llSt‘geC(l) .equels ("b"); java -ea MyApp
assert llst.ind.ex0£("a") Z o;

indexOf, contains use the
llsLxemoveF'b") 7 equals method of the elements!
assert Illst.c0ntains("b")7
assert MsncontainE-("a");

***************Ending Page***************

***************Beginning Page***************
***************page number:10**************
- ArrayList<E> implements List<E>
private static final int DEFAULTiCAPACITY e 10;
Objectl] elementData;
private int sue,-

~ LinkedList<E> implements List<E>
int size e 0;

Node<E> iii-st;
Node<E> last; private static class Node<E> 1
E item;
Node<E> next;
Node<E> piev;
1

***************Ending Page***************

***************Beginning Page***************
***************page number:11**************
The importance of equals
- Methods like: contains, indexOf, remove, etc.
rely on the equals method:
public boo/ean contains(0bject o)
returns true if this list contains the specified
element. More formally, returns true if and only if
this list contains at least one element e such that
—
' Source code (in ArrayList, approximative):
for (1m 1 : c, n : S1190? 1 < n,- 1w) l
1f (o._(element3atd[l]l) l
:eturr true;
l
Lelurn [(11397

***************Ending Page***************

***************Beginning Page***************
***************page number:12**************
Iteratlng Over a Llst
- As an indexed collections
[or (ML ‘:0, n:1i5t.size(); l < n; 3++ > [
System.out.prlntlr( li=t_get(i) J;
)
- Iterator and Enumeration
to: (Iterater it = listtlistIteratotO; it.hasNext(); ) K
System.out.pr1r:ln(it.next()H
1t .removeU?
)
- for-each
Lisl<$tuqent> SLLdean : new ArzayLl51<>Ui
for (Student student : students) (
stLdentAetGradeHO)?
)

***************Ending Page***************


***************Beginning Page***************
***************page number:13**************
qum class mum (
Private final ZUUC m N Z 1007mm,-
Puhhc md mmumqnuq.» luv.) ;
Jung U Z SystemJHUXEntTlmeb/lllllsU,'
for hm ‘ Z u; \ < N,- Wm
hsmddm;
1
long L2 Z System‘currenLh/wemnhs(y;
Svstem.ou(.pr1nt1n("Addt -' ‘ ([2 Z (1H;
»
public ma mmummncwn 1m) |
Jung U Z SYSZZNJMZHUMZMUUSz»,- get Sms AQZQMS
for (mt ‘ Z u; \ < N,- Wm
mum)’: ---
1
long [2 Z System‘cunenu‘)mer¢u)115(y;
Svﬁlem.ou(.pr)nt1r\("Getz -' Z ([1 Z Um . v v
» m: Chooslng a cerlam
Pub)“ vnld talﬂmmllLlst<Inther> 115:1 l implementation depends on (he
Jung U Z 5ystem.curxentT1meMlL\Ls ,- .
,0, hm ‘ Z U; \ < NF 1w ‘ nature ofthe problem bemg solved.
mkmqum;
1
long L2 Z System‘currenLh/wemnhs(y;
Mm.“.pUnUm-kamQVZ = -' . “2 Z (1H;
>
public void {wemumqmﬂb hat) x
tesllxddUlst); testGEtUlst): thZMVZUHU;
v
publxc mm vmd maJnIGtzlng “qsm (
mum EPP Z new TestLlstH;
spp.!un'leltl (nu ArzgyLilt<>ID :
“Ema-mm" Link-ﬁlilt<>());
>

***************Ending Page***************

***************Beginning Page***************
***************page number:14**************
The Set Interface
- A collection that contains no duplicate elements (models
the mathematical set abstraction).
More formally, sets contain no pair of elements e1 and e2
such that e1.equals(e2), and at most one null element.
' Sets are not indexed! We use iterators or for-each in order
to traverse the set.
- A set can be implemented in various ways
—
—

***************Ending Page***************

***************Beginning Page***************
***************page number:15**************
e HaShSet<E> implements Set<E>
HashMap<E,0bject> map?
Uses the hashCoda of an Object.
This class offers constant time performance for the basic operations
(add, remove, contains and size), assuming the hash function disperses
the elements properly among the buckets.

- TreeSet<E> implements Set<E>
private NavigableMap<E,Object> m; //a specialized SortedMap
The elements are soned using their natural ordering, or by a Comparator
provided at set creation time
This implementation provides guaranteed log(n) time cost for the basic
operations (add, remove and contains).

***************Ending Page***************

***************Beginning Page***************
***************page number:16**************
Using a Set
Set<5tnng> Set : new HashSet<>Ur
sot.add("b"); Sct.add("d")7 Sct.add("a"];
Systemmucynnclnwec)r // [5, b]

No guarantees about order.
assert set.sile() Z: 2;
WWW. 4 " n v
set.rernove("b“l ,- indexOf, contains use the
assert SCK.COntainS("a")F equals method of the elements.
for(String s : set) l
System.out.pzlntln(s);

***************Ending Page***************

***************Beginning Page***************
***************page number:17**************
publlt class Tesnset 1 y
111111 [[anc 1m 1| : wagon;
[mm VON! LesLAdd(ColleccuaKIx-Aceqez) collection) 1
lung [1 : Systcm.cuxxcntT)mchlllsU;
m 11m 1 : n; 1 < N,- 1"] 1
collecrlon.ndd(n;
>
lung [2 : SySLem.turXeanlmeM11113U,-
System,ou(.pz1n[1n("Addz n 1 ‘[2 [ [111;
1
pubhc vmd LechLereteLCeUectiolK'!) collection) l
lung [1 : Systcm.cuxxcntT)mchlllsU; Iterate 51 ms 12 ms
m (Ghject ob] = collectxon) 1
objnmmgm //a<> something
>
s stem,ou(. [1n[1n<"1[[[3[[[ H 1 ‘[2 7 (1n: .
1 y P Memory low hlgh
pubhc vmd LescCovvtev"sltoilectlalK'b celleczion) 1
lung [1 : Systcm.cuxxcntT)mchlllsU;
for mt i Z n; 1 < Nr 1m 1 Concluslon: Chooslngaceﬂaln
> C°Uec“°"'°°““‘“s <11; implementation depends on the
1an [2 : SyiLemJurxenl'InneMﬂhSU,- nature ofthe problem being solved.
System,ou(.pzlntlnC'CQnIAAnS: n 1 ([1 [ (m;
1
pubhc voui runTests[Collecnan<1nnegez> collection) 1
[cscAdd(cuUccc1\>m; [cst]:cra(c(collcc(1un7; (cslﬁuntalnskollccixum;
1
[mm mm W111 mmsmnq [[qsuv 1
Tense: SPF : new TestSetH;
JPP. [measmu krunylt<>U 1:
app.xnnTests(nn-1 nuns-[001;

***************Ending Page***************


***************Beginning Page***************
***************page number:18**************
The Queue Interface
- A queue is a first-in-first-out (FIFO) linear collection;
It has a head and a tail.
~ Provides additional insertion, extraction, and
inspection operations.
add, remove, element (throw exceptions)
offer, poll, peek (return special values)
- Example
Queue<$t:1nq> q : new LinkedList<>();
q.o££e:("a"lr // sane as q.add
q.offer("b"i; // adds elemevzs at the tail
assert q.peek() .equals("a"l; //reZJrns the head
assert q.poll().equals("a"li //ret_\rns and removes
assert q.peek() .equals("b"l;

***************Ending Page***************

***************Beginning Page***************
***************page number:19**************
The PriorityQueue class

- A queue based on a priority heap. The elements ofthe
priority queue are ordered according to their natural
ordering, or by a Comparator. The head of the queue
is the least element with respect to the ordering.

- The implementation provides O(log(n)) time for the
enqueing and dequeing methods, linear time for the
remove and contains methods; and constant time for
the retrieval methods (peek, element, size).

- Example:

PriorityQueue<Inteqer> pQueLe Z rew PricrityQueue<>(J;
pO\.eJe.ad:tl31 .- pOLeJe-Jdizll 1.- POLEJFJ.:JI}IH7];
assert pQJeue.peek() .equalS (t);

***************Ending Page***************

***************Beginning Page***************
***************page number:20**************
Stacks and Deques

- The Stack class represents a last-in-first-out (LIFO)
stack of objects. Obsolete, just like Vector.

- Deque is a linear collection that supports element
insertion and removal — ("double ended
queue").

- Deques can be used to implement LIFO collections:
Deque<1nteqer> stack : new ArrayDeque<>();
stacklpushtl); //sarre as addFirst
stacklpushU);
assert stackpeekFirstU .equals (Z); //same as peek
assert sta(:k.peekLast() .eqoalsﬂ);

***************Ending Page***************

***************Beginning Page***************
***************page number:21**************
The Map interface
- An object that maps keys to values.
- lt is similar to describing a dictionary.
~ public interface MaP<K, v> t 1
- A map cannot contain duplicate keys; each key can map to at
most one value.
- Example: Map<COuntry, chy>
m m
Romania ~> Bucharest
France —~ Paris
- Implementations:
—
—

***************Ending Page***************

***************Beginning Page***************
***************page number:22**************
Using a Map
Map<5tr1ng, Strlng> map 1 new HashMap<>();
map.pu€("RQmanla“, "Eucharest")?
map.puu"nance", "Parls");
System.out.pnncln1map);
//Ron\anla:Euchazest, FIBHCEZPBIlS)
assert map.get("France") .equals("Parls");
assert map.containsKay4"Romania")r
for15trlng country : matheySetU) (

System.cupprlntlmmapget(country))i
)

***************Ending Page***************

***************Beginning Page***************
***************page number:23**************
Under the Hood
- HashMap can achieve an average time complexity of 0(1) for
the put and get operations and space complexity of 0(n).
- Instead of iterating over all its elements, HashMap attempts to
calculate the position of a value based on its key.
° HashMap stores elements in so-called buckets and the number
of buckets is called capacity.
Node<K,V>[] table;
Set<Map.Entiry<K,V>> entrySet;
- The index in the table array is computed using the hashCode
method of the key object‘
- Inside a bucket, values are stored either in a list (for less than 8
elements) or in a balanced tree. The data structure changes
dynamically. The performance of iterating: O(log lbucketl).

***************Ending Page***************


***************Beginning Page***************
***************page number:24**************
HasMap.get
final Node<K,V> gemodeunt hash, Object key) 4
Node<K,V>[] tab; Node<K,V> first, e; int n; K k;
1f ((tab : table) !: null u (n : tab.length) > 0 u
(first = tabﬂn - 1) r. haahl) a: null) <
lf (flrst.hash :: hash m // always check flrst node
((k : flrstlkey) :: key
H (key z: nLll w key.equals(k))))
returr ﬁrst;
lf ((e : fll'st.next) l: rull) l
1f (flrst lrStanCPOf TreeNodP)
return 1(TreeNode<K,‘/>)first>,qetTreeNodelhash, key);
do 1
\r (smas) :: lush $5
((k : e.<ey) :: key
H (key 1: n_\ll && key.eq\;al$(k))))
retJrn e;
luhile we : e.next) 1: rull);
)
}
Iétutn null;
)

***************Ending Page***************

***************Beginning Page***************
***************page number:25**************
hashCode and equals
public Class Player 1
private 3:11-43 name;
//
@Ovekrlde
public int hashCodeO 4
\"L hash i ';
hash , er ' hash > ObjectslzashcodeLLhismeme)r //c><ampic
rctuln hash;
)
@OverILde
public hanlean equal!(0bjecc obj) (
1f (thls Z: om) tsturn true;
\r (091 W nun) return T5158;
‘v mom msmnceo‘ waver)» rsLurn ‘else;
Player oLhcz 7 [Piayun om,-
rutuLn Objects.equals(tunhndmu, othunnnuu)?
)
// When a hashCode()oomparison returnsfalse,
the equals() memod must also return false.

***************Ending Page***************

***************Beginning Page***************
***************page number:26**************
Assume there is another property Integer id;
public boulean equals (Object obj) (

if 4Lh13 W ODJ) {CLUIn LLUC7

1f {on} :: null) rcturn falsc;

1f H [obj lustanceof Flay/51)) return false;

flayer pars i (Player) other;

Leturn Object5.equalsltwls.,d, ot"er.,d\;
Map<l>\ayer, SLrinq> map 7 new Hash‘dap<>(y;
map.puL(ncw Piajux UNUSSJ") , "YSG");
mcp.put(ncw Pldycrl"Runcldu")y "Mdncucstcr Urutcd");
System.out.prl“tlnlmap};

(Messi=Manchester Unked)

***************Ending Page***************

***************Beginning Page***************
***************page number:27**************
Polymorphlc Algorlthms
java.uti1.Collections
' sort
' Shuffle
~ binarySearch
~ reverse
' fill
- copy
~ min
~ max i
~ swap
' enumeration L0
- unmodifiableCollectionType
Llst<StI1ng> ,IrmutablelLSt : Collectlons.unmndlflableLJst(llsty;
Jmmutaulellst . add ("Oops. . . ? 1 ">; What DesignPattem?
~ synchroniZedCollectionType

***************Ending Page***************

***************Beginning Page***************
***************page number:28**************
- The explicit type can be replaced by the reserved type name
var for local variable declarations that have initializers.
string sir I "Helm"; ﬁ> —

~ Explicit vs. Implicit, Verbosity vs. Readability

- Examples
var strlngiest 7 LJst.uf["a", "b", "c"l,'
var permit,“ : new Arrszlst<Persﬁn>UP
for(vaz person 1 personLlst) i i
var company"oFmp'ovees i new Has‘b'lap<SLi/1nq, List<§tr\“q>>l);
lor lvaz ectvy; commanchl-“wcicveee. e“LYvSeLll) ‘

val employees i anLy.ceLValuu(l;
l
var itemﬁueue : new PrlorltyQLieue<>Hf // PriorityQueue<Ubject\
W

***************Ending Page***************

