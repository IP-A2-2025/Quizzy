[{content={parts=[{text=--FlashCardSeparator--
Single
--InteriorSeparator--
What is the primary purpose of a Java Collection?
--InteriorSeparator--
To group multiple elements into a single unit.
--InteriorSeparator--
easy
--InteriorSeparator--
2
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following are benefits of using Java Collections?
--InteriorSeparator--
(right) Promotes software reuse
(right) Reduces programming effort
(wrong) Increases code complexity
(wrong) Decreases program speed
--InteriorSeparator--
medium
--InteriorSeparator--
2
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Name the interface that the Collection interface extends.
--InteriorSeparator--
Iterable<E>
--InteriorSeparator--
easy
--InteriorSeparator--
6
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following are core collection interfaces?
--InteriorSeparator--
(right) List
(right) Set
(wrong) Tree
(wrong) Graph
--InteriorSeparator--
medium
--InteriorSeparator--
4
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the key characteristic of a List in Java Collections?
--InteriorSeparator--
It is an indexed collection (sequence).
--InteriorSeparator--
easy
--InteriorSeparator--
8
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Why is using implementations as reference types (e.g., ArrayList<String> list = new ArrayList<>()) considered bad practice?
--InteriorSeparator--
It limits flexibility and maintainability.
--InteriorSeparator--
medium
--InteriorSeparator--
8
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which method(s) of List rely on the equals method?
--InteriorSeparator--
(right) contains
(right) indexOf
(wrong) size
(wrong) clear
--InteriorSeparator--
medium
--InteriorSeparator--
11
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
How do you iterate over a List using an Iterator?
--InteriorSeparator--
for (Iterator it = list.listIterator(); it.hasNext(); ) { System.out.println(it.next()); it.remove(); }
--InteriorSeparator--
medium
--InteriorSeparator--
12
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
When iterating over an ArrayList vs LinkedList, what is the time complexity?
--InteriorSeparator--
(right) ArrayList get() is O(1)
(wrong) LinkedList get() is O(1)
(wrong) ArrayList get() is O(n)
(right) LinkedList get() is O(n)
--InteriorSeparator--
hard
--InteriorSeparator--
13
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the key characteristic of a Set in Java Collections?
--InteriorSeparator--
It contains no duplicate elements.
--InteriorSeparator--
easy
--InteriorSeparator--
14
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What data structure does HashSet use internally?
--InteriorSeparator--
HashMap
--InteriorSeparator--
medium
--InteriorSeparator--
15
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is the time complexity for add, remove, contains, and size operations in a HashSet, assuming a good hash function?
--InteriorSeparator--
(right) Constant time
(wrong) Logarithmic time
(wrong) Linear time
(wrong) Quadratic time
--InteriorSeparator--
hard
--InteriorSeparator--
15
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
How are elements sorted in a TreeSet?
--InteriorSeparator--
Using their natural ordering or by a Comparator provided at set creation time.
--InteriorSeparator--
medium
--InteriorSeparator--
15
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is the time complexity for add, remove and contains operations in TreeSet?
--InteriorSeparator--
(wrong) Constant Time
(wrong) Linear Time
(right) Logarithmic Time
(wrong) n log(n)
--InteriorSeparator--
hard
--InteriorSeparator--
15
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the primary characteristic of a Queue?
--InteriorSeparator--
It is a first-in-first-out (FIFO) linear collection.
--InteriorSeparator--
easy
--InteriorSeparator--
18
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the difference between offer() and add() methods in the Queue interface?
--InteriorSeparator--
add() throws an exception if the element cannot be added, while offer() returns a special value (false).
--InteriorSeparator--
medium
--InteriorSeparator--
18
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What data structure is a PriorityQueue based on?
--InteriorSeparator--
A priority heap.
--InteriorSeparator--
medium
--InteriorSeparator--
19
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which best describes PriorityQueue peek() method?
--InteriorSeparator--
(right) Returns the head of the queue
(wrong) Returns and removes the head of the queue
(right) Returns the least element with respect to the ordering.
(wrong) Returns the greatest element with respect to the ordering.
--InteriorSeparator--
hard
--InteriorSeparator--
19
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is a Deque?
--InteriorSeparator--
A linear collection that supports element insertion and removal at both ends.
--InteriorSeparator--
medium
--InteriorSeparator--
20
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the primary purpose of a Map?
--InteriorSeparator--
An object that maps keys to values.
--InteriorSeparator--
easy
--InteriorSeparator--
21
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following statements about Map are correct?
--InteriorSeparator--
(right) A map cannot contain duplicate keys.
(wrong) A map can contain duplicate keys.
(right) Each key can map to at most one value.
(wrong) Each key can map to many values.
--InteriorSeparator--
medium
--InteriorSeparator--
21
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
How does HashMap achieve an average time complexity of O(1) for put and get operations?
--InteriorSeparator--
By calculating the position of a value based on its key and storing elements in buckets.
--InteriorSeparator--
hard
--InteriorSeparator--
23
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
How is the index in the table array of a HashMap computed?
--InteriorSeparator--
(right) Using the hashCode method of the key object.
(wrong) Using the equals method of the key object.
(wrong) Using a random number generator.
(wrong) Using the compareTo method of the key object.
--InteriorSeparator--
hard
--InteriorSeparator--
23
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What happens inside a HashMap bucket when there are less than 8 elements?
--InteriorSeparator--
Values are stored in a list.
--InteriorSeparator--
medium
--InteriorSeparator--
23
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What are important considerations when overriding hashCode() and equals() methods?
--InteriorSeparator--
(wrong) The hashCode() method should always return the same value.
(right) If two objects are equal according to equals(), they must have the same hashCode.
(right) When a hashCode() comparison returns false, the equals() method must also return false.
(wrong) The equals() method should always return true.
--InteriorSeparator--
hard
--InteriorSeparator--
25
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the purpose of polymorphic algorithms in Java Collections?
--InteriorSeparator--
To provide generic algorithms that can operate on different collection types.
--InteriorSeparator--
medium
--InteriorSeparator--
27
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Name 3 polymorphic algorithms provided by java.util.Collections.
--InteriorSeparator--
(right) sort
(wrong) push
(right) shuffle
(right) binarySearch
--InteriorSeparator--
hard
--InteriorSeparator--
27
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Give an example of how the 'var' keyword can be used.
--InteriorSeparator--
var stringList = List.of("a", "b", "c");
--InteriorSeparator--
easy
--InteriorSeparator--
28
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the significance of Collection.unmodifiableList(list)?
--InteriorSeparator--
It returns an unmodifiable view of the specified list.
--InteriorSeparator--
medium
--InteriorSeparator--
27
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
When should you use ArrayList over LinkedList?
--InteriorSeparator--
(right) Frequent random access
(wrong) Frequent insertions and deletions in the middle
(wrong) Low memory usage
(right) When reads are more common than writes
--InteriorSeparator--
hard
--InteriorSeparator--
13
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
When should you use HashSet over TreeSet?
--InteriorSeparator--
(right) When order doesn't matter
(wrong) When sorted iteration is required
(right) Faster average performance
(wrong) Logarithmic time complexity is important
--InteriorSeparator--
hard
--InteriorSeparator--
17
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the time complexity of the HashMap.get() operation in the worst case?
--InteriorSeparator--
O(n) if all elements end up in the same bucket.
--InteriorSeparator--
hard
--InteriorSeparator--
23
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What are advantages of using the 'var' keyword?
--InteriorSeparator--
(right) Reduces verbosity
(wrong) Improves performance
(right) Improves readability in some cases
(wrong) Enforces stricter type checking
--InteriorSeparator--
medium
--InteriorSeparator--
28
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Why is the Stack class considered obsolete in Java?
--InteriorSeparator--
Because Deque provides a more complete and efficient LIFO implementation.
--InteriorSeparator--
medium
--InteriorSeparator--
20
--FlashCardSeparator--
}], role=model}, finishReason=STOP, avgLogprobs=-0.14593975916857968}]