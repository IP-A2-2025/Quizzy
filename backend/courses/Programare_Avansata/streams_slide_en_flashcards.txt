[{content={parts=[{text=--FlashCardSeparator--
Single
--InteriorSeparator--
What is a stream in Java?
--InteriorSeparator--
A sequence of elements supporting sequential and parallel aggregate operations.
--InteriorSeparator--
easy
--InteriorSeparator--
4
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following are characteristics of stream operations?
--InteriorSeparator--
(right) Lazy execution
(right) Declarative
(wrong) Eager evaluation
(wrong) Mutable
--InteriorSeparator--
medium
--InteriorSeparator--
5
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is a functional interface?
--InteriorSeparator--
An interface that contains only one abstract method.
--InteriorSeparator--
easy
--InteriorSeparator--
6
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following are functional interfaces in `java.util.function`?
--InteriorSeparator--
(right) Predicate
(right) Function
(wrong) Iterator
(wrong) List
--InteriorSeparator--
medium
--InteriorSeparator--
7
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does the `filter` operation do in a stream?
--InteriorSeparator--
It selects elements based on a given Predicate.
--InteriorSeparator--
easy
--InteriorSeparator--
8
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following are stream creation methods?
--InteriorSeparator--
(right) `Collection.stream()`
(right) `Stream.of()`
(wrong) `List.add()`
(wrong) `System.in`
--InteriorSeparator--
medium
--InteriorSeparator--
10
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the difference between intermediate and terminal operations?
--InteriorSeparator--
Intermediate operations return a new stream, while terminal operations return a value or side effect.
--InteriorSeparator--
medium
--InteriorSeparator--
11, 12
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following are examples of terminal operations?
--InteriorSeparator--
(right) `count()`
(right) `forEach()`
(wrong) `filter()`
(wrong) `map()`
--InteriorSeparator--
easy
--InteriorSeparator--
12
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the purpose of the `Optional` class?
--InteriorSeparator--
To provide a container object that may or may not contain a non-null value, avoiding NullPointerExceptions.
--InteriorSeparator--
medium
--InteriorSeparator--
14
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What are the benefits of using streams?
--InteriorSeparator--
(right) Concise and declarative code
(right) Functional programming approach
(wrong) Increased mutability
(wrong) Complex Iterator implementation
--InteriorSeparator--
medium
--InteriorSeparator--
2
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the purpose of the `reduce` operation?
--InteriorSeparator--
To reduce a sequence of elements to a single value according to a specified function.
--InteriorSeparator--
medium
--InteriorSeparator--
16
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is the purpose of the `map` operation in a stream?
--InteriorSeparator--
(right) Converting elements of a stream by applying a function
(wrong) Filtering elements of a stream
(wrong) Sorting elements of a stream
(wrong) Reducing elements of a stream
--InteriorSeparator--
medium
--InteriorSeparator--
17
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the purpose of the `collect` operation?
--InteriorSeparator--
To convert a stream to a Collection or a Map.
--InteriorSeparator--
medium
--InteriorSeparator--
18
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What does the `groupingBy` collector do?
--InteriorSeparator--
(right) Groups elements into a Map based on a classifier function
(wrong) Sorts elements in a stream
(wrong) Filters elements in a stream
(wrong) Counts elements in a stream
--InteriorSeparator--
medium
--InteriorSeparator--
20
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the advantage of using parallel streams?
--InteriorSeparator--
They use a multi-threaded approach to execute functions in the pipeline, making better use of multi-core processors.
--InteriorSeparator--
medium
--InteriorSeparator--
22
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
When does using parallel streams become beneficial?
--InteriorSeparator--
(right) When there is a large number of independent tasks
(wrong) When dealing with a small number of tasks
(wrong) When overhead is not a concern
(wrong) All cases
--InteriorSeparator--
hard
--InteriorSeparator--
22
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Can terminal operations be chained?
--InteriorSeparator--
No, terminal operations cannot be chained.
--InteriorSeparator--
easy
--InteriorSeparator--
12
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What can a Stream pipeline consist of?
--InteriorSeparator--
(right) A source
(right) Zero or more intermediate operations
(right) A terminal operation
(wrong) Two terminal operations
--InteriorSeparator--
medium
--InteriorSeparator--
5
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the difference between `findFirst()` and `findAny()`?
--InteriorSeparator--
`findFirst()` returns the first element of the stream, while `findAny()` returns any element of the stream.
--InteriorSeparator--
hard
--InteriorSeparator--
13
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following operations can be used for explicit use of functional interfaces?
--InteriorSeparator--
(right) `Predicate`
(right) `Function`
(wrong) `Stream`
(wrong) `Collection`
--InteriorSeparator--
medium
--InteriorSeparator--
9
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the purpose of `flatMap` operation?
--InteriorSeparator--
It returns a stream consisting of the results of replacing each element of this stream with the contents of a mapped stream produced by applying the provided mapping function to each element.
--InteriorSeparator--
hard
--InteriorSeparator--
17
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What are the advantages of using `Optional`?
--InteriorSeparator--
(right) Avoiding `NullPointerException`
(wrong) Ensuring that a value is always present
(wrong) Simplifying code with implicit null handling
(right) Providing a clear indication of potential absence of value
--InteriorSeparator--
hard
--InteriorSeparator--
14, 15
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the default execution mode for stream pipelines?
--InteriorSeparator--
Sequential.
--InteriorSeparator--
easy
--InteriorSeparator--
22
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which are examples of Intermediate operations?
--InteriorSeparator--
(right) filter
(right) map
(right) skip
(wrong) sum
--InteriorSeparator--
easy
--InteriorSeparator--
11
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does the method `isPresent()` do in Optional?
--InteriorSeparator--
It returns true if a value is present and false otherwise.
--InteriorSeparator--
easy
--InteriorSeparator--
15
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What benefits do Streams bring when compared to Iterators?
--InteriorSeparator--
(right) Terser Code
(right) Functional Approach
(wrong) More Mutable
(wrong) Tightly coupled
--InteriorSeparator--
medium
--InteriorSeparator--
2
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In terms of stream sorting, what does `Comparator.comparingInt(User::getAge)` do?
--InteriorSeparator--
Sorts a list of User by their ages.
--InteriorSeparator--
medium
--InteriorSeparator--
19
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which operations allow for iteration, filtering and matching?
--InteriorSeparator--
(right) filter
(right) findFirst
(right) allMatch
(wrong) collect
--InteriorSeparator--
medium
--InteriorSeparator--
13
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What happens if you call `getAsDouble()` on an empty OptionalDouble?
--InteriorSeparator--
It will throw a `NoSuchElementException`.
--InteriorSeparator--
hard
--InteriorSeparator--
12
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What are potential drawbacks of using parallel streams?
--InteriorSeparator--
(right) Higher overhead compared to sequential streams
(wrong) Always faster execution
(wrong) Simplified debugging
(right) Potential for non-deterministic results if not used carefully
--InteriorSeparator--
hard
--InteriorSeparator--
22, 23
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Why might using `Optional` be important for stream intermediate operations?
--InteriorSeparator--
To handle cases where intermediate operations might not produce a value, preventing NullPointerExceptions.
--InteriorSeparator--
hard
--InteriorSeparator--
14
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
In the Collectors class, what's the difference between `Collectors.counting()` and `Collectors.summingInt()`?
--InteriorSeparator--
(right) `Collectors.counting()` counts the number of elements, while `Collectors.summingInt()` sums integer values.
(wrong) `Collectors.counting()` sums the number of elements, while `Collectors.summingInt()` counts integer values.
(wrong) There is no difference
(wrong) `Collectors.counting()` sums the number of elements, while `Collectors.summingInt()` counts integer values.
--InteriorSeparator--
hard
--InteriorSeparator--
21
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What happens when a terminal operation is initiated on a stream?
--InteriorSeparator--
Computation on the source data is performed, and source elements are consumed only as needed.
--InteriorSeparator--
medium
--InteriorSeparator--
5
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
When collecting to a String with joining, what does the joining method take as arguments?
--InteriorSeparator--
(right) delimiter
(right) prefix
(right) suffix
(wrong) mapper
--InteriorSeparator--
hard
--InteriorSeparator--
18
--FlashCardSeparator--
}], role=model}, finishReason=STOP, citationMetadata={citationSources=[{startIndex=6159, endIndex=6279, uri=https://www.onlyfullstack.com/java-8-features-interview-questions/}, {startIndex=6231, endIndex=6354, uri=http://tawep.org/alnvf9/mono-flatmap-to-string.html}]}, avgLogprobs=-0.1773543922087986}]