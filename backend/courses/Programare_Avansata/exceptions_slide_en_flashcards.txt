[{content={parts=[{text=--FlashCardSeparator--
Single
--InteriorSeparator--
What is the definition of an "exception" in Java?
--InteriorSeparator--
An "abnormal event" that occurs during the execution of a program.
--InteriorSeparator--
easy
--InteriorSeparator--
2
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following is/are the main purpose(s) of exception handling?
--InteriorSeparator--
(right) To gracefully handle errors and prevent program termination.
(wrong) To make the code run faster.
(right) To separate error handling code from normal code.
(wrong) To confuse the programmer.
--InteriorSeparator--
medium
--InteriorSeparator--
3
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What keyword is used to define a block of code where exceptions are anticipated?
--InteriorSeparator--
try
--InteriorSeparator--
easy
--InteriorSeparator--
3
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What happens to resources opened in a 'try-with-resources' block?
--InteriorSeparator--
(right) They are automatically closed after the block finishes.
(wrong) They remain open until explicitly closed.
(wrong) They are closed in a random order.
(wrong) They must be closed manually in the finally block.
--InteriorSeparator--
medium
--InteriorSeparator--
8
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What interface must a class implement to be used in a try-with-resources statement?
--InteriorSeparator--
AutoCloseable
--InteriorSeparator--
medium
--InteriorSeparator--
8
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following exceptions are considered "checked" exceptions?
--InteriorSeparator--
(wrong) NullPointerException
(right) IOException
(wrong) IllegalArgumentException
(right) SQLException
--InteriorSeparator--
medium
--InteriorSeparator--
10
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the primary difference between checked and unchecked exceptions?
--InteriorSeparator--
Checked exceptions must be handled (caught or declared to be thrown), while unchecked exceptions do not need to be handled.
--InteriorSeparator--
medium
--InteriorSeparator--
10
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which class do unchecked exceptions typically extend?
--InteriorSeparator--
(wrong) Exception
(wrong) Throwable
(right) RuntimeException
(wrong) IOException
--InteriorSeparator--
easy
--InteriorSeparator--
10
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does the `finally` block guarantee in a `try-catch-finally` statement?
--InteriorSeparator--
The code in the `finally` block will always execute, regardless of whether an exception is thrown or caught.
--InteriorSeparator--
medium
--InteriorSeparator--
3
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is the purpose of the `throws` keyword in a method signature?
--InteriorSeparator--
(right) To declare that the method might throw a specific exception.
(wrong) To catch a specific exception within the method.
(right) To propagate an exception to the calling method.
(wrong) To prevent exceptions from being thrown.
--InteriorSeparator--
medium
--InteriorSeparator--
6
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the purpose of the `throw` keyword?
--InteriorSeparator--
To create and propagate an exception.
--InteriorSeparator--
easy
--InteriorSeparator--
12
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is the recommended approach for validating data integrity?
--InteriorSeparator--
(right) Create a validation framework.
(wrong) Ignore validation and assume data is correct.
(right) Use an existing validation framework like Apache Commons Validator.
(wrong) Use System.out.println to handle incorrect data
--InteriorSeparator--
hard
--InteriorSeparator--
14
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
When should you create a custom exception that extends `Exception` (checked exception)?
--InteriorSeparator--
When a client can reasonably be expected to recover from the exception.
--InteriorSeparator--
hard
--InteriorSeparator--
15
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
When should you create a custom exception that extends `RuntimeException` (unchecked exception)?
--InteriorSeparator--
(right) When a client cannot do anything to recover from the exception.
(wrong) When the exception is related to file I/O operations.
(wrong) When you want to force the client to handle the exception.
(wrong) When the exception is related to network communication errors.
--InteriorSeparator--
hard
--InteriorSeparator--
15
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is exception chaining?
--InteriorSeparator--
Wrapping an original exception within a new, custom exception.
--InteriorSeparator--
hard
--InteriorSeparator--
17
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What are the benefits of exception chaining?
--InteriorSeparator--
(right) Preserves the original exception's information.
(wrong) Simplifies debugging by hiding the root cause.
(right) Adds context to the exception for better error reporting.
(wrong) Reduces the amount of code needed for exception handling.
--InteriorSeparator--
hard
--InteriorSeparator--
17
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is "Spaghetti" Code in the context of error handling?
--InteriorSeparator--
Tangled, unstructured code with deeply nested conditional statements for error checking.
--InteriorSeparator--
hard
--InteriorSeparator--
18
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is Code Separation in the context of error handling and exceptions?
--InteriorSeparator--
(wrong) Grouping all exceptions into a single catch block.
(right) Using try-catch blocks to isolate error handling from normal code flow.
(wrong) Ignoring exceptions and letting the program crash.
(wrong) Hiding error messages from the user.
--InteriorSeparator--
hard
--InteriorSeparator--
18
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the purpose of differentiating errors using specific exception types?
--InteriorSeparator--
To allow for specific and targeted error handling based on the type of error.
--InteriorSeparator--
hard
--InteriorSeparator--
19
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What does it mean to "propagate" an exception?
--InteriorSeparator--
(wrong) To handle the exception locally and prevent it from being thrown further up the call stack.
(right) To re-throw an exception up the call stack to be handled by a calling method.
(wrong) To ignore the exception completely.
(wrong) To convert a checked exception into an unchecked exception.
--InteriorSeparator--
medium
--InteriorSeparator--
20
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In the following code snippet, what will be the output?
```java
public class Example {
    public static void main(String[] args) {
        try {
            int[] arr = new int[5];
            System.out.println(arr[5]);
        } catch (ArrayIndexOutOfBoundsException e) {
            System.out.println("Array index out of bounds!");
        } finally {
            System.out.println("Finally block executed.");
        }
    }
}
```
--InteriorSeparator--
Array index out of bounds!
Finally block executed.
--InteriorSeparator--
medium
--InteriorSeparator--
2
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following are valid ways to handle an exception in Java?
--InteriorSeparator--
(right) Catch the exception using a try-catch block.
(wrong) Ignore the exception.
(right) Declare the exception in the method signature using the `throws` keyword.
(wrong) Suppress the exception using `@SuppressWarnings`.
--InteriorSeparator--
easy
--InteriorSeparator--
5,6
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the superclass of all exception classes in Java?
--InteriorSeparator--
Throwable
--InteriorSeparator--
easy
--InteriorSeparator--
9
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following are examples of unchecked exceptions?
--InteriorSeparator--
(wrong) IOException
(right) NullPointerException
(wrong) SQLException
(right) IllegalArgumentException
--InteriorSeparator--
medium
--InteriorSeparator--
10
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What type of exception indicates a serious problem that a reasonable application should not try to catch?
--InteriorSeparator--
Error
--InteriorSeparator--
easy
--InteriorSeparator--
11
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following are examples of Errors in Java?
--InteriorSeparator--
(wrong) IOException
(wrong) NullPointerException
(right) OutOfMemoryError
(right) StackOverflowError
--InteriorSeparator--
medium
--InteriorSeparator--
11
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In the context of exception handling, what does the acronym DRY stand for?
--InteriorSeparator--
Do Not Repeat Yourself
--InteriorSeparator--
hard
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is a key consideration when creating custom exceptions?
--InteriorSeparator--
(wrong) Always extend the Exception class
(right) Determine if the exception is checked or unchecked based on recoverability
(wrong) Include all possible exception details in the message
(wrong) Always make the custom exception unchecked.
--InteriorSeparator--
hard
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is a resource in the context of "try-with-resources"?
--InteriorSeparator--
Objects that must be closed after use.
--InteriorSeparator--
easy
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
In what order are resources closed in a try-with-resources statement?
--InteriorSeparator--
(right) In the reverse order of their declaration.
(wrong) In a random order.
(wrong) In the order they are declared.
(wrong) It is not guaranteed when the resource will be closed.
--InteriorSeparator--
medium
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
If an exception occurs during the closing of a resource in a try-with-resources statement, what happens?
--InteriorSeparator--
The exception is suppressed.
--InteriorSeparator--
medium
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following statements is true regarding exception handling?
--InteriorSeparator--
(wrong) It is best practice to catch all exceptions at the highest level of the application.
(right) It is important to log exceptions with enough context to aid in debugging.
(wrong) Empty catch blocks are always acceptable to prevent program crashes.
(wrong) You should always create custom exceptions for every possible error scenario.
--InteriorSeparator--
hard
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the potential downside of overly broad exception handling (catching `Exception` or `Throwable`)?
--InteriorSeparator--
It can mask specific exceptions, making it harder to diagnose and handle errors correctly.
--InteriorSeparator--
hard
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is a good approach to handling exceptions in a multi-layered application (e.g., web application with service and data access layers)?
--InteriorSeparator--
(wrong) Catch and handle all exceptions in the data access layer to prevent them from propagating.
(right) Catch exceptions at each layer, log relevant information, and potentially re-throw them as more specific exceptions for the higher layers.
(wrong) Avoid using try-catch blocks in the service layer for better performance.
(wrong) Always throw unchecked exceptions to avoid cluttering the method signatures.
--InteriorSeparator--
hard
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Why is it important to avoid printing stack traces to the console in production environments?
--InteriorSeparator--
It can expose sensitive information about the application's internal workings.
--InteriorSeparator--
hard
--FlashCardSeparator--
}], role=model}, finishReason=STOP, citationMetadata={citationSources=[{startIndex=7260, endIndex=7473, uri=https://github.com/ishika-tailor/HackerRank-30-Days-Of-Code}, {startIndex=7386, endIndex=7565, uri=https://github.com/Jhonny-0007/Simulados-para-certifica-o}]}, avgLogprobs=-0.18727626689909588}]