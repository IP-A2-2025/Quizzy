***************Beginning Page***************
***************page number:1**************
(5g) Java"
Advanced Programming
Generics
Collections

***************Ending Page***************

***************Beginning Page***************
***************page number:2**************
The Context
- “Create a data structure that stores elements:
, a stack, a linked list, a vector
— a graph, a tree, etc. ”
- What data type to use for representing the
elements of the structure?
Homogenous structure Heterogeneous structure
class Stack t class Stack t
PXIVHCE lhll] items; private Object“ items;
public wold push m‘: item) v ...> prllc v0» p151 (Object item) t...|
public m: peektt r t prllc Object peekﬂ t 1
‘r t
SLALK SLaLk Z new SLALM): Stack stack Z \ew SLanUF
mgrwhmn WWMW;
starrk.pushtLUDt; stalkpts t< \ev. Rena \qlen t;
§tzruj s e t5tr1ng} >tat'k.peek;

***************Ending Page***************

***************Beginning Page***************
***************page number:3**************
Generics
~ Generics enable types (classes and interfaces)
to be parameters when defining classes,
interfaces and methods.
public Stack<String> ( }
- Stronger type checks at compile time.
Wehénew-Reeta-ng-Le-Hﬁ-r
- Elimination of casts.
String s = ﬁtting-)- stack.peek();
- Enabling generic algorithms.

***************Ending Page***************


***************Beginning Page***************
***************page number:4**************
Deflnlng a Generlc Type
class ClassName<T1, T2, ..., Tn> { m )
or
interface IName<T1, T2, ..., Tn> ( m )
/M
t A generic Version of the Stack class
* @param <E> the type of the elements
*
/
public class Stack<E> (
// E is a generic data type _
pnvate E[] items;
public void push(E item) ( )
publlC E peekO ( H )
>

***************Ending Page***************

***************Beginning Page***************
***************page number:5**************
Type Parameter Naming
Conventions

° E - Element (used extensively by the Java Coltections Framework)
- K - Key
- N - Number
' T - Type
- V - Value
- S,U,V etc. - 2nd, 3rd, 4th types

public class Node<T> ( )

pubttc \nterface Pair<K, v> r >

public class Palrlmpl<K, v> implements PalI<I<, v> <,,,)

***************Ending Page***************


***************Beginning Page***************
***************page number:6**************
public class — l
private :
private
public FairlK first, V second? l
this.key : first;
chlsmalue : second;
)
public volci setKey1K key) (
thlsJaey = key;
)
public void setValueW value) l
thlslvalue Z value;
l
public K getKeyU <
return key;
l
publlC v getValueU (
return value;
> An old debate:
y Do we wants javautilﬁai! ?

***************Ending Page***************

***************Beginning Page***************
***************page number:7**************
Instantlatlng a Generlc Type
- Generic Invocation _
SLack<Strinq> stack I new Stack<$trinq>();
Pair<1nteger,5trlnq> pair :
new Pa1r<Integer,String>(0, "ab");
Stack<Node<Inteqer>> nodes Z new Stack<che<Integez>>H;
- The Diamond <>
Stack<5trinq> stack I new Stack<>();
Pa1r<1ntegez,5tzlng> pal: = new Paiz<>(0, "313");
Steck<Node<Inteqer>> nodes : new Stack<>();
The compiler can determine, or infer, the type
arguments from the context.

***************Ending Page***************

***************Beginning Page***************
***************page number:8**************
Generlc Methods
Generic methods are methods that introduce their
own type parameters.
public class Utll t
publlC static <T> 1nt countNullValueS(T[] anAIray) t
lnt count : O;
for (T e 1 anArray)
1f (e I: null) t
++count7
)
return count;
l
)
UtlllcountNullValuesmew Strlnq[]t"a", null, "b"));
Ut\llcountNull\/alues(new Tntegerﬂﬂ, ?, null, 3, null));

***************Ending Page***************


***************Beginning Page***************
***************page number:9**************
Bounded Type Parameters
class D <1‘ extend: A G B 5 C> ( /* */)
public class che<T extends Numbez> 4
puvaLe T L;
prllC vold set(T c) x this.t 1 c; )
public r qct() ( return t; y
// Generic Method
public <1! extends Integer) void inspectw uH
System.out.prlntlr("T: " + t.qetCLasS()-QetName());
System.out.prlntlr ("11: " \ \;.getClasS (l .gemame (l );
)
ppbllc sLeLic void majnlSLtingU args) 1
che<JcLbie> node Z new Node<>();
node.set(12.34); //OK
node41nspect(1234j; //OK
WW //C0n\plle error!
ﬁedeﬁﬁsﬁeemerW //COmpile error!
)
)

***************Ending Page***************

***************Beginning Page***************
***************page number:10**************
Generlcs, Inherltance, Subtypes
"i8 a"

I Integer extends Object

r Integer extends Number

. ' '

' S m" age" E‘ “"6" s ‘36* mm" o
Given two concrete types A and B (for example, Number and Integer).
MyClass<A> has no relationshig to MyC/ass<B>, regardless of
whether or notAand B are related. The common parent of
MyCIass<A> and MyC/ass<B> is Object.

“This ls a common misunderstand/ng wnen it comes to programming wrlh generics,
but n IS an Important concept to learn "

***************Ending Page***************


***************Beginning Page***************
***************page number:11**************
- Variance refers to how subtyping between more complex
types relates to subtyping between their components.
class Ammot (t
cLass Cat extends Animal t t
Cat tom i new Catl);

AnlmalU pets. : new Anlmal[lD];

CatH cats : new CatUO];

Lom instanceof Animal _ true

cats instanceof AnlmBlH 4 true (covariance)

pots instanceof ZACH , false (contravarlancct

List<An1mal> pets i new ArrayLlst<>H;

List<CaL> caLs : rew A:IayLisL<>()F

cats instanceof List<Ar.;rr\al> 4 compile error
(lllcqal qcncrlc type)

VOld play[Llst<An1mal> pets] t t

playlcats); < Compile error (\ncompatible types)

***************Ending Page***************

***************Beginning Page***************
***************page number:12**************
~ Upper bounded
publu: doubJ; mnOlestlLisC<7 extends Number> list) (
//1t works an Llst<1nteger>, Llst<Duuble>, Llst<NumbEI>, Etc.
double s i 0.0;
f0: (N_mk:er n : lLSt)
s +: n.doublevalue();
)
- Unbounded
pubhc Mala prerlnSLLList<Z§> list) \‘
lo; (ODJUCL 01cm: LJSLY
Sybte'u.oui.pr,nt[e,em + " w,-
)
- Lower bounded
publlc ‘101d addNumbeIS1Li5t<7 super Integer> 115:1) (
H1: works on Llst<1nceger>, List<Number>, and Llst<0bject> i
//anythlﬂq that can hold Integer values‘
fo“(\~‘t1:\:w<:10;\++) l
MsL.addL\H
>
)

***************Ending Page***************

