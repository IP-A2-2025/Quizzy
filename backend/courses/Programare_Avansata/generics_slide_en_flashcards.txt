[{content={parts=[{text=--FlashCardSeparator--
Single
--InteriorSeparator--
What is the primary benefit of using generics in Java?
--InteriorSeparator--
Stronger type checks at compile time.
--InteriorSeparator--
easy
--InteriorSeparator--
3
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is a common naming convention for a generic type parameter representing an element?
--InteriorSeparator--
E
--InteriorSeparator--
easy
--InteriorSeparator--
5
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the main purpose of bounded type parameters?
--InteriorSeparator--
To restrict the types that can be used as type arguments.
--InteriorSeparator--
medium
--InteriorSeparator--
9
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following are benefits of using generics in Java?
--InteriorSeparator--
(right) Elimination of casts.
(right) Stronger type checks at compile time.
(wrong) Increased runtime performance.
(wrong) Automatic garbage collection.
--InteriorSeparator--
medium
--InteriorSeparator--
3
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following are valid examples of instantiating a generic type using the diamond operator?
--InteriorSeparator--
(right) `List<String> list = new ArrayList<>();`
(right) `Map<Integer, String> map = new HashMap<>();`
(wrong) `Set<Double> set = new HashSet<Double>();`
(wrong) `Queue<Object> queue = new LinkedList<Object>();`
--InteriorSeparator--
medium
--InteriorSeparator--
7
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does "variance" refer to in the context of generics and inheritance?
--InteriorSeparator--
How subtyping between complex types relates to subtyping between their components.
--InteriorSeparator--
medium
--InteriorSeparator--
11
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the purpose of an unbounded wildcard (`<?>`) in generics?
--InteriorSeparator--
To indicate that any type is acceptable as a type argument.
--InteriorSeparator--
medium
--InteriorSeparator--
12
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following statements about generic types and inheritance are correct?
--InteriorSeparator--
(right) `MyClass<A>` has no subtyping relationship to `MyClass<B>` even if A is a subtype of B.
(wrong) `MyClass<A>` is always a subtype of `MyClass<B>` if A is a subtype of B.
(wrong) `MyClass<B>` is always a subtype of `MyClass<A>` if A is a subtype of B.
(right) The common parent of `MyClass<A>` and `MyClass<B>` is `Object`.
--InteriorSeparator--
hard
--InteriorSeparator--
10
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Consider the following code: `public void process(List<? super Number> list)`. Which of the following list types can be passed to the `process` method?
--InteriorSeparator--
(right) `List<Number>`
(right) `List<Object>`
(wrong) `List<Integer>`
(wrong) `List<Double>`
--InteriorSeparator--
hard
--InteriorSeparator--
12
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the syntax for defining a generic class named `Box` that accepts a type parameter `T`?
--InteriorSeparator--
`public class Box<T> { ... }`
--InteriorSeparator--
easy
--InteriorSeparator--
4
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the purpose of the `<T>` before the return type in a generic method declaration?
--InteriorSeparator--
It declares that the method is generic and introduces the type parameter `T`.
--InteriorSeparator--
medium
--InteriorSeparator--
8
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following are valid type parameter naming conventions according to the Java documentation?
--InteriorSeparator--
(right) `K` for Key
(right) `V` for Value
(wrong) `C` for Collection
(wrong) `I` for Index
--InteriorSeparator--
easy
--InteriorSeparator--
5
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the main difference between a homogenous and heterogeneous data structure (in the context of the given material)?
--InteriorSeparator--
A homogenous structure stores elements of the same data type, while a heterogeneous structure can store elements of different data types.
--InteriorSeparator--
medium
--InteriorSeparator--
2
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following wildcard bounds is suitable for a method that needs to read elements from a list of `Number` or any of its subtypes (e.g., `Integer`, `Double`)?
--InteriorSeparator--
(right) `<? extends Number>`
(wrong) `<? super Number>`
(wrong) `<?>`
(wrong) `<Number>`
--InteriorSeparator--
hard
--InteriorSeparator--
12
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
In the context of the provided code, what is the purpose of the `Pair` class?
--InteriorSeparator--
(right) To store a key-value pair.
(wrong) To represent a node in a tree.
(wrong) To implement a stack data structure.
(wrong) To define a generic method.
--InteriorSeparator--
medium
--InteriorSeparator--
6
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In the given code snippet: `public class Node<T extends Number> { ... }`, what does `extends Number` signify?
--InteriorSeparator--
It signifies that the type parameter `T` must be a subclass of the `Number` class.
--InteriorSeparator--
medium
--InteriorSeparator--
9
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the significance of the diamond operator `<>` when instantiating generic types?
--InteriorSeparator--
It allows the compiler to infer the type arguments from the context.
--InteriorSeparator--
medium
--InteriorSeparator--
7
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following is a benefit of using a generic `Stack<T>` instead of a `Stack` that uses `Object`?
--InteriorSeparator--
(right) Improved type safety.
(right) No need to cast when retrieving elements.
(wrong) Better runtime performance
(wrong) Automatic memory management
--InteriorSeparator--
medium
--InteriorSeparator--
3
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Given the class definition: `class MyClass<T extends List<?>> { ... }`, what does the `?` wildcard represent within the `List`?
--InteriorSeparator--
An unknown type.
--InteriorSeparator--
hard
--InteriorSeparator--
12
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Given: `List<? super Integer> numbers = new ArrayList<Number>();` Is the following line valid? `numbers.add(10);`
--InteriorSeparator--
Yes
--InteriorSeparator--
hard
--InteriorSeparator--
12
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following is true regarding generic methods?
--InteriorSeparator--
(right) Generic methods can be defined inside non-generic classes.
(wrong) Generic methods can only be defined inside generic classes.
(right) A generic method introduces its own type parameters.
(wrong) Generic methods cannot have bounded type parameters.
--InteriorSeparator--
medium
--InteriorSeparator--
8
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following methods would correctly iterate through a `List<?>`?
--InteriorSeparator--
(right) `for (Object elem : list) { ... }`
(wrong) `for (String elem : list) { ... }`
(wrong) `for (elem : list) { ... }`
(right) for (int i = 0; i < list.size(); i++) { Object elem = list.get(i); ...}
--InteriorSeparator--
medium
--InteriorSeparator--
12
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following statements about wildcard types are correct?
--InteriorSeparator--
(right) `List<?>` represents a list of an unknown type.
(wrong) `List<?>` is the same as `List<Object>`.
(right) `List<? extends Number>` represents a list of `Number` or any of its subtypes.
(wrong) `List<? super Number>` represents a list of `Number` or any of its supertypes, but elements cannot be added to the list.
--InteriorSeparator--
hard
--InteriorSeparator--
12
--FlashCardSeparator--
}], role=model}, finishReason=STOP, citationMetadata={citationSources=[{startIndex=6468, endIndex=6663, uri=https://github.com/Himanshut0012/Generics-learning}]}, avgLogprobs=-0.1561096237575052}]