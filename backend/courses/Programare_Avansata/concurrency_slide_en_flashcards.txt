[{content={parts=[{text=--FlashCardSeparator--
Single
--InteriorSeparator--
What keyword is NOT used to support concurrency in Java?
--InteriorSeparator--
goto
--InteriorSeparator--
easy
--InteriorSeparator--
4
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following are advantages of concurrent programming?
--InteriorSeparator--
(right) High responsiveness
(right) Scalability
(wrong) Reduced memory usage
(wrong) Simplified debugging
--InteriorSeparator--
medium
--InteriorSeparator--
2
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What happens when all threads in a JVM have died?
--InteriorSeparator--
The JVM process stops.
--InteriorSeparator--
easy
--InteriorSeparator--
3
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which core APIs are used to support concurrency in Java?
--InteriorSeparator--
(right) Thread
(right) Runnable
(right) Object.wait
(right) Object.notifyAll
--InteriorSeparator--
medium
--InteriorSeparator--
4
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What exception is thrown if you try to start a thread more than once?
--InteriorSeparator--
IllegalThreadStateException
--InteriorSeparator--
medium
--InteriorSeparator--
7
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What interface should you implement if you are only planning to override the `run()` method and no other Thread methods?
--InteriorSeparator--
Runnable
--InteriorSeparator--
easy
--InteriorSeparator--
8
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What can happen when multiple threads access a shared resource like a file without proper synchronization?
--InteriorSeparator--
(right) Data corruption
(right) Inconsistent data
(wrong) Increased performance
(wrong) Guaranteed data integrity
--InteriorSeparator--
hard
--InteriorSeparator--
11
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is a critical section in concurrent programming?
--InteriorSeparator--
A method or a block of code managing a shared resource.
--InteriorSeparator--
medium
--InteriorSeparator--
16
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the purpose of synchronization in concurrent programming?
--InteriorSeparator--
Enforcing limitations on accessing a critical section (Mutual Exclusion).
--InteriorSeparator--
medium
--InteriorSeparator--
16
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Every object in Java has a monitor lock associated with it. What is another name for this lock?
--InteriorSeparator--
Intrinsic lock
--InteriorSeparator--
medium
--InteriorSeparator--
16
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What methods are used for thread coordination in Java?
--InteriorSeparator--
(right) wait()
(right) notify()
(right) notifyAll()
(wrong) start()
--InteriorSeparator--
medium
--InteriorSeparator--
19
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What happens when a thread calls `wait()` on an object?
--InteriorSeparator--
The thread releases ownership of the object's monitor and waits until another thread calls `notify()` or `notifyAll()` on the same object.
--InteriorSeparator--
hard
--InteriorSeparator--
19
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does it mean for an action to be atomic?
--InteriorSeparator--
It either happens completely, or it doesn't happen at all.
--InteriorSeparator--
medium
--InteriorSeparator--
20
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
For which variable types are reads and writes NOT atomic by default in Java?
--InteriorSeparator--
long and double (unless declared volatile)
--InteriorSeparator--
hard
--InteriorSeparator--
20
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the purpose of the `volatile` keyword in Java?
--InteriorSeparator--
It ensures that every read and write of a variable is done directly to main memory.
--InteriorSeparator--
medium
--InteriorSeparator--
20
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is a major disadvantage of the Co-operative scheduling model?
--InteriorSeparator--
A thread can monopolize the CPU, causing other threads to starve.
--InteriorSeparator--
hard
--InteriorSeparator--
21
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What does the method 'join()' do?
--InteriorSeparator--
(right) Allows one thread to wait for the completion of another.
(wrong) Immediately stops a thread.
(wrong) Creates a new thread.
(wrong) Checks if a thread is alive.
--InteriorSeparator--
medium
--InteriorSeparator--
22
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Why is `Thread.stop()` deprecated?
--InteriorSeparator--
It is inherently unsafe.
--InteriorSeparator--
hard
--InteriorSeparator--
23
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the difference between stopping and interrupting a thread?
--InteriorSeparator--
Stopping a thread forces it to terminate, while interrupting a thread signals that it should stop what it's doing and do something else.
--InteriorSeparator--
hard
--InteriorSeparator--
24
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What exception should be caught when working with interruptable threads?
--InteriorSeparator--
InterruptedException
--InteriorSeparator--
medium
--InteriorSeparator--
24
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is a potential issue with using the traditional `ArrayList` in a multithreaded environment?
--InteriorSeparator--
`ConcurrentModificationException`
--InteriorSeparator--
medium
--InteriorSeparator--
25
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
How do synchronized collections achieve thread-safety?
--InteriorSeparator--
By locking the entire collection during operations.
--InteriorSeparator--
medium
--InteriorSeparator--
26
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Name one example of a concurrent collection in Java.
--InteriorSeparator--
CopyOnWriteArrayList
--InteriorSeparator--
easy
--InteriorSeparator--
26
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the main purpose of a Lock in concurrent programming?
--InteriorSeparator--
To control access to a shared resource by multiple threads.
--InteriorSeparator--
medium
--InteriorSeparator--
27
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is a Semaphore used for in concurrent programming?
--InteriorSeparator--
To restrict the number of threads that can access some (physical or logical) resource.
--InteriorSeparator--
hard
--InteriorSeparator--
28
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the main advantage of using a thread pool?
--InteriorSeparator--
It reduces the overhead of creating and destroying threads for each task.
--InteriorSeparator--
medium
--InteriorSeparator--
29
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the work-stealing algorithm used in Fork/Join framework?
--InteriorSeparator--
Threads in the pool attempt to find and execute tasks submitted to the pool and/or created by other active tasks.
--InteriorSeparator--
hard
--InteriorSeparator--
30
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the primary purpose of ThreadLocal variables?
--InteriorSeparator--
To provide each thread with its own, independently initialized copy of a variable.
--InteriorSeparator--
medium
--InteriorSeparator--
32
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What type of stream allows two threads to communicate directly?
--InteriorSeparator--
Piped streams (PipedOutputStream and PipedInputStream).
--InteriorSeparator--
hard
--InteriorSeparator--
33
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the Event Dispatch Thread (EDT) in Swing?
--InteriorSeparator--
The thread on which Swing event handling and most code that invokes Swing methods run.
--InteriorSeparator--
medium
--InteriorSeparator--
34
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What should long-running or complex calculations in Swing applications be done in?
--InteriorSeparator--
(right) A separate thread
(wrong) The EDT directly
(wrong) A synchronized block on the EDT
(wrong) A static method in the main class
--InteriorSeparator--
medium
--InteriorSeparator--
35
--FlashCardSeparator--
}], role=model}, finishReason=STOP, avgLogprobs=-0.11432532393887015}]