***************Beginning Page***************
***************page number:1**************
IA 2023/2024
<E|> <ﬁ>4IE>4IE> IE OQO

***************Ending Page***************

***************Beginning Page***************
***************page number:2**************
Continut
Planiﬁcare
2/43

***************Ending Page***************


***************Beginning Page***************
***************page number:3**************
Planlflcare
P Planiﬁcarea reprezinté alegerea unei succesiuni de actiuni
pentru atingerea unui obiectiv
P Similara cu rezolvarea problemelor de cautare
Algoritmii de cautare esueazé pe probleme de tipul
get milk, bananas, and a cordless drill (foarte multe actiuni
irelevante)
Talkaarrut |:|
Go Tu Pet Stove Buy a DDQ |:|
Gu Tu Schuul Gm Tu Class |:|
m GuTnSupermarKet BuyTunaFlsh |:|
an Tu Sleep Bug/Arugula
RQadABuuk Bu Mﬂk
I Y Zl—~---—--
smncmw - SitSumeMuYE |:|
Etc.Etc.... HeadABuuk |:|
3/43

***************Ending Page***************

***************Beginning Page***************
***************page number:4**************
Planiflcare
P Planiﬁcare : Reprezentare logicé + Rezolvarea problemelor
P Céutare vs. Planificare
Similare: construim planuri pentru atingerea obiectivelor 5i
apoi Ie executém
Diferite datorité:
P reprezentérii stérilor, actiunilor, obiectivului
> utilizarea reprezenté'rilor logice
P modalitéfcii de constructie a solutiilor
4/43

***************Ending Page***************


***************Beginning Page***************
***************page number:5**************
Continut
Reprezentarea problemelor de planiﬁcare
5/43

***************Ending Page***************

***************Beginning Page***************
***************page number:6**************
Reprezentarea problemelor de planificare
V Algoritmii de planificare utilizeazﬁ structura logici a problemei
> Limbaje STRIPS (STanford Research Institute Problem
Solver)
> stare: conjunctie de literali pozitivi, propozitionali 5i de ordin |
Exemple: Poor /\ Unknown
At(P/ane17 Melbourne) /\ At(P/ane2, Sydney)
Presupunerea lumii fnchise: conditiile care nu sunt mentionate
Tntr-o stare sunt considerate false.
6/43

***************Ending Page***************


***************Beginning Page***************
***************page number:7**************
Reprezentarea problemelor de planificare
P obiectiv: 0 conjunctie de literali pozitivi
Exemple: Rich /\ Famous
At(P2, Tahiti)
> o stare s satisface obiectivul g daca s contine toti atomii din g
Exemplu: Rich /\ Famous /\ Miserable satisface scopul
Rich /\ Famous
P actiuni
> preconditii care trebuie satisfacute Tnainte de a ﬁ executate
> efectele care rezultﬁ atunci cénd actiunile sunt executate
7/43

***************Ending Page***************

***************Beginning Page***************
***************page number:8**************
STRIPS
Exemplu:
ACTIUNE: Buy(x)
PRECONDITIEI At(p), Sel/s(p, x)
EFECT: Have(x)
Aﬂp) Seffs(p,x)

Have(x)

Limbaj restréns j algoritmi eﬁcienti
8/43

***************Ending Page***************


***************Beginning Page***************
***************page number:9**************
Reprezentarea actiunilor

Exemplu: zborul unui avion
ACTIUNE: F/y(p7 from7 to),
PRECONDITIE: At(p, from) /\ P/ane(p) /\ Airport(from)/\
Airport(to)
EFECT: 1At(p, from) /\ At(p, to)
Schema de actiune reprezinté un numér de actiuni diferite care
pot fi derivate instantiind variabilele p, from7 to;
Include:

P numele actiunii 5i o listé de parametri

> preconditie: conjunctie de literali pozitivi

P efect: conjunctie de literali

> lista de adéugare (literali pozitivi), lista de $tergere (Iiterali
negativi)
9/43

***************Ending Page***************

***************Beginning Page***************
***************page number:10**************
Reprezentarea problemelor
O acfciune este aplicabilé' Tn orice stare care satisface preconditia.
Rezultatul executiei unei actiuni a Tn s este starea s’, identicé cu s,
cu exceptia: literalii pozitivi P din efect sunt adéugafci Ia s’ 5i cei
negativi ﬁP sunt eliminati din s’.
Exemplu:
Starea curenté: At(P1, JFK) /\ At(P2, SFO) /\ Plane(P1) /\
P/ane(P2) /\ Airport(JFK) /\ Airport(SFO)
Aceasta satisface preconditia actiunii Fly cu substitutia
{p/P1,from/JFK,to/SFO}.
Aplicﬁnd F/y(P1,JFK, SFO), starea curenté devine
At(P1, SFO) /\ At(P2, SFO) /\ Plane(P1) /\ Plane(P2) /\
Airport(JFK) /\ Airport(SFO).

10/43

***************Ending Page***************


***************Beginning Page***************
***************page number:11**************
Reprezentarea problemelor
Presupunerea STRIPS: literalii care nu sunt mentionati Tn efect
rémén neschimbati.
Solutie: o secventﬁ de actiuni care executate din starea initialé
rezulté Tntr-o stare care satisface obiectivul.
11/43

***************Ending Page***************

***************Beginning Page***************
***************page number:12**************
lebaje pentru reprezentare
ST RIPS vs. Action Description Language (A DL)
Only positive literals in states: Positive and negative literals in states:
Pnnr A Unknmtm ﬁRich A ﬁFammts
Closed World Assumption: Open World Assumption:
Unmentionecl literals are false. Unmentioned literals ate unknown.
EffectPA-Q meansaddPanrl delete Q. EﬂectPA —~aneans addPand —\Q
and delete ﬁP and Q.
Only ground literals in goals: Quantiﬁed variables in goals:
Rich A Famous 31At(Pj,:tc]A Aﬂpzﬂi) isthegoal of
having P1 and Pg in the same place.
Goals are conjunctions: Goals allow conjunction and disjunction:
Rich A Famous ﬁPoor A [Famous V Smurf)
Effects are conjunctions. Conditional effects allowed:
when P: E means E is an effect
only if P is satisﬁed.
No support for equality. Equality predicate (a: : y) is built in.
No support for types. Variables can have types, as in (p : Plane).
12 / 43

***************Ending Page***************


***************Beginning Page***************
***************page number:13**************
STRIPS vs. ADL
Actiune: F/y(p, from, to),
PRECONDITIE: At(p, from) /\ P/ane(p) /\ Airport(from)/\
Airport(to)
EFECT: —\At(p, from) /\ At(p, to)
vs.
ACTIUNEI F/y(p : Plane, from : Airport7 to : Airport),
PRECONDITIE: At(p, from) /\ (from 75 to)
EFECTI —\At(p, from) /\ At(p, to)
Notatia p : Plane este 0 abreviere pentru Plane(p);
preconditia (from 7£ to)
13/43

***************Ending Page***************

***************Beginning Page***************
***************page number:14**************
Exemplu STRIPS: transportul mﬁrfurilor cu avionul
Predicate: ln(c,p) - marfa c este Tn avionul p, At(x, a) - x este Tn
aeroportul a.

Actiuni: Load7 Unload, Fly.
Ini£[/l.l(cl, SFO) A may, JFK) A mm, SFO) A A£[P2, JFK)
A Caryﬂcl) A Cmg0(C2] A PIme-ﬁ] A PIaneU-ﬁ]
A AirjwrﬂJFK] A Airpm'l[SFO])
Gourchl, JFK) A 111(02, ‘qr-0))
Al:£i0n(Lwd[c, p, a),
PRECOND: Aﬂc, a] A Aﬂp, a) A Cargoﬁﬂ A Pkmﬂp} A Airporﬂu]
EFFECT: —- Aﬂc, a] A In[c, 17])
Action( Unlwd(c, p, a),
PRECOND: In((:, p) A 111.0), a] A Cary0(c) A Plamttp) A Airw'£[a)
EFFECT: 11!.(0, u) A —- Ink‘, 17])
A(:!i0n(FIy(p, front, to),
PRECOND: 111(1), Inma] A Pkmﬂp) A Aiqwrﬂflmu) A Airw'tﬂo)
EFFECT: —-A£(p, Inmt] A Aﬂp, 10)]
Solutie: [Load(C17 Pl7 SFO), Fly(P1, SFO, JFK),
L0ad(C2, P2, JFK), Fly(P2, JFK, SFO)]
Problemé: un avion poate zbura spre $i dinspre ace|a$i aeroport
14/43

***************Ending Page***************


***************Beginning Page***************
***************page number:15**************
Exemplu ADL: schimbarea anvelopei
Actiuni: scoate rezerva, scoate anvelopa, aseazé anvelopa de
rezervé, lasfi ma$ina nesupravegheatﬁ peste noapte.
Init(At[FIat,AJ:h-:] A A![Smm,ﬁunk])
GuaI(At[Swﬂt, AIM)
Acﬁon(leumc(Spam, Think),
PRECOND: At(Spam, Fir-unit)
EFFECT: ﬁ A£(Spam, Thmk) A At(Spam, Gmumln
At:[i0n(leunm(FIa£, Axle),
PRECOND: At(FIut, Aria)
EFFECT: A At(FIat,Azh:) A A£(I"Ia£,Gmqu)]
Acﬁon(PutOn[Smm, Ark],
PRECOND: AKSpans, G'twnd) A —' AKFIM, Ade)
EFFECT: —-A£[Smm,Gmund) A At(Spm,AJ:14-:])
Adionﬂnxweﬁmnnight,
PRECONDI
EFFECT: —- AﬂSpam, Gmund) A —' At(Spam,A:de) A —' At(Spam, Think)
A A Azwm, Ground] A A A![I"Iat,11:|:le])
Obs: utilizeazé o preconditie negaté ﬁAt(Flat,Axle)
15/43

***************Ending Page***************

***************Beginning Page***************
***************page number:16**************
Exemplu ADL: lumea blocurilor
O multime de blocuri (cuburi) a$ezate pe masa; un bra’; a|
robotului poate ridica $i muta un bloc; scopul: a construi una sau
mai multe stive de blocuri
Iflii[0ﬂ(AT Ihble) A Onﬂi, If'ablrz] A 011:“:T Ihble)
A BIOCHA) A mucus) A Bimkm}
A 01111411) A Ckm'[B] A cram-((3))
cadmium) A OMB, 0))
AaliorﬂMmsz .1':T y),
PRECOND: On[b,u:] A Clem-[b] A Ciwﬂy) A Bloch] A
(b #9 11)1"~(baié “.ri'1r1"\(ﬂra'2 y),
EFFECT: Unﬁny] A Clem-[1‘) A —| 011(b,:s) A —| Cir-11113;”
Al:!i0n(Mmﬂb:the[b, I),
Pump"); 014m) A Clem-[b] A mam’) A (b 5L 1-),
EFFECT: 0n“)? Tabla] A Charts} A —| On“), 1))
MoveToTab/e(b,x) muta blocul b de pe x pe tabla.
Solutie: [Move(B, Tab/e, C), l\/love(A7 Tab/e, 5)].
Editor PDDL (Planning Domain Definition Language)
http://editor.planning.domains/ 16/43

***************Ending Page***************


***************Beginning Page***************
***************page number:17**************
Continut
Algoritmi de céutare
17/43

***************Ending Page***************

***************Beginning Page***************
***************page number:18**************
. . V
Algorltml de cautare
Céutarea e posibilé
> fie Tnainte (progression), de la starea initialﬁ, utilizénd
actiunile
> ﬁe Tnapoi (regression), de Ia obiectiv.
Anew)
MPEA)
AKFHA)
AKPBA)
“(H-A)
Arm/n
“(PM
(b)
Ar(P2, a)
AMPDB)
ArthA)
18/43

***************Ending Page***************


***************Beginning Page***************
***************page number:19**************
Céutare Tnainte (progression)
Formularea problemelor de planiﬁcare ca probleme de céutare:
P starea initialé
O stare este o multime de literali pozitivi (cei care nu apar
sunt fa|$i).
P actiunile aplicabile unei stéri: cele pentru care preconditiile
sunt satisfﬁcute;
starea succesoare este generaté adéugénd literalii cu efect
pozitiv $i $terg§ndu-i pe cei cu efect negativ;
P testarea obiectivului: starea satisface obiectivul
P costul unui pas este 1
Tn absenta simbolurilor functionale, spatiul stérilor este ﬁnit. Se
poate utiliza orice algoritm de cﬁutare pe grafuri, care este complet
(exemplu: A*).
19/43

***************Ending Page***************

***************Beginning Page***************
***************page number:20**************
Céutare Tnainte
“PM
A!(F'1,A)
Arm-A:
P sunt considerate toate actiunile aplicabile din ﬁecare stare;
actiuni irelevante
Exemplu: 10 aeroporturi, fiecare cu 5 avioane $i 20 containere
Scop: mutarea containerelor de pe aeroportul A pe B
> factorul de ramiﬁcare: 10 x 5 x 20 —> b : 1000
> adéncimea solutiei: 20 Tncﬁrcéri + 1 zbor + 20 descércéri —>
d : 41
P 100041(: 10123) noduri
P e nevoie de euristici bune
20/43

***************Ending Page***************


***************Beginning Page***************
***************page number:21**************
Céutare Tnapoi (regression planning)
was)
6,,
qubs)
Ami-=0
Avantaj: permite considerarea doar a actiunilor relevante.
P O actiune este relevanté' pentru un scop (conjunctie) dacé
unul din termenii conjunctiei devine adevérat.
Exemplu: 20 de actiuni din starea initialﬁ Tn loc de 1000
Scopul At(Cl, B) A At(C2, B) A A At(620, B).
Pentru termenul At(C17 B), putem céuta actiuni care au
termenul ca efect; ex: Unload(C1,p, B).
P Céutarea Tnapoi are un factor de ramiﬁcare mai mic decét
céutarea Tnainte datorité restrictiei pentru actiuni relevante.
21/43

***************Ending Page***************

***************Beginning Page***************
***************page number:22**************
Céutare Tnapoi (regression planning)

P Regresia obiectivului prin actiuni
Actiunea relevanté Un/oad(C1,p, B) poate ﬁ aplicaté dacé
preconditiile sunt satisfécute —> orice predecesor trebuie 55
includé preconditiile ln(C1, p) /\ At(p, B).
Starea predecesor:
/!7(C17 p) /\ Amp, B) /\ At(C2, B) /\ /\ At(C20, B).

P Actiune consistenté: nu modificﬁ un literal.
Exemplu: actiunea Load(C2,p, B) nu este consistenté cu
scopul deoarece neagé Iiteralul At(C2, B).

22/43

***************Ending Page***************


***************Beginning Page***************
***************page number:23**************
V A I
Cautare Inap0|
P Construirea predecesorilor:
> se eliminé’ efectele pozitive ale actiunii a care apar Tn g
P se adéugé literalii preconditie ai actiunii a
pentru scopul g, a o actiune relevanté $i consistenté’.
P Terminarea algoritmului: cénd este generaté o descriere a
predecesorului care este satisfécuté de starea initialé.
23/43

***************Ending Page***************

***************Beginning Page***************
***************page number:24**************
EurlstICI
Euristica estimeazé distanta de Ia stare la scop. Distanta: numérul
de actiuni necesare.
1. derivém problema relaxaté, solutia acesteia ﬁind o euristicé
admisibilﬁ
2. divide et impera
Ipoteza independentei subobiectivelor: costul rezolvérii unei
conjunctii de subobiective este aproximativ egal cu suma
costurilor rezolvérii independente a subobiectivelor
24/43

***************Ending Page***************


***************Beginning Page***************
***************page number:25**************
Euristici

P relaxém problema prin eliminarea preconditiilor din acfciuni;
euristica: # de scopuri nesatisfﬁcute

> relaxém problema prin eliminarea efectelor negative
euristica: # min de actiuni necesare a.i. reuniunea efectelor
pozitive ale acfciunilor satisface scopul
Exemplu: Goa/(A /\ B /\ C)
Action(X, EFFECT : A /\ P)
Action(Y7 EFFECT : B /\ C /\ Q)
Action(Z7 EFFECT : B /\ P /\ Q)
Multimea minimalé de acoperire a scopului {A, B7 C} este
daté de actiunile {X, Y}, deci euristica returneazé costul 2.

25/43

***************Ending Page***************

***************Beginning Page***************
***************page number:26**************
Euristici
P empty-delete-list: relaxé'm problema prin eliminarea efectelor
negative, fﬁrﬁ a elimina preconditiile
(dacé o actiune are efectul A /\ ﬁB, va avea efectul A 5i Tn problema
relaxaté)
> euristica presupune executia unui algoritm (simplu) de
planificare; Tn practicé, céutarea Tn problema relaxaté este
rapidﬁ
26/43

***************Ending Page***************


***************Beginning Page***************
***************page number:27**************
Algoritmul Fast-Forward
Algoritmul FF (Fast-Forward) : céutare Tnainte + euristici
P euristica empty-delete-list ca estimare
P foloseste o strategie Local Search, Tn stﬁrile intermediare
folose$te céutarea Tn lﬁtime (BFS) pentru a determina un
succesor mai bun
P dacé nu géseste o solutie, aplicé A* din starea initialé
27/43

***************Ending Page***************

***************Beginning Page***************
***************page number:28**************
Continut
Planiﬁcare cu ordine partialé
28/43

***************Ending Page***************


***************Beginning Page***************
***************page number:29**************
Planiﬁcare cu ordine partialé'
> Planiﬁcare cu ordine totalﬁ (progresie 5i regresie)
> nu utilizeazé descompunerea problemei
P Este mai eﬁcienté rezolvarea independents“; a subobiectivelor $i
apoi combinarea subplanurilor. Putem lucra Tntéi cu deciziile
importante/evidente.
29/43

***************Ending Page***************

***************Beginning Page***************
***************page number:30**************
Planificare cu ordine partiala’
Planuri: secvente partial ordonate
Exemplu: incaltarea unei perechi de pantofi
Goa/(RightShonn /\ LeftShonn)
lnit()
Action(Right5hoe, PRECOND : RightSockOn, EFFECT : RightShonn)
Action(RightSoc/<, EFFECT : RightSockOn)
Action(LeftShoe, PRECOND : LeftSockOn7 EFFECT : LeftShonn)
Action(LeftSock, EFFECT : LeftSockOn)
Pentru a obtine primul termen din conjunctie: secventa de actiuni
[RightSock, RightShoe]; similar pentru cel de-al doilea termen.
30/43

***************Ending Page***************


***************Beginning Page***************
***************page number:31**************
Planlflcare cu ordlne partlala
Planificator cu ordine partialé: un algoritm de planificare care
poate plasa doué actiuni Tntr-un plan, f§r5 a specifica ordinea
Parlialnrder Plan: Tohlnrder Plans:
ﬂ
wwﬂﬂwﬂ
Suck Sunk Sock Sock Suck Sock
E
Hﬂwwwm
Sock Sock Sunk Sock Shae Shoe
LeflSockOn RingockOn _ _ ‘
ﬂwﬂwmw
Shoe Shoe shue Shhe 5th Shae
LeftShonleyllIShmeOn
Solutia este reprezentatﬁ ca un graf de actiuni.
Solutia corespunde celor $ase planuri posibile cu ordine totalé
(liniarizarea planului cu ordine partialé).
31/43

***************Ending Page***************

***************Beginning Page***************
***************page number:32**************
Planiﬁcare cu ordine partialé’
Ciutarea Tn spatiul planurilor cu ordine partialé
P un plan vid
P raﬁnarea planului: adéugarea unui pas planului, ordonarea
actiunilor
32/43

***************Ending Page***************


***************Beginning Page***************
***************page number:33**************
Componentele unui plan

P actiuni (pa$ii planului); un plan vid contine doar actiunile
Start $i Finish

P constréngeri de ordonare A < B (A Tnaintea lui B)

P Un ciclu A < B 5i B < A reprezinté 0 contradictie.

P Iegéturi cauzale A —>p B (A realizeazé p pentru B; A, B
actiuni)
Exemplu: RightSock AR'ghtSOCkO” RightShoe
RightSockOn este un efect al actiunii RightSock $i o
preconditie a RightShoe;
RightSockOn trebuie 55 réméné adevarat Tntre cele doué
actiuni (planul nu poate ﬁ extins adéugénd o noué actiune C,
conflictua|§ cu legétura cauzalé).

P preconditii deschise: nu sunt Tndeplinite de nici o actiune

33/43

***************Ending Page***************

***************Beginning Page***************
***************page number:34**************
Componentele unui plan: exemplu
Actiuni: {RightSock, RightShoe, LeftSock7 LeftShoe, Start“7 Finish}
Ordonéri: {RightSock -< RightShoe, LeftSock —< LeftShoe}
Legéturi:
{RightSock —>RightSOCkO” RightShoe7 LeftSock —>Left5°d‘0”
LeftShoe, RightShoe —>Right5h°eon Finish, LeftShoe —>Left5h°eon
Finish}
Preconditii deschise: {}
34/43

***************Ending Page***************


***************Beginning Page***************
***************page number:35**************
Planiﬁcare cu ordine partialé’
P intr-un plan consistent nu existﬁ cicluri Tn constréngerile de
ordonare si nici conflicte in Iegéturile cauzale.
P Solutie: un plan consistent férﬁ preconditii deschise.
P Un plan cu ordine partialé' este executat alegénd oricare din
actiunile posibile urmétoare.
35/43

***************Ending Page***************

***************Beginning Page***************
***************page number:36**************
Problema de cautare
> Planul initial contine Start si Finish, constréngerea de ordine
Start < Finish, nu contine legaturi cauzale si toate
preconditiile din Finish sunt deschise.
> Functia succesor alege o preconditie deschisa p pentru
actiunea B si genereaza' un plan pentru ﬁecare modalitate
consistenta de alegere a actiunii A care obtine p
P adauga legatura A —>P B, A —< B; dac5 A este o actiune noua,
adaugé Start < A, A < Finish
V rezolvam conflictele Tntre legatura cauzala si actiunile existente
P conflictul Tntre A —>p B si C este rezolvat dac5 C apare in
afara intervalului: adiugam B < C sau C < A;
> Testarea obiectivului: veriﬁca dacé un plan este solutie (nu
existé preconditii deschise)
36/43

***************Ending Page***************


***************Beginning Page***************
***************page number:37**************
Exemplu
hu'l'L-IHFIM. Ark) A 11f{.":'pr1:vu Tim-HM)
Gm! ( .Jlt [ Spring 1'1 Iii: }}
Attioniﬁ'emmlﬂsllmm. Think).
PRFUJNTJI AHS'pu-ne. Trunk)
EFI-‘I-IL'T; I Aﬂﬁ'prrrr'. T'i'mri'u) A z1|f(.‘u'pri.n-. (:HHHHQ]
.-lr'iiml{ HrInani-[FMLL {Min}.
PREL'UNIJI AH Hui‘. Axis)
Ei-‘l-‘EC'I': —| AﬂFi-u-t. Axis) A .‘lﬂFiu-t, Growl-(in
rich-(Md Praia?“ Spa-rt’ . Axle. ].
PRI-IL'UNI]; Af[.‘¥pru'r'. Ground) A —- AﬂFim'i Ari?)
EFFECT; —| {INS-mm. (hm-mil] A Ar‘(S_:m.n-.Adi-1|}
.‘lriimﬂ firm-‘1'0r'rr'HJ'lrﬁn‘_
FRI-‘CONN;
El-l-‘i-It'ii . :IHS-prJi-n: (Imam!) A 1 .‘lﬂﬁb'jm'r'. {LFIf'J A \."|l{S_mn-. Hunk]
A —' .JHU'TM. (fin-mm!) A w .Ili{I-‘Irr.i._ AJFLI'J)
Planul initial contine actiunea Start cu efectul
At(F/at, Axle) /\ At($pare7 Trunk) $i Finish cu preconditia
At(Spare, Axle).
37/43

***************Ending Page***************

***************Beginning Page***************
***************page number:38**************
Exemplu (I)
Secventa de evenimente:
> Alege preconditia deschisé At(Spare, Axle). Alege actiunea
PutOn(5pare7 Axle)
> Alege preconditia At(Spare, Ground) $i actiunea
Remove(5pare, Trunk)
A“W-T~m—\
Elm?“ Afiﬁ;::f"’—->MSPMEM—
38/43

***************Ending Page***************


***************Beginning Page***************
***************page number:39**************
Exemplu (ll)
P Alege preconditia —\At(F/at,AXle).
Alege actiunea LeaveOvernight care are 5i efectul
ﬁAt(Spare, Ground) ce intri Tn conflict cu legétura cauzalé
Remove(5pare7 Trunk) —>At(5pa’e’6’°””d) PutOn(Spare, Axle).
Pentru a rezolva conflictul, adéugém o constréngere de
ordine: LeaveOvernight < Remove(5pare, Trunk)
MWImr-n—\
1
@222?’ 15‘ng —>~15m~n-
I!’ ﬁAlﬁFlalAJde]
—§'§5§$'$>1="q'oi
ﬂammm
39/43

***************Ending Page***************

***************Beginning Page***************
***************page number:40**************
Exemplu (Ill)

V Singura preconditie deschisﬁ este At(5pare, Trunk). Singura
actiune care o obtine este Start, Tnsﬁ legétura cauzalé de la
Start la Remove($pare, Trunk) este Tn conflict cu efectul
ﬁAt(Spare7 Trunk).

P nu putem rezolva conflictul cu LeaveOvernight
P trebuie 55 ne Tntoarcem $i 55 stergem actiunea LeaveOvernight
A'lwrmm—\
r
ix?) ‘1,5212%? —->*"5P“~'@r-
1’ ﬁAﬂFbalﬁidej
—32$§$£'$5§°
ﬁAILQErl-E,Gmllnd,
inqsmmfrmmq
40/43

***************Ending Page***************


***************Beginning Page***************
***************page number:41**************
Exemplu (IV)
P Alege preconditia —\At(F/at,AXle). Alege Remove(F/at,Ax/e).
P Alege preconditia At(5pare, Trunk) $i alege Start pentru a o
Tndeplini.
> Alege preconditia At(F/at, Axle) $i alege Start pentru a o
Tndeplini.
“Hm-Wm-
- Spare/Tim A Gmu
‘MALE m?—*”mm’-
\ —/
Amwa-
41/43

***************Ending Page***************


***************Beginning Page***************
***************page number:42**************
Planiﬁcare cu ordine partialé’
Avantaje
P algoritmul este corect, complet
P legéturile cauzale conduc la eliminarea unor portiuni a
spatiului de céutare
Dezavantaje
P e dificil de estimat cﬁt de departe suntem de atingerea
obiectivului
Euristici
P # de preconditii deschise
P selecteazé preconditia deschisé care poate ﬁ satisfécuté Tn cele
mai putine moduri
42/43

***************Ending Page***************



***************Beginning Page***************
***************page number:43**************
Bibliografie

P S. Russel, P. Norvig. Artificial Intelligence: a modern
approach. Chapter 11 Automated Planning
https://aima.cs.berkeley.edu/newchapll.pdf

P D. Poole, A. Mackworth. Artiﬁcial Intelligence. Foundations
of Computational Agents. Chapter 6. Deterministic Planning
https : //artint . info/3e/html/Art1nt8e . Ch6 . html

43/43

***************Ending Page***************


