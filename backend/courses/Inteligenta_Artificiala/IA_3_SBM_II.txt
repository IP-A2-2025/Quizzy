***************Beginning Page***************
***************page number:1**************
YA:
l
3rd year, lst semester
State based models for decision problems
Week 3: informed strategies and alternative problem spaces
“In any moment of decision, the best thing you can do is the
right thing, the next best thing is the wrong thing, and the
worst thing you can do is nothing.” Theodore Roosevelt

***************Ending Page***************

***************Beginning Page***************
***************page number:2**************
a
Let’s ﬁnd a NP-complete problem and a computer able to solve it
Problem: ﬁnding a path in a graph
Describing a model - reducing a problem

' describe a state

' identify special states and the problem space

' describe the transitions and validate them

' specify a search strategy

***************Ending Page***************


***************Beginning Page***************
***************page number:3**************
n
Search strategies
0 Uninformed - no distinction between states
o Random
o BFS and Uniform Cost
o DFS and Iterative Deepening
o Backtracking
o Bidirectional
0 Informed - heuristics to help distinguish between states
o Greedy best-ﬁrst
o Hillclimbing and Simulated Annealing
o Beam search
o A* and IDA>X<

***************Ending Page***************

***************Beginning Page***************
***************page number:4**************
n
Heuristics?
_ O
Common sense 1s as good as a 0
mathematical proof.
Statistical proofs are hard to get ‘ i
. v
and largely 1rrelevant. ﬂ
Brute force (search) is great, but
intelligence is faster.

***************Ending Page***************


***************Beginning Page***************
***************page number:5**************
W3

a
Finding a relevant heuristic

A heuristic should direct the search towards the goal.

Heuristic: function applied to any state, returns extreme and

opposing values for all initial state(s) and for at least one ﬁnal
state(s).

h: S -> [min, max], h(IS) I min/max, h(FS) I max/min

An admissible heuristic never overestimates the distance between a
state and the goal.

***************Ending Page***************

***************Beginning Page***************
***************page number:6**************
a
Lets try ﬁnding a heuristic
For Hanoi Towers:

t Number of pieces on the goal tower

o If starting tower is l and goal is n, sum of all values in a state

0 ?
For Sliding Puzzle:

o Number of pieces placed correctly
For chess:

t How many pieces I have - how many pieces has the opponent?

0 A maximal value - number of moves available to the opponent?

h should always be relatively easy t0 compute, good enough is enough

***************Ending Page***************


***************Beginning Page***************
***************page number:7**************
I
Three way of looking at solutions
path in a graph path in a space heuristic function graph

***************Ending Page***************

***************Beginning Page***************
***************page number:8**************
$4,315?

a
Greedy (best-ﬁrst)

Evaluate all unexplored states

accessible from the current state.

Select the unexplored state closer

to the goal (best score according

to a heuristic).

***************Ending Page***************


***************Beginning Page***************
***************page number:9**************
Y???

a
Greedy evaluation

Best case: gets you to the ﬁnal

state much quicker than DFS, ?

doesn’t guarantee optimal

solution.

Worst case: DFS With bad

choices.

***************Ending Page***************

***************Beginning Page***************
***************page number:10**************
wag;

I
. . . h s

Hlllellmblng ( )

Select 0ne accessible state Which

is at least as close t0 the ﬁnal

state as the current one.

h(NeWState) 2 h(CurrentState)

https://WWW.y0utube.e0m/wateh?v:j 1H3jA

AGlEA&list:PLUl4u3eNGP63gFHB6xb-k

VBi§ ZHYe_4hSi&indeX=4 solution

***************Ending Page***************


***************Beginning Page***************
***************page number:11**************
Vast

.
COMPUTER iCIENCE . . . h (S)

Hlllollmbmg ovaluatlon

Best case: fastest genoral

strategy.

Worst case: fails to ﬁnd a

solution (local optimum).

solution

***************Ending Page***************

***************Beginning Page***************
***************page number:12**************
Yﬁai
as -
FACULTY OF
COMPUTER SCIENCE
Hlllchmblng Selectlon Algorlthm
eligible_neighbors I {};
For each state n reachable from current_state applying one valid transition
If h(n)>=h(current_state) add n to eligible_neighbors;
Select next_state from eligible_neighbors;
Frequently used selections:
0 First one found - most common
0 Best one (greedy)
o All, in the order they were found, choosing next state available if stuck
(hillclimbing-backtracking)

***************Ending Page***************


***************Beginning Page***************
***************page number:13**************
a
Simulated annealing

Hillelimbing, but allows choosing a state further away from the goal,
with an ever decreasing probability the closer you get to the goal

state.

No more loeal optimum.

Slower than hillelimbing.
http://www.cse.iitm.ae.in/~vplab/courses/optimization/SA_SEL_SLIDES.pdf

***************Ending Page***************

***************Beginning Page***************
***************page number:14**************
a
Beam search

BFS but only keeps in a sorted list best k visited states. The list

should be re-sorted and extra states removed after every new

explored state.

Explores all states in the sorted list until the ﬁnal state is found -
should be ﬁrst in the list.

Does not guarantee the optimum solution!

***************Ending Page***************


***************Beginning Page***************
***************page number:15**************
FF a
A* and IDA*

A* is mostly Dijkstra combined with Greedy, IDA* is informed IDDFS

IDDFS explores nodes by distance from initial state d(S)

A* explores nodes by d(S) + h(S), Where h(S) is the estimated distance to the goal state
(obligatory an admissible heuristic)

Always chooses the unexplored state Which is closest to both the initial state and the goal
state.

https://WWW.redblobgames.com/pathﬁnding/a-star/introduction.html

***************Ending Page***************

***************Beginning Page***************
***************page number:16**************
l
~15 v
FACUTY OF
COMPUTER SCIENCE
A * A1 gonthm
Current_state I Initial_state;
Best_score I maximum of h;
Sorted_queue = {All neighbours of Current_state, with computed h+l scores, marked as
unexplored};
While the score of the first unexplored state S in Sorted_queue is lower than Best_score
If S is a final state, Best_score = score of S;
Mark S as explored;
Add to Sorted_gueue all its neighbours with computed h+d score and mark them
unexplored;
If a duplicate state appears in Sorted_queue, keep only the occurrence with lowest
score and transfer explored status;
Sort Sorted_queue;
The optimal path is recovered from the last state updating Best_score and looking for
explored neighbours with lower score up to the initial state.

***************Ending Page***************


***************Beginning Page***************
***************page number:17**************
WE?
.
A>l<
Always ﬁnds the optimum ° MA) _1
solution. 5
Really? €’ ®

a ms) = 4

***************Ending Page***************

***************Beginning Page***************
***************page number:18**************
Yiéai

at‘ .- .
A>X<

Always ﬁnds the optimum ° MA) _1
solution. 5 \\\rea| = 4

Don’t stop When you ﬁnd the €: ®
goal state! Keep looking until all 3

states with better scores have ,,~5'(B) = 4

been explored. rea' = 4
htth://adrianst0||.com/a-star-pathfinding/

***************Ending Page***************


***************Beginning Page***************
***************page number:19**************
.
BFS/IDDFS A>k

***************Ending Page***************

***************Beginning Page***************
***************page number:20**************
a

Optimizing A*

Consistent heuristic: h(A) 5 h(A,B) + h(B) if B is reachable from A

Simpliﬁed Memory Bounded A*

0 Prunes (removes) states for which the path was more costly than
estimated, up to a set number of states (memory bounded)

0 Remembers costs of reaching pruned states from each explored
state

0 If solution is not found, recovers pruned states and explores them

***************Ending Page***************


***************Beginning Page***************
***************page number:21**************
.
Choose a strategy
o Do you want a solution
quickly?
0 Do you want the best
solution?
0 Do you want all solutions?
o How rnueh do you know
about the problem?
0 Are you sure the state
representation is good
enough?

***************Ending Page***************

***************Beginning Page***************
***************page number:22**************
Vast

I
Non-deterministic problem space

Stochastic: known possibilities

and probabilities

Non-deterministic: known

possibilities

Each transition has multiple

possible outcomes

AND-OR trees

***************Ending Page***************


***************Beginning Page***************
***************page number:23**************
a
Partially observable problem space: you know What could happen
after a transition, you don’t know What Will happen after a transition.
K Q
iiiggig
W q. v a“ 5 '
Q
‘*f: c/ 7* 1 I’

***************Ending Page***************


***************Beginning Page***************
***************page number:24**************
B3‘?
Unknowable problem space: you don’t know What could happen
after a transition
- _ ' NULOHUD I 16;.» j‘
Nowmm _ a _
r13. 5 f 7?? ~

***************Ending Page***************


***************Beginning Page***************
***************page number:25**************
I
Next week: Constraint satisfaction problems (Variable based models)

1 3

4 9 3 5 5

3 4 s 2
6 s 9

5 7 8 4 2

III

2 5

***************Ending Page***************


***************Beginning Page***************
***************page number:26**************
VF?
I
Interactive dee1s1on problems (games): -ln-
0 Solution is not built exclusively by I_ 4 _
your strategy l-7 ‘ '3
0 Not all ﬁnal states are the same
I ‘g1 I
Hardest solvable problems 1n AI. M22531“; livggmﬁggjjﬁj
. 11 1i2ﬂzaﬂi‘ [II WTL1FT1 1225J_|_|_|
NLP problems hardest potentlally 11; +Tt_1 ﬁ-ngiggggam
SOlvab16 Ii} Liizﬂﬁtuuuiuluu 1l'2t22‘1 2&1;
° , r}:g?!?gé_lJ_l_l_lJ_lJ_l_l_lJ_lJ_l_l_lJ il |_
1.3qﬁzlﬁjjjjjjjjjjjjjjjjjjjim
_l_|AlJ_l_|_l_l_lJ_l_lJ_l_l_l_l_l_l_lJ_l_l_lJ_l_l_lJJ
_l_|_l_|_l_l_l_l_l_lJ_l_|_|_l_l_l_l_l_|_l_l_|_l_l_l_l_l_l_l

***************Ending Page***************

