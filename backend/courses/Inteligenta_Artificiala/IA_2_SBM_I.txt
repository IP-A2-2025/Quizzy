***************Beginning Page***************
***************page number:1**************
.
Art1ﬁc1a1 Intelhgence
3rd your, lst semester
State based models for decision problems
Week 2; models and uninformed search siraiegies
“Intelligence is what you use when you don't know what
to do" Jean Piaget

***************Ending Page***************

***************Beginning Page***************
***************page number:2**************
, i
We aim to develop rational AI systems:
o we deﬁne a problem and goals (instances)
o the AI reaches the goals (solves the instances)
o the AI outputs the result (unexplainable AI) or
the solution (explainable AI)

***************Ending Page***************

***************Beginning Page***************
***************page number:3**************
Q
First approach: state-based models

a in what way should I change the

current stale ofthe problem in 0rder . ‘ 1/ '1 "R ;‘. \\__ ‘
to get closer or reach the goal? ‘jg l ‘ ‘L- [£4 L. L 1*
O compute a solution (algorithm j f <
- sequence of steps) starting from an 4 it Ell s g
initial state and ending in the goal slate ,- i
0 mostly covered by search strategies, II?‘-
reasoning systems, Al for games

***************Ending Page***************

***************Beginning Page***************
***************page number:4**************
y .
Solving problems

Problem: We have two numbers, A and B. Which is
larger?

Instance: AI‘), 13:?

A solution should produce the correct answer for all
possible instances

***************Ending Page***************

***************Beginning Page***************
***************page number:5**************
f x
Q
What‘s the Problem wilh problcms”
r : set of problems that can be solved/checked m Polynomial time by a deterministic TM
NP : sel ofprnhlems that can be solved m Pnlynomlal time by a Non-detznmnlsllc TM,
Checking a NP solution ie a P problem.
NP-complete = subset ofNP with llie properly \hal any prbblem m NP can be reduced lb a
NP-ebmplere pmhlem m polynomial lime.
NPrhard : sel ofproblems Wllh the properly that any problem iii NP can be reduced to a
NP-hard problem m pnlynomial time.
PZNP v

***************Ending Page***************

***************Beginning Page***************
***************page number:6**************
.
Lct the computCr solve our problems! Or not,"

Solvable NP-hard problems: QSAT: is a logical proposition using
quantiﬁed (existential 3 or universal V) variables satisﬁable?
Unsclvable NPihard prcblems: Turing Halting problem: given an
algorithm and an input, determine whether the algorithm execution

for that input will eventually halt.

The rest can be solved by a camputer.

***************Ending Page***************


***************Beginning Page***************
***************page number:7**************
.
Stop lunklng inf solutlunsl

Don‘t think about solutions, think about problems.

Solving problems requires effort, describing problems requires
intelligence.

“lfl had only one hour to save the world, l would spend ﬁfty-ﬁve
minutes deﬁning the problem, and only ﬁve minutes ﬁnding the
solutionr" A.Einstein

***************Ending Page***************

***************Beginning Page***************
***************page number:8**************
.
Let’s ﬁnd a N P-complete problem and a computer able to solve it
Problem: ﬁnding a path in a graph
Describing a model - reducing a problem

- describe a state

- identify special states and the problem space

- describe the transitions and validate them

- specify a search strategy

***************Ending Page***************

***************Beginning Page***************
***************page number:9**************
Q
Generalized Hanoi Towers

We have n towers with m distinct
sized pieces placed on one of the
towers, Considering that you can
only move one piece at a time
and that no piece can be placed
on top ofa smaller piece, ﬁnd a
sequence of movements that
place all pieces on a different
tower

***************Ending Page***************

***************Beginning Page***************
***************page number:10**************
Q
Choosing a representation for a

state

State: all data required t0

continue looking for a solution

No ambiguity

Expressive enough to include all

required data

***************Ending Page***************

***************Beginning Page***************
***************page number:11**************
Q
(ughgosing a representation for a state
Compact enough to be easy to store and perform changes on it
A list of towers pieces are placed, in the order of piece size size
(3, 3, 3, 3, l, l, 2, 2)
ls this good enough?

***************Ending Page***************


***************Beginning Page***************
***************page number:12**************
Q
(ughggsing a representation for a state
Compact enough to be easy to store and perform changes on it
A list of towers where pieces are placed, in the order of piece size,
with the number of towers added at the beginning
(3, 3, 3, 3, 3, l, l, 2, 2)
(n,tl,12,m,1m), 151511

***************Ending Page***************

***************Beginning Page***************
***************page number:13**************
l e A

Choosing a representation for a , _
l v _ I‘, )

state ls the most Important and p r‘ at ~ 4

' ' 0 -
dlfﬁcult step J‘ I _ _,

‘$3

N0 ambiguity -
Compact
Expressive
Includes all required dala
There is no generally heel represenlalion

***************Ending Page***************

***************Beginning Page***************
***************page number:14**************
f x
Q
Special states
1111111115111“;1,1,1,1,1,1,1,1)
State Inhialize (int n, im m)
i
Re1um(n,1, 1, 1, 1);
1 ‘—\,/—/
111
There can be more \han one 111111111 me. There has 11> be 111 lean one 111111111 stale.

***************Ending Page***************

***************Beginning Page***************
***************page number:15**************
f x

l
Special states
Final slams) (n n‘ n‘ n‘ n‘ n‘ n‘ n‘ n)
Boolean IsFinal (State s)
i

lfs : (k, k, k, k] \hen return Krue;

%\H
m+1

else remm false;
l
There can be more man one ﬁnal slalev There has w be at least one ﬁnal slalev

***************Ending Page***************

***************Beginning Page***************
***************page number:16**************
' x
Q
Problem space: all possible states
fin\/”i“ i/V\\/ (Vin \
K Flnal slate
_ \\
, lnlilal stale /
Finite space (limited variabilily in chosen stale representation and only valid slates are
included)

***************Ending Page***************

***************Beginning Page***************
***************page number:17**************
f ~
Q
Whal is lhe problem now‘!
How almollll is ll to solve? f ,7 I’
\/ Y
ﬁz , \

Problem space has m dimensions K Final svale \l
How many states are within \he space’! 7// /

, , l , /// \
How can you move Wlmm llle / - l
problem space? lnmal stale
§lm0rf§ Am
Complexity ofthe solulion is given by \he problem. NOT by \he way in which you solve il

***************Ending Page***************


***************Beginning Page***************
***************page number:18**************
i ,

Q
Transitions
Only one possible way to change current state: move one piece to
another tower.

(n,t|1,tlz,...,tlm) —> (11,121, 122,...,t2m), whcrc t1. :12‘ for all ISiSm,
cxccpt exactly one i I k
State Transition (State s, piece, tower)

***************Ending Page***************

***************Beginning Page***************
***************page number:19**************
.
Valid transitions

l. No smaller piece is placed atop piece k

2. No smaller piece ends up below piece k

l. t|1* t]k , for all 15i<k

2. t2‘ i t2k , for all 15i<k

Boolean Validate (State s, piece, tower)

Implement transitions and validation separately, it‘s good practice!

***************Ending Page***************

***************Beginning Page***************
***************page number:20**************
.
Search strategy
Void strategy(State s)
i
While (lisFinal(s))
i
- piece, tower;
If(Validatc (s, piece, tower»
s I Transiti0n(s, piece, tower);
}
i

***************Ending Page***************

***************Beginning Page***************
***************page number:21**************
Q
W'SmeaiZh strategies
o Uninforrned — no distinction between states
o Random
o BFS and Uniform Cost
o DF S and Iterative Deepening
o Baektraeking
o Bidirectional
0 Informed — heuristics to help distinguish between states
o Greedy best-ﬁrst
o llillelimbing and Simulated Annealing
o Beam
o A* and IDA*

***************Ending Page***************

***************Beginning Page***************
***************page number:22**************
'\
I
Breadth F irst Search and Uniform
Cost
0 Visitsiaiesiniheorduofdislanc: i7 /,\ ,i
(number oftransitions) from the inilial Kirk/ ‘w y \
state / 77777 '\
v , / \ \
0 Explorasalllmmcrllal: nelghbols v [777777\ ‘ ‘
, , 4 / / ,W i
(accesslblssiales)unulnomom / ‘J ,/ ,7 7 \ \ /»
neighborsorﬁnalsmte found. 1 t t x H; A J J ‘\
. Hasmmemoriseeach generatedslale: \7 \ \\777/ / /‘\ f
very castly, i \\ 7/ // \ 1/
0 Mighxvmnhesamestawmullipletimrs. \ 7 /"
- Findsshonestpath(opt|mumsolution) *\ k fr,’
. Uniform cast: ifoplions have different " " \\” /
costs, Bxplnrs cheaper paths ﬁlsl

***************Ending Page***************


***************Beginning Page***************
***************page number:23**************
r .
I
Depth First Search and Iterative
Deepening Search
o Visit one immediate neighbor oflhe
current stale until final state is fniind, /i t\ i' y i \t
renirri tn previniis unexplored neighbor if //" \4 ' l \
no more neighbours available for eni-ieni ‘x’ ‘ ‘
states /l ft
0 Has m memorise each generated slate: i , \ i
very ensily. \g a j
e Might visit the saine state ninlilple tinies. P \‘ ,/
o Might not ﬁnish (lfloops are present in \ ,P '
the prnhlein spaee) \ K ,t /
a le. Explore only up to an inereasing \s 7/‘\ / ’
depth (distance from initial state) e no \' '
more infiniie paths

***************Ending Page***************

***************Beginning Page***************
***************page number:24**************
Q
Random vs DF S

0 The same, if random rcmcmbcrs visited neighbours

Backtracking vs DF S

o NOT the same

n Backtracking sets an order for the neighbor states

0 How do you order states?

I Backtracking doesn‘t need to memorize visited states!

0 Backtracking can avoid loops WITHOUT storing visited states

***************Ending Page***************

***************Beginning Page***************
***************page number:25**************
u
Q
Bidirectional Search
0 Siam exploring fmmboih m iniiial and i7 1 h
ﬁnal sme simultaneously ,ﬁq’ 5/ y \
o Has to memorise each generated slale‘ / /,,_\ '\\
bm they should um be thal many l i " ‘ ‘ W \
o Finds shortest paih (optimum solution) / y/ffgé/ A
u What are the reverse transitions? ‘ \Kélj/‘J i
\7 \:/ \ /
i i /
\ /
\ i f»; /
\~/\\7 77 /

***************Ending Page***************

***************Beginning Page***************
***************page number:26**************
f x

Q

Comparison

Complexky ohhs solution is given by ‘he pmbmn, NOT by ‘he My in which you 50m n
Cnlsrlon BFS DFS IDS merscnonal BKT Random
ETC N° N‘ ND N° N‘ N‘
ODWnum Ves No ‘(is Yes ND N0
AH ‘(as N0 Vss Yes ‘(as N0

N : mmge numberofaccsssibls siaies

0 : length of the optimum solullon

A : length ofthe average 501mm

***************Ending Page***************

***************Beginning Page***************
***************page number:27**************
References (for search strategies)
Uninformcd Search Algorithms
Stanford Programming Abstractions

***************Ending Page***************

