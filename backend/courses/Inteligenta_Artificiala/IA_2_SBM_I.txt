***************Beginning Page***************
***************page number:1**************
I
Artlﬁelal Intelhgenee
3rd year, lst semester
State based models for decision problems
Week 2: models and uninformed search strategies
“Intelligence is what you use when you don't know what
to do” Jean Piaget

***************Ending Page***************

***************Beginning Page***************
***************page number:2**************
H n
We aim to develop rational AI systems:
o we deﬁne a problem and goals (instances)
0 the AI reaches the goals (solves the instances)
0 the AI outputs the result (unexplainable AI) or
the solution (explainable AI)

***************Ending Page***************


***************Beginning Page***************
***************page number:3**************
n

First approach: state-based models

o in What way should I change the

current state of the problem in order g , i_ 1 I . _ _ v ,

to get closer or reach the goal‘? 21/3 ‘L’ t: h ' :fyn A i ' 2
' g/ e I: :J , e A

0 compute a solution (algorithm 7 i] It! ITJ LALQ

- sequence of steps) starting from an 4 ‘Ii

initial state and ending in the goal state P- V _ ' , ‘

0 mostly covered by search strategies, “r

reasoning systems, AI for games t

***************Ending Page***************

***************Beginning Page***************
***************page number:4**************
FF I
Solving problems

Problem: We have two numbers, A and B. Which is
larger?

Instance: A:?, 13:?

A solution should produce the correct answer for all
possible instances

***************Ending Page***************


***************Beginning Page***************
***************page number:5**************
I
What’s the Problem With problems?

P I set of problems that can be solved/checked in Polynomial time by a deterministic TM.

NP I set of problems that can be solved in Polynomial time by a Non-deterministic TM.
Checking a NP solution is a P problem.

NP-complete I subset of NP With the property that any problem in NP can be reduced to a
NP-complete problem in polynomial time.

NP-hard I set of problems with the property that any problem in NP can be reduced to a
NP-hard problem in polynomial time.

PINP ‘.7

***************Ending Page***************

***************Beginning Page***************
***************page number:6**************
I
Let the computer solve our problems! Or not...

Solvable NP-hard problems: QSAT: is a logical proposition using
quantiﬁed (existential 3 or universal V) variables satisﬁable?
Unsolvable NP-hard problems: Turing Halting problem: given an
algorithm and an input, determine Whether the algorithm execution

for that input Will eventually halt.

The rest can be solved by a computer.

***************Ending Page***************


***************Beginning Page***************
***************page number:7**************
a
Stop looking for solutions!

Don’t think about solutions, think about problems.

Solving problems requires effort, describing problems requires
intelligence.

“If I had only one hour to save the world, I would spend ﬁfty-ﬁve
minutes deﬁning the problem, and only ﬁve minutes ﬁnding the
solution.” A.Einstein

***************Ending Page***************

***************Beginning Page***************
***************page number:8**************
a
Let’s ﬁnd a NP-complete problem and a computer able to solve it
Problem: ﬁnding a path in a graph
Describing a model - reducing a problem

' describe a state

' identify special states and the problem space

' describe the transitions and validate them

' specify a search strategy

***************Ending Page***************


***************Beginning Page***************
***************page number:9**************
a
Generalized Hanoi Towers

We have n towers with m distinct

sized pieces placed on one of the a

towers. Considering that you can

only move one piece at a time

and that no piece can be placed '
on top of a smaller piece, ﬁnd a M
sequence of movements that

place all pieces on a different

tower.

***************Ending Page***************

***************Beginning Page***************
***************page number:10**************
a
Choosing a representation for a

state

State: all data required to i - a
continue looking for a solution ‘ , ' 

No amblguity f ii; ‘ \ _ g; ‘I _ V.
Expressive enough to include all

required data

***************Ending Page***************


***************Beginning Page***************
***************page number:11**************
I
cWigwiiiji;sing a representation for a state
Compact enough to be easy to store and perform changes on it
A list of towers pieces are placed, in the order of piece size size
(3, 3, 3, 3, 1, 1, 2, 2)
Is this good enough?

***************Ending Page***************

***************Beginning Page***************
***************page number:12**************
I
cWigwiiiji;sing a representation for a state
Compact enough to be easy to store and perform changes on it
A list of towers Where pieces are placed, in the order of piece size,
With the number of towers added at the beginning
(3, 3, 3, 3, 3, 1, 1, 2, 2)
(n, t1, t2,...,tm), lStiSn

***************Ending Page***************


***************Beginning Page***************
***************page number:13**************
‘is ‘
Ch00s1ng a representation for a . , _: 4R0 > ‘ '
state 1s the most important and \ ~.. ,3f= 4 ' 1*
difﬁcult step 9*." ‘ I‘ 1 * ‘ .
N0 ambiguity - '

Compact ,7 is r \

Expressive ,

Includes all required data 7.x

There is no generally best representation ‘**;\i.u\

***************Ending Page***************

***************Beginning Page***************
***************page number:14**************
Yiﬁtéi
I
Special states
Initial state (3, 1, 1, 1, 1, 1, 1, 1, 1)
State Initialize (int n, int In)
{

Return (n, 1, 1, 1, ..., 1 ;
}

rn

There can be more than one initial state. There has t0 be at least one initial state.

***************Ending Page***************


***************Beginning Page***************
***************page number:15**************
Y}?
I
Special states
Final state(s) (n, n, n, n, n, n, n, n, n)
Boolean IsFinal (State s)
{

If s = (k, k, k, ..., k) then return true;

m+l

else return false;
‘r
There can be more than one ﬁnal state. There has to be at least one ﬁnal state.

***************Ending Page***************

***************Beginning Page***************
***************page number:16**************
YR?
.
Problem space: all possible states
Final state
Initial state
Finite space (limited variability in chosen state representation and only valid states are
included)

***************Ending Page***************


***************Beginning Page***************
***************page number:17**************
if???

a
What is the problem now?

How difﬁcult is it to solve?

Problem space has m dimensions Final state

How many states are Within the space? /

How can you move Within the '

problem space? Initial state

Simon’s Ant

Complexity of the solution is given by the problem, NOT by the way in which you solve it

***************Ending Page***************

***************Beginning Page***************
***************page number:18**************
a
Transitions

Only one possible way to change current state: move one piece to
another tower.

(n, tn’ t12,...,t1m) —> (n, t21, t22,...,t2m), where t1i = t2i for all lﬁiﬁm,
except exactly one i I k

State Transition (State s, piece, tower)

***************Ending Page***************


***************Beginning Page***************
***************page number:19**************
YEW

a
Valid transitions

l. No smaller piece is placed atop piece k

2. No smaller piece ends up below piece k

l. t1i =|= t1k , for all l§i<k

2. t2i =l= t2k , for all l§1<k

Boolean Validate (State s, piece, tower)

Implement transitions and validation separately, it’s good practice!

***************Ending Page***************

***************Beginning Page***************
***************page number:20**************
I
Search strategy
Void strategy(State s)
{
While (!isFinal(s))
{
- piece, tower;
If (Validate (s, piece, tower))
s I Transiti0n(s, piece, tower);
}
}

***************Ending Page***************


***************Beginning Page***************
***************page number:21**************
n
COMSearcch strategies
0 Uninformed - no distinction between states
o Random
o BFS and Uniform Cost
o DFS and Iterative Deepening
o Backtracking
o Bidirectional
0 Informed - heuristics to help distinguish between states
o Greedy best-ﬁrst
o Hillclimbing and Simulated Annealing
o Beam
o A* and IDA*

***************Ending Page***************

***************Beginning Page***************
***************page number:22**************
Y???

I
Breadth First Search and Uniform

Cost

o Visit states in the order of distance
(number of transitions) from the initial
state.

o Explores all immediate neighbors
(accessible states) until no more
neighbors or ﬁnal state found.

0 Has to memorise each generated state:
very costly.

o Might visit the same state multiple times.

0 Finds shortest path (optimum solution)

0 Uniform cost: if options have different
costs, explore cheaper paths ﬁrst

***************Ending Page***************


***************Beginning Page***************
***************page number:23**************
an
I
Depth First Search and Iterative
Deepening Search
0 Visit one immediate neighbor of the
current state until ﬁnal state is found,
return to previous unexplored neighbor if
no more neighbours available for current
state.
0 Has to memorise each generated state:
very costly.
o Might visit the same state multiple times.
0 Might not ﬁnish (if loops are present in
the problem space)
0 IDS: Explore only up to an increasing
depth (distance from initial state) - no
more inﬁnite paths

***************Ending Page***************


***************Beginning Page***************
***************page number:24**************
n
Random vs DFS

0 The same, if random remembers visited neighbours

Backtraeking vs DFS

0 NOT the same

0 Baoktracking sets an order for the neighbor states

0 How do you order states?

o Backtraoking doesn't need to memorize visited states!

0 Backtracking can avoid loops WITHOUT storing visited states

***************Ending Page***************

***************Beginning Page***************
***************page number:25**************
‘M:
.
Bidirectional Search
o Starts exploring from both the initial and
ﬁnal state simultaneously
0 Has to memorise each generated state,
but they should not be that many
0 Finds shortest path (optimum solution)
o What are the reverse transitions?

***************Ending Page***************


***************Beginning Page***************
***************page number:26**************
Yer

Comparison

Complexity of the solution is given by the problem, NOT by the way in which you solve it
Criterion BFS DFS IDS Bidirectional BKT Random
ETC NO NA NO NO NA NA
Optimum Yes No Yes Yes No No
All Yes No Yes Yes Yes No

N I average number of accessible states

O = length of the optimum solution

A I length of the average solution

***************Ending Page***************


***************Beginning Page***************
***************page number:27**************
a
R€ferences (for search strategi6s)

Uninforrned Search Algorithms

Stanford Programming Abstractions

***************Ending Page***************

