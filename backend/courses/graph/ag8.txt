***************Beginning Page***************
***************page number:1**************
November 29, 2024
—

***************Ending Page***************

***************Beginning Page***************
***************page number:2**************
a Network flows
o Augmenting paths
o Cuts
o Augmenting path theorem
o Integral ﬂow theorem
o Max ﬂow - Min cut theorem
o Ford & Fulkerson algorithm
o Edmonds & Karp algorithm
e Exercises for the 9th seminar (december 2 - 6 week)
—

***************Ending Page***************

***************Beginning Page***************
***************page number:3**************
Let P be a path in 5 — the support graph of the digraph G — and
e : 'ui'uj an edge of P, e E E(P). If e corresponds to the arc 'ui'uj then
e 1's a forward arc of P, otherwise (e corresponds to the arc 'uj vi) e 1's a
backvrerd are of P. _ __
G
e
—

***************Ending Page***************

***************Beginning Page***************
***************page number:4**************
Let R : (G, s, t, c) be a ﬂow network and a: be a ﬂow in R. An A-path
(in R with respect to the ﬂow x)1's a path P in G such that th E E(P):

o if z'j is a forward arc, then x17- < clj,

0 if z'j is a backward arc, then mji > 0.
If P is an A-path in R w. r. t. ﬂow x, then the residual capacity of
z'j € E(P) is

TU“) _ cij — wij, if ij is a forward arc ofP
j — acji, if tj is a backward arc of P
The residual capacity of the path P 1's r(P) : 11112133) 'r(e).
ee
—

***************Ending Page***************

***************Beginning Page***************
***************page number:5**************
Let us consider the flow network below, where, on each edge, the ﬁrst
label is its capacity and the second label is the corresponding flow.
2 4
2.1
3, 3,2
l 6
s t
2’ 2.1
3 2-,2 5
P : 1,12,2,24,4,45,5,56,6 is an A-path from s to t with forward arcs
12 ($12 I 1 < 612 I 3), 24 ($24 I 1 < (324 I 2), 56 ($56 I1 < C56 I 2),
and backward arc 45 ($45 I 1 > O). Residual capacity of P: 'r(P) :
min {2, 1, 1, 1} : 1.
—

***************Ending Page***************

***************Beginning Page***************
***************page number:6**************
Maximum ﬂow problem - Augmenting paths

Deﬁnition

An W.r.t the ﬂowx in the ﬂow network R : (G, s, t, c)

1's an A-path from s to t.

Lemma 1
Graph Algorithms — Lecture 8 November 29, 2024 6/41

***************Ending Page***************

***************Beginning Page***************
***************page number:7**************
Proof. By the deﬁnition of T’(P), the constraints (i) are fulﬁlled by m1.
The constraints (ii) veriﬁed by a: - are not affected for 1:1 in a vertex
z' §§ V(P). For each z' E V(P) \ {3, t} there are exactly two arcs of P
incident with i, say li and ikz. We have the following possible cases:
a) lz' and tic are forward arcs:
j j #1 #k
I 2:!in — 211%‘ +1811‘ +T’(P) — xik — 7"(P) I 21% — 25317‘ I 0.
#1 #k 1' 1'
b) l'L' is a forward arc and 'L'k is a backward arc:
j j Jihk j
: Z {le' —Z$ij +$li+T(P)-l-$ki — 7‘(P) I 2:11:14‘ —Z£I;Z'j : 0.
j7ﬁl,k j j j J
—

***************Ending Page***************

***************Beginning Page***************
***************page number:8**************
c) lz' is a backward arc and 1k is a forward arc: likewise to b).
d) lz' and zk are both backward arcs: likewise to a).
1/(m1) differs from 11(2) because of the ﬂow on the arc lt of P:
lt is a forward arc:
v(a:1) : ZxJ-lt — thlj : ijt — thj +$zi :
j j 17H j
: Z ccﬁ — Z $751‘ + (1215+ 'I‘(P) : 0(a) + r(P).
Jil j
lt is a backward arc:
11(331) : ijlt — 2:13;: ZacJ-t — 2m]- — will :
j j j J75!
: Exit — thj — (wit — r(P)) : 'u(a:) + r(P). U
j J75!
—

***************Ending Page***************

***************Beginning Page***************
***************page number:9**************
For the above example, the ﬂovv $1 I a: ® 7"(P) which has the value
11(ml) : 'u(a:) + r(P) : 3 +1: 4 is:
2 2.2 4
3, 3,2
1 (i
s l
2,2 2.2
3 2,2 5 »

o The above lemma explains the names for augmenting paths and
residual capacity.

o By the deﬁnition, if P is an augmenting path, then 'r'(P) > 0 and
thus 'u(x ® r(P) > 'u(ac). It follows that if there is an augmenting
path of the flow cc, then a: is not a ﬂow of maximum value. ,

—

***************Ending Page***************


***************Beginning Page***************
***************page number:10**************
Maximum ﬂow problem - Cuts
Let R : (G,s, t, c) be a ﬂow network. A in R 1's any partition
(S, T) of V(G)W1'th s 6 S and t € T. The (S, T)
1's

C(S, T) I Z Z Ci]:

1'65 JET

_2__———J

Graph Algorithms — Lecture 8 November 29, 2024 10/41

***************Ending Page***************

***************Beginning Page***************
***************page number:11**************
_

—

—

Proof.
'u(:r:) : (Z msj — 251213) + O :
j j
: (21:51‘ —Z£Bjs> + Z (21:17-21:15):
J j iES,i;£s j j
—

***************Ending Page***************

***************Beginning Page***************
***************page number:12**************
Proof cont’d.
I Z <2 xii — 2%) I Z ZWij — $ji) I
iES 1' j zes j
I Z 2W1 — $11‘) + 2 2(1Pij— 5%‘) =
iGSjGS iGSjeT
I 0+ Z Z<$¢j — $71). D
iES'jET
If“; is a flow in R I (61,5,15, c) and (S, T) is a cut in this network, then
v(:z:) g c(S, T).
—

***************Ending Page***************

***************Beginning Page***************
***************page number:13**************
Proof. By Lemma 2
Iiiécv' 11120
11W) I E 20% — $11‘) é Z 2(61'1' — $11‘) é
iESjET iESjET
131520
§ Z Z: Cij : C(S, T). U
165162"
Iff is a flow in R and (3T) is a cut such that 11(f) : c(§,?), then,
Va: flow in R, we have v(a;) g 43?) : 11(5), i. e., f is a maximum
value ﬂow in R.
Similarly, V(S, T) cut in R, we have C(S, T) Z 11(5) : c(§,T), that
is, (3T) is a minimum capacity cut in R.
—

***************Ending Page***************

***************Beginning Page***************
***************page number:14**************
—
A ﬂow :1; is a ﬂow of maximum value if and only if there is no augmenting
path w.r.t. :r: in R. J
Proof. ":>" If P is an augmenting path W. r. t. :12, then :17 ® r(P) is a
flow in R of strictly greater value.

"<:" Let a: be a flow in R with the property that there is no augmenting
path w.r.t. a: in R. Let
S : {2' : iE V and EIP an A-path in R from s to 1L}.
Obviously s G S (there exists an A-path of length 0 from s to s) and
t ¢ S (there is no A-path from s to t). Hence, if T : V \ S, then
(S, T) is a cut in R. J
—

***************Ending Page***************

***************Beginning Page***************
***************page number:15**************
Proof cont’d. W G S and Vj E T we have:
0 if Zj E E, then 1131'3' : CZ'J' and
o ifji E E, then 221-1: 0
(otherwise the A-path from s to z' can be extended to an A-path from
s to j, hencej E S - contradiction).
It follows that 'u(:z:) : Z 2(mij — :rzji) : Z 2 cij : C(S, T), i. e., a:
iESjET iESjET
is a ﬂow of maximum value (see the above remark). U ,
—

***************Ending Page***************

***************Beginning Page***************
***************page number:16**************
—
(Integral ﬂow theorem) If all capacities in R are integer then there exists
an integral flow, w, of maximum value (all {Ii-U‘ 6 Z+). ‘
Proof. Let us consider the following algorithm:

$0 <— 0; 1L P 0;

While (ElPi an augmenting path W. r. t. mi) do

will <- rni ® r(P¢); i+ +;

end While
Note that "xi has only integral components" is an invariant of the algo-
rithm (from the deﬁnition of r(PZ-), if all capacities are integral and :zzi
is integral, then r(P1~) is integral and hence mi“ is integral). /

—

***************Ending Page***************

***************Beginning Page***************
***************page number:17**************
Proof cont’d. Moreover, in each While iteration the value of the current

flow increases (with at least one), therefore the algorithm terminates in

at most c({s}, V \ {3}) E Z+ while iterations.

There is no augmenting paths vv.r.t. the ﬁnal ﬂow, hence, by Theorem

1, is of maximum value. El

The above algorithm terminates too, when the capacities are rational

numbers. /
—

***************Ending Page***************


***************Beginning Page***************
***************page number:18**************
—
(Max ﬁow - Min cut theorem) The maximum value of a ﬁow in the ﬁow
network R : (G, s, t, c) is equal to the minimum capacity of a cut in
Line of proof. If we devise an algorithm that, starting from an initial
ﬁow m0 (e.g., m0 : 0), constructs in ﬁnite time a ﬂow :r: with respect
to which there is no augmenting paths, then the cut considered in the
proof of Theorem 1 satisﬁes together with ac the required equality. For
rational capacities, the algorithm considered in the proof of Theorem 2
satisﬁes this condition. For arbitrary real capacities we will present later
such an algorithm due to Edmonds and Karp (1972).

—

***************Ending Page***************

***************Beginning Page***************
***************page number:19**************
—
o A short proof of the above theorem is to show that there is a flow
of maximum value and to apply the construction in the proof of
Theorem 1. A ﬂow of maximum value exists always by observing
that it is the optimal solution of a linear program (over a non-empty
polytope).
a The algorithmic importance of Theorem 3 is given by the fact that
the set of all cuts in the network is ﬁnite, Whereas the set of all flovvs
—

***************Ending Page***************

***************Beginning Page***************
***************page number:20**************
The algorithm maintains a labeling of the network's vertices in order to

ﬁnd the augmenting paths with respect to the current flow z. When

there is no augmenting path, the flow ac is of maximum value.

Let R : (G : (V, E), s, t, c) a network ﬂow and :c a ﬂow in R.

The label of a vertex j, that has three components (e1, e2, e3), has the

following meaning: there exists an A-path from s t0 j, P, Where e1 : z'

is the predecessor of j on this path, e2 E {forward, backward} is the

direction of arc ij, and e3 : 'r(P).

Initially s is labeled (-, -, oo). The other vertices receive labels by scan-

ning the already labeled vertices: J
—

***************Ending Page***************

***************Beginning Page***************
***************page number:21**************
procedure scan('i)
for (j E V, unlabeled) do
if (Zj E E and $17‘ < Cij) then
labelj by e : (i,forward, min{e3[i], cZ-j — xij});
end if
if (ji G E and mﬁ' > O) then
labelj by e : (2', backward,min{e3[i], wig);
end if
end for
The meaning of the components of labels is maintained by the procedure
scan.
When, in the procedure scan, the vertex t is labeled, an augmenting
path P, W.r.t. the current flow x, is discovered in the following way:
—

***************Ending Page***************

***************Beginning Page***************
***************page number:22**************
7"(P) is the component e3 of the label of t, its vertices can be found in
0(n) time by exploring the ﬁrst component of the labels, and the change
ac ® 'I‘(P) is done in this exploration by using the second component of
the labels.
For the new ﬂow, a new labeling based search is considered.
If all labeled vertices have been scanned and the vertex t has not been
labeled, it follows that w. r. t. the current flow there is no augmenting
path in R, therefore the current flow it is of maximum value. If S is the
set of labeled vertices and T : V \ S, then (S, T) is a cut of minimum
capacity in R.
—

***************Ending Page***************

***************Beginning Page***************
***************page number:23**************
start with an initial ﬂow :1: : (mij) (e. g., a: : O)
vvhile (El labeled unscanned vertices) do
choose i a labeled unscanned vertex;
scan(i');
if (t has been labeled) then
change the flovv on the path given by the labels;
erase all labels; e(s) <— (-, -, oo);
end if
end While
S k {i : 'L'E VJ is labeled};
T <— V \ S;
ac is a maximum value flow, (S, T) is a minimum capacity cut. j
—

***************Ending Page***************

***************Beginning Page***************
***************page number:24**************
Time complexity: Each ﬂovv augmenting requires at most 2m(m : |E|)
arc inspections for doing vertex labeling. If all capacities are integers,
at most 'u augmentations ('u being the value of the maximum flow) are
required. Hence the algorithm has (9(mv) time complexity.
If U is an upper bound of all arc capacities, then v g (n — 1) U (this is
an upper bound of the capacity of the cut ({s}, V \ {s})), therefore the
algorithm has (9(nmU) time complexity.
—
The algorithm may not terminate for irrational capacities. This case
does not arise in practical implementations, but the weakness of the
algorithm is given by the fact that the number of ﬂovv augmentings may
depend on the capacities values (and not the size of the network). ‘
—

***************Ending Page***************

***************Beginning Page***************
***************page number:25**************
MJ MJ) 1 1
5 t 1
1
l
Mn M,0 1
b
P1 P2
If the choose operation in the above algorithm makes that the
succesive augmenting paths are P1, P2, P1, P2, . . ., where P1 :
(s,sa, a, ab, b, bt,t) and P2 : (s,sb, b, ba, a, at,t), then each residual
capacity is 1, and the algorithm requires 2M flow augmentations, which
is quite bad.
—

***************Ending Page***************


***************Beginning Page***************
***************page number:26**************
These drawbacks of the algorithm can be avoided if the choosing of
the labeled vertices for scanning is made in a smart way (Dinic (1970),
Edmonds 8: Karp (1972)).
A shortest augmenting path w.r.t. the ﬂow a; in R is an augmenting
path of minimum length over a1] augmenting paths w.r.t. m.
Let a: be a flow in the flow network R. Let wk (k; 2 1) be the ﬂows from
the sequence:

m1 <- m;

wk“ <— wk ® 7*(Pk), Pk being a shortest augmenting path w.r.t. wk;

—

***************Ending Page***************

***************Beginning Page***************
***************page number:27**************
In order to prove that this sequence is ﬁnite, let for each z' E V and for
each k E N*:

of : the minimum length of an A-path from s to i W. r. t. wk.

TZ-k : the minimum length of an A-path from '1; to t w. r. t. wk.
Vi G V and Vic G N* we have

05H Z of and 'rZ-IH'1 2 Tl'k.
Proof. Omitted. I
—

***************Ending Page***************

***************Beginning Page***************
***************page number:28**************
—
(Edmonds 8c Karp, 1972) If a: : $1 is an arbitrary ﬂow in the ﬂow
network R, then the sequence of flows 1:1,:132, . . ., obtained from :rzl by
successive shortest augmenting paths, has at most mn/ 2 terms (in at
most mn / 2 successive augmentations we obtain a flow ac with the prop-
erty that there is no augmenting path w.r.t. 1;). J
Proof. If P is an augmenting path w.r.t. a ﬂow a; in R, with residual
capacity T’(P), a critical arc in P is any arc e E E(P) with r(e) : T’(P).
In m ® r(P), the flow on critical arcs becomes either equal with capacity
(on forward arcs), or null (on backward arcs).

Let ij be a critical arc on the shortest augmenting path Pk w.r.t. ask.
The length of Pk is (If + 'rZ-k : 0;“ + ‘TJk J
—

***************Ending Page***************

***************Beginning Page***************
***************page number:29**************
Proof (cont’d). Since ij is a critical arc in Pk , in mk+1 it can not be
used in the same direction as in Pk. Let Pl (with l > k) be the ﬁrst
shortest augmenting path w.r.t. ml on which the flow on the arc z'j will
be modiﬁed, (when, the arc is used in the converse direction). We have
two cases:
'ij is a forward arc in Pk. Then a; I (If + 1, in Pl ij will be backward
arc, therefore of I a; + 1.

Pk : i j

J' 1'

H7\/\Wm.\/—¢\/.u\t
It follows that U€+Til : aid-1+7’; 2 af+1+Tik : af+¢ik+2 (by
Lemma 4). We obtained that length(Pl) 2 length(Pk) + 2. ,

—

***************Ending Page***************

***************Beginning Page***************
***************page number:30**************
Proof (cont’d).

z'j is a backward arc in Pk. Then of : 011-“ + 1, in Pl z'j will be forward

arc, therefore a]; : of + 1.

Pk9./\"/\.—i—/\..—.t

It follows a]; +le : aid-1+7‘; 2 (If + 1 +1‘; : 0;“ +731“ +2. We obtained

that length(Pl) Z length(Pk) + 2.

Hence any shortest augmenting path on which the arc z'j is critical has

the length with at least 2 greater than the length of the precedent path

on which ij has been critical. Since the length of a path in G is at most

n — 1, it follows that a ﬁxed arc can not be critical more than n / 2 times

(in the whole augmentation process). ‘
—

***************Ending Page***************

***************Beginning Page***************
***************page number:31**************
Edmonds 8z Karp modiﬁcation of Ford 8z Fulkerson algorithm

Any augmenting path has at least one critical arc. Hence in the sequence
(Pk) we have at most mn / 2 shortest augmenting paths.

Corollary ‘
In any ﬂow network there 1's a flow a: with the property that there 1's no
augmenting path w.r.t. :n.

Remarks ‘

a The proof of the Theorem 4 is now completed.

o The only change in the is the choice of
the labeled vertex which will be scanned: use the rule "ﬁrst labeled-
ﬁrst scanned" that is, maintain a queue of labeled vertices initialized
at each flow augmentation with the source s. ,

Graph Algorithms — Lecture 8 November 29, 2024 31/41

***************Ending Page***************

***************Beginning Page***************
***************page number:32**************
Summarizing, we have the following theorem. |

(Edmonds-Karp, 1972) If in the Ford 8: Fulkerson algorithm the scan of

the labeled vertices is made in a bfs manner, then a flow of maximum

value is obtained in (9(m2n) time.

Proof. There are 0(mn) flow augmentations (by Theorem 4), each

requiring (9(m) time. l1 i
—

***************Ending Page***************

***************Beginning Page***************
***************page number:33**************
Exercise 1. Consider the following network flow:
Find a maximum ﬂow by performing the Edmonds-Karp algorithm on
the following orderings of its adjacency lists:
(a) 14(8) I ($1,134), A($1) I ($3,302,114), 14(902) I ($1113),
14(133) I ($1,734,15), 14(734) I ($3,131)-
(b) A($) I ($4,111), 14061) I ($2,333,114), 14(062) I (061,15),
A($3):($12$41t)7 A($4) I ($32131) /
—

***************Ending Page***************


***************Beginning Page***************
***************page number:34**************
Exercise 2. Consider a network R : (G,s, t, ; c) , Where G : (V,E)
has n vertices and m arcs, and the capacity function has only integer
values (c : E —> 2+). Let C : mag: c(e).
ee

(a) Prove that the maximum value of a ﬂow in R is at most m - C’.
(b) Show that, for every flow a: of R, and for every K E 2+, we can

ﬁnd an augmenting path P with residual capacity, r(P), at least K

- if such a path exists - in (9(m) time complexity.

—

***************Ending Page***************

***************Beginning Page***************
***************page number:35**************
Exercise 2 (cont’d).
(c) We consider the following algorithm:
SC-MAX-FLOW(R) {
C’ k rgieaéc 0(6);
Z; <— O;// I is the current ﬂow;
K <_ 21+L10g Cl;
While(K 2 1) {
while(a: has an augmenting path P with 'r(P) 2 K)
a; <— a; ® T’(P);
K <- K/2;
}
return x;
}
—

***************Ending Page***************

***************Beginning Page***************
***************page number:36**************
Exercise 2 (cont’d).

1. Prove that procedure SC-MAX-FLOW(R) returns a maximum
value flow a: in R.

2. Prove that, after every exterior while iteration, the maximum value
ofa flow in R is at most v(a:)+m- K.

3. Show that, V K G Zr, there are at most 0(m) interior while itera-
tions. As a consequence the entire procedure has (9(m2 log C) time
complexity.

Exercise 3. The digraph G : (V, E) represents the topology of a net-
work of processors. For every processor, v 6 V, we know its work load,
load(v) E Rn With the aid of a maximum ﬂow in a certain network
ﬁnd a static load balancing strategy in G: indicate for any processor the
work load which has to be send and to what processors in such a way
that all the processors have the same work load. ,
—

***************Ending Page***************

***************Beginning Page***************
***************page number:37**************
Exercise 4. Let R : (G,s,t, c) a network and (Si, Ti), i : m two

minimum capacity cuts in R. Show that (5'1 U $2, T1 O T2) and (5'1 O

$2, T1 U T2) are minimum capacity cuts also. ‘

Exercise 5. Let R : (G : (V, E), s, t, c) be a network and c : E —> 2+,

n: IVI, m I IEI-

(a) Devise an algorithm of (9(n + m) time complexity for ﬁnding a
minimum capacity cut in R, having at hand a maximum value ﬂow
93*.

(b) Using a maximum ﬂow algorithm for a suitable capacity, prove that
you can ﬁnd a minimum capacity cut in R, (SO, To), having a min-

—

***************Ending Page***************

***************Beginning Page***************
***************page number:38**************
Exercise 6. Let G = (S, T; E) be a bipartite graph. Prove Hall's theo-
rem (it exists a matching in G which saturates the nodes f'rom S if
and only if (H) VA Q S, INC;(A)] 2 |A\) by using the maximum ﬂow
- minimum cut theorem on a particular network. .
Exercise 7. Let R : (G, s, t, c) be a network having all arc capacities
positive integer even numbers. Prove that it must exist a maximum flovv
having all values integer even numbers. /
—

***************Ending Page***************

***************Beginning Page***************
***************page number:39**************
Exercise 8. Let R : (G, 5,25, c) be a network such that st, ts eé E(G).
Furthermore we have a lower bound function m : E(G) —> Rim m(e) g
c(e),V e E E(G). A flow (p in R is called legal ﬂow in R if w(e) 2
m(e),V e € E(G)
(a) Prove that, for every legal flow (p and every st-cut (S, T) we have
11(9)) é Z C(ij) — 2 m(ﬂ)
iES,j€T,ij€E(G) i€$,j€T,ji€E(G)

(b) Starting from R we build a new network R : (@jjj), where

— V(6) I V(G) U {it} (these are new vertices);

- E(G) : E(G) U {$12, ts} U {§v,vt : v E V(G)};

- for every 'u E V(G), E(§'U) : Z m(u'u) and 6(1)?) :

m/EE(G)
Z m('uu);
quE(G)
- E(st) : Hts) : oo, and, for every ij E E(G), 6(1'1') : C(ij) — m(ij).
—

***************Ending Page***************

***************Beginning Page***************
***************page number:40**************
Exercise 8 (cont’d).
Show that there exists a legal ﬁow in R if and only if there exists a
ﬁow of value M : ZeeEw) m(e) in R.

(c) Using a starting legal ﬂow (see b)) show how to modify the
Ford8zFulkerson algorithm in order to obtain a maximum value le-
gal ﬁow in a network as above. ,

Exercise 9. Let R : (G, s, t, c) be a ﬁow network.

(a) Design an eﬁicient algorithm that veriﬁes if a given cut (S, T) is of
minimum capacity in R.

(b) Design an (9(n + m) time complexity algorithm that veriﬁes if a
given ﬁow, a3, is of maximum value in R.

(c) Let c : E —> Z+ and 93* be a maximum ﬁow in R. Suppose that
the capacity of a certain arc, eO € E(G), is increased by 1. Devise
an efﬁcient algorithm which has to ﬁnd a maximum ﬁow in the new

***************Ending Page***************

***************Beginning Page***************
***************page number:41**************
Exercise 10. Let x be an integral ﬂow in a given network R : (G, s, t, c),
with 11(x): v1 +v2+---'up, where 111E N*, Vi : H, p >1. Prove that
there exists p integral ﬂows x1, x2, . . . ,xP such that 1/(xi) : vi, Vi : H
and
p v
X : Z X1.
1:1
—

***************Ending Page***************

