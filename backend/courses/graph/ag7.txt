***************Beginning Page***************
***************page number:1**************
(1. Groitor tr . Graph Algorithms (1. (1roitortr . Graph Algorithms (1. (1roitortr . Graph .Algorirhms
(.1. (.‘roitorrr - Graph Algorithrrrs il‘ (.1. (.1roitorrr - Graph Algor ithms (.1. (.1r0itor tr - Graph
Algorithms (1. (1r'oitor'rr - Graph Algorithms ’ (1. (Yroitortr . Graph Algorithms (1. (".r'oitortr -
Graph Algorithms “ (.1. (froitorrr - Graph \lgorirhrrrs' (.1. (.1roirorrr — Graph Algorithms :1‘ (.1. (froitorrr
Graph Algorithms (1. (1roitortr . Graph .Algor irhms ‘ (1. Groiror tr . Graph Algorithms (1. (1roitortr
- Graph Algorithms (.1. (.1roitorrr - Graph Algorithrrrs it‘ (.1. (.1roirorrr - Graph Algorithms (.1.
('Iroitortr - Graph Algorithms (1'. (1roitortr . Graph Algorithms (1. (1roitortr - Graph Algorithms‘ Z‘:
(.1. (.froitortr - Graph Algorithms “ (.1. (.1roitorrr - Graph \lgorirhrrrs (.1. (.froirorrr — Graph Algorithrrrs
(1. (1roitortr - Graph Algorithms Z" (I. (1roitortr - Graph Algorithms (1. (1roitortr - Graph
Algorithms “ (1. (“roitorrr . Graph mv@mbér (f5irr12024aph \lgorithms (1. (“roitorrr .
Graph Algorithms (1. (.roitortr - Graph Algorithms x (,1. (Iroitorrr - Graph Algorithms (1. (.roitortr
. Graph \lgor'ithms (1. ('Ir'oitorrr . Graph Algor ithms A (1. (1|oiror tr . Graph ‘\lgor ithms (1.
(froitortr ~ Graph Algorithms (.Q. (Qr'oitor'rr ~ Graph Algorithms (.1. (.froitortr ~ (.lraplr Algorithms 2*
(1. ('Iroitor tr . Graph Algorithms (1. (1roitortr . Graph .Algor irhms (1. Groitor tr . Graph Algorithms
(.1. (froitor'rr - Graph Algoritlrrrrs *1 (.1. (.1roitorrr - Graph Algor ithms (.1. (.1r0itor tr - (.lraplr
Algorithms (1. (1roitortr - Graph Algorithms ’ (1. Groitortr . Graph Algorithms (1. ("Iroitortr -
Graph Algorithms “ (.1. (.1roitorrr - Graph \lgrirrirhrrrs' (.1. (.Irriritorrr — Graph Algorithms “ (.1. (froitorrr
. Graph Algorithms (1. (1roitortr - Graph Algorithms Z" (I. (1roitortr . Graph Algorithms
—

***************Ending Page***************

***************Beginning Page***************
***************page number:2**************
0 Matchings
o Perfect Matchings - Tutte’s Theorem
o Maximum Cardinality Matchings - Berge’s Theorem
o Maximum Cardinality Matchings - Hopcroft-Karp Algorithm
a Network ﬂows
o Flow network
0 Flow, ﬂow value, maximum ﬂow problem
e Exercises for the 8th seminar (november 25 - 29 week)
—

***************Ending Page***************

***************Beginning Page***************
***************page number:3**************
Let G be agraph. Clearly, |M| g |G|/2, VM € Mg. A perfect matching
(or 1-factor) in G is a matching M With the property |M| : |G|/2 (i.
e., S(M) : V(G)).

A connected component of graph G is even (odd) if the number of its
vertices is even (odd). We denote by q(G) the number of odd connected
components of G. ,
—
Let G be a graph having a perfect matching. Clearly, each connected
component of G is even. Hence, q(G) : O; moreover, if S Q V(G),
then for each odd connected component of the graph G — S there exists
an edge in the perfect matching of the graph with an extremity in this
connected component and the other in S. Since the extremities of dif-
ferent edges are distinct, it follows that |S| 2 q(G — S). For S : Q, we
obtain q(G — Q) g O, hence q(G) : O.

—

***************Ending Page***************

***************Beginning Page***************
***************page number:4**************
:genilponen E-i ggriponents
B S 0
(Tutte, 1947) A graph G has a perfect matching if and only if
(T) q<G—S)< ISWSQ V(G)-
—

***************Ending Page***************

***************Beginning Page***************
***************page number:5**************
Proof. The necessity of condition (T) has been already observed in the
above discussion. We prove by induction on n : |G| that if a graph
G : (V, E) satisﬁes (T), then G has a perfect matching.
For n : 1, 2 the theorem obviously holds. In the inductive step, let G
be graph with n 2 3 vertices which satisﬁes (T) and suppose that any
graph G’ with lG’| < n which satisﬁes (T) has a perfect matching.
Let SO Q V(G) such that q(G — SO) : |SO| and maximal (with respect
to "Q") having the property that (T) holds with equality (i. e., for any
strictly superset S of SO we have q(G — S) < lSl).
Note that the family of subsets of V(G) for which (T) is satisﬁed with
equality is non-empty, and therefore SO exists (for each vertex 'uo which
is not a cut-vertex in its component, we have q(G — 110) : 1 : |{vo}|,
since each connected component is even and contains such a vertex '00).
—

***************Ending Page***************

***************Beginning Page***************
***************page number:6**************
Let m : |So| > 0 and 01,02,...,Cm be the odd components of G — SO

and D1, D2, . . . , Dk be the even components of G — SO (k 2 0):

We will build a perfect matching in G composed by
—

***************Ending Page***************

***************Beginning Page***************
***************page number:7**************
a) a perfect matching in each even connected component Di;
b) a matching with m edges, {e1, . . . , em}, the edge ei having an end
si G SO and the other vi E Ci (i : 1, 1, m);

c) a perfect matching in each subgraph Ci — 'ui (2' : W)
a) For each 1 g i g k; the graph [DAG has a perfect matching. Indeed,
since m > O, it follows that |Di| < n and by the induction hypothesis
it is sufficiently to show that G’ : [DAG satisﬁes (T)
Let S’ Q Di. If q(G’ — S’) > |S’|, then we get the following contradic-
tion:
Q(G—(30US’)) I q<G-s0)+q<G'—s'> I |s0|+q(G'—s') > ISoU$’|-
Hence, q(G’ — S’) g |S’|, VS’ Q Di, i. e., G’ satisﬁes (T)

—

***************Ending Page***************

***************Beginning Page***************
***************page number:8**************
b) Let H : (SO,{Gl, . . . , Gm}; E’) be the bipartite graph with a class
of the bipartition SO, the other class being the set of odd connected
components of G — SO, and {5, Ci} is an edge of H if s E SO is adjacent
in G with 'u G Ci.

H has a perfect matching. Indeed, we show that for H the Hall's
property holds , implying the existence of matching M0 that saturates
{01, . . . , Gm}.

Let A Q {Gl,...,Gm}. Then B : NH(A) Q SO, and by the construc-
tion of H, in the graph G we have no edge from a vertex 'u G SO — B
to a vertex 'w € Gi € A. Hence the odd connected components from A
remains odd connected components in G — B; hence q(G — B) 2 |A|
Since G satisﬁes Tutte’s condition (T), we have \B] 2 q(G — B). We
obtained that [NH(A)] : [Bi 2 ]A|. ,

—

***************Ending Page***************


***************Beginning Page***************
***************page number:9**************
By Ha11’s theorem H has a matching M0, which saturates {01, . . . , Cm};
since |SOI : m, M0 is perfect.
MD I {51011521121' ' ' ism'um}1SD I {511' ' '1$m}1vi e 011Vi: 11m'
c) Vi E {1, . . . , m} the graph G’ : [C],~ — '11,]G has a perfect matching.
Using the induction hypothesis, it will be enough to prove that G’ sat-
isﬁes (T)
Let S’ Q C’, — 'ui. If q(G’ — S’) > |S’|, then, since q(G’ — S’) + |S’| E
0 (mod 2) (because |G’| is even), it follows that q(G’ — S’) 2 |S’| + 2.
If S”: SO U {'ui} LJ S’, we have
|s"| > q(G—S") I q<G—SO)—1+q<G'—S') z |$o| —1+q(G'—s') >
2 ISOI — 1 + IS’| +2 I IS”|,
i. e., q(G — S”) : |S”|, contradicting the choice of S0 (since SO g S”).
—

***************Ending Page***************

***************Beginning Page***************
***************page number:10**************
Therefore VS’ Q 01-4111‘, q(G’—S’) g |S’| and G’ has a perfect matching

(by the induction hypothesis).

Obviously the matching of G obtained by taking the union of the match-

ings in a), b), and c) from above saturates all the vertices of G, and the

theorem follows by induction.
—

***************Ending Page***************

***************Beginning Page***************
***************page number:11**************
Let G = (V, E) be a graph and M E MG be a matching in G. l
An alternating path of G with respect to the matching M is any path
P I 110,1/0'01, 111, - - wUkili'Ukil'Uh'Uk

such that {vinlvi,vivi+1}ﬁ M 75 Q, Vz' : 1, k — 1.

Note that, since M is a matching, if P is an alternating path w.r.t. M,

then from any two consecutive edges of P exactly one belongs to M (the

edges belong alternatively to M and E \ M)

In the following, when we will refer to a path P we will understand its

set of edges.
—

***************Ending Page***************

***************Beginning Page***************
***************page number:12**************
An augmenting path of G with respect to the matching M is an alter-
nating path joining two distinct exposed vertices With respect to M.
Note that, from the above deﬁnition, it follows that if P is an augmenting
path W.r.t. M, then |P\M| : \PﬁMH-l.
n, b, 0,11 - alternating even path
g / , alternating odd path
a e f h j - augmenting path
t‘ g, f,d, - alternating odd path
b d a‘ h, c,d,c , closed alternating path
7' a, b, n, d, f, g, h - augmenting path
(1
—

***************Ending Page***************

***************Beginning Page***************
***************page number:13**************
(Berge, 1959) M is a maximum cardinality matching in the graph G if
and only if there is no augmenting path in G w.r.t. M.
Proof. "2" Let M be a maximum cardinality matching in G. Suppose
that P is an augmenting path in G with respect to M.
Then, M’: MAP : (P \ M) U (M \ P) E Mg. Indeed, M’ can be
obtained by interchanging the edges in M With those not in M on the
path P: (p
f1 f]
ll 6 f h (l (1 f h
b d / I; d
P I u_h_c_d‘f.g. h e augmenting path ‘MAP
—

***************Ending Page***************

***************Beginning Page***************
***************page number:14**************
Furthermore, |M’| : |Pﬁ MI +1+ |M\P| : |M| +1, contradicting the

choice of M.

"<:" Let M be a matching in G with the property that there are no

augmenting paths in G with respect to M.

Let M * be a maximum cardinality matching in G. We will prove that

|M*| : |M| Let G’ be the subgraph spanned by MAM* in G (G' :

(V, M AM *)).

Note that dG/(v) g 2, V'u E V and therefore the connected components

of G’ are isolated vertices, paths of length at least one, or cycles. We

have ﬁve possible cases (see the following ﬁgure; blue edges are from

M *, black edges are from M).

Case b) does not occur since it gives an augmenting path with respect to

M *, which is a maximum cardinality matching. Case c) does not occur

since it gives an augmenting path With respect to M.
—

***************Ending Page***************

***************Beginning Page***************
***************page number:15**************
a) .
e)
If we denote by mM(C) the number of edges from M in the connected
component C' of G’ and by mM* ( C) the number of edges from M* in the
same connected component of G’, we obtained that mM(C) : mM*(C).
Hence,
\M\M*\: Z WAC):
C conn. comp. of G’
I Z mM*(C):|M*\M|
C conn. comp. of G’
J
—

***************Ending Page***************


***************Beginning Page***************
***************page number:16**************
Therefore ‘Ml : ]M*|. U
We get a strategy to ﬁnd a maximum cardinality matching:

let M be a matching in G (e. g., M = Q);

while (EIP augmenting path W. r. t. M) do

M a M AP;

end while
At each while iteration the cardinality of M increases by 1, therefore in
at most n / 2 iterations we obtain a matching without augmenting paths,
that is of maximum cardinality. It remains to implement the while
loop in polynomial time complexity. This was ﬁrstly done by Edmonds
(1965).

—

***************Ending Page***************

***************Beginning Page***************
***************page number:17**************
—
Let M,N E Mg, \M\ : 131M: s and s > 'r. Then in MAN there
are at least s — r vertex-disjoint augmenting paths with respect to M. »
Proof. Let G’ : (V, MAN) and CZ- (i : W) be the connected com-
ponents of G’. For each 1 g 2' g p, we denote by 6(Ci) the difference
between the number of edges of N in Ci and the number of edges 0f M
in Ci:

5(Cz) I !E(Ci) n N‘ — ‘EU/'1') n M!-
Note that, since M and N are matchings, CZ- are paths or cycles. Hence
6(Ci) G {—1,0, 1}. 6(Ci) : 1 if and only if C1- is an augmenting path
with respect to M. J
—

***************Ending Page***************

***************Beginning Page***************
***************page number:18**************
Proof cont’d. Since

P

25(C¢)=|N\MI—IM\NI=S—T,

1:1
it follows that there are at least s — 'r connected components of G’ with
6(Ci) : 1, that is, there are at least s — 7" vertex-disjoint augmenting
paths contained in MAN. U
If 1/(G) : s and M E MG with ‘Ml : 1‘ < s, then there exists in G an
augmenting path with respect to M of length at most 2[r/(s — TH + 1.
Proof. Let N E MG with \N] : s : 1/(G).

—

***************Ending Page***************

***************Beginning Page***************
***************page number:19**************
Maximum Cardinality Matchings - Hopcroft-Karp Algorithm

By Lemma 1, there are s — r edge-disjoint augmenting
paths (vertex-disjoint paths are also edge-disjoint) contained in M AN .
It follows that at least one of them has at most [r/(s — r)l edges from
M. The length of this augmenting path is at most er/(s — TH + 1. D
Deﬁnition
Let M E Mg. A with respect to M in G is
an augmenting path of minimum length over all augmenting paths with
respect to M in G.
Lemma 3

Graph Algorithms — Lecture 7 November 15, 2024 19/37

***************Ending Page***************

***************Beginning Page***************
***************page number:20**************
Proof. Let N : (MAP)AP’. Then MAN : PAP’ and |N| I |M|+2.
By Lemma 1, there are two edge-disjoint augmenting paths W. r. t.
M, P1 and P2, contained in M AN . Since P is a minimum augmenting
path W.r.t. M, we have lPAP’\ 2 ‘Pll + [le 2 2IP] and therefore
|Pl + \P’| — 2|P O P’\ 2 2lP]. U
Let us consider the following algorithm:
M0 <— Q; 'L' I O;
While (El augmenting paths w. r. t. Mi) do
let P1- a minimum augmenting path W.r.t. Mi;
Mi+1 k MiA-Pi;
z' + +;
end While
Let P0, P1, . . . , PU(G)_1 be the sequence of minimum augmenting paths
constructed by this algorithm.
—

***************Ending Page***************

***************Beginning Page***************
***************page number:21**************
a) |Pi| g |P¢+1| and |P¢| : |Pi+1| if and only if P1- and P¢+1 are vertex-

disjoint, V1 g z' g 1/(G) — 2.

b) Vi <j < I/(G) — 1), if |PZ| : |Pj|, then Pi and Pj are vertex-disjoint. ‘

Proof. a) By taking P : P1- and P’ : Pi+1 in Lemma 3, we get

|P¢+1| 2 |P¢| + 2|P¢ O P¢+1| 2 |P¢|. The equality holds if and only if Pi

and P¢+1 are edge-disjoint, which implies that they are vertex-disjoint

(since they are alternating paths).

b) follows by successively applying a) U
—

***************Ending Page***************

***************Beginning Page***************
***************page number:22**************
(Hopcroft, Karp, 1973) Let G be a graph and I/(G) : s. The num-
ber of distinct integers in the sequence |P0|, |P1|, . . . , |P511| (Pi are the
minimum augmenting paths constructed by the above algorithm) is not
greater than Zlﬁj + 2. ,
Proof. Let 'r : [s — ﬂ. Then ‘MM : 1' and, by Lemma 2,
IPTI é ZlT/(S —T)l +1 I 2H5 — ﬁl/(S — l8 — ﬁlﬂ +1 < Zlﬁl +3-
Hence, for every i < 1", |P¢| is one of Lﬁj + 1 odd integers not greater
than Zlﬁj + 1.
In the sub-sequence IP11,- . . , {P5111 there are at most s — 'r é Lﬁj + 1
distinct integers. It follows that in the sequence IP01, IP11, . . . , lP$_1|
there are no more than 2|_\/§] + 2 distinct integers. U ,
—

***************Ending Page***************

***************Beginning Page***************
***************page number:23**************
2H8 — ﬁl/(S — l5 — ﬁlﬂ +1 < Zlﬁl +3 <I>
2H8 — x/El/(s — l5 — ﬁlﬂ < Zlﬁl +2 <I>
l$—\/5l/($—l$—\/5l)< l\/5J+1<I>
(s — NED/Ngl é l\/5l + 1 <3 5 é l\/5l2 +2l\/§l

DEM/E] :kEN,thenk<ﬁ<k+1,hences:(\/§)2<k2+2k+1
which is equivalent With s : (J5)2 g k2 + 2k - the inequality from
above.

If the above algorithm is decomposed in phases such that in each phase
a maximal (W.r.t. inclusion) set of vertex-disjoint minimum augment-
ing paths is found, then - by Lemma 4 - the length of the minimum
augmenting paths in the next phase Will not decrease (otherwise, the
set of minimum augmenting paths constructed in the current stage is
not maximal). By Theorem 3, the number of phases is not greater than

***************Ending Page***************


***************Beginning Page***************
***************page number:24**************
Hence we have the following algorithm to ﬁnd a maximum cardinality
matching in G:
M <— I5;
repeat
ﬁnd 'P a maximal set of vertex-disjoint minimum augmenting paths
w.r.t. M;
for (P G 'P) do
M <- M AP;
end for
until (7D = z)
The time complexity of the above algorithm is (Oh/HA), where A is the
time needed for ﬁnding the set 73.
In the case of bipartite graphs, Hopcroft and Karp shown that this can
be obtained in 0(n + m) time and therefore the entire algorithm has
0(mﬂ) running time.
—

***************Ending Page***************

***************Beginning Page***************
***************page number:25**************
This result has been extended to arbitrary graphs by Micali and Vazirani
(1980) using an elaborate data structure to maintain the labels associ-
ated to vertices in order to construct minimum augmenting paths.
Consider the case of bipartite graphs: G : (S, T; E) and M G Mg.
Starting from one 0f the classes, say S, we consider the set of initial
extremities of augmenting paths S O E (M ). From each such vertex we
start, in parallel, the construction of alternating paths in a bfs manner.
The ﬁrst augmenting path obtained stop the construction, giving the
minimum length of an augmenting path. The set 73’ is obtained using
the labels and the adjacency lists in @(n + m)
Details are omitted, an example is given on the next slide. ,
—

***************Ending Page***************

***************Beginning Page***************
***************page number:26**************
—
§¥§§

***************Ending Page***************

***************Beginning Page***************
***************page number:27**************
A ﬂow network (transportation network) with source s and sink t is a
tuple R : (G, s, t, c) where:
o G I (V, E) is a digraph,
o s,t € V; s 51$ t; (13(5) > 0; d§(t) > 0,
o 01E —> Rr; 6(6) is the capacity of the arc e.
We will suppose that V : {1,2,...,n} (n E N*) and \E\ : m. We
extend the function c to c : V >< V —> R+ by
.t _ c(z'j), ifz'j E E
C((ZJD _ { 0, otherwise
and will denote c((i,j)) : cZ-j.
—

***************Ending Page***************

***************Beginning Page***************
***************page number:28**************
Flow
A inR:(G,s,t,c)isafunctionz:V>< V—>Rs. t.
(ii) Z $14‘ — Z 115]‘: O, Vi E V \ {SJ}.
je V je v

o If ij E E then $Z'j is referred as the .

o Constraints (i) require that

o Constraints (ii), ( ), require that

( )-
Graph Algorithms — Lecture 7 November 15, 2024 28/37

***************Ending Page***************

***************Beginning Page***************
***************page number:29**************
o Note that, by the way the function c have been extended to V >< V,
the constraints (i) implies that xi]- : O whenever ij 55 E. Hence, a
ﬂow is in fact a function on E. We prefer its extension on V >< V
to simplify the notations.

Let :1: be a ﬂow in R : (G,s, t, c). If we add all constraints (ii) (for
'iG V\{s,t}) we get
0: 2 (Zn-2%) = Z 2 2 Z w
iisgf jEV jEV iisﬂﬁjyési iisnfjisgf
+ Z $$¢+ Z $ti— Z $¢$— Z wit:
iisi iisgf iispﬁ iisi
—

***************Ending Page***************

***************Beginning Page***************
***************page number:30**************
I (Z $51‘ — Z $13) — (Z 1% — Z 33m‘),
iev rev iEV rev
The value of the ﬂow a: in R : (G, s, t, c) is
'u(:r:) : Z wit — Z anti.

16V ieV
In words, 'u(a:) is the net ﬂow reaching the sink of the network or, as we
proved above, the net ﬂow leaving the source of the network.
Note that in any network R : (G, s, t, c) there is a flow: 1:0, the null
flow, with x3- : 0, Vij G E and 11(530): 0.

—

***************Ending Page***************


***************Beginning Page***************
***************page number:31**************
Maximum Flow Problem: Given R = (G, s, t, c) a ﬂow network, ﬁnd a
flow of maximum value.
The maximum ﬁow problem can be viewed as an LP problem:
max 'u

Z$j¢— 212g :0,\V/'1;755,t

j€ V j E V

Z$js—2$sj:—’ll

je v je v

Z (Bjt — Z 2315]‘ I 'U

je v j e v

0 g (Bij g Cij,\V/'I;j E E
However, we will consider a direct combinatorial approach which is im-
portant when some integrality constraints are imposed to the variables
(ﬂows on the directed edges). /

—

***************Ending Page***************

***************Beginning Page***************
***************page number:32**************
Exercise 1. Let X be aﬁnite set, X1, . . . , Xn Q X, and d1, d2, . . . dn E N.
Prove that there are n disjoint subsets YZ' Q Xi, |Y¢| : di, Vi : Lin if
and only if

‘U%>Z%

1'61 zEI
for all I Q {1,...,'n,}.
Exercise 2. Every p-regular bipartite graph has a perfect matching (p 2
1).
Exercise 3. Let G : (S, T; E) a bipartite graph. Use Hall’s theorem to
prove that, for every 0 g k: g |S|, G has a matching of cardinality at
least \Sl — k; if and only if ‘NG(A)I Z [Al — k, VA Q S.

—

***************Ending Page***************

***************Beginning Page***************
***************page number:33**************
Exercise 4. Using Tutte’s theorem show that a 2-edge connected, 3-
regular graph has perfect matching.
Exercise 5. Let G : (V,E) a graph. A subset A Q V is called m-
independent if G has a matching M which saturates all the vertices from
A. Show that, for any two m-z'ndependent sets A and B with |A| < |B|,
we can ﬁnd a vertex b E B \ A such that A U {b} is also m-z'ndependent
(:> all maximal m-independent sets have the same cardinality). ,
Exercise 6. Let T : (V, E) a rooted tree; we denote by r its root and
by parent('u) the direct ancestor of any 'u 75 r. A matching M of T is
called proper if any exposed vertex 'u 5i r has a brother w such that
wparent('u) € M.
(a) Show that any proper matching is a maximum cardinality matching.
(b) Devise an algorithm for ﬁnding a proper matching in 0(n) time
complexity. ,
—

***************Ending Page***************

***************Beginning Page***************
***************page number:34**************
Exercise 7. Let G : (V, E) be a p-regular bipartite graph (p 2 1) and
consider the following algorithm
for (e E E) do
a(e) <— 1;
end for
E+<—{e€E : a(e)>0};
While (GJr : (V, E+) contains a cycle C) do
let C : M1 U M2, Where M1 and M2 are matchings with a(M1) 2 a(M2);
// for any F Q E, a(F) : Z (1(6);
for (e€E(C)) do eEF
if (e E M1) then
61(6) + +;
else
a(6) — —;
end if
end for
E+P{6EE : a(e)>0};
end while
return E+'

***************Ending Page***************

***************Beginning Page***************
***************page number:35**************
Exercise 7. (cont'd) Let f(E+) : Z a2(e). Prove that

(a) after each while iteration f (EﬁFis an integer number and increases
with at least ‘Cl;

(b) after each While iteration Z a(u'u) : p, for every u E V;

inE+

(c) the algorithm doesn’t end as long as there are edges e with 0 <
a(e) < p; at the end of the algorithm a(e) : p, Ve E El‘, and E+
is a perfect matching in G;

(d) the While loop ends, at the end of the algorithm f(E+) : np2/2 :
pm, and the total length of all cycles is at most pm;

(e) all the cycles can be found in (9( Z ICI) time complexity using

0 cycle

dfs traversals;

(f) the overall time complexity of the algorithm is (9(pm). .

—

***************Ending Page***************

***************Beginning Page***************
***************page number:36**************
Exercise 8. Let G : (S, T; E) be a non-null bipartite graph. Prove that
the following are equivalent:
(i) G — {:12, y} has a perfect matching, Va: 6 S,Vy G T.
(ii) G is connected and every edge of G belongs to a perfect matching.
(111)\S\:1T\,and@¢A;S,\NG(A)\>\A!- ,
Exercise 9. Let G : (V, E) be a connected graph which has a perfect
matching. Devise an (9Q V‘ + IE‘) time complexity algorithm that con-
structs a spanning tree T of G such that V(T) admits a bipartition in
two stable sets of maximum cardinality in T.
Exercise 10. Two kids play the following game on a given graph G: they
alternatively pick a new vertex 110,111,. .. such that, for every i > 0, 'ul-
is adjacent with 'UZ'_1. The player which can not choose another vertex
will loose the game. Prove that the player which starts the game has
always a winning strategy if and only if G has not a perfect matching. ,
,o

***************Ending Page***************

***************Beginning Page***************
***************page number:37**************
Exercise 11. Show that a graph G contains a matching of cardinality p
if and only if q(G — S) é |S| + |G| — 2p, VS Q V(G).
Exercise 12. Let T : (V, E) be a tree.
(a) Prove that T has at most one perfect matching.
(a) Show that T has a perfect matching if and only if, for any 'u E V,
T — v contains exactly one odd order tree.
—

***************Ending Page***************

