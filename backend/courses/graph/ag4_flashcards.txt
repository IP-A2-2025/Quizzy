[{content={parts=[{text=
--FlashCardSeparator--
Single
--InteriorSeparator--
What type of graph is a 'dag'?
--InteriorSeparator--
A directed acyclic graph, meaning it is a digraph without cycles.
--InteriorSeparator--
easy
--InteriorSeparator--
3
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following are equivalent to the existence of a topological ordering in a digraph G = (V, E)?
--InteriorSeparator--
(right) G is a digraph without cycles
(wrong) G contains cycles
(right) G has no cycles
(wrong) G is undirected
--InteriorSeparator--
medium
--InteriorSeparator--
3
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In the context of topological ordering, what does `Ord[u]` represent?
--InteriorSeparator--
The ordering number of the vertex u.
--InteriorSeparator--
easy
--InteriorSeparator--
3
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the contradiction that arises when attempting to apply a topological ordering to a cyclic graph?
--InteriorSeparator--
For a cycle (u1, u2, ..., uk, u1), the topological ordering would imply ord[u1] < ord[u2] < ... < ord[uk] < ord[u1], which is a contradiction.
--InteriorSeparator--
hard
--InteriorSeparator--
4
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the output of the topological sort algorithm if the input graph is *not* a DAG?
--InteriorSeparator--
"no"
--InteriorSeparator--
easy
--InteriorSeparator--
5
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What data structures can be used for S in the topological sort algorithm?
--InteriorSeparator--
(right) stack
(right) queue
(wrong) linked list
(wrong) binary tree
--InteriorSeparator--
medium
--InteriorSeparator--
6
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the time complexity of the topological sorting algorithm, and what factors contribute to it?
--InteriorSeparator--
O(n + m), where n is the number of vertices and m is the number of edges. It stems from constructing the array of in-degrees and iterating through the adjacency lists.
--InteriorSeparator--
hard
--InteriorSeparator--
6
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In the shortest path problem P2, what is being minimized?
--InteriorSeparator--
The sum of the costs along the path from a source vertex 's' to a target vertex 'i'.
--InteriorSeparator--
easy
--InteriorSeparator--
7
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
How can problem P2 (shortest paths in DAGs) be solved, and what is the time complexity using adjacency lists?
--InteriorSeparator--
By topological sorting followed by substitution, achieving a time complexity of O(n + m) when using adjacency lists.
--InteriorSeparator--
hard
--InteriorSeparator--
7
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is Property (I) in the context of shortest paths in DAGs, and why is it important?
--InteriorSeparator--
(right) Property (I) refers to the fact that there are no cycles
(wrong) Property (I) implies that all edge weights are positive
(right) allowing the system of equations to be solved by substitution
(wrong) implying that Dijktra's Algorithm must be used
--InteriorSeparator--
hard
--InteriorSeparator--
7
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What condition on edge costs is required to guarantee correctness of Dijkstra’s algorithm?
--InteriorSeparator--
Non-negative edge costs (a(e) >= 0 for all e in E).
--InteriorSeparator--
easy
--InteriorSeparator--
8
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What invariant (D) does Dijkstra's algorithm maintain?
--InteriorSeparator--
(right) S ⊆ V and ∀i ∈ S, ui = min{a(Ps,i) : Ps,i ∈ Ps,i}
(wrong) S = V
(right) ∀i ∈ V \ S, ui = min{a(Ps,i) : Ps,i ∈ Ps,i, ∀(Ps,i) \ S = {i}}
(wrong) ∀i ∈ V \ S, ui = max{a(Ps,i) : Ps,i ∈ Ps,i, ∀(Ps,i) \ S = {i}}
--InteriorSeparator--
hard
--InteriorSeparator--
8
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In Dijkstra's algorithm, what is the purpose of the 'before' array?
--InteriorSeparator--
To store the predecessor of each vertex on the shortest path from the source.
--InteriorSeparator--
medium
--InteriorSeparator--
9
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Why is the for loop necessary in Dijkstra's algorithm after adding a vertex to S?
--InteriorSeparator--
To fulfill the second part of invariant (D), ensuring that the estimated shortest path distances to vertices outside S are updated based on the newly added vertex.
--InteriorSeparator--
hard
--InteriorSeparator--
11
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is a consistent estimator, and what properties does it satisfy?
--InteriorSeparator--
(right) A function g : V -> R+ satisfying: ∀i ∈ V, ui + g(i) ≥ min{a(Pst) : Pst ∈ Pst and i ∈ V(Pst)}
(wrong) A function g : V -> R-
(right) ∀ij ∈ E, g(i) ≤ aij + g(j)
(wrong) ∀ij ∈ E, g(i) >= aij + g(j)
--InteriorSeparator--
hard
--InteriorSeparator--
15
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What family of algorithms does the use of a consistent estimator in Dijkstra's algorithm belong to?
--InteriorSeparator--
The A* family of algorithms.
--InteriorSeparator--
easy
--InteriorSeparator--
16
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
When can Dijkstra's algorithm fail, and what condition must be met to use Bellman-Ford-Moore instead?
--InteriorSeparator--
Dijkstra's algorithm can fail with negative edge costs. Bellman-Ford-Moore requires that there are no negative cost cycles in the graph (a(C) >= 0 for all cycles C in G).
--InteriorSeparator--
hard
--InteriorSeparator--
17
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What does uik represent in the Bellman-Ford-Moore algorithm?
--InteriorSeparator--
(right) min{a(P) : P ∈ Ps,i, |E(P)| ≤ k}
(wrong) max{a(P) : P ∈ Ps,i, |E(P)| ≤ k}
(wrong) length of shortest path from s to i
--InteriorSeparator--
medium
--InteriorSeparator--
18
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the time complexity of the basic Bellman-Ford-Moore algorithm?
--InteriorSeparator--
O(n^3)
--InteriorSeparator--
medium
--InteriorSeparator--
21
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
How can Bellman-Ford-Moore be used to detect negative cost cycles, and what is the complexity?
--InteriorSeparator--
After the main loops, if there exists a vertex 'i' such that ui,n > minj(uj,n + aji), then a negative cost cycle exists. This test adds O(n^3) time complexity.
--InteriorSeparator--
hard
--InteriorSeparator--
22
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What does uij represent in the all-pairs shortest path problem (P3)?
--InteriorSeparator--
(right) The minimum cost of any path from vertex i to vertex j.
(wrong) The maximum cost of any path from vertex i to vertex j.
(wrong) The number of edges in the shortest path from i to j.
--InteriorSeparator--
medium
--InteriorSeparator--
23
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
If Dijkstra's algorithm is iterated to solve P3, what is the overall time complexity? (Assuming nonnegative costs)
--InteriorSeparator--
O(n^3)
--InteriorSeparator--
medium
--InteriorSeparator--
24
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Explain the purpose of reweighting edges in Johnson's algorithm.
--InteriorSeparator--
To transform a graph with negative edge weights (but no negative cycles) into one with non-negative edge weights, allowing Dijkstra's algorithm to be used.
--InteriorSeparator--
hard
--InteriorSeparator--
24
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is Johnson's algorithm used for?
--InteriorSeparator--
(right) To find the shortest paths between all pairs of vertices in a graph that may contain negative edges but not negative cycles
(wrong) To find the shortest path from one vertex to another in a graph with non-negative edges
(wrong) To find negative cycles in a graph
--InteriorSeparator--
medium
--InteriorSeparator--
24
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the time complexity of Floyd-Warshall algorithm?
--InteriorSeparator--
O(n^3)
--InteriorSeparator--
medium
--InteriorSeparator--
29
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Explain how Floyd-Warshall can detect negative cost cycles.
--InteriorSeparator--
If, after the algorithm completes, aii < 0 for any vertex i, then a negative cost cycle exists passing through vertex i.
--InteriorSeparator--
hard
--InteriorSeparator--
29
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What does U^k_{ij} represent in the Floyd-Warshall algorithm?
--InteriorSeparator--
(right) The minimum cost of a path from i to j with intermediate vertices in {1, 2, ..., k-1}.
(wrong) The maximum cost of a path from i to j with intermediate vertices in {1, 2, ..., k-1}.
(wrong) The minimum cost of a path from i to j with intermediate vertices in {k, k+1, ..., n}.
--InteriorSeparator--
hard
--InteriorSeparator--
26
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the role of the matrix Before in the context of the Floyd-Warshall Algorithm?
--InteriorSeparator--
Store the vertex before j on the shortest path from i to j
--InteriorSeparator--
medium
--InteriorSeparator--
28
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Given matrices B and C of size n x n, how is B ⊗ C defined, and what is its significance?
--InteriorSeparator--
B ⊗ C = P, where P is a matrix with pij = min_k(bik + ckj). This operation is associative and allows Bellman-Ford-Moore iterations to be expressed in matrix form for faster computation.
--InteriorSeparator--
hard
--InteriorSeparator--
32
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Assuming condition (1') is fulfilled, what is U^1 equal to?
--InteriorSeparator--
(right) A
(wrong) infinity
(wrong) 0
--InteriorSeparator--
medium
--InteriorSeparator--
32
--FlashCardSeparator--
}], role=model}, finishReason=STOP, avgLogprobs=-0.17821133013853094}]