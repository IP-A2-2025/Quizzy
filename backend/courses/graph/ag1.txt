***************Beginning Page***************
***************page number:1**************
(1. Groitor tr . Graph Algorithms (1. (1roitortr . Graph Algorithms (1. (1roitortr . Graph .Algorirhms
(.1. (.‘roitorrr - Graph Algorithrrrs il‘ (.1. (.1roitorrr - Graph Algor ithms (.1. (.1r0itor tr - Graph
Algorithms (1. (1r'oitor'rr - Graph Algorithms ’ (1. (Yroitortr . Graph Algorithms (1. (".r'oitortr -
Graph Algorithms “ (.1. (froitorrr - Graph \lgorirhrrrs' (.1. (.1roirorrr — Graph Algorithms :1‘ (.1. (froitorrr
Graph Algorithms (1. (1roitortr . Graph .Algor irhms ‘ (1. Groiror tr . Graph Algorithms (1. (1roitortr
- Graph Algorithms (.1. (.1roitorrr - Graph Algorithrrrs it‘ (.1. (.1roirorrr - Graph Algorithms (.1.
('Iroitortr - Graph Algorithms (1'. (1roitortr . Graph Algorithms (1. (1roitortr - Graph Algorithms‘ Z‘:
(.1. (.froitortr - Graph Algorithms “ (.1. (.1roitorrr - Graph \lgorirhrrrs (.1. (.froirorrr — Graph Algorithrrrs
(1. (1roitortr - Graph Algorithms Z" (I. (1roitortr - Graph Algorithms (1. (1roitortr - Graph
Algorithms “ (1. (“roitorrr . Graph \l@éllll6be§f @ro'grﬂgé'iraph \lgorithms (1. (“roitorrr .
Graph Algorithms (1. (.roitortr - Graph Algorithms “' (.1. (Iroitorrr - Graph Algorithms (1. (.roitortr
. Graph \lgor'ithms (1. ('Ir'oitorrr . Graph Algor ithms A (1. (1|oiror tr . Graph ‘\lgor ithms (1.
(froitortr ~ Graph Algorithms (.Q. (Qr'oitor'rr ~ Graph Algorithms (.1. (.froitortr ~ (.lraplr Algorithms 2*
(1. ('Iroitor tr . Graph Algorithms (1. (1roitortr . Graph .Algor irhms (1. Groitor tr . Graph Algorithms
(.1. (froitor'rr - Graph Algoritlrrrrs *1 (.1. (.1roitorrr - Graph Algor ithms (.1. (.1r0itor tr - (.lraplr
Algorithms (1. (1roitortr - Graph Algorithms ’ (1. Groitortr . Graph Algorithms (1. ("Iroitortr -
Graph Algorithms “ (.1. (.1roitorrr - Graph \lgrirrirhrrrs' (.1. (.Irriritorrr — Graph Algorithms “ (.1. (froitorrr
. Graph Algorithms (1. (1roitortr - Graph Algorithms Z" (I. (1roitortr . Graph Algorithms
—

***************Ending Page***************

***************Beginning Page***************
***************page number:2**************
a Course description
0 Course information
a Graph Theory applications
a Graph Theory vocabulary
o Graph deﬁnition
o Stable sets
o Matchings
o Graph colorings
o Graph isomorphism
a Exercises for the 2nd seminar (october 7-11 week)
—

***************Ending Page***************

***************Beginning Page***************
***************page number:3**************
Course page:
https : //edu . info . uaic . ro/algoritmica-grafuri J
Objectives:
The lectures Will cover basic topics in Algorithmic Graph Theory. Accu-
mulated knowledge will be applied in designing efﬁcient algorithms for
combinatorial optimization problems.
Lectures: E. F. Olariu (halfyear A and E), C. Frasinaru (halfyear B).

0 The lecture notes Will be posted as .pdf ﬁles before each lecture.

o Each of these lectures notes will contain the exercises for the corre-

sponding seminars.
—

***************Ending Page***************

***************Beginning Page***************
***************page number:4**************
Seminars: E. F. Olariu, A. C. Frasinaru, P. Diac, E. Curca, and A. Ionita

a All lectures and seminars will take place onsite.

o Each seminar will contain a short test about past lectures and sem-
inars knowledge.

o During the seminars we will discuss solutions to proposed exercises
(which can be found in the corresponding lecture ﬁle).

o Each seminar debates three or four exercises (posted in advance in
the lecture notes) in order to deepen the subjects introduced in the
lectures.

o Students are encouraged to ﬁnd and present original solutions to
these problems. ,

—

***************Ending Page***************

***************Beginning Page***************
***************page number:5**************
Scores:

o Seminar: tests (max. 2 >< 11 : 22p) and activitya (max. 20pb) -
max. 42 points.

o Homeworks: three exercise sheets, 16p each - max. 48 points. (The
homeworks can be solved in teams of at most four students, each
being leader/ responsible for at least one problem from the set.)

o Written ﬁnal test (compulsory): six exercises (10p each) +10p the
basis gives a maximum of 70 points.

From a maximum of 90p for seminar activity and homeworks the thresh-
old for taking the written ﬁnal test is of 30 points.

From a maximum of 160p the threshold for promovating the course is
of 80 points.

“Two correct and pertinent answers = 1 point.

bAproximatively. J

—

***************Ending Page***************

***************Beginning Page***************
***************page number:6**************
Final grading: the scores Will be transformed in grades like follows

o grade 5 for a score in the interval [80, 85];

0 grade 6 for a score in the interval (85, 100];

o grade 7 for a score in the interval (100, 115];

o grade 8 for a score in the interval (115, 130];

a grade 9 for a score in the interval (130, 145];

o grade 10 for a score in the interval (145, 160]. J
—

***************Ending Page***************

***************Beginning Page***************
***************page number:7**************
Grading:

o Seminar. Each test is a question whose not too long answer needs
a justiﬁcation.

o Homeworks. The solutions can be worked in teams of up to four
students (each being leader/responsible for at least one problem
from the corresponding set). Solutions will be written in LaTeX
or Word (Write) and electronically sent (both the source and the
corresponding .pdf). 2 points bonus for each homework written in
LaTeX. The solution will be checked using an anti-plagiarism tool,
the grades of the students which will copy will be penalised (for
each copied problem the student will receive —2 points only).

o Written ﬁnal test (compulsory). The students cannot use course
related materials during the test. .

—

***************Ending Page***************

***************Beginning Page***************
***************page number:8**************
Outline of the course:
o Vocabulary of Graph Theory.
o Path problems: graph traversal, shortest-paths, connectivity.
o Minimum spanning trees: union-ﬁnd, amortized complexity.
o Matching theory.
o Flows.
o Polynomial time reductions between decision problems on graphs.
o Approaching NP-diﬁ'icult problems.
o Planar graphs.
o Tree-decomposition. /
—

***************Ending Page***************

***************Beginning Page***************
***************page number:9**************
MMMWMMM ammpmﬂs mmmmmhmm HQMMMthmmmmﬂm
O
Q
I O
0 l‘
a}; 1 wig; 151:‘; 75:11‘%_ ‘fiftéiilri Ci»?- 3);‘:ch 5. on “en 1f I'v-LQE
'7 V V a ami rien s" :lJF/w ‘ ,1 i 77,1;51’? \ , *7 \' ‘ r (1»: M“
I ﬂ 777%:me ,F, I81fvﬂd‘ \ 74/, "if, V V‘, \V
, “ghmq ‘ o 7/ .
\ , xii/)4’? xii-*9 ; L ‘ ,¢/// 15%;}? ‘ V "MLSSi "Pris"
*7 ,kwﬁﬁ 1, , * ' m
" I ’. 4"‘ #541“ 'Y'ﬂe: " '31:’? 1 q ' r- ‘ 1/ ’
V .1“? t 3‘ #3,“:1/ WorkCollea ues' < ,
, P ‘4L ~ 1,
o v >’,»,~-.- =5 -‘ > N
o ‘ =57‘;- V \ \ . exer...
. 4/» F< ' Fnin"
MWM:
mm mm
——————
EMMMM 5m
Emma! wuh NndeXL {Minimum mdzlzhx mm)
F1gure: Facebook/Tw1tter

***************Ending Page***************

***************Beginning Page***************
***************page number:10**************
Graph Theory applications
I‘, it?’ ' '
A, ' .xmeli VJ I‘
Figure: A Facebook network of a few users
Graph Algorithms — Lecture 1 October 4, 2024 10/49

***************Ending Page***************


***************Beginning Page***************
***************page number:11**************
Graphs are used for analyzing social/news networks (like Facebook or
Twitter) in order to ﬁnd characteristics like:
o the level of connectivity, the density;
o the inﬂuence of users within the network (centrality, the social net-
working potential);
o the level of segmentation: measuring the clusterization;
o robustness or structural stability of the network.
The network analysis is then used for
o data mining and aggregation, marketing;
o behavior analysis and network prediction;
o intelligence and security analysis (surveillance of terrorism and or-
ganized crime) etc.
—

***************Ending Page***************

***************Beginning Page***************
***************page number:12**************
Apart from social network study which is a hot topic nowadays there
are a lot of other applications for graph algorithms:

o Minimum spanning tree: for efficiently connecting communicating
points (e. g. in IT&,C);

0 Eulerian paths and cycles: The chinese postman problem - ﬁnd a
shortest closed path / cycle that visits once every edge of a graph (for
street cleaning, mail/services/packages delivery, garbage collection
etc);

o Hamiltonian paths and cycles: efliciently visiting once a number
of points (in a city, a country etc); ‘Travelling salesman problem,
Vehicle routing problem;

—

***************Ending Page***************

***************Beginning Page***************
***************page number:13**************
o Graph colorings: coloring maps (faces of planar graphs), lec-
tures/seminars/timetabling, exam scheduling for university depart-
ments, mobile radio frequency allocation, memory register alloca-
tion. gamma‘

; Pimrdie
Maggi“; Auuerqne-Rhﬁnevﬂpes
imm Mkomiﬂon I‘ EQ'JMW'A'P“
Ourse
Figure: France regions from 2016
—

***************Ending Page***************

***************Beginning Page***************
***************page number:14**************
o Matchings: assignment problems, in computational chemistry and
mathematical chemistry studies on organic materials.
-
Q Q
'
g . Q
a 6 GD a
Q Q Q 6 Q
Q a .1‘ e n
GirlB
Matching not stable if:
1. GuyAand GirlBare not matched
i Guy A likes Girl B more than his current match
_
u-
Figure: Gale Shapley algorithm
—

***************Ending Page***************

***************Beginning Page***************
***************page number:15**************
o Stable matchings: assignment resident physicians to hospitals, the
admission procedure of higher education institutions, identifying
optimal assignment of kidney (in transplantations), student-project
allocation problem etc.

o Maximum ﬂow: ﬁnd the charging level in transportation networks
for improving the traﬁ'ic parameters, image reconstruction from X-
Rays projections (in tomography), scheduling on parallel processors.

—

***************Ending Page***************

***************Beginning Page***************
***************page number:16**************
Applications in Computer Science

o In database management, graph database uses graph-structure data
for storing and querying.

o Graph rewriting systems are used in software veriﬁcation.

o Quantum computation.

o Modeling the web documents as graphs and clustering of web doc-
uments.

o Approximation of data and data compression.

o Modeling the sensor network as graphs (using Voronoi diagrams).

o Graph Neural Networks in AI.

o And a lot more.

—

***************Ending Page***************

***************Beginning Page***************
***************page number:17**************
For a given ﬁnite set X:
o |X|: card(X) GNis the cardinality of X;
o If|X]:k;,thenXisak;-set;
o 2X :73(X)isthepowerset ofX: 2X :{Yz Y Q X}, |2X| 22W;
X X X
~ (k) =1>k<X):{Y: YQX,1Y\=k}, Mk)‘: Ck‘)-
—

***************Ending Page***************

***************Beginning Page***************
***************page number:18**************
A graph 1's a pair G : (V, E), Where:
0 V : V(G) 1's a ﬁnite, non-empty set; is the set of vertices (nodes)
of G;
V G
o E : E(G) is a subset of< (2 ));1's the set ofedges of G.
|G| : |V(G)| 1's the order ofgraph G, and |E(G)| 1's the size of G.
—

***************Ending Page***************

***************Beginning Page***************
***************page number:19**************
IfG : (V,E) and e : u'u : 'uu : {u,v} E E 1's an edge ofG, then we
say that

o e connects (or links) vertices u and 'u; that

o vertices u and 'u are adjacent or u and 'u are neighbors;

o e 1's incident With u and v;

o u and v are the endpoints (extremities) of e.
Neighborhood of vertex u is NG('u,) I {'u € V(G) : u'u € E(G)}
Two edges e and f are adjacent if they share a common endpoint: |e O
f| z 1-

—

***************Ending Page***************

***************Beginning Page***************
***************page number:20**************
Let G : (V,E) be a graph and 'v 6 V.
o the degree of vertex 'u: dg(’U) : number of edges incident to 'u.
o v is an isolated vertex if dg(v) : 0; v is called pendant (or leaf) if
dg(’ll) : 1.
o an useful property:
2 dg(’ll) : ZlEI.
116V /
A graph can be represented in plane as a ﬁgure consisting of a set of
nodes (small geometric forms: points, circles, squares etc) corresponding
to its vertices and curves which connect the vertices corresponding to
the edges from the graph. /
—

***************Ending Page***************


***************Beginning Page***************
***************page number:21**************
An example:
—

***************Ending Page***************

***************Beginning Page***************
***************page number:22**************
The same graph again:
—

***************Ending Page***************

***************Beginning Page***************
***************page number:23**************
We can add labels (names, numbers etc) and colors to vertices and edges
obtaining better visual representations.
Below there are three visual representations of the same graph:
G : ({1,2,3,4},{12,13,14,23,24,34})
1 \ 4 IVE:
2 KL
—

***************Ending Page***************

***************Beginning Page***************
***************page number:24**************
Stable sets
Deﬁnition 3

(or )inG:(V,E):S§Vsuch

S
that (2) O E : Q.
In other words S Q V is a stable set of G if there is no edge between
its vertices. I
Notation
The maximum cardinality of a stable set of G is the
(or ) of G and is denoted by .
Graph Algorithms — Lecture 1 October 4I 2024 24/49

***************Ending Page***************

***************Beginning Page***************
***************page number:25**************
In the following graph (Petersen’s) we have two different stable sets of
maximum (why?) cardinality:
—

***************Ending Page***************

***************Beginning Page***************
***************page number:26**************
Stable sets: Optimization problem
P1 Input: G graph.
Output: a(G) and a Witness stable set S with |S| : a(G).
Stable sets: Decision problem
SM Instance: G graph, k: E N.
Question: Is there a stable set S in G, such thatlS| 2 k?
NP-complete (Karp, 1972).
—

***************Ending Page***************

***************Beginning Page***************
***************page number:27**************
Matchings

Deﬁnition 4

Matching (independent set of edges) in G : (V, E): M Q E such that

forall e,f€M,1'fe;éf, then eﬁfzﬁ.

In more words, M Q E is a matching if each pair of its edges share no

endpoint. i

Notation

The maximum cardinality of a matching in G is called the matching

number (edge-independence number) of G and is denoted by 1/(G).
Graph Algorithms — Lecture 1 October 4, 2024 27/49

***************Ending Page***************

***************Beginning Page***************
***************page number:28**************
For the following graph two matchings are depicted With red and green
- the second being of maximum (why?) cardinality:
—

***************Ending Page***************

***************Beginning Page***************
***************page number:29**************
Maximum matching: Optimization problem
P2 Input: G graph.
Output: I/(G) and a Witness matching M with |M| : 1/(G).
Edmonds (1965) showed that P2 E P.
The problems P1 and P2 are similar: in both we are required to ﬁnd a
member of maximum cardinality of a family of sets concerning a given
graph. What makes the difference?
—

***************Ending Page***************

***************Beginning Page***************
***************page number:30**************
Graph colorings
Deﬁnition 5
Forp€N*,a ofthegraphG:(V,E)isamapc:V—>
{1, . . . ,p} such that c(u) 5i c(v) for each uv 6 E.
It is worthnoting that the set of all vertices having the same given color
is a stable set (it is called also a ) Since adjacent vertices
have different colors, a p-coloring is a partition of V with at most p
stable sets (or ).
Notation
The of the graph G is the least value of p such that
G has a p-coloring. This parameter is denoted by x(G). (x(G) g 1G‘
- Why?)

Graph Algorithms — Lecture 1 October 4, 2024 30/49

***************Ending Page***************


***************Beginning Page***************
***************page number:31**************
For the following graph we depicted two colorings (x(G) : 3!)
—

***************Ending Page***************

***************Beginning Page***************
***************page number:32**************
Vertex coloring: Optimization problem

P3 Input: G graph.

Ouput: 9((G) and a Witness x(G)-coloring.
Vertex coloring: Decision problem
COL Instance: G graph,p 6 N.
Question: Is there a p-coloring of G?
NP-complete for p 2 3 (Karp, 1972).
—

***************Ending Page***************

***************Beginning Page***************
***************page number:33**************
Graph colorings
Deﬁnition 6
For p E N*, a of the graph G : (V, E) is a map
c : E —> {1,...,p} such that c(e) 51$ c(f)fora11e,f E E With|eﬁf| :1.
We can note that in a p-edge coloring a set of edges With the same color
is a matching. Hence, a p-edge coloring is a partition of E with at most
p matchings.
Notation

of the graph G: the least value of p such that G has a
p-edge coloring. This parameter is denoted by x’(G). (x’(G) g |E(G)|
- Why?)

Graph Algorithms — Lecture 1 October 4, 2024 33/49

***************Ending Page***************

***************Beginning Page***************
***************page number:34**************
For the following graph we depicted an edge coloring (x’ (G) = 3!)
—

***************Ending Page***************

***************Beginning Page***************
***************page number:35**************
Edge coloring: Optimization problem
P3 Input: G graph.
Ouput: x’(G) and a Witness x’(G)-coloring.
Edge coloring: Decision problem
COL Instance: G graph,p 6 N.
Question: Is there a p-edge coloring of G?
NP-complete for p 2 3 (Holyer, 1984).
—

***************Ending Page***************

***************Beginning Page***************
***************page number:36**************
Graph isomorphism
Deﬁnition 7
Two graphs G1 : (V1, E1) and G2 : (V2, E2) are if there is
a bijection <p : V1 —> V2 such that for every two vertices u1,'01 G V1,
ul and '01 are adjacent 1'n G1 (i. e., ul'ul G E1) if and only if <p(u1) and
<p('u1) are adjacent in G2 (1'. e., <p(u1)<p('u1) € E2).
In other words two graphs are isomorphic if there is a bijection between
their sets of vertices which induces a bijection between their sets of
edges.
Notation
G1 g G2.

Graph Algorithms — Lecture 1 October 4, 2024 36/49

***************Ending Page***************

***************Beginning Page***************
***************page number:37**************
The graphs from below are isomorphic.
a b
._ 1
—

***************Ending Page***************

***************Beginning Page***************
***************page number:38**************
Isomorphism testing: Decision problem
ISO Input: graphs G1 and G2.
Ouput: are G1 and G2 isomorphic?
Neither known to be in P nor NP-complete.
There is a quasipolynomial time algorithm (i. e., running in 20((10g ")c)
for some c > 0, Babai, 2015).
r r r r r r J
—

***************Ending Page***************

***************Beginning Page***************
***************page number:39**************
The following two graphs have the same order, size and degree sequence,
but they are not isomorphic (why?)
—

***************Ending Page***************

***************Beginning Page***************
***************page number:40**************
Exercise 1. The following graphs are isomorphic?
Exercise 2. The following graphs are isomorphic?
—

***************Ending Page***************


***************Beginning Page***************
***************page number:41**************
Exerci'giul 3. Find the chromatic number of the following graphs:
—

***************Ending Page***************

***************Beginning Page***************
***************page number:42**************
Exercitiul 4. Find the stability number of the following graphs
Z/ I t
Exercise 5. Let P(n) z" In any graph with at least n vertices there
are three distinct vertices which are pairwise adjacent or pairwise non-
adjacent.II Prove that 6 is the least value of n 6 N, n 2 3 for which P(n)
is true.
—

***************Ending Page***************

***************Beginning Page***************
***************page number:43**************
Exercise 6.

(a) Is there a graph with degrees 2, 3, 3, 3, 4, 4, 5, 6, 6?

(b) Is there a bipartite graph with degrees

3, 3, 3, 3, 3, 5, 6, 6, 6, 6, 6, 6, 6, 6?

(c) Is there a graph with degrees 1, 1, 3, 3, 3, 3, 5, 6, 8, 9?

(d) Is there a graph with degrees 1, 2, 2, 3, 3, 3, 6?

(e) Is there a graph with degrees 2, 2, 3, 3, 3, 3, 6, 6? .
—

***************Ending Page***************

***************Beginning Page***************
***************page number:44**************
Exercise 7. Two students, L(azy) and T(hinky), must ﬁnd a particu-
lar path between two given vertices in a sparse graph G: |E(G)| :
O(]V(G)\). L judge that, since the graph is sparse, the number of
paths between the two vertices is small, and a lazy solution is to gen-
erate (backtracking) all these paths and than retain the wanted one.
T does not agree and gives the following example: let Hn : K2 >< Pn
(n 2 1); add to Hn two new vertices a: and y each joined by two edges
with one of the two pairs of adjacent vertices in Hn of degree 2.

The obtained graph, Gn, is sparse but the number of paths between ac
and y is big. Explain to L this example by drawing Gn, showing its
sparsity, and ﬁnding the number of paths between a: and y.

—

***************Ending Page***************

***************Beginning Page***************
***************page number:45**************
Exercise 8. An examination session must be scheduled based on the

following input speciﬁcations: the set of exams is known; each student

sends the list of exams to which (s)he is registered; each exam take

place with all students registered to it (written exam); each student can

participate to at most one exam in the same day.

Construct a graph in order to answer the following questions (by deter-

mining appropriate parameters):

(a) What is the maximum number of daily exams?

(b) What is the minimum number of days for the examination session?
—

***************Ending Page***************

***************Beginning Page***************
***************page number:46**************
Exercise 8’. (exercise 8 cont’d) A smart and skilled programmer is won-
dering if the two NP-hard problems in the above exercise can be solved
in polynomial time since the graph constructed seems to belong to a
very special class of graphs.

(a) Prove that for any graph, G, there is an input for the scheduling

problem above such that the graph constructed is G.

The programmer suggests the following "greedy approachII to solve the
second question in exercise 8: starting with day 1, a maximum number
of exams are scheduled (from the set of exams not scheduled) daily, until
all exams are scheduled.

b) Show that this greedy strategy can fail, by giving a counterexample.

—

***************Ending Page***************

***************Beginning Page***************
***************page number:47**************
Exercise 9. A compiler optimization is the register allocation technique:

the most used variables are kept in the fast processor registers in order

to have them there at the moment when the compiler needs them (for

certain operations made by CPU).

Design a graph that - by using its appropiate parameters - will answer

to the following questions:

(a) What is the maximum number of variables which are not needed at

the same time?

(b) What is the minimum number of registries needed?

Hint: We have two kind of objects at hand: variables (with their values)

and CPU operations (or operators) which use one or more variables. ,
—

***************Ending Page***************

***************Beginning Page***************
***************page number:48**************
Exercise 9’. (exercise 9 cont’d) A student is wondering if the above
questions (which correspond to NP-hard problems) can be answered by
polynomial time algorithms since the graph constructed seems to belong
to a very special class of graphs.

(a) Prove that for any graph G there is an input for the registry allo-

cation problem such that the resulted graph is G.

The student suggests the following “greedy approach" to answer the
second question in exercise 9: starting with the ﬁrst step, allocate as
many as possible variables to one new free register in each step, until
there are no more variables.

(b) Show that this greedy approach fails, by giving a counterexample.

—

***************Ending Page***************

***************Beginning Page***************
***************page number:49**************
Exercise 10. G is called self-complementary graph if G and its com-
plement, G, are isomorphic (G E G).
(a) Show that a self-complementary graph is connected and {GI E 0 or
1 mod 4.
(b) Find all self-complementary graphs with at most 7 vertices.
(c) Show that, for every graph G, it exists an self-complementary graph
H, such that G is an induced subgraph in H, /
—

***************Ending Page***************

