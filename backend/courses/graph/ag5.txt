***************Beginning Page***************
***************page number:1**************
(1. Groitor rr . Graph >\lgorithms (1. (1roirorrr . Graph >\lgorirhms (1. (1roirorrr . Graph .'\lgorirhms
(.1. (.‘roitorrr - Graph Algorirhrrrs il‘ (.1. (.1roirorrr - Graph Algor ithms (.1. (.1r0itor tr - Graph
Algorithms (1. (1r'oiior'rr - Graph Algorithms ’ (1. (Yroitorrr . Graph Algorithms (1. (".r'oirorrr -
Graph Algorithrrrs “ (.1. (froitorrr - Graph \lgorirhrrrs' (.1. (.1roirorrr — Graph Algorithrrrs :1‘ (.1. (froitorrr
Graph >\lgorithms (1. (1roirorrr . Graph Algor irhms ‘ (1. Groiror rr . Graph >\lgorirhms (1. (1roirorrr
- Graph Algorithms (.1. (.1roitorrr - Graph Algorithrrrs sl‘ (.1. (.1roirorrr - Graph Algorithms (.1.
('Iroiroru - Graph Algorithms (1'. (1roirorrr . Graph .-\lgrn'ithm.s (1. (1roitoru - Graph Algorithms‘ Z‘:
(.1. (.froitortr - Graph Algorithrris “ (.1. (.1roitorrr - Graph \lgorirhrrrs (.1. (.froirorrr — Graph Algorithrrrs
(1. (1roitorrr - Graph Algorithms Z" (I. (1roirorrr - Graph Algorithms (1. (1roitorrr - Graph
Algorithms “ (1. (“roirorrr . Graph \ ‘t " ' '1 (I oir ‘ "raph \lgorithms (1. (“roirorrr .
Graph Algorithms (1. (.roirorrr - Glgrgllisggibtﬁrrrsljﬁgggigrorrr - Graph Algorithms (1. (.roirorrr
. Graph \lgor'ithms (1. ('Ir'oitorrr . Graph Algor irhms l (1. (1|oiror tr . Graph ‘\lgor ithms (1.
(froiroru ~ Graph Algorithms (.Q. (Qr'oiror'rr ~ Graph Algorithms (.1. (.froitoru ~ Graph Algorithms 2*
(1. ('Iroitor rr . Graph >\lgorithms (1. (1roirorrr . Graph Algor irhms (1. Groitor rr . Graph >\lgorithms
(.1. (froitor'rr - Graph Algoritlrrrrs *1 (.1. (.1roirorrr - Graph Algor ithms (.1. (.1r0itor tr - (.lraplr
>\lgorithms (1. (1roirorrr - Graph .'\lgorirhms ’ (1. Groirorrr . Graph >\lgorithm.s (1. ("Iroirorrr -
Graph Algorithrrrs “ (.1. (froitorrr - Graph \lgrirrirhrrrs' (.1. (.Irririrorrr — Graph Algorithrrrs “ (.1. (froitorrr
. Graph Algorithms (1. (1roitorrr - Graph Algorithms Z" (I. (1roitorrr . Graph Algorithms
—

***************Ending Page***************

***************Beginning Page***************
***************page number:2**************
a Connectivity

o Menger’s theorem

o p-connectivity

o Konig’s theorem

o Ha11’s theorem

o Dirac’s theorem
e Trees

o Basics

0 Counting spanning trees: Kirchhoff-Trent theorem
a Exercises for the 6th seminar (november 4-8 week)
a Annex - Generating all spanning trees

—

***************Ending Page***************

***************Beginning Page***************
***************page number:3**************
Connectivity - Menger’s theorem and applications
Deﬁnition 1
Let G : (V, E) be a(d1')graph and X, Y Q V. A 1's anypath
Pin G from a vertex :z: 6 X to a vertex y E Y such that V(P) O X :
{2:} and V(P) O Y : {y}.
We denote by . Note that if
at E X O Y then the path of length 0, P : {2:}, is an XY-path.
Example
X
.(l Y
N1’
A’!
XYepaths: (Rely), (cl f,1') and (ulylyy); an YXepath: (11/1 f b)
Graph Algorithms — Lecture 5 November 1, 2024 3/45

***************Ending Page***************

***************Beginning Page***************
***************page number:4**************
a We say that the paths P1 and P2 are (vertex) disjoint if V(P1) O

o Motivated by practical problems in communication networks, and
also by the theoretical study of (di)graph connectivity, we are inter-
ested in ﬁnding a maximum cardinality set of disjoint X Y-paths.

o We denote by p(X, Y; G) the maximum number of disjoint XY-
paths in G.

o The theorem which reveals this number was established by Menger
(1927) and represents one of the fundamental results in Graph The-
ory.

—

***************Ending Page***************

***************Beginning Page***************
***************page number:5**************
Let G : (V, E) be a (di)graph and X, Y Q V. A XY-separating set
in G is any subset Z Q V such that
V(P) O Z 5i Q, for each P G 'P(X, Y; G).
We denote by
5(X, Y; G) = {Z : Z is XY — separating set in G} and
k(X, Y; G) : min{|Z| Z G 5(X, Y; G)}
From the deﬁnition we easily get:
o IfZ € 5(X, Y; G), then 73(X, Y; G\Z) : z.
o X, Y €S(X, Y;G).
—

***************Ending Page***************

***************Beginning Page***************
***************page number:6**************
X Z
Y

41¢‘ r

“w q

,4 f\

A XYiseparaLing set: Z : {g;e,d}
o If Z E 5(X, Y; G), then A E 5(X, Y; G), VA such that
Z Q A Q V.
o If Z € 5(X, Y; G) and T € 5(Z, Y; G), then T € 5(X, Y; G).
—

***************Ending Page***************

***************Beginning Page***************
***************page number:7**************
Menger’s theorem. Let G : (V,E) be a (di)graph and X, Y Q V.
Then p(X, Y; G) : k;(X, Y; G).
(i. e., the maximum number of disjoint XY-paths = the minimum
cardinality of an X Y-separating set.)
Proof:
k(X, Y; G) Z p(X, Y; G) : r. Let P1,...,Pr disjoint XY-paths in
G; Z O V(P;-) 7k Q, VZ 6 8(X, Y; G). Since the paths P1- are vertex
disjoint:

7‘ 7‘ 7‘

|Z| > |Zn (U mm)‘ z Z|ZO V(P;-)| > 21: T‘.

izl izl izl

Hence, [Z] 2 'r, VZ E 8(X, Y; G); it follows that k;(X, Y; G) 2 'r.
—

***************Ending Page***************

***************Beginning Page***************
***************page number:8**************
k(X, Y; G) g p(X, Y; G). Omitted. (We Will later show that VG :
(V,E) and VX, Y Q V, Elk(X, Y; G) disjoint XY-paths in G using
ﬂows in a certain network.) Cl

Menger (1927) equivalently enounced the above theorem, using
internally-disjoint paths: P1,P2 G 'Pst such that V(P1) O V(P2) :
{5, t}:
—
Let G : (V, E) be a (di)graph and s,t € V, such that s 7515, st ¢ E.
There are k internally-disjoint paths from s to t in G if and only if there
exists at least one path from s to t in the (di)graph obtained from G
by removing any set of < k vertices different from s and t.

—

***************Ending Page***************

***************Beginning Page***************
***************page number:9**************
Proof of equivalence:
Theorem 1 :> Theorem 2: take X : N515) (NG(s)) and Y : N505)
(NG(t)). p(X, Y; G) is the maximum number of internally-disjoint
paths from s to t in G. k(X, Y; G) is the minimum cardinality of
a set of vertices Whose removal disconnects s and t.
X .
EQ\4A

a ‘ﬂ‘.> ,
Theorem 2 :> Theorem 1: add two new vertices s and t to the (di)graph
G, and all (directed) edges from s to any vertex in X and from any
vertex in Y to t. The maximum number of internally-disjoint paths
from s to t in G is p(X, Y; G); the minimum cardinality of a set of
vertices Whose removal disconnects s and t is k:(X, Y; G). U I‘

—

***************Ending Page***************


***************Beginning Page***************
***************page number:10**************
Applications: p-connectivity
o A graph G is p-connected (p E N*) if either G : Kp, or ‘G! > p
and G \ A is connected for any A Q V(G) with |A| < p.
o By Theorem 2, an equivalent characterization of the p-connectivity
is:
A graph G is p-connected (p € N*) if either G : KP, or Vst G E(G)
there are p internally-disjoint paths from s to t in G.
o The vertex connectivity number of the graph G, k:(G), is the max-
imum p, for which G is p-connected.
o It follows that, in order to compute k(G), we must ﬁnd
' t ‘G
“gymﬂﬁld l, )
which can be determined in polynomial time using network ﬂows. ,
—

***************Ending Page***************

***************Beginning Page***************
***************page number:11**************
Applications: Konig’s theorem
o A vertex-cover in a graph G is a set X Q V(G) of vertices such that
G — X is a null graph (each edge of G has at least one extremity
in X).
0 A special case of the Theorem 1, is obtained when G is a bipartite
graph and X : S, Y : T are the two bipartite classes of G: ,
(Konig, 1931) Let G : (S, T; E) be a bipartite graph. Then, the maxi-
mum cardinality of a matching in G is equal to the minimum cardinality
of a vertex-cover.
Proof: The maximum cardinality of a matching in G is p(S, T; G) :
MS, T; G), by Theorem 1. Since a set of vertices is an ST-separating
set if and only if is a vertex-cover, the Theorem 3 is proved. D ,
—

***************Ending Page***************

***************Beginning Page***************
***************page number:12**************
Applications: Hall’s theorem

a Let I and S be non-empty ﬁnite sets. A family of subsets of S
(indexed by I) is a map A 1 I -> 25, Where A(z') z AZ, We will
denote A : (AZ-)Z-el and (using the functional notation) A(J) :
U AJ- (for J g I).

JEJ

o A representative function for the family A : (141)16 1 is any function
TA : l —> S with the property 734(1) E A1, Vi E I; then, (rA('L'))Z~€[
is called a system of representatives for A.

o If the representative function, TA, is injective, then 734(1) is a subset
of S and is called a system of distinct representatives for A, or a
transversal of A.

o The central problem in the Transversal Theory is to characterize
the families that admit transversal (with some properties). Hall’s
Theorem (1935) is the ﬁrst result of this type. ‘

—

***************Ending Page***************

***************Beginning Page***************
***************page number:13**************
(Hall, 1935) The family A : (AWE; of subsets ofS has a transversal if

and only if

(H) mun > WW; i.

Proof: ":>" If TA is an injective representative function for A, then

TA(J) Q A(J), VJ Q I. Hence, TA being injective, ]A(J)\ 2 VAN)! :

U!-

"<:" Let GA : (I,S; E) be the bipartite graph associated to A (if

I O S 73 6, we can consider disjoint isomorphic copies of these sets),

Where E : {1'in G 1,5 € Ai}. Note that NGAU) : 14,. Moreover, A

has a transversal if and only if G A has a matching of cardinality ‘I i.
—

***************Ending Page***************

***************Beginning Page***************
***************page number:14**************
Proof of Hall’s Theorem (cont’d): We show that if the condition (H)
holds, then any vertex-cover of G A has at least {I I vertices, and - by
Konig’s Theorem - GA has a matching of cardinality [I] (I itself is a
vertex cover of G A)-
Let X : I’ U S’ Q I U S be a vertex cover in GA: it follows that
NGA(I \ I’) Q S’, that is, A(I \ I’) Q S’. Then,
|X|:|1'|+|5'| 2 II'|+|A(I\I')|-

Since (H) holds, it follows that

|X|>|lﬂl+l¢4(1\1')l>II'|+|I\I'|:|I|-U ,

—

***************Ending Page***************

***************Beginning Page***************
***************page number:15**************
Applications: Dirac’s theorem (p-connected graphs structure)
Let G : (V, E) be a p-connected graph of order |G| Z p +1, U Q V,
\Ut : p and :1: E V\ U. Then there are p ccU-paths such that any pair
of them has ac as the only common vertex.
Proof: Let G’ : (V U {z}, E’), Where E’: E U {zu : u 6 U}.
\‘ﬂ I’
‘
—

***************Ending Page***************

***************Beginning Page***************
***************page number:16**************
Applications: Dirac’s theorem (p-connected graphs structure)
Then, G’ is a p-connected graph. Indeed, let A Q V(G’) with |A| g
p — 1. If A Q V(G), then G’ — A is connected (by the p-connectivity
of G, G — A is connected; since {AI < p, Elu 6 U \ A and, hence, there
exists the edge zu € E(G’ — A). If z E A, then G’ — A : G — A which
is connected.
The lemma now follows by applying Theorem 2 to the graph G’ and the
pair 2:, z. U ,
—
Let G : (V, E) be a p-connected graph, p Z 2. Then, for every two
edges e1 and e2 of G and for every, 1:1,...,2:pn2, p — 2 vertices of G,
there exists a cycle in G containing all of them.
—

***************Ending Page***************

***************Beginning Page***************
***************page number:17**************
Proof: Induction on p.
For p : 2, we must prove that in a 2-connected graph, G, every two
edges e1 and e2 belong to a cycle. Let G’ be the graph obtained from
G by inserting one vertex a on e1 and one vertex b on e2:

62 b

G G’
G’ is 2-connected (any deleted subgraph G’ — v is connected). Hence,
there are two internally-disjoint paths from a to b, giving the cycle in
G containing e1 and e2 (after removing a and b). ‘

—

***************Ending Page***************

***************Beginning Page***************
***************page number:18**************
In the inductive step, let p 2 3, suppose that the proposition holds
for every p’-connected graph with 2 g p’ < p, and consider a p-
connected graph G, two of its edges, e1 and e2 and a set of p — 2
vertices {1:1, m2, . . . , rcpng}.
We can suppose that no extremity 'u of e1,62 belongs to the set
{2:1, x2, . . . , wpng} (otherwise, we can apply the induction hypothesis to
infer that in G - which is (p — 1)-connected, too - there exists a cycle
C containing e1, e2 and the set of vertices {m1,:1;2, . . . , ccp_2} \ {v}; but,
clearly 'u is a vertex of C’ since e1 and e2 are edges of C).
The graph G — 1;me is (p — 1)-connected. By the induction hypothesis,
there exists a cycle ,u containing x1,a:2, . . .,a;pn3, e1 and e2. Let Y be
the set of vertices of ,u. Clearly, \Yl 2 p (to the set of p — 3 vertices
x1, m2, . . .,a:P_3, we add at least three extremities of the distinct edges
e1 and e2). By Lemma 1, there are p :rzp_2 Y-paths such that any pair
of them has {Epmg as the only common vertex.
—

***************Ending Page***************


***************Beginning Page***************
***************page number:19**************
Let PIP-21111 lamp-2.1121 . . . Prp_2yp be these paths, where the ordering
y1,. . . , yp is obtained by performing a traversal of ,u,.
The vertices 3/1,. . . ,yp split the cycle ,u in the paths Pylyz,
Py2y31"'IPyp*1ypIPyPZ/1: 1/

1:7,!) 4 3/17
At least one of the above paths doesn’t contain any element from the
set x1, :02, . . . , xpng, el and e2 (by the pigeon hole principle).
Let Pylyz be this path (otherwise, we appropriately change the ordering
0f 1/1‘)-

—

***************Ending Page***************

***************Beginning Page***************
***************page number:20**************
Then,
PIp-zyziPy2y3)‘--:Pypy11Py1$p-2

is the cycle in G containing cs1, $2, . . . , xp_2, e1 and e2. U

(Dirac, 1953) Through any p 2 2 vertices of a p-connected graph passes

a cycle.

Proof: Let G : (V, E) be ap-connected graph, p Z 2. Let $1, m2, . . . , :z:p

be p vertices of G. Since G is connected, there exist the edges e1 :

mp_1 and 62 : yxp. Then, the theorem follows from Proposition 1. U
—

***************Ending Page***************

***************Beginning Page***************
***************page number:21**************
A nice application of Theorem 5 and Proposition 1 is the next Hamilto-

nian sufficient condition given by Erdos and Chvatal.

(Erdo's-Chvatal, 1972) Let G : (V, E) be a p-connected graph. If

a(G) g p then G is a Hamiltonian graph.

Proof: Suppose, by contradiction, that G is not Hamiltonian. Let G be

the set of vertices of a longest cycle in G.

By Dirac’s Theorem, ‘Gt 9 p and, by our assumption, there exists a

vertex v 6 V(G)\ V(G) 75 Q.
—

***************Ending Page***************

***************Beginning Page***************
***************page number:22**************
Since |C l 2 p we can repeat the argument in the proof of the Proposition

from above in order to prove that there are Pm, Pm, . . . , PM, p 'UC-

paths pairwise meeting just in 'u and with extremities m numbered in

the order they are reached by a traversal of the cycle.

Let us denote by wi the successor vertex of 'ui on the cycle.

Note that 'uwi Q E (otherwise, the cycle vwhwi, C \ {with},va is

longer than C, contradiction). J
—

***************Ending Page***************

***************Beginning Page***************
***************page number:23**************
Since a(G) g p, the set {v,w1,w2,...,wp} is not a stable set, and by

the above remark, it follows that there is an edge wZ-wj 6 E.

But then, PW, the converse of path from '0,- to wj on the cycle, the edge

1111-10,, the path from w, to 'uj on the cycle, and the path ijv give a cycle

longer than C’, contradiction). U
—

***************Ending Page***************

***************Beginning Page***************
***************page number:24**************
A tree is a connected graph without cycles.
—
Let G : (V, E) be a graph. Then the following statements are equiva-

lent:

(i) G is a tree (is connected and has no cycle).

(ii) G is connected and it is minimal with this property.

(iii) G has no cycle and is maximal With this property.

Proof: Is omitted. U

The minimality and maximality in the above statements are given with

respect to the inclusion relation on the family subsets of edges. More

precisely, the above (ii) and (iii) statements means: ,
—

***************Ending Page***************

***************Beginning Page***************
***************page number:25**************
Trees - Basics

(ii) G is and Ve € E, G — e is not connected.

(iii) G and Ve ¢ E, G + e has a cycle.

Deﬁnition ‘

Let G : (V, E) be a (multi)graph. A of G 1's a spanning

subgraph of G, T : (V, E’) (E' Q E), which is a tree. We denote by

TG the set of all spanning trees of G. /

Remarks ‘

1. if and only if G is connected. Indeed, if TG 75 Q, then there

is a spanning tree T : (V, E’) of G. T is connected, hence between

any two vertices of G there is a path P in T. Since E’ Q E, P is a path

in G, therefore G is connected. j
Graph Algorithms — Lecture 5 November 1, 2024 25/45

***************Ending Page***************

***************Beginning Page***************
***************page number:26**************
Conversely, if G is connected, then let us consider the following algo-
rithm:

T <- G;

while (Ele E E(T) such that T — e is connected) do

T <— T — e;
By construction, T is a spanning subgraph of G, and the statement (ii)
in the Theorem 7 is fulﬁlled, therefore it is a tree.
2. Another constructive proof is based on the remark that there exists
a crossing-edge between the two classes of any bipartition of V: Ele :
‘01112 E E With ‘U,~ E Vi, 121,7.
If [Vi : n > 0, then the following algorithm constructs a spanning tree
of the connected graph G : (V, E): j
—

***************Ending Page***************

***************Beginning Page***************
***************page number:27**************
k <— 1; T1 a ({v},@); // v 6 V
While (k < n) do
let my 6 E with :r: E V(Tk),y € V\ V(Tk);
// such an edge exists by the conectedness of G
V(Tk+1) <— V(Tk) U {y};
E(Tk+1) P E(Tk) U {11y};
k + +;
Clearly, Tk is a tree Vic : Lin (inductively, if Tk is a tree then, by
construction, Tk+1 is connected and has no cycle). Moreover, we have
\V(Tk)l : k and \E(Tk)l : k — 1, Vic : 1,7.
3. If this construction is applied to a tree G with n vertices, we obtain
that G has n-l edges. This property can be used to extend the Theorem
7 with other characterizations‘ of a tree: , ‘ ,
—

***************Ending Page***************


***************Beginning Page***************
***************page number:28**************
The following statements are equivalent for a graph G = (V, E) With n
vertices:
(i) G 1's a tree.
(ii) G 1's connected and has n — 1 edges.
(iii) G has no cycles and has n — 1 edges.
(iv) G: Kn forn 6 {1,2} and G73 Kn forn Z 3 and G+ehas
exactly one cycle, for every edge e gé E.
Proof: Omitted. U y
—

***************Ending Page***************

***************Beginning Page***************
***************page number:29**************
Let G : (V, E) be a multi-graph with V : {1, 2, . . . , n}, and adjacency
matrix A : (aﬂnm (aij : multiplicity of edge 'Lj if ij E E, 0 otherwise).
Let
dg(l) O . . . 0
. 0 dg(2) . . . 0
D : d1ag(dG(1),dG(2), . . .,dG(n)) : : : _' : .
The Laplacian matrix of G is deﬁned as:
L[G] : D — A.
Note that the sum of the entries in L[G] on every rovv and every column
is O. We denote by L[G]¢j the minor of the matrix L[G] obtained by
removing the 1th rovv and jth column. J
—

***************Ending Page***************

***************Beginning Page***************
***************page number:30**************
Trees - Counting spanning trees
Theorem 9
Matrix-tree Theorem (Kirchhoff-Trent). Let G be a (multi)graph With
vertex set {1, . . . , n} and Laplacian matrix L[G]. Then, the number of
spanning trees of G 1's: ITg| I det(L[G]Zi), V1 g t g n.
Proof: Omitted. U
Corollary
(Cayley's formula). lTKnl I nniz.
Proof:
n — 1 —1 . . . —1
—1 n — 1 . . . —1
—1 —1 . . . n — 1
Graph Algorithms — Lecture 5 November 1I 2024 30/45

***************Ending Page***************

***************Beginning Page***************
***************page number:31**************
Hence:
n—1 —1 —1
—1 n-l —1
—1 —1 n—1
If we add all the lines to the ﬁrst one we get
1 1 1
—1 n-l —1
. . _ _ :n"*2.(Why?)
—1 —1 n-l
—

***************Ending Page***************

***************Beginning Page***************
***************page number:32**************
Exercise 1. Let G : (V, E) be a connected graph and 'u G V such that

Ng(’U) 73 V\{'u}. For X Q V we denote Ng(X) : (U Ng(’U)> \X.

Clearly, the set A : {v} satisﬁes the following conditigijsC

(i) v E A and [A]G is connected.

(ii) N : NG(A) 75 6.

(iii) R: V\(ALJN);£®.

(a) Show that, if A Q V is any maximal (w.r.t "Q") set of vertices
satisfying (i) - (iii), then Va; € R and Vy 6 N we have my E E.

(b) Prove that if A is as in (a) and G is {Ck}k>4-free, then N is a
clique in G.

(c) Deduce that Kn (n E N*) are the only regular, chordal connected
graphs. J

—

***************Ending Page***************

***************Beginning Page***************
***************page number:33**************
Exercise 2. A graph of order at least three is called conﬁdentially con-
nected if, for every three distinct vertices a, b and c, it exists a path from
a to b such that c differs and is not adjacent with the internal nodes (if
any) of this path. (An example of conﬁdential connected graph is the
complete graph Kn, with n Z 3.)
Show that a connected, incomplete graph, G : (V, E), with at least
three vertices is conﬁdential connected if and only if:
(i) for every v 6 V, N5(v) 75 Q and induces a connected subgraph;
(ii) any edge of G is part of an induced C4 or is a mid edge of an
induced P4. /
Exercise 3. Prove that a connected p-regular bipartite graph is 2-
connﬁqwiﬁdg..."..‘..‘.. a. »
—

***************Ending Page***************

***************Beginning Page***************
***************page number:34**************
Exercise 4. Let G : (V, E) be a digraph. Prove that:

(a) G is strongly connected if and only if for every S g V, S 7k Q,
there exists an arc leaving S.

(b) If G is strongly connected and can be disconnected by removing at
most p arcs (i. e., EIA Q E, ‘A! g p such that G— A is not strongly
connected), then G can be disconnected by reversing at most p arcs
(that is EIB Q E, |B| g p such that G’ : (V,(E\B)U{uv : 'uu G
B}) is not strongly connected).

Exercise 5. Let G be a 2-edge-connected graph (G — e is connected,

Ve G E(G)) Deﬁne the following binary relation e x f if e : f or

G — {e,f} is not connected.

(a) Prove that e x f if and only if e and f belong to the same cycles.

(b) Show that an equivalence class [e]X is included in a cycle.

(c) Removing the edges of an entire equivalence class [e]x, the con-
nected components of the remaining graph is 2-edge-connected.

—

***************Ending Page***************

***************Beginning Page***************
***************page number:35**************
Exercise 6.

(a) Let G be a graph with at least 3 vertices. If G is 2-connected, then
we can orient its edges in such a way that the resulting oriented
graph is strongly connected.

(b) Is the converse true?

Exercise 7.

(a) Let G be an incomplete 2-connected graph and my E E(G) Prove
that G — my or G|my is 2-c0nnected.

(b) Give examples of graphs G and edges my E E(G) such that: (b1)
G — my and G|a3y are both 2-connected; (b2) G — my is not 2-
connected and G|:r:y is 2-connected; (b3) G — my is 2-connected and
G lacy is not 2-connected; ‘

—

***************Ending Page***************

***************Beginning Page***************
***************page number:36**************
Exercise 8. For a given connected graph G we perform the following
algorithm:
Q P {G}; // Q is a queue;
while (Q 5i 6) }
H e p0p(Q);
let A Q V(H) a minimal cut-set in H;
let G1, . . . , Gk the connected components of H — A;
for (j : 1 to kz)
pusuQ, [A U Wang);
}
Observe that if G is a complete graph, then in Q we do not push any other graph.
a) Show that any graph which is pushed in Q is a connected one.
b) Prove that the total number of graphs pushed in the queue Q is at
most 1GP. j
—

***************Ending Page***************


***************Beginning Page***************
***************page number:37**************
Exercise 9. Let G : (V, E) be a connected graph and T1, T2 be two

spanning trees of G (T1, T2 G Tg).

(a) Prove that T1 can be transformed into T2 by repeatedly applying
the following operation: remove an edge and add another edge to
the current tree.

(b) If, in addition, G is 2-connected show that T1 can be transformed
into T2 by repeatedly applying the following operation: remove an
edge u'u and add another edge uw to the current tree. ,

Exercise 10. Prove that the set of edges of a complete graph Kn (n 2 2)

can be partitioned in [TL/2] subsets each representing the set of edges

of a tree (subgraph in Kn). ,

—

***************Ending Page***************

***************Beginning Page***************
***************page number:38**************
Exercise 11. Let n be a positive integer and Gn : (V, E) the graph
with:

- (i,j)(k,l) E E (for (1L,j) 75 (k,l) from V) if and only if'zl : l or

j : k.
Show that Gn is universal for the trees of order n: for any tree T of
order n, EIA Q V such that T 2 [Alan-
Exercise 12. Prove that a tournament is strongly connected if and only
if it contains a Hamiltonian cycle.
—

***************Ending Page***************

***************Beginning Page***************
***************page number:39**************
Exercise 13. We consider the street network of a given city. Prove that

if we can remove all the cycles in this network by creating at most p

blockings (blocking means obstructing one way of a street), then we can

remove all the cycles in the city network by reversing one way of at most

p streets.

(Reversing one way of a given two ways street means to transform it into

a one-way-street; reversing an one-way-street means to transform it into

the other one-way-street.)

Exercise 14. How many spanning trees has a complete bipartite graph

Km”? Same question for KM.

Exercise 15. Prove that graph with at least three vertices is 2-connected

if and only if any two distinct vertices belong to a cycle.
—

***************Ending Page***************

***************Beginning Page***************
***************page number:40**************
o We describe a simple backtracking method to generate all spanning
trees of a connected graph G : (V,E), Where V : {l,...,n},
o The set of edges, E, Will be represented as an array E[1..2,1..m]
having entries from V, with the meaning: if v : E[l, z] and w :
E[2,i], then 'u'w is the 2th edge of G. Furthermore, we assume
that the ﬁrst dG('uO) columns in the array E have '00 in the row 1
(EH/1;]: '00, Vz' : 1, dG(v0)), for v0 E V.
H 1 2 3 4 5 6
l 6
x \ u
7-1 z
(1:0:m)
—

***************Ending Page***************

***************Beginning Page***************
***************page number:41**************
o A spanning tree T E TG will be represented as an set of n—1 indexes
(in increasing order) of the columns in the array E (designating its
edges).

o During the generation, we maintain a vector T[1..n — 1] with en-
tries from {1, . . . , m} and a ﬂag "L 6 {1, . . . , n} with the following
meaning:

We are searching for all spanning trees of G, with the property that
the smallest i- 1 edges are: T[l] < T[2] < < TH — 1].

o In the above example, ifz' : 3, T[1] : 1, and T[2] : 2, then
the spanning trees which must be found are {1, 2, 3,4}, {1,2, 3, 5},
{1,2,4, 5}, {1,2,4,6}, and {1,2,5,6}. But, if z' : 3, T[1] : 3, and
T[2] : 5 then no spanning tree will be found. J

—

***************Ending Page***************

***************Beginning Page***************
***************page number:42**************
ALL-ST-Gen(i)
//We generate all spanning trees of G , with the smallest i i 1 edges: TH], . . . , T[i i l]
if (i : n) then
// {T[1], . . . , T[n i 1]} is a spanning tree
pTOCCSS( T); // print, store etc
else
if (‘i = 1) then
for (j = 1, dg(v0)) do
TH] <— j; A All-ST-Gen(i + 1); B
else
for (j: T[i—1]+1,m—(n—1)+i) do
if (({T[1], . . ., T[i — 1]} U {j}>G has no cycle) then
Th] (— j; A All-ST-Gen(i + 1); B
—

***************Ending Page***************

***************Beginning Page***************
***************page number:43**************
o By the call All-ST-Gen(l) we obtain T9.

o To test if the graph ({T[1], . . ., T[z' — 1]} U {j}>G has no cycle, let
us observe that, by construction,
has no cycle, hence it is a forest (each connected component is a
tree).

o Let 'root[1..n] be a (global) vector with entries from V and the
meaning: r00t['u] : the root of the connected component containing
'u (one of its vertices).

o Before the call All-ST-Gen(1), the vector root is initialized to satisfy
this property: T00t[’U] k 'u (V'u G V) (since then, {T[1], . . . , T[z' —
1]} : Q).

—

***************Ending Page***************

***************Beginning Page***************
***************page number:44**************
o During the recursive calls, when we test if the edge j can be added to
the set {T[1], . . . , T[i — 1]} without creating a cycle, let v : E[1,j]
and 'w : E[2,j]. Then,

({T[1], . . ., T[z'—1]}U{j})G has no cycle if and only if'u and w are in
different connected components of the forest, i.e., r00t['u] 75 r00t[w].

o In order to maintain the vector root, in the places marked A and B
in the algorithm, we must make the following changes.

o Instead of A:

S <- Q; a: <- moth];
for ('u, 6 V) do
if (r00t[u] : x) then
S P S U {u}; rooﬂu] P r00t[w];
—

***************Ending Page***************

***************Beginning Page***************
***************page number:45**************
0 In other words all vertices in the tree With the root :1: are added to
the tree with the root 'root[w]; these vertices are saved in the set S.
0 After the call All-ST-Genﬁ + 1), the vector root must be set again
to the value before the call, and this can be done by replacing B
with:
for (u 6 S) do
r00t['u,] : m; ,
—

***************Ending Page***************

