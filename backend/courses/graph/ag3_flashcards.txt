[{content={parts=[{text=
--FlashCardSeparator--
Single
--InteriorSeparator--
What is the adjacency matrix of a graph G with V(G) = {v1, ..., vn}?
--InteriorSeparator--
A matrix A = (aij)1<=i,j<=n ∈ Mnxn({0, 1}), where aij = 1 if vi and vj are adjacent, and 0 otherwise.
--InteriorSeparator--
medium
--InteriorSeparator--
3
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the incidence matrix of a graph G with V(G) = {v1, ..., vn} and E(G) = {e1, ..., em}?
--InteriorSeparator--
A matrix B = (bij)1<=i<=n, 1<=j<=m ∈ Mnxm({0, 1}), where bij = 1 if ej is incident with vi, and 0 otherwise.
--InteriorSeparator--
medium
--InteriorSeparator--
4
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
For digraphs, similar matrices to adjacency and incidence matrices can be defined with entries in:
--InteriorSeparator--
(right) {-1, 0, 1}
(wrong) {0, 1}
(wrong) {0, 1, 2}
(wrong) R
--InteriorSeparator--
easy
--InteriorSeparator--
5
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the time complexity for initializing the adjacency matrix of a graph G with n vertices?
--InteriorSeparator--
Θ(n^2)
--InteriorSeparator--
easy
--InteriorSeparator--
6
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the time complexity for testing if two vertices are adjacent using the adjacency matrix?
--InteriorSeparator--
Θ(1)
--InteriorSeparator--
easy
--InteriorSeparator--
6
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the space complexity of adjacency lists for a graph G with n vertices and m edges?
--InteriorSeparator--
Θ(n + 2m)
--InteriorSeparator--
medium
--InteriorSeparator--
7
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the time complexity for testing if a vertex 'u is adjacent to another vertex u in G using adjacency lists?
--InteriorSeparator--
Θ(dG(u))
--InteriorSeparator--
medium
--InteriorSeparator--
7
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What data structure is used in the BFS algorithm?
--InteriorSeparator--
Queue
--InteriorSeparator--
easy
--InteriorSeparator--
9
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does the 'label(u)' variable represent in the BFS algorithm?
--InteriorSeparator--
dg(s, u) which is the distance in G from s to u
--InteriorSeparator--
medium
--InteriorSeparator--
10
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What data structure is used in the DFS algorithm?
--InteriorSeparator--
Stack
--InteriorSeparator--
easy
--InteriorSeparator--
12
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does the 'label(u)' variable represent in the DFS algorithm?
--InteriorSeparator--
Visiting time of u (s has visiting time 0)
--InteriorSeparator--
medium
--InteriorSeparator--
13
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
If G is represented with adjacency lists in the context of shortest paths, what does a(i,j) represent?
--InteriorSeparator--
a(e), where e is the arc (edge) i,j
--InteriorSeparator--
medium
--InteriorSeparator--
15
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does infinity (∞) denote in the cost-adjacency matrix for shortest path problems?
--InteriorSeparator--
A big real number with respect to actual edge costs. Also, it could mean unsuccessful access to the data structure.
--InteriorSeparator--
medium
--InteriorSeparator--
16
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
In the context of communication networks, if a(e) represents the probability that the direct connection between the extremities of e works properly, then the shortest path problems (P1 - P3) become:
--InteriorSeparator--
(right) Most reliable paths problems
(wrong) Fastest paths problems
(wrong) Minimum cost paths problems
(wrong) Maximum latency paths problems
--InteriorSeparator--
hard
--InteriorSeparator--
20
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
In PERT networks, what is a critical path?
--InteriorSeparator--
(right) A maximum cost path from the start to the terminal node
(wrong) A minimum cost path from the start to the terminal node
(right) Any delay of an activity on this path infers a delay of the Whole project.
(wrong) A path that is not important
--InteriorSeparator--
hard
--InteriorSeparator--
24
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the objective of the Knapsack problem (0-1)?
--InteriorSeparator--
To choose a filling of the knapsack of maximum total profit.
--InteriorSeparator--
medium
--InteriorSeparator--
26
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
In the digraph G used to solve the Knapsack problem, what do the arcs represent?
--InteriorSeparator--
(right) Adding an object to the knapsack
(right) Not adding an object to the knapsack
(wrong) The weight of the knapsack
(wrong) The maximum possible profit
--InteriorSeparator--
hard
--InteriorSeparator--
27
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
State Bellman's Principle of Optimality.
--InteriorSeparator--
If P is a shortest path from s to i, then Vj ∈ V(P), if P = st ∘ Pji, then st (respectively Pji) is a shortest path from s to j (respectively from j to i).
--InteriorSeparator--
hard
--InteriorSeparator--
34
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What condition must hold for a digraph G for the equation system (B) (Ui = min(Uj + aji)) to solve the single-source shortest path problem (P2)?
--InteriorSeparator--
(right) a(C) > 0, for all C cycle in G.
(wrong) a(C) < 0, for all C cycle in G.
(wrong) a(e) > 0, for all e in E.
(wrong) a(e) < 0, for all e in E.
--InteriorSeparator--
hard
--InteriorSeparator--
30
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
If the algorithms solving the system of equations (B) circumvent 0-cost cycles, then the problem P2 is solved under which hypothesis?
--InteriorSeparator--
(right) a(C) >= 0, for all C cycle in G.
(wrong) a(C) > 0, for all C cycle in G.
(wrong) a(e) > 0, for all e in E.
(wrong) a(e) < 0, for all e in E.
--InteriorSeparator--
hard
--InteriorSeparator--
39
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
If G is a graph (not a digraph) with non-negative edges' costs, how can you use the algorithms for digraphs to solve the single-source shortest path problem P2?
--InteriorSeparator--
By replacing each (undirected) edge of G with a symmetric pair of arcs, each having the cost of the edge.
--InteriorSeparator--
hard
--InteriorSeparator--
39
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is a sparse graph defined as in exercise 1?
--InteriorSeparator--
(right) A graph with m <= cn^2 / logn (n = |V|, m = |E|)
(wrong) A graph with m >= cn^2 / logn
(wrong) A graph with m = O(n)
(wrong) A graph with m = O(log n)
--InteriorSeparator--
medium
--InteriorSeparator--
41
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is a totally unimodular matrix?
--InteriorSeparator--
A matrix B such that det(M) ∈ {-1, 0, 1} for every square submatrix M of B.
--InteriorSeparator--
hard
--InteriorSeparator--
43
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the time complexity algorithm for deciding if a given graph is bipartite?
--InteriorSeparator--
Θ(n + m)
--InteriorSeparator--
medium
--InteriorSeparator--
44
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is b(G)?
--InteriorSeparator--
b(G) is the graph obtained from G by inserting a new vertex in the middle of every edge of G.
--InteriorSeparator--
medium
--InteriorSeparator--
50
--FlashCardSeparator--
}], role=model}, finishReason=STOP, avgLogprobs=-0.14173355789871903}]