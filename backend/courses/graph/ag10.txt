***************Beginning Page***************
***************page number:1**************
December 13, 2024
—

***************Ending Page***************

***************Beginning Page***************
***************page number:2**************
0 Network ﬂows
o Minimum cost flows
a Polynomial-time reductions for graph problems
o Maximum stable set
o Vertex colorings
o Hamiltonian problems
a Exercises for the 11th seminar (december 16 - 20 week)
—

***************Ending Page***************

***************Beginning Page***************
***************page number:3**************
Suppose that in the flow network R : (G,s, t, c), an additional cost
function is given: a : E —> R; Wj E E, a(z'j) : aij is the cost of arc ij
(interpreted as the cost of sending of an l'unit" of flow on the arc ij).
If a: is a ﬂow in R, then the cost of a: is
8(X) I Z ainij.
1,1
Minimum cost flow problem
Given: R a ﬂow network, a : E —> 1R a cost function, and 'u G R+,
Find: a ﬂow m0 in R such that
a(a:o) : min{a(cc) : a: flow in R, 'u(:z:) : 'u}.
Note that, if 'u is not greater than the maximum ﬂow value in R, then
the problem has always solutions (a(:r:) is a linear function deﬁned on
the non-empty compact set in lRm+1 of all flows of value v). ‘
—

***************Ending Page***************

***************Beginning Page***************
***************page number:4**************
1. Assignment Problem. There are n workers and n jobs. The cost of
assigning worker 2' to job j is aij. Assign each worker to a job such that
the total cost is minimized.

Let us consider the bipartite network flow depicted below, where each
arc is labeled with its capacity followed by its cost. Hence, C/L'j/ : 1,
CSZ' I 1, 0,51‘ I 0, 6311,21, and 0,th I 0, Vi,j Q {1,2,...,n}.

l 111111’ l’
—

***************Ending Page***************

***************Beginning Page***************
***************page number:5**************
A minimum cost integer ﬂow of value n is a solution of the problem.
Similarly, we can ﬁnd a perfect matching of minimum weight in a bipar-
tite graph.
2. Hitchcock-Koopmans transportation problem. A commodity, avail-
able in the depots D1, . . . , Dn in quantities d1, . . . , dn, is demanded by
customers 01,..., Cm in quantities c1, . . . , cm. The unit transportation
cost, aij - from the depot DZ- to the customer Cj, Vi E {1, . . . , n},Vj €
{1, . . . , m} - is known.
Find a transportation schedule satisfying all customers demands and
having a minimum total transportation cost.
—

***************Ending Page***************

***************Beginning Page***************
***************page number:6**************
Tl m
The problem has a solution only if Z dl- 2 Z cj. In this case, a mini-
‘:1 ‘:1
m l J
mum cost flow of value v : Z ci, in the network flow below, solves the
1:1
problem.
D1 007041 C1
$ t
dm‘ (3,”,0
—

***************Ending Page***************

***************Beginning Page***************
***************page number:7**************
Minimum cost ﬂows
Deﬁnition ‘
Let a; be a flovv in R : (G, s, t, c) and a : E —> 1R a cost function.
o If P is an A-path in R vv.r.t. x, then the P is
deﬁned as
“(13) I Z at — Z at
ijEE(P),ij forward ijEE(P),ji backward
o If C is a closed A-path in R W.r.t. x, then a(C) is computed using
the above equation, after establishing a direction of traversal of C
(it is possible that C’ is an A-path W.r.t. :1: in both directions). ,
Remarks ‘
0 If P is an augmenting path W.r.t. a3, then $1 I a: ® T(P) is a ﬂow
of value 21(121) : 1/(m) + r(P) and cost a(:z:1) : a(:17) +r(P) - a(P).
Graph Algorithms — Lecture 10 December 13, 2024 7/45

***************Ending Page***************

***************Beginning Page***************
***************page number:8**************
Minimum cost flows
.——_—_J
1—}
"i" It follows from the above remark.
"<:" Let a: be a ﬂow (of value v) such that there is no negative cost
closed A-path w.r.t. a: in R. Let 52* be a minimum cost ﬁow of value 'u
such that
Graph Algorithms — Lecture 10 December 13, 2024 8/45

***************Ending Page***************

***************Beginning Page***************
***************page number:9**************
If A(:r:, a:*) : 0, then :1: : :z:*, hence a; is a minimum cost ﬂow.
Otherwise, A(a:,:r:*) > O and there is ij such that mi]- 75 $1"; Suppose
O g mij < (I); g cij (a similar argument works if mij > (13;) By the flow
conservation law, there exists an arc jk 6 E such that 0 g {Bjk < $11 g
Cjk, or there is kzj 6 E such that 0 g $6,; < $kj g ckj.
Since the number of vertices is ﬁnite, by repeating this argument, we
construct, C’, a closed A-path w.r.t. a: in R:
g 1,] <sz
J
* 1k<ljl> k
Ifk < LL'”<
t
—

***************Ending Page***************


***************Beginning Page***************
***************page number:10**************
If we traverse C' in the converse direction, we obtain a closed A-path,

C", w.r.t. ac*. Since a(C) 2 0 (by the hypothesis), and a(C’) : —a(C)

it follows that a(C’) : 0. (a:* is of minimum cost; hence, by the ﬁrst

part 0f the proof, a(C’) Z O).

If we consider 1:’ : a:* ® 6(0"), where

6(6”) I m1n{kjfor1£ggilin C’ (mkj — $127): kj backriluligi in 01(1)]? — $jk)},

then w’ satisﬁes v(a:’) : 'u(ac*) : 'u, a(ac’) I a(a:*) +6(C") - a(C’) :

a(a:*).

Hence :c’ is a minimum cost ﬂow of value 'v, but A(a:,:r:') < A(:r:,a:*),

contradicting the choice of a:*. Thus A(:r:, a:*) : 0, and the theorem is

proved. U ,
—

***************Ending Page***************

***************Beginning Page***************
***************page number:11**************
If a: is a minimum cost flow of value 'u and P0 is an augmenting path
W.r.t. :1: such that
a(P0) : min{a(P) : P augmenting path W.r.t. x},

then x1 : a; ®r(P0) is a minimum cost flow of value 11(521) I v +'r(P0).

Proof. Omitted. |

An augmenting path of minimum cost can be found using shortest paths

algorithms. If x is a ﬂow in R and a : E —> R is the cost function, then

taking aZ-j : oo if ij §Z E (when a313- : 0), we deﬁne
—

***************Ending Page***************

***************Beginning Page***************
***************page number:12**************
04]‘, if {Iiij < CZ'J' and {le' : 0,
E" _ min{aij, —aJ-¢}, if (1)11" < CZ'J' and $14‘ > 0,
Z] — —aj¢, if {Dij I Cij and mji > O,
+00, if £1217‘ I Ci]~ and {Dji : O.
A shortest E st-path corresponds to a minimum cost augmenting path
W.r.t. :r: in R, and a negative a cycle corresponds to a negative cost
closed A-path W.r.t. :z: in R.
Then, we have the following algorithm to solve the minimum cost flow
problem:
—

***************Ending Page***************

***************Beginning Page***************
***************page number:13**************
let a: be a ﬂow of value 11’ g 'u;
// a: could be null or a: : (11/1/(y) - y,
// Where y is a ﬂow of maximum value.
vvhile (EIC' an E negative cycle) do
a: P a: ® T(C);
end while
While ('v(a:) < 'u) do
ﬁnd an shortest E st-path P;
a: <- 9: ® min{r(P), v — 'u(a:)};
end vvhile
The time complexity of the second While is (9(n3'u) (if we start with the
null ﬂovv and if vve have integer capacities only). The ﬁrst While can be
implemented to run in (9(an log n) iterations. ‘
—

***************Ending Page***************

***************Beginning Page***************
***************page number:14**************
Reminder

o Let P1- : IZ- —> {yes, no} (z' 6 {1, 2}) be two decision problems.
P1 polynomial reduces to P2, and we denote this by P1 <1: P2, if
there is a polynomial-time computable function <l> : Il —> [2, such
o The function <l> vvill be given using an algorithm that constructs,
for every instance 1'1 G 11, an instance 2'2 E [2 in polynomial time (in

the size of 2'1), such that P1(1L1) : yes if and only if P2(z'2) : yes.
o The construction behind a polynomial-time reduction shows hovv
the ﬁrst problem can be efﬁciently solved using an oracle for the
5399?}? °E¥§1______ _ _. -W _ _. ________ 7/
—

***************Ending Page***************

***************Beginning Page***************
***************page number:15**************
o The relation g P is a transitive relation on the set of decision prob-
lems (since, the class of polynomial functions is closed to function
composition).

SAT <1» 3SAT
SAT
Instance: U : {u1,u2, . . . , un} a ﬁnite set of boolean variables;

C: Cl/\02.../\Cm aCNF formula over U:

Ci : v11 \/'uZ~2 V---V”iki:i:1,m: Where

Vijﬂa E {1,2,...,n} s. t. 'uz'j : ua or vi]. :ﬁa.
Question: Is there an assignment t : U —> {truejalse} s. t. 25(0) :
true?

—

***************Ending Page***************

***************Beginning Page***************
***************page number:16**************
BSAT is the restriction of SAT to the set of instances in which each
clause C, has exactly 3 literals (k, : 3), Where a literal, 'uij, as described
above, is a variable or its negation.
The SAT problem is famous since it was the ﬁrst discovered NP-complete
problem (Cook, 1971).
NPyéNPﬁcoNPzP
—

***************Ending Page***************

***************Beginning Page***************
***************page number:17**************
SM

Instance: G : (V, E) a graph and k 6 N.

Question: Is there a stable set S in G such that |S| 2 k‘?

(Karp, 1972). 3SAT gp SM.

Proof. Let U:{U]_,’U,2,...,Un}, (n €N*), G: G1/\C'2.../\Gm (m €

N*) with GZ' = 'uil \/ viz \/ v13, 1}: W, (Where Vijjla 6 {1,2,...,'n,}

s. t. 'uij- : ua or vi]- : ﬂu) representing the data of an instance of the

3SAT problem.

We will build in C(n + m) time complexity, a graph G and k 6 N, such

that there is a satisfying assignment t for G if and only if there is a

stable set S in G such that |S| Z k.
—

***************Ending Page***************

***************Beginning Page***************
***************page number:18**************
Proof cont’d.
Construction of the graph G:
o Vi E {1,2, . . . , n}, let the disjoint graphs T,- : ({u¢,UZ-}, {uZ-UZ-D.
o Vj G {1,2, . . . , m}, let the disjoint graphs
Z1‘ I ({ajl, an, ajs}, {ail ‘112, ‘mars, aja @111’)-
o Vj G {1,2, . . . , m}, let the edge-set Ej : {07-1151, 0721112, ajg'lljg},
Where 'uJ-l V vjz \/ 11,3 is the clause Cj.
WG) I (U V(T¢)) U (U V(Zj)>
1:1 1:1
E(G) I (U E(T¢)) u (U E(Z]-)LJ Ej).
1:1 1:1
—

***************Ending Page***************


***************Beginning Page***************
***************page number:19**************
Clearly, the construction of G can be done in polynomial time W.r.t. the

size n + m of the 3SAT instance. Let k : n + m. I

U :{u1,1.1,2,u§,,u4}; C : (u1Vu3Vu4)/\(E1VuQVu4)/\(u2\/H3VU4);

k I 4 + 3 I 7.
—

***************Ending Page***************

***************Beginning Page***************
***************page number:20**************
Suppose that the answer of the problem SM for the above (G, k) in-
stance is yes.
So, EIS G 5G (the family of all stable sets in G) such that |S| Z k. Since
any stable set can have at most one vertex from each V(T,~) and each
V(Zj), it follows that IS‘ : k; and ‘SO V(T,')l :1, l5‘ ﬁ V(Zj)l :1,
Vi : Lin, Vj : W.
Let t : U —> {tTue,false} given by
{ lame, if Sn vm) = {m}
t(u¢) I .
false, 1f S O V(T,-) : {uz}
Then, t(Cj) : true, Vj : W, hence 23(0) : true, and the answer of
BSAT is yes.
Indeed, Vj I W, if CJ' I 'Ujl \/ 'Ujg \/ 'UJ'3 and S n V(Zj) I {ajk}
(k € {1,2, 3}), then (since ajk'Ujk G E) it follows that 'ujk ¢ S. /
—

***************Ending Page***************

***************Beginning Page***************
***************page number:21**************
o If ujk : ua, then ua ¢ S, so Ea 6 S, and - by the deﬁnition of
t - we have t(ua) : true, that is, t('uJ-k) : true, which implies
t(Cj) : true.
o If uJ-k : um, then um ¢ S, so ua E S, and - by the deﬁnition of
t - we have t(ua) : true, that is, t(ujk) : true, which implies
t(CJ-) : true.
Conversely, if the answer of the 3SAT is yes, then Elt : U —> {true, false}
such that t(C]-) : true, Vj : 1, m.
TL
Let S1 be the stable set S1 : U V,’ with n vertices, where
1:1
V! z {E}, if t(u,~) : true}
Z {ui}, if t(u,-) : false}
—

***************Ending Page***************

***************Beginning Page***************
***************page number:22**************
Then, since t(Cj) = true, Vj : 1, m, it follows that there is kj E {1,2,3}
m
such that t(ujkj) : true. Let g2 : U {aJ-kj}. Obviously, g2 is a stable
1:1
set in G having m vertices.
Let § : g1 Ugg. Obviously, |§| I n + m : k (hence |§| 2 k). If
we prove that g is a stable set, then the answer of SM for the instance
(G, kz) is yes.
Suppose that 311,111 E § such that e : 'uw 6 E(G). Then one extremity
of e is in §1 and the other in §2. If 'u E g1, then we have two cases:
o u : ua, w : ajk], a G {1,2,...,n},j G {1,2,...,m}, kj G {1,2,3}
and ujkj : ua.
Since t('ujkj) : true, it follows that t(ua) : true, therefore 'u :
ua ¢ g1, contradiction. J
—

***************Ending Page***************

***************Beginning Page***************
***************page number:23**************
o 'u :ﬂa, w : ajkj, a E {1,2,...,n},j E {1,2,...,m}, kj E {1,2,3}
and 'Ujkj I Ea.
Since t('Uij-) : true, it follows that twa) : true, therefore t(ua) :
false. Hence, 'u : ﬂu ¢ 5'1, contradiction. D
Note that a similar proof can be given to prove SAT gp SM, the only
difference is that the graphs Zi are complete graphs with kl- vertices. ,
—

***************Ending Page***************

***************Beginning Page***************
***************page number:24**************
COL

Instance: G : (V, E) graph and k € N*.

Question: Is there a k-coloring of (the vertices) of G?

BSAT <1: COL.

This theorem shows that the vertex coloring problem is NP-hard. The

proof given below shows more: the problem, obtained from COL by

restricting only to instances with k : 3, is NP-hard, too.
—

***************Ending Page***************

***************Beginning Page***************
***************page number:25**************
Let H be the graph
a) If c is a 3-coloring of H s. t. c(111): c(v2) : c(v3) I a 6 {1,2,3},
then necessarily c(v4) : a (forcing).
b) If c : {111,112,113} —> {1,2,3} satisﬁes c({v1,212,'us}) 75 {a}, (a E
{1,2, 3}), then c can be extended to a 3-coloring c ofH with c(v4) 5i
a.
—

***************Ending Page***************

***************Beginning Page***************
***************page number:26**************
Proof. By examining the list of 3-colorings of H.

We Will use the following simpliﬁed representation of the graph H:

Proof of Theorem 4. Let us consider the data of an instance of BSAT:

U : {u1,...,un}, (n E N*), a set of boolean variables, and C : Cl /\

.../\ Cm, (m E N*) a CNF-formula With C'j : 'ujl V 111-2 \/ 'uJ-s, Vj : W,

Where Vi : Iii, Ela s. t. 'ujl. : ua or IUji : Ea.

We will build a graph G With the property that G is 3-colorable if and

only if the answer of BSAT for this instance is yes, that is, there is an

assignment t : U —> {true,false} such that 23(0) : true. ,
—

***************Ending Page***************

***************Beginning Page***************
***************page number:27**************
The construction needs polynomial time, and consists in the following
steps: i
o Consider the disjoint graphs (Vi, Ei), W : 1, n, where V1- :
{u¢,ﬂ¢} and E1‘ : {uiﬂi}.
o For CJ- : 'Ujl \/ 111-2 \/ 'Uja, Vj : W, consider the graphs:
where, 'Ujk (k : m) are the vertices corresponding to the literals
vjk, the graphs hj are disjoint, and aj are distinct vertices.
o Consider a new vertex a, and all edges aaj, Vj : W.
0 Consider a new vertex b, all edges bui, bﬂi, Vi : 1,7 and ba.
The graph G has a linear number of vertices w.r.t. n + m. .
—

***************Ending Page***************


***************Beginning Page***************
***************page number:28**************
U I {161, 'UQ, U3, 11,4}, C I (ﬂl VUQ \/ U3) /\ (U1 V’U,3 Vﬂzl) /\ (ﬁg \/ U3 V114).
The graph G is
M ‘(5%’
n,l§\‘4
—

***************Ending Page***************

***************Beginning Page***************
***************page number:29**************
Suppose that the answer of BSAT for the considered instance is yes
Hence Elt : U —> {true,false} s. t. t(C) : true, that is, t(C'J-) : true,
Vj : W We will show that G is 3-colorable.
We color, ﬁrstly, vertices u, and m, Vim.

c(u,) : 1 and c(u,) : 2,if t(u,) : true

c(ui) : 2 and c(ui):1,ift(u,): false
Note that, if u is a literal, then c(u) : 2 if and only if t('u) : false.
Since t is a satisfying assignment, t(C'J-) : true, Vj : m. It follows
that C({Uj1,'Uj2,'Uj3}) 7g {2}, Vj I W-
By Lemma 1 b), we can extend c to a 3-coloring, in each graph hj, such
that c(aj) 75 2, that is c(aj) € {1,3}.
By taking c(a) : 2 and c(b) : 3, we obtain a 3-coloring of G. ‘

—

***************Ending Page***************

***************Beginning Page***************
***************page number:30**************
Conversely, suppose that G is 3-colorable.
We can assume that c(b) : 3 and c(a) : 2 (otherwise, rename the
colors).
It follows that {c(u,),c(ﬂ,)} : {1,2}, Vi : Lin and c(aj) 6 {1,3},
Vj : W.
By Lemma 1 a), it follows that C({Uj1,'ll_7'2,'l)j3}) 75 2, Vj : W. This
means that, Vj : W, there is a 'Ujk E CJ- such that c(vJ-k) : 1.
Hence, deﬁning t : U —> {true,false} by
true, if c(u,) :1
Hui) — { false, if c(u,) : 2 ’
we obtain an assignment with the property that t(C'J-) : true, Vj :
W.
Therefore the answer of BSAT for the given instance is yes. J
—

***************Ending Page***************

***************Beginning Page***************
***************page number:31**************
Remember: Let G be a (di)graph. A cycle G of G is a Hamiltonian
cycle if V(C) : V(G).
On open path P of G is a Hamiltonian path if V(P) : V(G). A
Hamiltonian (di)graph is a (di)graph which has a Hamiltonian cycle. A
traceable (di)graph is a (di)graph which has a Hamiltonian path.
(Nash-Williams, 1969) The following ﬁve problems are polynomial equiv-
alent:

CH: Given a graph G. Is G Hamiltonian?

TR: Given a graph G. Is G traceable?

—

***************Ending Page***************

***************Beginning Page***************
***************page number:32**************
DGH: Given a digraph G. Is G Hamiltonian?

DTR Given a digraph G. Is G traceable?

BCH: Given a bipartite graph G. Is G Hamiltonian?
P1 and P2 are polynomial equivalent if P1 <1» P2 and P2 <1: P1.
Proof of Theorem 5.
CH <1: TR Let G be a graph and v0 E V(G). We construct in poly-
nomial time a graph H such that G is Hamiltonian if and only if H is
traceable.
Let V(H) : V(G) LJ {x,y,z} and E(H) : E(G) U {$v0,yz} U {wy :
w 6 V(G) O Ng(’llo)}.

—

***************Ending Page***************

***************Beginning Page***************
***************page number:33**************
Proof of Theorem 5 cont’d.
G H
Then, H is traceable if and only if it has a Hamiltonian path, P, with
extremities :1; and z (Which have degree 1 in H). P exists in H if and
only if in G there is a Hamiltonian path with an extremity in 'uo and
the other a neighbor of '00, that is, if and only if G is Hamiltonian.
—

***************Ending Page***************

***************Beginning Page***************
***************page number:34**************
TR <1: CH Let G be a graph. Consider H : G + K1. Then, H is
Hamiltonian if and only if G has a Hamiltonian path.
G+K1

The equivalence of the problems DCH and DTR can be proved in a
similar way.

CH <1: DCH Let G be a graph. Let D be the digraph obtained from
G by replacing each edge with a symmetric pair of arcs. /

—

***************Ending Page***************

***************Beginning Page***************
***************page number:35**************
Clearly any cycle in G gives rise to a cycle in D and conversely, any
cycle in D gives rise to a cycle in G.
DCH <1: CH Let D be a digraph. Each vertex 'u G V(D) is replaced
by an undirected graph P3(v) with extremities av and by:

133(1)) I ({awbmcva dv}1{avcvicvdv,dvbv})-
Each arc 'uw 6 E(D) is replaced by the (undirected) edge b1, aw. Let G
be the graph obtained (in polynomial time) in this vvay:

7/ z D a,

—

***************Ending Page***************

***************Beginning Page***************
***************page number:36**************
Each cycle G of D corresponds to a cycle in G and conversely, each

cycle in G corresponds to a cycle of D. It follows that D is Hamiltonian

if and only if G is Hamiltonian.

Note that if G is a cycle of G, then this is generated by a cycle G’ of

D, and length(G) : 3- length(G’)+ length(G’) : 4 - length(G’). It

follows that any cycle of G is even, therefore G is a bipartite graph.

Therefore the above proof (DCH <1: CH) is in fact DCH <1: BCH.

Since BCH <1: CH is obvious, the Theorem 5 is completely proved. D J
—

***************Ending Page***************


***************Beginning Page***************
***************page number:37**************
Memento
o In order to prove that a certain decision problem is NP-complete:
I. First you have to show that the problem is in the class NP which
means: there exists a polynomial time certiﬁcate for a any solution-
candidate (for 3COL: given a function c : V(G) —> N, we can verify
if c is a coloring and uses at most three colors in (9(n2)).

II. Second, we must polynomially reduce a known NP-complete prob-
lem to your decision problem (for 3COL: e. g. BSAT can be poly-
nomially reduced to BOOL).

o If step I. misses, then the decision problem in sight is NP-hard.
—

***************Ending Page***************

***************Beginning Page***************
***************page number:38**************
Exercise 1. Show that the following problem is NP-complete

INT

Instance: n, m G N*,A E ZmX”, b 6 Zm.

Question: Is there an assignment a: 6 Z” s. t. Aa; g b?

(The inequality g between two vectors is componentwise.) Hint: You

can try SM <1: INT.

Exercise 2. Consider the following decision problem

ACYCLIC

Instance: G : (V, E) a digraph and p 6 N.

Question: Is there A Q V such that lA| g p and G — A doesn’t contain

cycles?

Prove that SM gp ACYCLIC.
—

***************Ending Page***************

***************Beginning Page***************
***************page number:39**************
Exercise 3. A k-uniform hypergraph is a pair H : (V, E), where V 73 6

is a ﬁnite set, k E N* \ {1}, and E Q 79k(V) : {A Q E : |A| : k} It

easy to see that a 2-uniform hypergraph is a simple graph.

We say that a kz-uniform hypergraph H : (V, E) is simple if there is a

function c: V —> {l,2,...,lc} such that Vu,'u E V, u 75 v, ifu,v G e

for a certain e G E, then C(u) 75 c('u). Now we consider the following

decision problem

k-SIMPLE

Instance: H a k-uniform hypergraph.

Question: Is H simple?

(a) Prove that problem 3-SIMPLE is NP-complete.

(b) Show that problem 2-SIMPLE belongs to P. /
—

***************Ending Page***************

***************Beginning Page***************
***************page number:40**************
Exercise 4. Consider the following decision problem:

AGM

Instance: G a graph, k E N.

Question: Has G a spanning tree T such that A(T) 2 k?

Prove that AGM € P.

Exercise 5. Let D : (V,E) a loopless digraph. A stable set of D,

S Q V, is a quasi-kernel if every vertex 'u 6 V \ S can be accessed from

inside S along a path having length at most 2.

(a) Prove that a quasi-kernel can be constructed in @(n + m), Where
n: IV‘ and m: [El

(b) Show that 3-SAT is polinomially reducible to the problem of ﬁnding
out if in a given digraph it exists a quasi-kernel containing a given
vertex. 7/

—

***************Ending Page***************

***************Beginning Page***************
***************page number:41**************
Exercise 6. Consider the following decision problem: LPL

Instance: G a graph, k; E N.

Question: Has G a path P such that length(P) 2 k?

Prove that LPL is NP-complete.

Exercise 7. A kernel in a digraph G : (V, E) is a stable set S Q V such

that V u E V \ S exists 'u 6 S with vu 6 E. We consider the following

decision problem:

KERNEL

Instance: G a digraph.

Question: Has G a kernel?

Prove that the following construction leads to a polynomial reduction of

SAT to KERNEL (i.e. SAT gp KERNEL):
—

***************Ending Page***************

***************Beginning Page***************
***************page number:42**************
Exercise 7 (cont’d). For every conjuction of clauses, F, instance of SAT,
we deﬁne a digraph G (an instance for NUCLEU):
- for each clause G of F we add a 3-cyc1e to G
var/511%, 11%, vévéwéwévé;
- for every variable :1; which occurs in formula F, we add a 2-cyc1e to
G
'Um, 'Uz'uii '07:, W'Um; 'Ucc;
- for every clause G and every literal u which occurs in G we add to
G three arcs
1 2 3
vu'uc, vu'uc, 'uu'uc. ‘
—

***************Ending Page***************

***************Beginning Page***************
***************page number:43**************
Exercise 8. Consider the following decision problem

ZSAT

Instance: C a family of clauses of exactly two literals each.

Question: There exists an assignment of truth to the variables which

satisﬁes all the clauses form C?

We deﬁne G (the implication) digraph: V(G) : set of all literals used

in C and E(G) : {ijj,ﬁjvj : C'j : 'uj \/ wj, j : W} (each clause

introduces in G two arcs). Show that C is satisﬁable if and only if xi and

EZ- belong to different strongly connected components of G, Vi : Lin.

Show that this property can be tested in (9(n + m) time complexity. ,

Exercise 9. Show that the following problem is NP-complete.

MAX-2SAT

Instance: C a family of clauses of at most two literals each and k E N.

Question: There exists an assignment of truth to the variables which

satisﬁes at least k: clauses form C? /
—

***************Ending Page***************

***************Beginning Page***************
***************page number:44**************
Exercise 10. Consider the following decision problem
NAE-3SAT
Instance: C a family of clauses of exactly three literals each.
Question: Is there a truth assignment to the variables such that each
clause has at least one true literal and at least one false literal?
Prove that the following construction leads to a polynomial reduction of
3SAT to NAE 3SAT (i.e. SSAT gp NAE 3SAT):
- we keep the boolean variables from 3SAT, U : {uh 11,2, . . . , un}
and add a new variable x;
- for each clause C'j : 'ujl \/ vjz \/ vja we add a new variable yj and
we replace Cj by two clauses:
CJ-lz'ujlij2Vyj,C'J-2=vj3Vm\/§j. j
—

***************Ending Page***************

***************Beginning Page***************
***************page number:45**************
Exercise 11. Consider the following decision problem
MAX-CUT
Instance: G : (V, E) a graph, c : E —> 1R a weight on its edges, k E R.
Question: Is there a cut of G of weight at least k?
Prove that the following construction leads to a polynomial reduction of
NAE 3SAT to MAXCUT (i.e. NAE 3SAT g1: MAXCUT):
- consider an instance for NAE BSAT problem with clauses
C : {C1, . . . , Cm} over the set of boolean variables U :
{11,1, 11,2, . . . , un}; we can suppose that every clause contains three
different literals,
- V(G) : {unﬂi : 1L: Lin} and we add to E(G) the edges uZ-Ui of
weight 10m,
- for each clause Cj : 'uj, \/ 111-2 \/ 'uJ-a we add to E(G) three edges:
v], 111-2, 111-2153, and 111-,ij each of weight 1,
- k :10nm + 2m. /
—

***************Ending Page***************

