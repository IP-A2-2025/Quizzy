[{content={parts=[{text=--FlashCardSeparator--
Single
--InteriorSeparator--
What is the purpose of empirical analysis of algorithm efficiency?
--InteriorSeparator--
To formulate an initial hypothesis, verify an affirmation, compare algorithms, and analyze the efficiency of an implementation.
--InteriorSeparator--
Medium
--InteriorSeparator--
4
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following are examples of efficiency classes?
--InteriorSeparator--
(right) Logarithmic O(log n)
(wrong) Circular O(c)
(right) Exponential O(2^n)
(wrong) Trigometric O(sin n)
--InteriorSeparator--
Easy
--InteriorSeparator--
3
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the condition for the base case in a recursive function?
--InteriorSeparator--
The condition that stops the recursive call.
--InteriorSeparator--
Easy
--InteriorSeparator--
9
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following are valid methods for resolving recurrences?
--InteriorSeparator--
(right) Substitution method
(right) Iteration method
(wrong) Elimination method
(wrong) Augmentation method
--InteriorSeparator--
Medium
--InteriorSeparator--
20
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In the context of recursive functions, what does it mean for function f() to call function g() indirectly?
--InteriorSeparator--
f() calls a function h(), which then calls g() directly or indirectly.
--InteriorSeparator--
Medium
--InteriorSeparator--
8
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following steps are involved in the empirical analysis of algorithm efficiency?
--InteriorSeparator--
(right) Establishing the goal of the analysis
(right) Choosing a measure of efficiency
(wrong) Ignoring input data characteristics
(wrong) Skipping the algorithm implementation
--InteriorSeparator--
Medium
--InteriorSeparator--
5
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In the substitution method, what is the purpose of mathematical induction?
--InteriorSeparator--
To determine constants and demonstrate the correctness of the solution.
--InteriorSeparator--
Medium
--InteriorSeparator--
22
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the first step in the substitution method for solving recurrences?
--InteriorSeparator--
Guess the solution.
--InteriorSeparator--
Easy
--InteriorSeparator--
22
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What are potential drawbacks of using recursive algorithms?
--InteriorSeparator--
(right) They can lead to cost overhead due to placing information on the program stack with each recursive call.
(wrong) They are always faster than iterative solutions.
(right) They can be less efficient than iterative solutions in certain scenarios.
(wrong) They never lead to stack overflow errors.
--InteriorSeparator--
Medium
--InteriorSeparator--
12
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the main purpose of the iteration method for solving recurrences?
--InteriorSeparator--
To express the recurrence as a sum of terms dependent on the problem size and initial conditions.
--InteriorSeparator--
Medium
--InteriorSeparator--
20
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does each node in a recursion tree represent?
--InteriorSeparator--
The cost of a subproblem.
--InteriorSeparator--
Easy
--InteriorSeparator--
37
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What are the benefits of using a recursion tree?
--InteriorSeparator--
(wrong) It only works for simple recurrences.
(right) It helps visualize the iteration of a recurrence.
(right) It can be used to generate a guess for the substitution method.
(wrong) It automatically provides a closed-form solution.
--InteriorSeparator--
Medium
--InteriorSeparator--
37
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the height of the recursion tree if the subproblem size is divided by 4 at each level, and the initial problem size is n?
--InteriorSeparator--
log₄n
--InteriorSeparator--
Hard
--InteriorSeparator--
41
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is the form of recurrences that the Master Theorem can be used to solve?
--InteriorSeparator--
(wrong) T(n) = T(n-1) + f(n)
(right) T(n) = aT(n/b) + f(n)
(wrong) T(n) = aT(n*b) + f(n)
(wrong) T(n) = aT(n+b) + f(n)
--InteriorSeparator--
Easy
--InteriorSeparator--
45
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What condition must be met to apply case 3 of the Master Theorem?
--InteriorSeparator--
f(n) = Ω(n^(log_b(a) + ε)) for some constant ε > 0, and af(n/b) ≤ cf(n) for some constant c < 1 and sufficiently large n.
--InteriorSeparator--
Hard
--InteriorSeparator--
45
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does O(n^2) represent in the context of algorithm efficiency?
--InteriorSeparator--
A quadratic time complexity.
--InteriorSeparator--
Easy
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
When is the empirical analysis of algorithm efficiency particularly useful?
--InteriorSeparator--
(right) When the theoretical analysis of efficiency is difficult.
(wrong) When a theoretical analysis is always preferred.
(right) When comparing different algorithm implementations.
(wrong) When the algorithm is trivially simple.
--InteriorSeparator--
Medium
--InteriorSeparator--
4
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does it mean for a function f() to be defined recursively?
--InteriorSeparator--
The function calls itself directly or indirectly.
--InteriorSeparator--
Easy
--InteriorSeparator--
8
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What information is placed in the program's stack with each recursive call?
--InteriorSeparator--
A series of information specific to the recursive call.
--InteriorSeparator--
Medium
--InteriorSeparator--
12
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
When using the substitution method, what should you do if the inductive hypothesis is not strong enough?
--InteriorSeparator--
(right) Subtract a lower-order term.
(wrong) Ignore the problem and proceed.
(wrong) Add a higher-order term.
(wrong) Give up and try a different method.
--InteriorSeparator--
Hard
--InteriorSeparator--
27
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the first step to determining the running time of a recursive algorithm?
--InteriorSeparator--
Establish the recurrence relation.
--InteriorSeparator--
Medium
--InteriorSeparator--
19
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In the context of algorithm efficiency analysis, what is meant by "Big O" notation?
--InteriorSeparator--
It is used to describe the upper bound of an algorithm's growth rate as the input size increases.
--InteriorSeparator--
Easy
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is a key difference between recursive and iterative approaches to solving problems?
--InteriorSeparator--
(wrong) Recursive solutions are always more efficient
(right) Recursive solutions use function calls, while iterative solutions use loops
(wrong) Iterative solutions use a stack to manage state.
(right) Recursive solutions may have higher memory overhead due to stack usage
--InteriorSeparator--
Medium
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the recurrence relation for the factorial function in terms of its execution time?
--InteriorSeparator--
T(n) = 0 if n=0, T(n-1) + 1 if n>=1
--InteriorSeparator--
Hard
--InteriorSeparator--
19
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following statements about the iterative Fibonacci function (ifib(n)) is true, according to provided content?
--InteriorSeparator--
(wrong) The iterative Fibonacci function has exponential time complexity
(right) The iterative Fibonacci function has better performance (execution time) than the recursive version for larger inputs.
(wrong) The iterative Fibonacci function relies on recursion to compute fibonacci numbers.
(wrong) The iterative Fibonacci function calculates intermediate Fibonacci numbers by placing them into the stack.
--InteriorSeparator--
Medium
--InteriorSeparator--
17
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Why should one avoid assuming that T(n) = O(n) when applying the substitution method to the recurrence T(n) = 2T(n/2) + n?
--InteriorSeparator--
Because it's crucial to prove the exact form of the inductive hypothesis.  Assuming T(n) <= cn and substituting does not satisfy the initial assumption needed for induction.
--InteriorSeparator--
Hard
--InteriorSeparator--
28
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What simplification can be applied to the recurrence T(n) = 2T(sqrt(n)) + log n, and why?
--InteriorSeparator--
A change of variable m = log n is applied to simplify the recurrence.
--InteriorSeparator--
Hard
--InteriorSeparator--
29
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
In the iteration method, what are the two different approaches for iterating the recurrence?
--InteriorSeparator--
(right) Direct iteration
(right) Inverse iteration
(wrong) Forward iteration
(wrong) Reverse iteration
--InteriorSeparator--
Medium
--InteriorSeparator--
31
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In the context of the iteration method, what is the difference between direct and inverse iteration?
--InteriorSeparator--
Direct starts with a specific case and builds subsequent terms, while inverse starts with T(n) and replaces T(h(n)) with its corresponding value.
--InteriorSeparator--
Hard
--InteriorSeparator--
31
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
According to provided examples, how can one utilize geometric series to simplify recurrence analysis?
--InteriorSeparator--
(right) by using the formula for summing an infinite geometric series when the common ratio has absolute value less than 1.
(wrong) by ignoring all but the first term of the series to approximate the sum.
(right) by recognizing that the total work done by the algorithm is a weighted sum of the subproblem costs.
(wrong) geometric series are only applicable for division and conquest algorithms.
--InteriorSeparator--
Hard
--InteriorSeparator--
35
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
When creating the recursion tree for T(n) = 3T(n/4) + cn^2, what determines the number of levels in the tree?
--InteriorSeparator--
(right) The number of times n can be divided by 4 until it reaches 1.
(wrong) Number of nodes at each level.
(right) The base of the logarithm is determined by the divisor, which is 4 in this case.
(wrong) The root node's label determines the number of levels.
--InteriorSeparator--
Hard
--InteriorSeparator--
41
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Why might the Master Theorem not be applicable to solving a recurrence relation even if it appears to fit the required form?
--InteriorSeparator--
Because f(n) may not be polynomially larger or smaller than n^(log_b a).
--InteriorSeparator--
Hard
--InteriorSeparator--
47
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
For the recurrence T(n) = 9T(n/3) + n, which case of the Master Theorem is applicable and what is the solution?
--InteriorSeparator--
(right) Case 1, T(n) = Θ(n^2)
(wrong) Case 2, T(n) = Θ(n log n)
(right) a=9, b=3, f(n) = n
(wrong) Case 3, T(n) = Θ(n log n)
--InteriorSeparator--
Medium
--InteriorSeparator--
46
--FlashCardSeparator--
}], role=model}, finishReason=STOP, avgLogprobs=-0.27074407299919306}]