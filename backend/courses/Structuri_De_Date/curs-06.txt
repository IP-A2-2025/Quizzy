***************Beginning Page***************
***************page number:1**************
SD 2021/2022
<E|> <ﬁ>4IE>4IE> IE OQO

***************Ending Page***************

***************Beginning Page***************
***************page number:2**************
Continut
Coada cu prioritéti $i “max-heap"
El r51 ' _= :E ‘)QG
CHM 5D 2021/2022 2/50

***************Ending Page***************


***************Beginning Page***************
***************page number:3**************
Coada cu prioritéti — exemple
> Pasagerii unui avion
Priorit5ﬂ:
— clasa "business";
— persoane célatorind cu copii / cu mobilitate redusé;
— ceilalti pasageri.
El r51 i E :5 {)qu

***************Ending Page***************

***************Beginning Page***************
***************page number:4**************
Coada cu priorité'ti — exemple

> Pasagerii unui avion
Prioritéﬂz
— clasa “business”;
— persoane cilatorind cu copii / cu mobilitate redusé;
— ceilalti pasageri.

> Avioane care se pregétesc $5 aterizeze
Prioritéjfi
— urgente;
— nivelul carburantului;
— distanta faté de aeroport.

***************Ending Page***************


***************Beginning Page***************
***************page number:5**************
Tipul abstract Coada cu prioritati
> OBIECTE:
— structuri de date Tn care elementele sunt numite atomi;
— orice atom are un camp Che/e numit prioritate.
> Elementele sunt memorate Tn functie de prioritate 5i nu de pozitia lor.

***************Ending Page***************

***************Beginning Page***************
***************page number:6**************
Coada cu prioritégi — operatii
F cite§te
— intrare: 0 coadé cu prioritéjci C
— ie$irez atomul din C cu cheia cea mai mare.
F eliminé
— intrare: 0 coadé cu prioritéti C
— iesire: C din care s-a eliminat atomul cu cheia cea mai mare.
V insereazé
— intrare: o coadé cu prioritéti C 5i un atom at
— iesire: C Ia care s-a adéugat at.

***************Ending Page***************


***************Beginning Page***************
***************page number:7**************
maXHeap
V Implementeazé coada cu prioritéfci.
V Arbori binari cu proprietétile:
— Nodurile memoreazé cémpurile cheie;
— Pentru orice nod, cheia din acel nod este mai mare decét sau egalé cu
cheile din nodurile fiu;
— Arborele este complet. Fie h Tnéltimea arborelui. Atunci,
— Pentru i: O7 ~ -- ,h — 1, sunt 2’. noduri cu adéncimea i;
— Pe nivelul h — 1 nodurile interne sunt situate Ia sténga nodurilor
externe.
— Ultimul nod al unui maxHeap este nodul cel mai la dreapta pe nivelul h.

***************Ending Page***************

***************Beginning Page***************
***************page number:8**************
maXHeap — exem pl u
El r51 i E :5 Q Q G

***************Ending Page***************


***************Beginning Page***************
***************page number:9**************
|n5|jcimea unui maXHeap
Teoremé
Un maxHeap care conﬁne n chei are Tnﬁ/timea O(|og2 n).
El r51 i E :5 QQQ
Cm 6 5D 2021/2022 8/ 5°

***************Ending Page***************

***************Beginning Page***************
***************page number:10**************
Inéljcimea unui maXHeap
Teoremﬁ
Un maXHeap care contine n chei are inﬁltimea O(|og2 n).
Demonstratie.
V Utilizém proprietatea de arbore binar complet.
> Fie h Tnélfcimea unui maxHeap cu n chei.
> Avem 2’- chei de adﬁncime i, pentru i: O7 ' -- ,h — l $i cel putin o
cheie de adéncime h: :> n Z 20+21 +22 +---+2h*1 +1 : 2h.
V ' '
Obtlnem. h g |og2 n nivel chei
iiiiiiiiiiiii iiiiiiiiiiiii 0 2O U
iiiiiii iiiiiiiii iiiiiii 1 21
iiii iiii i iiii ****h—1 2h—1
CHM SD2021/2022 8/50

***************Ending Page***************


***************Beginning Page***************
***************page number:11**************
maXHeap: eliminarea
V Se eliminﬁ rédécina heap-ului
(corespunde elementului cel mai prioritar).

> Algoritmul are trei etape:
F Se Tnlocuie$te cheia rédécinii cu cheia ultimului nod;
P Se $terge ultimul nod (de pe ultimul nivel);
V Se reface proprietatea de maXHeap.

CHM SD 2021/2022 9/50

***************Ending Page***************

***************Beginning Page***************
***************page number:12**************
maXHeap: eliminare — exemplu
El r51 i E :5 QQG

***************Ending Page***************


***************Beginning Page***************
***************page number:13**************
maXHeap: eliminare — exemplu
El r51 i E :5 QQG

***************Ending Page***************

***************Beginning Page***************
***************page number:14**************
maXHeap: eliminare — exemplu
El r51 i E :5 QQG

***************Ending Page***************


***************Beginning Page***************
***************page number:15**************
maXHeap: eliminare — exemplu
El r51 i E :5 QQG

***************Ending Page***************

***************Beginning Page***************
***************page number:16**************
maXHeap: eliminare — exemplu
El r51 i E :5 ‘)QG

***************Ending Page***************


***************Beginning Page***************
***************page number:17**************
maXHeap: eliminare — exemplu
El r51 i E :5 ‘)QG

***************Ending Page***************

***************Beginning Page***************
***************page number:18**************
maXHeap: eliminare — exemplu
El r51 i E :5 QQG

***************Ending Page***************


***************Beginning Page***************
***************page number:19**************
maXHeap: eliminare — exemplu
El r51 i E :5 ‘)QG

***************Ending Page***************

***************Beginning Page***************
***************page number:20**************
maXHeap: eliminare — exemplu
El r51 i E :5 ‘)QG

***************Ending Page***************


***************Beginning Page***************
***************page number:21**************
maXHeap: eliminare — exemplu
El r51 i E :5 ‘)QG

***************Ending Page***************

***************Beginning Page***************
***************page number:22**************
maXHeap: eliminare — exemplu
El r51 i E :5 QQG

***************Ending Page***************


***************Beginning Page***************
***************page number:23**************
maXHeap: inserarea
> Se insereazi noua cheie Tntr-un nou nod.
> Algoritmul are trei etape:
> Se adaugé noul nod ca cel mai din dreapta pe ultimul nivel;
P Se insereazﬁ noua cheie Tn acest nod;
P Se reface proprietatea de maxHeap.

***************Ending Page***************

***************Beginning Page***************
***************page number:24**************
maXHeap: inserare — exemplu
El r51 i E :5 ‘)QG

***************Ending Page***************


***************Beginning Page***************
***************page number:25**************
maXHeap: inserare — exemplu
El r51 i E :5 ‘)QG

***************Ending Page***************

***************Beginning Page***************
***************page number:26**************
maXHeap: inserare — exemplu
El r51 i E :5 ‘)QG

***************Ending Page***************


***************Beginning Page***************
***************page number:27**************
maXHeap: inserare — exemplu
El r51 i E :5 ‘)QQ

***************Ending Page***************

***************Beginning Page***************
***************page number:28**************
maXHeap: inserare — exemplu
El r51 i E :5 ‘)QQ

***************Ending Page***************


***************Beginning Page***************
***************page number:29**************
maXHeap: inserare — exemplu
El r51 i E :5 ‘)QQ

***************Ending Page***************

***************Beginning Page***************
***************page number:30**************
maXHeap: inserare — exemplu
El r51 i E :5 ‘)QQ

***************Ending Page***************


***************Beginning Page***************
***************page number:31**************
maXHeap: inserare — exemplu
El r51 i E :5 ‘)QQ

***************Ending Page***************

***************Beginning Page***************
***************page number:32**************
maXHeap: inserare — exemplu
El r51 i E :5 ‘)QQ

***************Ending Page***************


***************Beginning Page***************
***************page number:33**************
maXHeap: implementarea cu tablouri
0Q
19 26
30 40 59 60
76 98
8U]
III-M
o 1 2 3 4 5 6 7 s ‘WP/+1] a[2i+2]
szlgk§n—1:>a[k]§a[(k—1)/2]
:1 51 1 E :2 01110
Curs 6 SD 2021/2022 31/50

***************Ending Page***************

***************Beginning Page***************
***************page number:34**************
maXHeap: inserare
procedure insereaza(a, n, cheie)
begin
n <— n+1
a[n-l] <- cheie
j P n-1
heap <- false
while (j > 0 and not heap) d0
k <— [(J-1)/2]
if (a[j] > a[k]) then
swap(aU]1 a[kD
j <— k
else
heap <— true
end
Curs 6 SD 2021/2022 32/50

***************Ending Page***************


***************Beginning Page***************
***************page number:35**************
maXHeap: elimina
procedure elimina(a, n )
begin
a[O] e a[n-l]
n H n-l
j e O
heap <- false
while (2*j+1 < n and not heap) do
k <— 2*j+1
if (k < n-l and a[k] < a[k+l]) then
k <— k+1
if (a[j] < a[k]) then
SW3P(all11 alkl)
j <— k
else
heap <— true
end
Curs 6 SD 2021/2022 33/50

***************Ending Page***************

***************Beginning Page***************
***************page number:36**************
maXHeap: timp de execujcie
V Operatiile de inserare / eliminare au clasa de complexitate
O(h) I O(|og n)
O
1 2

3 4 5 6
cl 51 2 E :2 @va
Curs 6 SD 2021/2022 34/50

***************Ending Page***************


***************Beginning Page***************
***************page number:37**************
Continut
Colectii de multimi disjuncte 5i “union-find"
cl 51 i E :2 QQO
W56 SD2021/2022 35/50

***************Ending Page***************

***************Beginning Page***************
***************page number:38**************
Colecjcii de multimi disjuncte

gm - TLu'ﬂ'Et '

y L Illi- .0 | . UT

220% - F- - 2 I

5E2. .|--H mg

T“ T4‘ ‘E : ="' H 1 A Iicatii:

:ﬁltéglzil ‘if: ‘I ' ., -* *4 J P Refuele de calculatoare
EH 118.1% i1 ZZLFU P Pagini web (Internet)
I-“ "i'illi'r ,L. - Ell P PixeliTntr-o imagine
115.5" W: £3931 , ‘1 digitalé

' = "g ' L r

E? 1 4W-

H. I i‘:- 11 T. 11-13-13": I.

Curs 6 SD 2021/2022 36/50

***************Ending Page***************


***************Beginning Page***************
***************page number:39**************
Tipul abstract Colecgii de mulgimi disjuncte
> OBIECTE:
Colectii de submultimi disjuncte (partitii) ale unei multimi univers.
> OPERAIIII
P find
— intrare: 0 colectie C 5i un element i din multimea univers;
— ie$ire: submultimea din C céreia apartine i.
P union
— intrare: 0 colectie C 5i douﬁ elemente i $ij din multimea univers;
— ie$ire: C Tn care s-au reunit componentele lui i 5i j.
P singleton
— intrare: 0 colectie C $i un element i din multimea univers;
— ie$ire: C Ia care componenta lui i are pe i ca unic element.

***************Ending Page***************

***************Beginning Page***************
***************page number:40**************
Colecjcii de multimi disjuncte: union-find
V Structura union-find:
— multimea univers este {O,1,- -~ ,n — 1};
— 0 submuljcime este reprezentaté printr-un arbore;
— o colecjcie (partijcie) este o colectie de arbori (“p5dure”);
— reprezentarea unei “péduri” se face prin relatia “périnte”.

***************Ending Page***************


***************Beginning Page***************
***************page number:41**************
union-find: exemplu
cl a] 2 E :5 QQO
Curs 6 SD 2021/2022 39/50

***************Ending Page***************

***************Beginning Page***************
***************page number:42**************
union-find: exemplu
Q ® 6
9 0 0 9 0
0
cl a] 2 E :5 QQO
Curs 6 SD 2021/2022 39/50

***************Ending Page***************


***************Beginning Page***************
***************page number:43**************
union-find: exemplu
> n : 10, C : {{1,2,6}, {3}, {0,4,5,8}, {7,9}}
Q ® 6
9 0 0 9 0
0
@ III-MI
0 1 2 3 4 5 6 7 8 9
cl a] 2 E :2 @mv
Curs 6 SD 2021/2022 39/50

***************Ending Page***************

***************Beginning Page***************
***************page number:44**************
union-find: singleton
procedure singleton(C, i)
begin
C.parinte[i] <— -1
end
El r51 i E :5 ‘)QQ
Curs 6 SD 2021/2022 40/50

***************Ending Page***************


***************Beginning Page***************
***************page number:45**************
union-find: find
procedure find(C, i)
begin
temp <— i
while (C.parinte[temp] >: 0) do
temp <— C.parinte[temp]
return temp
end
Curs 6 SD 2021/2022 41/50

***************Ending Page***************

***************Beginning Page***************
***************page number:46**************
union-find: union
procedure union(C, i, j)
begin
ri <— find(i)
rj <— find(j)
if ri !: rj then
C.parinte[rj] <— ri
end
El r51 i E :5 6Q‘?
Curs 6 SD 2021/2022 42/50

***************Ending Page***************


***************Beginning Page***************
***************page number:47**************
Structuré union-find ponderaté’
> Solutie la problema arborilor dezechilibrati.
> Mecanism:
— Memorarea numérului de vérfuri din arbore (cu semn negativ).
— Aplatizarea arborilor.
CHM 5D 2021/2022 43/50

***************Ending Page***************

***************Beginning Page***************
***************page number:48**************
Structuré union-find ponderaté’: exemplu
0 ®
9 6 9 6 9 9
0
@ IIIIIIIIIEII
O 1 2 3 4 5 6 7 8 9
cl 51 2 E :2 va
Curs 6 SD 2021/2022 44/50

***************Ending Page***************


***************Beginning Page***************
***************page number:49**************
Aplatizarea arborilor — exemplu
> find(9)
(D Q
" 9
9 0 6 ® Q (3 0 0 6
6 0
G) 9
® Q

***************Ending Page***************

***************Beginning Page***************
***************page number:50**************
Aplatizarea arborilor — exemplu
> find(9)
(D Q
0 9 Q 0 9
9 0 6 ® Q 9 0 6
6 0 6 0
6) 9 (3

® Q

***************Ending Page***************


***************Beginning Page***************
***************page number:51**************
Aplatizarea arborilor — exemplu
> find(9)
0 (D
9 0 9 9 6 0 9
® m 9 6 6 ® m 6 9 0 6
65 0 0
6
cl 51 2 E :2 QQG
Curs 6 SD 2021/2022 47/50

***************Ending Page***************


***************Beginning Page***************
***************page number:52**************
Aplatizarea arborilor — exemplu
b find(9)
(i) 0
Q 6 0 9 Q 9 9 0 9
@J Q (5 9 0 6 ® G (5 0 0 6
0
cl 51 2 E :2 QQG
Curs 6 SD 2021/2022 48/50

***************Ending Page***************


***************Beginning Page***************
***************page number:53**************
Structuré union-find ponderaté’
procedure union(C, i, j)
begin
ri <- find(i); rj <— ﬁnd(j)
while (C.parinte[i] >: O) do
temp <— i; i <— C.parinte[i]; C.parinte[temp] <— ri
while (C.parinteﬁ] >: O) do
temp <- j; j <— C.parinte[j]; C.parinte[temp] k rj
if C.parinte[ri] > C.parinte[rj] then
C.parinte[rj] e C.parinte[ri] + C.parinte[rj]
C.parinte[ri] e rj
else
C.parinte[ri] k C.parinte[ri] + C.parinte[rj]
C.parinte[rj] <— ri
end
Curs 6 SD 2021/2022 49/50

***************Ending Page***************


***************Beginning Page***************
***************page number:54**************
Structuré union-find ponderaté’

Teoremé

Pornind de la o co/ecjfie vidé’, orice secvenlté’ de m opera/tr? union ,si find

asupra n elemente are complexitatea O(n + m |og* n).

Observatie: log’k n este numﬁrul de logaritméri pénﬁ se obtine valoarea 1.
Cm 6 SD 2021/2022 5O/ 5°

***************Ending Page***************


