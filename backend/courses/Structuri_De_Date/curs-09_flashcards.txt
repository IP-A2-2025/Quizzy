[{content={parts=[{text=--FlashCardSeparator--
Single
--InteriorSeparator--
What is the question in the problem of searching?
--InteriorSeparator--
a âˆˆ S?
--InteriorSeparator--
easy
--InteriorSeparator--
3
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the time complexity of searching in Binary Search Trees in the average case?
--InteriorSeparator--
O(log n)
--InteriorSeparator--
medium
--InteriorSeparator--
23
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following are balanced search trees?
--InteriorSeparator--
(right) AVL trees
(right) Red-black trees
(wrong) Linear Lists
(wrong) Unordered Lists
--InteriorSeparator--
medium
--InteriorSeparator--
26
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the complexity of a right simple rotation?
--InteriorSeparator--
O(1)
--InteriorSeparator--
easy
--InteriorSeparator--
34
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following operations are included in the dynamic aspect of the searching problem?
--InteriorSeparator--
(right) Insertion
(right) Deletion
(wrong) Static Array Creation
(wrong) Querying
--InteriorSeparator--
medium
--InteriorSeparator--
3
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the worst-case time complexity for searching in a Binary Search Tree with n elements?
--InteriorSeparator--
O(n)
--InteriorSeparator--
medium
--InteriorSeparator--
23
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following properties hold true for binary search trees?
--InteriorSeparator--
(right) Values in the left subtree of a node are smaller than the node's value
(right) Values in the right subtree of a node are greater than the node's value
(wrong) The tree must be balanced
(wrong) Duplicate values are not allowed
--InteriorSeparator--
medium
--InteriorSeparator--
10
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What data structure is used to memorize the path from the root to the added/deleted node for AVL Trees
--InteriorSeparator--
Stack
--InteriorSeparator--
hard
--InteriorSeparator--
29
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What are the cases to consider when deleting a node in a binary search tree?
--InteriorSeparator--
(right) The node has no children
(right) The node has two children
(wrong) The node is the root
(wrong) The node has three children
--InteriorSeparator--
medium
--InteriorSeparator--
18
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In AVL trees, what values can the balance factor of a node take?
--InteriorSeparator--
-1, 0, 1
--InteriorSeparator--
hard
--InteriorSeparator--
28
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is the time complexity of insertion and deletion operations in a balanced AVL tree?
--InteriorSeparator--
(right) O(log n)
(wrong) O(1)
(wrong) O(n)
(wrong) O(n^2)
--InteriorSeparator--
hard
--InteriorSeparator--
27
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the name of the traversal that sorts the keys of a binary search tree?
--InteriorSeparator--
Inorder traversal
--InteriorSeparator--
medium
--InteriorSeparator--
12
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What happens during the third case of node deletion from a binary search tree?
--InteriorSeparator--
(right) The value of the node to be deleted is swapped with its inorder predecessor
(right) The inorder predecessor is deleted
(wrong) The node is simply removed and the tree is rebalanced
(wrong) The tree remains unchanged
--InteriorSeparator--
hard
--InteriorSeparator--
18
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the time complexity of searching for an element in a sorted linear list using binary search?
--InteriorSeparator--
O(log n)
--InteriorSeparator--
medium
--InteriorSeparator--
6
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What does the function 'succesor(t)' do?
--InteriorSeparator--
(right) Returns the node with the smallest value greater than the value of node 't'.
(wrong) Returns the node with the largest value smaller than the value of node 't'.
(wrong) Returns the parent of node 't'.
(wrong) Returns the root of the tree.
--InteriorSeparator--
hard
--InteriorSeparator--
14
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the structure used for the static aspect of binary search?
--InteriorSeparator--
Sorted array
--InteriorSeparator--
easy
--InteriorSeparator--
6
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is the time complexity of 'inordine(v, viziteaza)'?
--InteriorSeparator--
(right) O(n)
(wrong) O(log n)
(wrong) O(1)
(wrong) O(h)
--InteriorSeparator--
medium
--InteriorSeparator--
12
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the time complexity of inserting a new node into a binary search tree?
--InteriorSeparator--
O(h), where h is the height of the tree.
--InteriorSeparator--
medium
--InteriorSeparator--
16
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is the disadvantage of AVL trees?
--InteriorSeparator--
(right) Additional space for storing height/balance factor
(right) Rebalancing operations are costly
(wrong) Searching is O(n)
(wrong) They cannot handle duplicate keys
--InteriorSeparator--
hard
--InteriorSeparator--
43
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What determines the efficiency of searching in a Binary Search Tree?
--InteriorSeparator--
Height of the tree
--InteriorSeparator--
medium
--InteriorSeparator--
13
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
When is `rotatieStanga(x)` applied?
--InteriorSeparator--
(right) When inserting in sub-tree C and x no longer satisfies the AVL property
(wrong) When deleting in sub-tree C and x no longer satisfies the AVL property
(wrong) When inserting in sub-tree A and x no longer satisfies the AVL property
(wrong) When the tree becomes empty
--InteriorSeparator--
hard
--InteriorSeparator--
31
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the operation used to maintain the balance of an AVL tree after insertion or deletion?
--InteriorSeparator--
Rotation
--InteriorSeparator--
medium
--InteriorSeparator--
29
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What does 'h' represent in the context of Binary Search Tree complexity?
--InteriorSeparator--
(right) Height of the tree
(wrong) Number of nodes
(wrong) Number of leaves
(wrong) Number of levels
--InteriorSeparator--
easy
--InteriorSeparator--
13
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the time complexity of simple rotations?
--InteriorSeparator--
O(1)
--InteriorSeparator--
easy
--InteriorSeparator--
34
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What are the advantages of AVL Trees?
--InteriorSeparator--
(right) O(log n) time complexity for search, insert, and delete operations.
(wrong) No extra space required.
(wrong) Simple to implement.
(wrong) Always results in a perfectly balanced tree.
--InteriorSeparator--
hard
--InteriorSeparator--
43
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What condition must be satisfied for a binary search tree 't' to be an AVL-balanced tree?
--InteriorSeparator--
|h(v->stg) - h(v->drp)| <= 1 for any node v
--InteriorSeparator--
hard
--InteriorSeparator--
28
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which applications may use AVL trees?
--InteriorSeparator--
(right) Data Analysis
(right) Data Mining
(wrong) Small embedded systems with memory constraints
(wrong) Scenarios with frequent insertion and deletion operations compared to search operations
--InteriorSeparator--
hard
--InteriorSeparator--
43
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In the provided pseudocode, what is the purpose of the 'predp' variable in the 'insArbBinCautare' procedure?
--InteriorSeparator--
It stores the parent node of the current node 'p' being traversed.
--InteriorSeparator--
hard
--InteriorSeparator--
17
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which cases need to be considered when deleting a node (p) with value x from a binary search tree?
--InteriorSeparator--
(right) p has no children
(right) p has one child
(wrong) p has three children
(wrong) p has a right child only
--InteriorSeparator--
hard
--InteriorSeparator--
18
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
When inserting a new key in a Binary Search Tree, where should the key be placed (if it's not already present)?
--InteriorSeparator--
As a leaf node
--InteriorSeparator--
medium
--InteriorSeparator--
16
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
When do we use double rotations in AVL Trees?
--InteriorSeparator--
(right) When inserting into z and x no longer satisfies the property
(wrong) Always when a node needs to be balanced
(wrong) Rotations can only be single
(wrong) Double rotations are never necessary
--InteriorSeparator--
hard
--InteriorSeparator--
35
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Which operation is used to restore balance when a node's balance factor in an AVL tree becomes invalid after an insertion in the left subtree of the left child?
--InteriorSeparator--
Right simple rotation
--InteriorSeparator--
hard
--InteriorSeparator--
38
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is meant by "C is a O(log n)-stable class of balanced trees?"
--InteriorSeparator--
(right) There exist algorithms for search, insert, and delete operations in O(log n)
(right) The resulting trees belong to class C after search, insert, or delete operations.
(wrong) It means that all trees in the class have a height of log n.
(wrong) It means that trees in the class are perfectly balanced.
--InteriorSeparator--
hard
--InteriorSeparator--
27
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the condition checked in the while loop within the `poz(t,x)` function for searching in a binary search tree?
--InteriorSeparator--
p != NULL and p->val != x
--InteriorSeparator--
medium
--InteriorSeparator--
13
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
In the 'Arbori binari de cÃ©utare: eliminare' section, what is the role of node 'q' when deleting node 'p' (case 3 - p has two children)?
--InteriorSeparator--
(right) q stores the largest value y smaller than the value in x.
(wrong) q is always the left child of p.
(wrong) q is a temporary node that is not used for deletion.
(wrong) q stores the smallest value y larger than the value in x.
--InteriorSeparator--
hard
--InteriorSeparator--
18
--FlashCardSeparator--
}], role=model}, finishReason=STOP, avgLogprobs=-0.22749761467896146}]