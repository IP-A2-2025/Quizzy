***************Beginning Page***************
***************page number:1**************
SD 2021/2022
<E|> <ﬁ>4IE>4IE> IE OQO

***************Ending Page***************

***************Beginning Page***************
***************page number:2**************
Continut

Sortare bazaté pe comparatii
sortare prin interschimbare
sortare prin insertie
sortare prin selectie
sortare prin interclasare (merge sort)
sortare rapidé (quick sort)

CHM SD2021/2022 2/44

***************Ending Page***************


***************Beginning Page***************
***************page number:3**************
Problema sortérii
> Forma 1:
F lntrare: n, (v0,...,v,,_1)
P legire: (W0,...,Wni1) astfelTncﬁt (W0,...,Wni1) este 0 permutare a
(V0,...,Vni1) Si W0 g g Wnil
> Forma 2:
P lntrare: n, (R0, ..., Rn_1) cu cheile k0, ..., k,,_1
F legire: (R6, ..., RI'1_1) astfel Tncﬁt (R6, ..., RI'1_1) este 0 permutare a
> Structura de date
Tablou a[0..n — 1]
a[O] : v07 ...,a[n — 1]: vn_1
CUM 5D 2021/2022 3/44

***************Ending Page***************

***************Beginning Page***************
***************page number:4**************
Continut
Sortare bazaté' pe comparatii
sortare prin interschimbare
El r51 i E :5 ‘)QQ
CHM SD2021/2022 4/44

***************Ending Page***************


***************Beginning Page***************
***************page number:5**************
Sortare prin interschimbare (bubble-sort)
> Principiul de bazé’:
V (i,j) cu i <j este 0 inversiune dacé a[i] > an]
> Cét timp existé o inversiune (i, i + 1) interschimbé a[i] cu a[i + 1]
V Algoritm:
Procedure bubbleSort(a, n)
begin
ultim <— n — 1
while (ultim > 0) do
n1 <— ultim-1; ultim <— 0
fori<—0to n1 do
if (a[i] > a[i + 1]) then
swap<a[/1, av + 11>
ultim <- i
end
Curs 8 SD 2021/2022 5/44

***************Ending Page***************

***************Beginning Page***************
***************page number:6**************
Sortare prh1interschinwbare-exenwplu
32147@1:2)
37214@1:® 23147
3 7 2 1 4 2 3 1 4 7
32714 21347
32714 21347
32174 21347
3 2 1 7 4
32147 21347@1:0)
32147 12347
12347
Curs 8 SD 2021/2022 6 /44

***************Ending Page***************


***************Beginning Page***************
***************page number:7**************
Sortare prin interschimbare
> Analiza
P Cazul cel mai nefavorabil
a[0] > a[1] > > a[n— 1]
Timp c5utare: O(n — 1 + n — 2 + + 1): O(nz)
Tbubb/eSort(n) : 0(n2)
P Cazul cel mai favorabil: O(n)
cl 51 1 E :2 v?» ‘1x9
Cm 8 SD 2021/2022 7/ 44

***************Ending Page***************

***************Beginning Page***************
***************page number:8**************
Conjunut
Sortare bazaté' pe comparatii
sortare prin insertie
El r51 i E :5 QQG
CHM SD2021/2022 8/44

***************Ending Page***************


***************Beginning Page***************
***************page number:9**************
Sortare prin inserjcie directé
> Principiul de bazé’:
presupunem a[O../' — 1] sortat
insereazé a[i] astfel Tncét a[0..i] devine sortat
> Algoritm (céutarea pozitiei lui a[i] secvential):
Procedure insertSort( a, n)
begin
fori<—1ton—1do
jei-1//a]0..ii 1] sortat
temp <— a[i] // caut Iocul lui temp
while ((j Z 0) and (a[j] > temp)) do
aU + 1] <— a[/']
j +1-1
if (a[j + 1]! I temp) then
a[i + 1] <— temp
end
Curs 8 SD 2021/2022 9/44

***************Ending Page***************

***************Beginning Page***************
***************page number:10**************
Sortare prin inserjcie directé
> Exemplu
3 7 2 1
3 7 2 1
2 3 7 1
1 2 3 7
> Analiza
F céutarea pozitiei [Tn a[0..j 1 l] necesité O(j 1 1) pa$i
P cazul cel mai nefavorabil a[0] > a[1] > > a[n — 1]
Timp céutare: O(l + 2 + + n — 1): O(nz)
TinsertSort(n) I O(nZ)
F Cazul cel mai favorabil: O(n)
Curs 8 SD 2021/2022 10/44

***************Ending Page***************


***************Beginning Page***************
***************page number:11**************
Conjunut
Sortare bazaté' pe comparatii
sortare prin selectie
El r51 i E :5 ‘)QG
CHM SD2021/2022 11/ 44

***************Ending Page***************

***************Beginning Page***************
***************page number:12**************
Sortare prin selecjcie
> Se aplici urmétoarea schemi:
> pasul curent: selecteazé un element $i-l duce pe pozitia sa finalé din
tabloul sortat;
F repetﬁ pasul curent péné cénd toate elementele ajung pe locurile finale.
V Dupé' modul de selectare a unui element:
V Selectie naivé: alegerea elementelor Tn ordinea Tn care se aflé initial (de
|an—1|aOsaude|aO|a n—1)
F Selectie sistematicé: utilizare max-heap

***************Ending Page***************


***************Beginning Page***************
***************page number:13**************
Sortare prin selecjcie naivﬁ
> Tn ordinea n — 1, n — 2, ..., 1,0, adicé:
(V00 g i < n :> a[i] : max{a[0], ...,a[i]}
Procedure naivSort(a, n)
begin
for i <— n— 1 downto 1 do
imax <- i
forj <— i — 1 downto 0 do
if (a[j] > a[imax]) then
imax Hj
if (i! : imax) then
swap(a[i], a[imax])
end
V Complexitatea timp Tn toate cazurile este O(n2)
Curs 8 SD 2021/2022 13/44

***************Ending Page***************

***************Beginning Page***************
***************page number:14**************
Heap sort (sortare prin selectie sistematicé)
Etapa ' ...EE....
> organizeazﬁ tabloul ca un O 1 2 3 4 5 6 7 8
max-heap: (Vk)1 g k g
nil :> a[k] §a[(kil)/2]; 6
O
P initial tabloul satisface
proprietatea max-heap Tncepénd
cu pozijcia n/2;
0 0 |
P introduce in max-heap 3 4
elementele de pe pozitiile 6 g
n/2—1,n/2—2,---,1,0. 7 8
a[2*i+1] a[2*i+2]
Curs 8 SD 2021/2022 14/44

***************Ending Page***************


***************Beginning Page***************
***************page number:15**************
Heap sort (sortare prin selectie sistematicé)
Etapa ll
> selecteazé elementul maxim Q
$i-l duce Ia locul lui prin
interschimbare cu ultimul; 9 a
> micsoreazé n cu 1 §i apoi x
reface max-heapul; Q 0
V repeté pa$ii de mai sus péné
cénd toate elementele ajung 6 ®
pe locul lor.
Curs 8 SD 2021/2022 15/44

***************Ending Page***************

***************Beginning Page***************
***************page number:16**************
Heap sort (sortare prin selectie sistematicé)
[III-III-ﬂ
0 1 2 3 4 5 6 7 8
9
0 G)
6 0 9 9

9

El r51 i E :5 QQQ
Curs 8 SD 2021/2022 16/44

***************Ending Page***************


***************Beginning Page***************
***************page number:17**************
Operajcia de introducere Tn heap
Procedure insereazaAIT/ea(a, n, t)
begin
j <— t
heap <— false
while ((2 *j + 1 < n) and not heap) d0
k <— 2 *j + 1
if ((k < n — 1) and (a[k] < a[k + 1])) then
k <— k + 1
if (am < a[k]) then
5W3P(3U]' 8W)
j e k
else
heap H true
end
Curs 8 SD 2021/2022 17/44

***************Ending Page***************

***************Beginning Page***************
***************page number:18**************
Heap sort (sortare prin selectie sistematicé)
Procedure heapSort(a, n)
begin
// construieste maxheap-ul
for t <— (n — 1)/2 downto 0 do
insereazaAlTlea(a, n, t)
// elimina
r e n — l
while (r > O) do
5W3P(a[011 8W)
insereazaAlTlea(a, r, 0)
r e r — 1
end
Curs 8 SD 2021/2022 18/44

***************Ending Page***************


***************Beginning Page***************
***************page number:19**************
Heap sort - Exemplu

10 17 5 23 7 (n = 5)

10 17 5 Q Z

10 B 5 H Z

23 10 5 17 7

a u 5 1_0 z (max-heap n)

cl 51 2 E :2 QQQ

Curs 8 SD 2021/2022 19/44

***************Ending Page***************

***************Beginning Page***************
***************page number:20**************
Heap sort - Exemplu
Q ll 5 m Z (max-heap n)
Z ll 5 Q 23
E H 5 Z 23 (max-heap n-1)
Z m 5 17 23
m Z 5 17 23 (max-heap n-2)
5 Z m 17 23
Z 5 Q 17 23 (max-heap n-3)
5 7 10 17 23
5 7 10 17 23 (max-heap n-4)
5 7 10 17 23

Curs 8 SD 2021/2022 20/44

***************Ending Page***************


***************Beginning Page***************
***************page number:21**************
Heap sort - complexitate

V formarea heap-ului (pp. n : 2k — 1)
2:01 2(k - i - 1)2' I 2k+l - 2(k + 1)

P eliminarea din heap si refacerea heap-ului
2,2,1 21'2" I (k _ 2)2k+1 + 4

> complexitate algoritm de sortare
Theapsort(n) I 2nlogn — 2n I O(nlogn)

Curs 8 SD 2021/2022 21/44

***************Ending Page***************

***************Beginning Page***************
***************page number:22**************
Conjunut
Sortare bazaté' pe comparatii
sortare prin interclasare (merge sort)
cl 51 i E :2 QQO
CHM SD2021/2022 22/44

***************Ending Page***************


***************Beginning Page***************
***************page number:23**************
Paradigma divide-et-impera

> P(n): problemé de dimensiune n

P baza:
P dacé n 5 n0 atunci rezolvé P prin metode elementare

P divide-et-impera:
P divide P Tn a probleme P1(n1), ..., Pa(na) cu n,- g n/b, b > 1
P rezolv5 P1(n1)7 ..., Pa(na) Tn aceea§i manieré 5i obtine solutiile $1, ..., $3
P asambleazé $1, ...,Sa pentru a obtine solutia S a problemei P

CHM 5D 2021/2022 23/44

***************Ending Page***************

***************Beginning Page***************
***************page number:24**************
Paradigma divide-et-impera: algoritm
Procedure DivideEt/mpera(P, n, S)
begin
if (n g n0) then
determine’ S prin metode elementare
else
Tmparte P in P1, ..., Pa
DivideEtlmpera(P1, n1, 51)
DivideEtlmpera(Pa, na, 55)
Asambleaza(51, ...,Sa,5)
end
Curs 8 SD 2021/2022 24/44

***************Ending Page***************


***************Beginning Page***************
***************page number:25**************
Sortare prin interclasare (Merge sort)
P generalizare: a[p..q]
P baza: p Z q
P divide-et-impera
P divide: m I [(p + q)/2]
P subprobleme: a[p..m], a[m+ 1..q]
P asamblare: interclaseazé subsecventele sortate a[p..m] 5i a[m + 1..q]
P initial memoreazé rezultatul interclasérii Tn temp
P copie din temp[0..q — p + 1] in a[p..q]
P complexitate:
P timp: T(n) : O(n log n)
P spatiu suplimentar: O(n)
Curs 8 SD 2021/2022 25/44

***************Ending Page***************

***************Beginning Page***************
***************page number:26**************
Interclasarea a doué secvenjce sortate
> problema:
F date a[0] g a[1] g g a[m* 1], b[0] g b[1] g § b[n* 1], 55 se
construiascé c[O] 5 c[l] 5 g c[m+ n — 1] ai.
(Vk)((ﬂi)c[k] : a[i]) \/ (Ej)c[k] : b[j]) iar pentru k! : p, c[k] 5i c[p]
provin din elemente diferite
> solutia
P initial: i<—0,j<—0, k<—0
V pasul curent:
P daca a[i] g b[j] atunci c[k] <— a[i], i<— i+ 1
P daca a[i] > b[j] atunci c[k] <~ b[_j] j ej + 1
P k <— k + 1
P conditia de terminare: i> m — 1 sau j > n — 1
P daca e cazul, copie in c elementele din tabloul neterminat
Curs 8 SD 2021/2022 26/44

***************Ending Page***************


***************Beginning Page***************
***************page number:27**************
Continut
Sortare bazaté' pe comparatii
sortare rapidé (quick sort)
El r51 i E :5 ‘)QQ
CHM SD2021/2022 27/44

***************Ending Page***************

***************Beginning Page***************
***************page number:28**************
Sortare rapidé (Quick sort)
P generalizare: a[p..q]
> baza: p Z q
> divide-et-impera
P divide: determiné k Tntre p 5i q prin interschimbéri a.T. dupé
determinarea lui k avem:
> pgigk :> a[i]§a[k]
> k<jsq :> alklsali]
P k q
P subprobleme: a[p..k — 1], a[k + 1..q]
V asamblare: nu existé
Curs 8 SD 2021/2022 28/44

***************Ending Page***************


***************Beginning Page***************
***************page number:29**************
Quick sort: partitionare
> initial:
P x <— a[p] (se poate alege X arbitrar din a[p..q])
P i<— p + 1;j <— q
> pasul curent:
F dacé a[i] g x atunci [4* i+ 1
P dacﬁ an] Z x atuncij <—j— 1
P dac§ a[i] > x > aLi] si i <j atunci
swap(a["]7 aiii)
i <— i+ 1
1F] 1 1
V terminare:
V conditia i>j
> operatii
k H i i 1
swap<aipiaik1>
WEB 5D 2021/2022 29/44

***************Ending Page***************

***************Beginning Page***************
***************page number:30**************
Quick sort: partitionare - exemplu
Procedure partitioneaza(a, p, q, k)
begin
>_< <— a[P] p q
'* P + 1 X = 19H
j <— q e 1; 1;
while (i <:j) do 1 J
if (am <2 X) the" I-
i<— i+ 1 ' "’
if (aL/l >= X) then a
j w- — 1 + +
if (i <1) 8"" (am > X) am’ I-
(x > a[j]) then + +
swap(a[/], alil)
i <- i+ 1 d
k P "— 1 G-
a[p] <— a[k] 1‘ ".‘
a[k] <— x J 1
end
cl 51 2 E :2 QQG
Curs 8 SD 2021/2022 30/44

***************Ending Page***************


***************Beginning Page***************
***************page number:31**************
Quick sort: recursie - exemplu
P q
Procedure (Ill/among), x = 19H
1‘ t ‘t
P, q) i 1'
begin
while (p < q ) do @Pa'ﬁlima'e
partitioneaza(a, p, q, k)
quickSort(a, p, k—
—
1) . e-Hg
qu/ckSort(a, k + [PM k (ml
1, q)
end Q recursie
cl 51 2 E :2 va
Curs 8 SD 2021/2022 31/44

***************Ending Page***************

***************Beginning Page***************
***************page number:32**************
Quick sort: arbore de recursie
cm:
m m EH3
E E
QQG
CM SD 2021/2022 32/44

***************Ending Page***************


***************Beginning Page***************
***************page number:33**************
Quick sort - complexitate
> Alegerea pivotului influenteazé eficienjca algoritmului
> Cazul cel mai nefavorabil: pivotul este cea mai micé' (cea mai mare)
valoare. Timp proportional cu n + n — 1 + + 1.
> TquickSort(n) I 0(n2)
.melemente
E\-\n-1elemente
E\ ‘ln-Zelemente
E‘ I n-aelemente
Bl ...
pl Zelemente
P Arborele de recursie: '5' - lemme‘
WEB SD2021/2022 33/44

***************Ending Page***************

***************Beginning Page***************
***************page number:34**************
Quick sort - complexitate
V Un pivot “bun” Tmparte tabloul Tn doué subtablouri de dimensiuni
comparabile
> Tnéljcimea arborelui de recursie este O(log n)
V Complexitatea medie este O(n log n)
nelemente
nl2 elementegumnﬂ elemente
2 elemen$l 2 elemente
lelement | \ lelement
1 element 1 element
WEB SD2021/2022 34/44

***************Ending Page***************


***************Beginning Page***************
***************page number:35**************
Conjunut
Sortare bazaté pe comparatii
sortare prin interschimbare
sortare prin insertie
sortare prin selectie
sortare prin interclasare (merge sort)
sortare rapidé (quick sort)
Sortare prin numﬁrare
Sortare prin distribuire
4E1r<ﬁ><ifb4IE> :E QQQ
CUrs8 —

***************Ending Page***************

***************Beginning Page***************
***************page number:36**************
Sortare prin numérare

V Ipotezéz a[i] G {1,2,...,k}

> Se determiné pozitia fiecérui element Tn tabloul sortat numérﬁnd céte
elemente sunt mai mici decét acesta

1 Procedure countingSort(a, b, n, k)

2 begin

3 for i e 1 to k do

4 c[i] <- O

5 forj<—0ton—1do

6 clam] e c[aun + 1

7 for i <— 2 to k do

8 c[i] e c[i] + c[i — 1]

9 forj<—n—1downt00d0

10 blClaLiH — 1] P 8U]

11 c[aL/H e c[aun — 1

12 end
Complexitate: O(k + n)

Curs 8 SD 2021/2022 36/44

***************Ending Page***************


***************Beginning Page***************
***************page number:37**************
' V
Sortare prln numarare — exemplu (k I 6)
1 2 3 4 5 6
Iiniile 5-6 c 2 0 2 3 O l
o 1 2 3 4 5 6 1
5136413414 123456
IiniileH; c 2 2 4 1 1 a
01234561 01234567 01234561
b 4 b 1 4 b 1 44
123456 123456 123456
c224678 c124678 6124518
liniile 9-11, j = 7 Iiniile 9-11, j = 6 ,linijfe 9-11’ j = 5
o 1 2 3 4 5 6 7
tabloulsortat: b l l 3 3 4 4 4 6
WEB SD2021/2022 37/44

***************Ending Page***************

***************Beginning Page***************
***************page number:38**************
Conjunut
Sortare bazaté pe comparatii
sortare prin interschimbare
sortare prin insertie
sortare prin selectie
sortare prin interclasare (merge sort)
sortare rapidé (quick sort)
Sortare prin numérare
Sortare prin distribuire
E] ﬁ _ _= :E ‘)‘RG'
CHM SI"021/2022 38/44

***************Ending Page***************


***************Beginning Page***************
***************page number:39**************
Sortare prin distribuire
> lpotezﬁ: Elementele a[i] sunt distribuite uniform peste intervalul [0,1)
P Principiu:
P se divide intervalul [0,1) in n subintervale de mérimi egale, numerotate
de la 0 la n — 1;
V se distribuie elementele a[i] Tn intervalul corespunzétor: in - a[i]];
> se sorteazﬁ fiecare pachet folosind o alté metodé;
F se combiné cele n pachete intr-o listé sortaté.

***************Ending Page***************

***************Beginning Page***************
***************page number:40**************
Sortare prin distribuire
V Algoritm:
Procedure bucketSort(a, n )
begin
fori<—0ton—1do
insereaza(B[Ln - a[i]]], a[i])
fori<—0t0n—1do
sorteazﬁ lista B[i]
concateneazé Tn ordine listele B[0], B[1], - ~ ,B[n — 1]
end
Complexitatea medie: O(n)
Curs 8 SD 2021/2022 40/44

***************Ending Page***************


***************Beginning Page***************
***************page number:41**************
Sortare prln dlstrlbwre — exemplu
A B
1 D
z | E I:
1 55 2 I ml: ml: Ell-1-
-| E a I EH-
: 4
ﬁ E S
a m 1' E I: FE!-
v E a
WEI 9 ‘*-
(ﬁ) (“I
(Cormen T.H. et a|., Introducere Tn algoritmi)
El r51 i E :5 QQG
Curs 8 SD 2021/2022 41/44

***************Ending Page***************


***************Beginning Page***************
***************page number:42**************
Sortare - complexitate
. Caz
Algorltm favorabil mediu nefavorabil
bubbleSort n n2 n2
insertSort n n2 n2
naivSort n2 n2 n2
heapSort n log n n log n n log n
mergeSort n log n n log n n log n
quickSort n log n n log n n2
countingSort — n + k n + k
bucketSort — n —
Curs 8 SD 2021/2022 42/44

***************Ending Page***************


***************Beginning Page***************
***************page number:43**************
Cénd utilizﬁm un anumit algoritm de sortare?
> O metodi de sortare este stab/I5 dacé pistreazé ordinea relativé a
elementelor cu chei identice
V Recomandéri
P Quick sort: cénd nu e nevoie de o metodé stabilé si performanta medie
e mai importanté decét cea Tn cazul cel mai nefavorabil; O(n log n)
complexitatea timp medie, O(log n) spatiu suplimentar
F Merge sort: cénd este necesaré 0 metodé stabilé; complexitate timp
O(n log n); dezavantaje: O(n) spatiu suplimentar, constanta mai mare
decét cea a QuickSort
P Heap sort: cénd nu e nevoie de o metodé stabilé si ne intereseazé mai
mult performanta Tn cazul cel mai nefavorabil decét Tn cazul mediu;
timp O(n log n), spatiu 0(1)
V Insert sort: cénd n e mic

***************Ending Page***************


***************Beginning Page***************
***************page number:44**************
Cénd utilizﬁm un anumit algoritm de sortare?
V In anumite conditii, este posibilé o sortare Tn O(n)
> Counting sort: valori dintr-un interval
P Bucket sort: valorile sunt distribuite aproximativ uniform
CHM 9920210022 44/44

***************Ending Page***************


