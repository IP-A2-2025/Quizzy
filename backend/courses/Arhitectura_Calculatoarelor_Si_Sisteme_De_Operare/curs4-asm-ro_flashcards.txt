[{content={parts=[{text=--FlashCardSeparator--
Single
--InteriorSeparator--
What type of memory access discipline does the stack use?
--InteriorSeparator--
LIFO (Last-In, First-Out)
--InteriorSeparator--
easy
--InteriorSeparator--
2
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Which register stores the address of the top of the stack?
--InteriorSeparator--
ESP
--InteriorSeparator--
easy
--InteriorSeparator--
2
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the syntax for pushing an operand onto the stack?
--InteriorSeparator--
push operand
--InteriorSeparator--
easy
--InteriorSeparator--
3
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which operand sizes are typically used with the `push` instruction?
--InteriorSeparator--
(right) 2 bytes
(right) 4 bytes
(wrong) 1 byte
(wrong) 8 bytes
--InteriorSeparator--
medium
--InteriorSeparator--
3
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What happens to the ESP register when a value is pushed onto the stack?
--InteriorSeparator--
ESP is decremented by the size of the operand.
--InteriorSeparator--
medium
--InteriorSeparator--
3
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following are valid examples of the `push` instruction?
--InteriorSeparator--
(right) push eax
(wrong) push 10
(right) push dword ptr [esi*2+ecx]
(wrong) push byte ptr [ebx]
--InteriorSeparator--
medium
--InteriorSeparator--
4
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the syntax for popping a value from the stack?
--InteriorSeparator--
pop destination
--InteriorSeparator--
easy
--InteriorSeparator--
5
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What happens to the ESP register when a value is popped from the stack?
--InteriorSeparator--
ESP is incremented by the size of the operand.
--InteriorSeparator--
medium
--InteriorSeparator--
5
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following can be a valid destination for the `pop` instruction?
--InteriorSeparator--
(right) eax
(right) dword ptr [ebx+edi]
(wrong) 100
(wrong) byte ptr [esi]
--InteriorSeparator--
medium
--InteriorSeparator--
6
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Can a constant value be used as the destination operand in a `pop` instruction?
--InteriorSeparator--
No
--InteriorSeparator--
medium
--InteriorSeparator--
6
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is a practical use of the program stack?
--InteriorSeparator--
(right) Saving the value of a register temporarily.
(right) Storing local variables.
(wrong) Storing global variables.
(wrong) Executing system calls.
--InteriorSeparator--
medium
--InteriorSeparator--
7
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What happens if `push` and `pop` instructions are not properly balanced?
--InteriorSeparator--
It can affect multiple data points and cause errors.
--InteriorSeparator--
hard
--InteriorSeparator--
8
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the potential impact of an unbalanced stack?
--InteriorSeparator--
It affects more data than initially apparent.
--InteriorSeparator--
hard
--InteriorSeparator--
8
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In the example on page 9, what is the primary purpose of the `push eax` and `push edx` instructions?
--InteriorSeparator--
To save the values of eax and edx before they are modified, and restore them after.
--InteriorSeparator--
medium
--InteriorSeparator--
9
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What happens if a `pop` instruction is omitted after pushing values onto the stack?
--InteriorSeparator--
Registers will receive incorrect values, and the original values might not be restored.
--InteriorSeparator--
hard
--InteriorSeparator--
10
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
How does a function call differ from a simple jump instruction?
--InteriorSeparator--
A function call saves the return address to allow the program to return to the point of the call after the function completes.
--InteriorSeparator--
medium
--InteriorSeparator--
11
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Where is the return address typically stored during a function call?
--InteriorSeparator--
On the stack
--InteriorSeparator--
easy
--InteriorSeparator--
11
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the syntax of the `call` instruction?
--InteriorSeparator--
call address
--InteriorSeparator--
easy
--InteriorSeparator--
12
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the effect of the `call` instruction?
--InteriorSeparator--
It pushes the address of the next instruction onto the stack and jumps to the specified address.
--InteriorSeparator--
medium
--InteriorSeparator--
12
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the syntax of the `ret` instruction?
--InteriorSeparator--
ret
--InteriorSeparator--
easy
--InteriorSeparator--
13
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the effect of the `ret` instruction?
--InteriorSeparator--
It pops the return address from the stack and jumps to that address.
--InteriorSeparator--
medium
--InteriorSeparator--
13
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What happens if an extra `pop` instruction is executed before a `ret` instruction?
--InteriorSeparator--
The `ret` instruction will retrieve an incorrect return address from the stack.
--InteriorSeparator--
hard
--InteriorSeparator--
14
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the potential consequence of an incorrect return address after a `ret` instruction?
--InteriorSeparator--
Program crash or forced termination.
--InteriorSeparator--
hard
--InteriorSeparator--
14
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Who is responsible for pushing parameters onto the stack before a function call?
--InteriorSeparator--
The caller
--InteriorSeparator--
medium
--InteriorSeparator--
15
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Who is responsible for removing parameters from the stack after a function call?
--InteriorSeparator--
The caller
--InteriorSeparator--
medium
--InteriorSeparator--
15
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
How are parameters removed from the stack after a function call (without using `pop`)?
--InteriorSeparator--
By adding the total number of bytes occupied by the parameters to the ESP register.
--InteriorSeparator--
medium
--InteriorSeparator--
15
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In what order should parameters be pushed onto the stack in C/C++?
--InteriorSeparator--
In reverse order of their appearance in the function's parameter list.
--InteriorSeparator--
medium
--InteriorSeparator--
16
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Why are parameters pushed in reverse order in C/C++?
--InteriorSeparator--
To support functions with a variable number of parameters.
--InteriorSeparator--
medium
--InteriorSeparator--
16
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Why is it important to leave the stack as it was found upon entering a function?
--InteriorSeparator--
To avoid errors caused by an unbalanced stack.
--InteriorSeparator--
hard
--InteriorSeparator--
16
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Given the C++ code `void dif(int a, int b)`, what ASM instructions would typically be used to call `dif(9, 5)`?
--InteriorSeparator--
(right) push dword ptr 5
(right) push dword ptr 9
(wrong) push 9
(wrong) push 5
--InteriorSeparator--
hard
--InteriorSeparator--
18
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Following the call to `dif(9,5)`, what instruction is used to clean the stack?
--InteriorSeparator--
(right) add esp, 8
(wrong) pop eax
(wrong) ret
(wrong) sub esp, 8
--InteriorSeparator--
medium
--InteriorSeparator--
18
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
How are function parameters accessed in Visual C++?
--InteriorSeparator--
By their names.
--InteriorSeparator--
medium
--InteriorSeparator--
19
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
How are function parameters generally accessed in assembly?
--InteriorSeparator--
By their addresses.
--InteriorSeparator--
hard
--InteriorSeparator--
19
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Where is the first parameter in a function's parameter list typically located (assuming the standard calling convention)?
--InteriorSeparator--
EBP+8
--InteriorSeparator--
hard
--InteriorSeparator--
19
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Where are subsequent parameters located relative to the first parameter (EBP+8)?
--InteriorSeparator--
At increasing addresses, EBP+12, EBP+16, etc.
--InteriorSeparator--
hard
--InteriorSeparator--
19
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Which register is used to return a 4-byte value from a function in Visual C++?
--InteriorSeparator--
eax
--InteriorSeparator--
medium
--InteriorSeparator--
20
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What registers are typically used to return an 8-byte value from a function in Visual C++?
--InteriorSeparator--
(right) edx
(right) eax
(wrong) ecx
(wrong) ebx
--InteriorSeparator--
hard
--InteriorSeparator--
20
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What should a function written in assembly do with the registers it uses (besides eax and edx for return values)?
--InteriorSeparator--
Save their values on the stack at the beginning of the function and restore them before returning.
--InteriorSeparator--
hard
--InteriorSeparator--
21
--FlashCardSeparator--
}], role=model}, finishReason=STOP, avgLogprobs=-0.08835955363948171}]