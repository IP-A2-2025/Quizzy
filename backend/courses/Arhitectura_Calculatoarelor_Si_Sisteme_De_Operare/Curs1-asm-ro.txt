***************Beginning Page***************
***************page number:1**************
Limbajul de asamblare.
Familia Intel

***************Ending Page***************

***************Beginning Page***************
***************page number:2**************
Arhitectura calculatoarelor 5i sisteme de operare - ASM
El€m6nte d6 b21251 (1)
- ﬁ6care instrucgiune - 0 singuré 0p6ra§ie
— unei instrucgiuni intr-un limbaj de niv6l inalt ii
corespund in general mai multe instrucgiuni in
limbaj d6 asamblara
' opﬁranzi
— constante
— locagii de memorie
— regi§tri ai procﬁsorului
2

***************Ending Page***************


***************Beginning Page***************
***************page number:3**************
Arhitectura calculatoarelor 5i sisteme de operare - ASM
El€m6nte d6 baza (2)
' variabilelﬁ sunt accﬁsata prin spﬁciﬁcaraa
adr6s6i lor in m6m0ri6
- r6gi§trii procesorului nu sunt acwsibili din
limbaj alﬁ de nivel inalt
— dar compilatorul ii poate folosi temporar in
100111 variabilelor
— avantaj - vitezé de acc6s mai mare
3

***************Ending Page***************

***************Beginning Page***************
***************page number:4**************
Arhitectura calculatoarelor §i sisteme de operare - ASM
Promsoare Int61 (32 131131) - reg1§tn
31 15 8 7 O

4

***************Ending Page***************


***************Beginning Page***************
***************page number:5**************
Arhitectura calculatoarelor 5i sisteme de operare - ASM
Dimeznsiunw r6gi§trilor
' EAX, EBX, ECX, EDX, ESI, EDI, EBP,
ESP — 32 bilii
' AX, BX, CX, DX, SI, DI, BP, SP — 16 bi11i
— ﬁecare reprezinté juméitatea mai puyin
semniﬁcativéi a registrului corespunzéitor p6 32
laigi
' AH, AL, BH, BL, CH, CL, DH, DL — 8 bilti
— jumétéﬁk unor regigtri pe 16 bigi

***************Ending Page***************

***************Beginning Page***************
***************page number:6**************
Arhitectura calculatoarelor 5i sisteme de operare - ASM
Reg1§tr1 speelah
' ESP
— regine adresa vérfului stivei pregramului
— aetualizat prin instruegiunile de lueru eu stiva
' EBP
— folosit de compilatoare in apelurile de funegii
' aee§ti regi§tri in general nu sunt utilizagi
deceit pentru seepurile mengionate mai sus
—6

***************Ending Page***************


***************Beginning Page***************
***************page number:7**************
Arhitectura calculatoarelor 5i sisteme de operare - ASM
Utlllzarea reg1§tr110r
- m6m0rarea d6 valori numericﬁ - 1a fel ca
variabilele de m6m0ri6
— togi r6gi§trii anteriori
' formama admsﬁlor dﬁ mﬁmorie
— doar regi§trii p6 32 bigi
— in expmsii mai complexe, cam pot conﬁne mai
mulgi regigtri §i constante
7

***************Ending Page***************

***************Beginning Page***************
***************page number:8**************
Arhitectura calculatoarelor 5i sisteme de operare - ASM

Formama adr6s610r - variante (1 )
' constanté

—ex;[100]
' valoarea unui mgistru

— ex; [BAX]
' suma dintre: valoama unui registru $i 0

constanté

—€XJ[EBX+5]

***************Ending Page***************


***************Beginning Page***************
***************page number:9**************
Arhitectura calculatoarelor 5i sisteme de operare - ASM
Formama adr6s610r - variante (2)
' suma dintm valorilﬁ a doi regi§tri
—6XJ[ECX+ESI]
' suma dintre valoril6 a doi r6gi§tri $i 0
constanté
—€XJ[EDX+EBP+14]
' un mgistru poate f1 inmulgit cu 2/4/ 8
—ex;[EAX+EDI*2],[ECX+EDX*4+5]
—9

***************Ending Page***************

***************Beginning Page***************
***************page number:10**************
Arhitectura calculatoarelor 5i sisteme de operare - ASM
Indicatcri d€ conditii (1 )
- aduc informagii suplimantam despm
mzultatﬁle operagiilor tocmai ex6cutate
— separat de rezultatul propriu-zis
' valorilé lor pot ﬁ tﬁstate prin program
' singura formé de a implemernta structuri de
control in limbajul de asamblare
—10

***************Ending Page***************


***************Beginning Page***************
***************page number:11**************
Arhitectura calculatoarelor 5i sisteme de operare - ASM
Indicatcri de: conditii (2)

' cﬁl mai d6s utilizagi
Carry (C)
Overﬂow (O)
Zero (Z)

— 1 dacé rezultatul ultim6i opﬁragii estﬁ O; altfel O
Sign (S)

— O - rezultat pozitiv; 1 - razultat n6gativ
—11

***************Ending Page***************

***************Beginning Page***************
***************page number:12**************
Arhitectura calculatoarelor 5i sisteme de operare - ASM
Visual C++

- mediu de programara in cam $6 pot intercala
u§0r instrucgiuni in limbaj d6 asamblam
— doar pentru programa pe 32 bigi

- programul in ansamblul séu 6st€ scris in
C/C++

~ instrucgiunile in limbaj de asamblare pot
accesa regi§trii procesorului, dar §i
variabilele dﬁclarater in C/C++

12

***************Ending Page***************


***************Beginning Page***************
***************page number:13**************
Arhitectura calculatoarelor 5i sisteme de operare - ASM
Sintaxé
' cuvént-cheie: _a sm
' poate ﬁ urmat d6
— 0 singuré instrucgiuna
— un bloc de instrucgiuni
— delimitaraa blocurilor - 1a fel ca in C/C++
— sﬁparatorul intre instrucgiuni in blocuri
- linie noué (recomandat pentru claritate)
' caracterul ”; ”
—13

***************Ending Page***************

***************Beginning Page***************
***************page number:14**************
Arhitectura calculatoarelor §i sisteme de operare - ASM
Exémplé

_asm mov €ax,5;
int a;
_asm {

mov eax,5

mov a,lO

}
—14

***************Ending Page***************


***************Beginning Page***************
***************page number:15**************
Instructiuni aritmetice

***************Ending Page***************

***************Beginning Page***************
***************page number:16**************
Arhitectura calculatoarelor 5i sisteme de operare - ASM
()pﬁranzi ( 1 )

' 3 catagorii

— r6gi§tri dﬁ uz general

— locagii de mamorie (variabile)

— constante
' mguli genﬁrale (pot exista 6xcap§ii)

— 0p6ranzii au acﬁea§i dimansiuna

— primul/singurul 0p6rand este §i destinagia undﬁ

se d6pune rezultatul
16

***************Ending Page***************


***************Beginning Page***************
***************page number:17**************
Arhitectura calculatoarelor 5i sisteme de operare - ASM
()p eran21 (2)
' opnragii binare
— primul operand nu poate ﬁ 0 constanté
' deoarece nu ar putea m6m0ra rezultatul
— nu esta parmis ca ambii opﬁranzi s5 ﬁe locagii
de mamorie
' la procesoarela Int6l
' se f0r§6azé utilizarea regigtrilor
' vitezé mai mam
17

***************Ending Page***************

***************Beginning Page***************
***************page number:18**************
Arhitectura calculatoarelor §i sisteme de operare - ASM
Atribuim
' sintaxa
mov destinatie,sursa
' ex6nqﬂe
mov eax,ebx
mov cx,5
mov bl,[eax]
mov [esi],€dx
______________________________+K

***************Ending Page***************


***************Beginning Page***************
***************page number:19**************
Arhitectura calculatoarelor 5i sisteme de operare - ASM
D1m€ns1un6a operranzﬂor (1)
' un registru am merau a66€a§i dimﬁnsiune
' dar a666a§i constanté poatﬁ ocupa 1/2/4
octegi
— in funcgie d6 context
' la fel gi un oparand adresé d6 mﬁmoriﬁ
' regulé: dacé unul din operanzi este un
registru, celélalt are aceeagi dimensiune
19

***************Ending Page***************

***************Beginning Page***************
***************page number:20**************
Arhitectura calculatoarelor 5i sisteme de operare - ASM

Dlmensrunea operanzrlor (2)

' daea niei un operand nu este registru,
trebuie preoizata explicit dimensiunea lor

' ouvinte oheie

— byte ptr - operand pe 1 octet

— word ptr - operand pe 2 oeteti

— dword ptr - operand pe 4 oeteti
—20

***************Ending Page***************


***************Beginning Page***************
***************page number:21**************
Arhitectura calculatoarelor 5i sisteme de operare - ASM
Exezmplez
mov al, 5 // 1 OCt€t - dimansiunea
registrului a l
mov bx, [esi] // 2 octbti - dimensiunba
ragistrului bx
mov byte ptr [ecx] , 5//1()ct6t
mov word ptr [ecx] , 5 //20(:t61;i
mov dword ptr [ecx] , 5 //4oct61;i

***************Ending Page***************

***************Beginning Page***************
***************page number:22**************
Arhitectura calculatoarelor 5i sisteme de operare - ASM
Dimensiunea operanzilor (3)

' Visual C++: daeé loeagia de memorie este 0
variabilé deelaraté in C/C++, nu mai trebuie
preeizaté explicit dimensiunea

— compilatorul 0 eunoagte din declaragie
— §i deei poate genera instrueyiunea eoreetéi
' atengie
— regula operanzilor de dimensiuni egale réniéne
valabilé
—22

***************Ending Page***************


***************Beginning Page***************
***************page number:23**************
Arhitectura calculatoarelor §i sisteme de operare - ASM
EX€IIlp1€

int a;

_asm mov a,3;

' compilatorul va gﬁnera

mov dword ptr [...],3

int a;

_asm mov cx, a ; //6r0ar6, cx are 2 0ct6§i
23

***************Ending Page***************


***************Beginning Page***************
***************page number:24**************
Arhitectura calculatoarelor 5i sisteme de operare - ASM
Indlcaton de cond1§11
- instrucgiunea d6 atribuim nu modiﬁcé
valorile: indicatorilor de condigii
' acﬁgtia i§i péstmazé valorila p6 care le
aveau de la instrucgiunilé antarioare
—24

***************Ending Page***************


***************Beginning Page***************
***************page number:25**************
Arhitectura calculatoarelor 5i sisteme de operare - ASM
Utlllzare practlca (1)
int a,b;
' cum $6 traduw linia de cod
a=b;
' varianta gre§ité1
_asm mov a,b;
— ambii 0p6ranzi sunt locagii d6 memoria - eroare
25

***************Ending Page***************


***************Beginning Page***************
***************page number:26**************
Arhitectura calculatoarelor 5i sisteme de operare - ASM
Utlllzare practlca (2)
' varianta corecté:
_asm {
mov eax,b
mov a,eax
}
' in general, perntru 0 instrucgiune C/C++ sunt
n6cesare mai multe in limbaj de asamblam
26

***************Ending Page***************

