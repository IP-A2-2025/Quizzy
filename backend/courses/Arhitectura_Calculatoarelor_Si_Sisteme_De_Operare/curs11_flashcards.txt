[{content={parts=[{text=```
--FlashCardSeparator--
Single
--InteriorSeparator--
What is the role of the operating system?
--InteriorSeparator--
A program with the role of managing the computer system and acts as an intermediary between hardware and applications.
--InteriorSeparator--
easy
--InteriorSeparator--
2
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which are the main components of an operating system?
--InteriorSeparator--
(right) Kernel
(right) Drivers
(wrong) User Interface
(wrong) Compiler
--InteriorSeparator--
medium
--InteriorSeparator--
3
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the "heart" of the operating system?
--InteriorSeparator--
The Kernel
--InteriorSeparator--
easy
--InteriorSeparator--
5
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
In which mode does the operating system run?
--InteriorSeparator--
(right) Kernel mode
(wrong) User mode
(wrong) Safe mode
(wrong) Debug mode
--InteriorSeparator--
easy
--InteriorSeparator--
7
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
How does the switch between user mode and kernel mode occur?
--InteriorSeparator--
Through the interrupt system.
--InteriorSeparator--
medium
--InteriorSeparator--
8
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What are the main functions of the Kernel?
--InteriorSeparator--
(right) Process management
(right) Memory management
(wrong) Virus scanning
(wrong) Driver Installation
--InteriorSeparator--
medium
--InteriorSeparator--
10
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What are System Calls?
--InteriorSeparator--
Requests made by applications to the kernel to perform actions they cannot execute themselves.
--InteriorSeparator--
medium
--InteriorSeparator--
12
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Why are system calls necessary for certain actions?
--InteriorSeparator--
For system security, as these actions can only be performed in kernel mode.
--InteriorSeparator--
medium
--InteriorSeparator--
12
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Describe the first step in a system call.
--InteriorSeparator--
The program places the parameters of the system call in a specific memory area.
--InteriorSeparator--
hard
--InteriorSeparator--
13
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What happens after the program deposits parameters and generates a software interrupt in the system call process?
--InteriorSeparator--
(right) The processor switches to kernel mode.
(right) The service is identified and the corresponding routine is called.
(wrong) The program enters an infinite loop
(wrong) The user is prompted for a password.
--InteriorSeparator--
hard
--InteriorSeparator--
13
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What happens if errors are found during the routine that handles a system call?
--InteriorSeparator--
The system call fails.
--InteriorSeparator--
medium
--InteriorSeparator--
14
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What happens after the requested action is completed during a system call?
--InteriorSeparator--
The obtained results are placed in a memory area accessible to the application that made the call.
--InteriorSeparator--
hard
--InteriorSeparator--
14
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the penultimate step after the processor returns to user mode during a system call?
--InteriorSeparator--
The program resumes execution from the point where it was interrupted, using the information stored when the interrupt occurred.
--InteriorSeparator--
hard
--InteriorSeparator--
15
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Why is performing system calls a time-consuming operation?
--InteriorSeparator--
Because it involves switching between user mode and kernel mode, which is a relatively slow process.
--InteriorSeparator--
medium
--InteriorSeparator--
16
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Why is it recommended to perform system calls as infrequently as possible, working with buffers?
--InteriorSeparator--
(right) To improve system performance
(right) Because System Calls are time consuming
(wrong) To reduce memory usage
(wrong) To simplify programming
--InteriorSeparator--
hard
--InteriorSeparator--
16
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the purpose of a buffer when using functions like printf?
--InteriorSeparator--
To store the formatted text temporarily before sending it to the output device using a system call.
--InteriorSeparator--
medium
--InteriorSeparator--
17
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What are drivers?
--InteriorSeparator--
Software modules that manage communication with peripherals.
--InteriorSeparator--
easy
--InteriorSeparator--
19
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Where drivers are executed?
--InteriorSeparator--
(right) Kernel mode
(wrong) User mode
(wrong) Virtual mode
(wrong) Safe mode
--InteriorSeparator--
medium
--InteriorSeparator--
19
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Why is replacing a peripheral easier when using drivers?
--InteriorSeparator--
Because you only need to replace the driver, not reinstall the entire operating system.
--InteriorSeparator--
medium
--InteriorSeparator--
20
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is Multitasking?
--InteriorSeparator--
The ability to launch multiple programs for execution simultaneously.
--InteriorSeparator--
easy
--InteriorSeparator--
22
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is the difference between true parallelism and concurrency in multitasking?
--InteriorSeparator--
(right) Parallelism occurs when multiple processors execute instructions simultaneously.
(right) Concurrency involves rapidly switching between tasks on a single processor.
(wrong) Parallelism is only possible on supercomputers.
(wrong) Concurrency requires special hardware.
--InteriorSeparator--
hard
--InteriorSeparator--
22
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does the operating system manage when dealing with multitasking?
--InteriorSeparator--
The operating system manages processes, not programs, directly.
--InteriorSeparator--
medium
--InteriorSeparator--
23
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What happens to the memory allocated to a process when it terminates?
--InteriorSeparator--
The memory occupied is released.
--InteriorSeparator--
medium
--InteriorSeparator--
24
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What are the possible states of a process?
--InteriorSeparator--
(right) Running
(right) Ready
(right) Waiting
(wrong) Sleeping
--InteriorSeparator--
medium
--InteriorSeparator--
25
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In which state a process is waiting for the termination of a system call?
--InteriorSeparator--
Waiting
--InteriorSeparator--
easy
--InteriorSeparator--
25
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Under what conditions does a process leave the "running" state?
--InteriorSeparator--
Upon termination (normal or error), when making a system call, or when its execution time slice expires.
--InteriorSeparator--
hard
--InteriorSeparator--
27
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is Non-Preemptive Multitasking?
--InteriorSeparator--
A form of multitasking where a process can only be removed from execution in specific situations, and not forcefully by the operating system.
--InteriorSeparator--
medium
--InteriorSeparator--
28
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is a disadvantage of non-preemptive multitasking?
--InteriorSeparator--
(right) Programming errors can block processes.
(wrong) It requires more system resources.
(wrong) It is less efficient than preemptive multitasking.
(wrong) It is more difficult to implement.
--InteriorSeparator--
medium
--InteriorSeparator--
28
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the clock that the Operating System uses to measure how long a process has been running?
--InteriorSeparator--
Real-time Clock
--InteriorSeparator--
hard
--InteriorSeparator--
29
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
How does the operating system know how long a process has been executing?
--InteriorSeparator--
(right) Through a real-time clock
(right) The real-time clock generates interrupt requests at regular intervals
(wrong) By monitoring CPU usage
(wrong) By reading system logs
--InteriorSeparator--
hard
--InteriorSeparator--
29
--FlashCardSeparator--
```}], role=model}, finishReason=STOP, avgLogprobs=-0.18053795833667824}]