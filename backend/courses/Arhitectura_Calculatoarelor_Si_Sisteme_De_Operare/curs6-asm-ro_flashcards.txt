[{content={parts=[{text=--FlashCardSeparator--
Single
--InteriorSeparator--
What is the FPU and when was it integrated into the processor?
--InteriorSeparator--
Floating Point Unit, integrated starting with Intel 486.
--InteriorSeparator--
easy
--InteriorSeparator--
2
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following are true about the internal registers of the FPU?
--InteriorSeparator--
(right) There are 8 registers of 80 bits.
(right) They are organized as a stack.
(wrong) They are named AX, BX, CX, DX.
(wrong) ST(7) is always the top of the stack.
--InteriorSeparator--
medium
--InteriorSeparator--
3
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the role of ST(0) in FPU instructions?
--InteriorSeparator--
It is usually one of the operands or the only operand in unary operations.
--InteriorSeparator--
medium
--InteriorSeparator--
4
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What can the other operand be, besides ST(0), in FPU instructions?
--InteriorSeparator--
(right) A memory location.
(wrong) A constant.
(right) Another register ST(i).
(wrong) An immediate value.
--InteriorSeparator--
medium
--InteriorSeparator--
4
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
How are values pushed onto the FPU stack?
--InteriorSeparator--
Through instructions that load values from memory or predefined constants.
--InteriorSeparator--
easy
--InteriorSeparator--
5
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
How are values removed from the FPU stack?
--InteriorSeparator--
(right) Many processing instructions have a variant that decrements ST(0) from the stack.
(wrong) By directly popping them using an instruction named "pop".
(wrong) Only through the `fst` instruction.
(wrong) By using a special "remove" instruction.
--InteriorSeparator--
medium
--InteriorSeparator--
5
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the purpose of the `fld` instruction?
--InteriorSeparator--
It loads a floating-point variable (float, double) from memory onto the stack.
--InteriorSeparator--
easy
--InteriorSeparator--
6
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the purpose of the `fild` instruction?
--InteriorSeparator--
It loads an integer variable (short int, int) from memory onto the stack.
--InteriorSeparator--
easy
--InteriorSeparator--
6
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What do the instructions `fldz`, `fldl`, and `fldpi` do?
--InteriorSeparator--
They load the values 0, 1, and Ï€, respectively, onto the stack.
--InteriorSeparator--
easy
--InteriorSeparator--
8
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which instructions store the value of ST(0) into memory?
--InteriorSeparator--
(right) `fst adresa`
(right) `fstp adresa`
(wrong) `fld adresa`
(wrong) `fadd adresa`
--InteriorSeparator--
medium
--InteriorSeparator--
9
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the difference between `fst` and `fstp`?
--InteriorSeparator--
`fstp` copies ST(0) and eliminates it from the stack, while `fst` only copies ST(0).
--InteriorSeparator--
medium
--InteriorSeparator--
9
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does the instruction `fxch st(i)` do?
--InteriorSeparator--
It swaps the values of registers ST(0) and ST(i).
--InteriorSeparator--
easy
--InteriorSeparator--
11
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
In FPU addition operations, what is typically true?
--InteriorSeparator--
(right) One operand is always ST(0).
(right) ST(0) is usually the destination for the result.
(wrong) Only memory locations can be added to ST(0).
(wrong) Constants can be added to ST(0).
--InteriorSeparator--
medium
--InteriorSeparator--
12
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Explain the difference between `fadd st(0), st(i)` and `fadd st(i), st(0)`.
--InteriorSeparator--
`fadd st(0), st(i)` calculates ST(0) = ST(0) + ST(i), while `fadd st(i), st(0)` calculates ST(i) = ST(i) + ST(0).
--InteriorSeparator--
hard
--InteriorSeparator--
13
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the purpose of the `faddp st(i), st(0)` instruction?
--InteriorSeparator--
It calculates ST(i) = ST(i) + ST(0) and then removes ST(0) from the stack.
--InteriorSeparator--
medium
--InteriorSeparator--
13
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Describe the general structure of FPU subtraction operations.
--InteriorSeparator--
Similar to addition, ST(0) is usually the minuend and the result.
--InteriorSeparator--
medium
--InteriorSeparator--
14
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Explain the `fsub st(0), st(i)` instruction.
--InteriorSeparator--
It calculates ST(0) = ST(0) - ST(i).
--InteriorSeparator--
medium
--InteriorSeparator--
15
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the purpose of `fsubp st(i), st(0)`?
--InteriorSeparator--
It calculates ST(i) = ST(i) - ST(0) and then removes ST(0) from the stack.
--InteriorSeparator--
medium
--InteriorSeparator--
15
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Explain the concept of "reverse subtraction" in FPU operations.
--InteriorSeparator--
The order of operands is reversed compared to regular subtraction, subtracting the first operand from the second, but storing the result in the first operand.
--InteriorSeparator--
hard
--InteriorSeparator--
16
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does `fsubr st(i), st(0)` do?
--InteriorSeparator--
It calculates ST(i) = ST(0) - ST(i).
--InteriorSeparator--
hard
--InteriorSeparator--
17
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Explain the difference between `fsub st(0), st(i)` and `fsubr st(0), st(i)`.
--InteriorSeparator--
`fsub st(0), st(i)` calculates ST(0) - ST(i), while `fsubr st(0), st(i)` calculates ST(i) - ST(0). The result is stored in ST(0) in both cases.
--InteriorSeparator--
hard
--InteriorSeparator--
15, 17
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Describe FPU multiplication operations.
--InteriorSeparator--
Similar to addition, with ST(0) typically being one operand and the destination.
--InteriorSeparator--
medium
--InteriorSeparator--
18
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does the `fmulp st(i), st(0)` instruction do?
--InteriorSeparator--
It calculates ST(i) = ST(i) * ST(0) and then removes ST(0) from the stack.
--InteriorSeparator--
medium
--InteriorSeparator--
18
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Describe the general structure of FPU division operations.
--InteriorSeparator--
Similar to other operations, ST(0) is the dividend and result, with the divisor either in memory or another register.
--InteriorSeparator--
medium
--InteriorSeparator--
19
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Explain the function of `fdiv st(i), st(0)`.
--InteriorSeparator--
It calculates ST(i) = ST(i) / ST(0).
--InteriorSeparator--
medium
--InteriorSeparator--
20
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is "reverse division" in FPU operations?
--InteriorSeparator--
The second operand is the dividend and the first is the divisor, but the result is written to the first operand.
--InteriorSeparator--
hard
--InteriorSeparator--
21
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does the instruction `fdivr st(i), st(0)` do?
--InteriorSeparator--
It calculates ST(i) = ST(0) / ST(i).
--InteriorSeparator--
hard
--InteriorSeparator--
22
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following is true about unary FPU operations?
--InteriorSeparator--
(right) ST(0) is the only operand.
(right) ST(0) is the destination of the result.
(wrong) They require two operands.
(wrong) They can only be performed on memory locations.
--InteriorSeparator--
medium
--InteriorSeparator--
23
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does the `fchs` instruction do?
--InteriorSeparator--
It changes the sign of the value in ST(0).
--InteriorSeparator--
easy
--InteriorSeparator--
23
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does the `fsqrt` instruction calculate?
--InteriorSeparator--
It calculates the square root of ST(0).
--InteriorSeparator--
easy
--InteriorSeparator--
23
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Describe the FPU comparison operations.
--InteriorSeparator--
They compare ST(0) with another register in the FPU stack and set condition flags.
--InteriorSeparator--
medium
--InteriorSeparator--
24
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What do the instructions `fcomi st(0), st(i)` and `fcomip st(0), st(i)` do? What is the difference?
--InteriorSeparator--
Both compare ST(0) and ST(i) and set condition flags. `fcomip` also removes ST(0) from the stack.
--InteriorSeparator--
hard
--InteriorSeparator--
24
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What are the possible results of a comparison using `fcomi` or `fcomip` and how are they indicated?
--InteriorSeparator--
(right) ST(0) > ST(i) is indicated by I - -
(right) ST(0) < ST(i) is indicated by I - .
(wrong) ST(0) = ST(i) is indicated by - I -.
(wrong) ST(0) != ST(i) is indicated by - - I.
--InteriorSeparator--
hard
--InteriorSeparator--
25
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
If after `fcomi st(0), st(i)` instruction, the values of the condition flags are shown as: "ST(0) > ST(i): I - -", what does this mean?
--InteriorSeparator--
(right) ST(0) is greater than ST(i)
(wrong) ST(0) is equal to ST(i)
(wrong) ST(0) is less than ST(i)
(wrong) The comparison resulted in an error.
--InteriorSeparator--
hard
--InteriorSeparator--
25
--FlashCardSeparator--
}], role=model}, finishReason=STOP, avgLogprobs=-0.10930925295476185}]