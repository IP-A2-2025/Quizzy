***************Beginning Page***************
***************page number:1**************
Arhilectura calcullloarelor 5i sixteme a: upmn - ASM
Adunarea/scéderea
~ sintaxa
add opl, opZ // opl +: 0p2
sub opl , op2 //0p1 —: 0p2
' sunt posibile aceleagi combinagii de
operanzi ca in cazul atribuirii
- indicatorii de condigii primesc valori
conform rezultatului operagiei
—17

***************Ending Page***************

***************Beginning Page***************
***************page number:2**************
Arhileclun calcullloarelor 5i sineme a: open" - ASM
Exemple
add eax,ebx
add dl,3
add si,[ecx]
add [eax+edi],ebp
add byte ptr [esi+10],14
add word ptr [esi+10],14
add dword ptr [esi+lO],l4
—--------------1r

***************Ending Page***************

***************Beginning Page***************
***************page number:3**************
Arhilectura calcullloarelor 5i sixteme a: 0pm“ - ASM
Opera'gii cu §i féré semn (1)
unsigned int a;
int b;
_asm add a, 20;
_asm add b, 20;
~ rezultatul poate ﬁ incorect (depégire)
~ trebuie testat indicatorul Carry (pentru a),
respectiv Overﬂow (pentru b)
—19

***************Ending Page***************

***************Beginning Page***************
***************page number:4**************
Arhilectura calcullloarelor 5i sixteme a: 0pm“ - ASM
Opera'gii cu §i féré semn (2)
- problemé
— operanzii a §i b sunt adrese de memorie
— procesorul nu $tie care este numér cu semn §i
care ﬁn?) semn
i deci care indicator trebuie setat: C sau O?
' réspuns
i procesoml seteazé togi indicatorii
i programatorul trebuie sé-l testeze pe cel potrivit
3|]

***************Ending Page***************

***************Beginning Page***************
***************page number:5**************
Arhilectura calcullloarelor 5i sixteme a: 0pm“ - ASM
Incrementare/decrementare
' sintaxa
inc op // 0p++
de c op // 0p--
' operandul poate ﬁ
i registru (orice dimensiune)
i locatie de memorie - dimensiunea trebuie
precizatz'l explicit
—3\

***************Ending Page***************

***************Beginning Page***************
***************page number:6**************
Arhilectllra calcullloarelor 5i sixteme a: upmn - ASM
Adunare/scédere cu transport
- sintaxa
adc opl, opZ // opl:opl+op2+Carry
sbb opl , op2 // 0p1:opl—op2—Carry
' la adunare/scidere participé §i valoarea
anterioaré a indicatorului Carry
- r01 - operagii cu numere care depé§esc
dimensiunea unei variabile

***************Ending Page***************

***************Beginning Page***************
***************page number:7**************
Arhilectura calcullloarelor 5i sixteme a: upmn - ASM
A
Inmultirea
~ sintaxa
mul op // numere fire“! semn
imul op // numere cu semn
' este indicat explicit un singur operand
— poate ﬁ registru sau locagie de memorie
- a1 doilea este implicit gi depinde de
dimensiunea primului
—3_1

***************Ending Page***************


***************Beginning Page***************
***************page number:8**************
Arhilectllra calcullloarelor 5i sixteme a: upmn - ASM
Operanzi (1)
' operandul explicit nu poate ﬁ 0 constanté
' dacé operandul explicit este 0 locagie de
memorie, trebuie precizati gi dimensiunea
sa
' destinagia rezultatului este tot implicité §i
necesité 0 dimensiune dublé fate‘! de
operanzi
—1i

***************Ending Page***************

***************Beginning Page***************
***************page number:9**************
Arhilectura calcullloarelor 5i sixteme a: upmn - ASM
duncnsiunc operand cxphcit opsrund implicit (mimic rczulmt
35

***************Ending Page***************

***************Beginning Page***************
***************page number:10**************
Arhileclurl calcullloarelor 5i sineme a: 0pm“ - ASM
Exemple
mul ebx // eaX-ebx—>(edx,eax)
mul cx // ax-cx—>(dx,ax)
mul al // se ridicé al 1a pétrat
mul dword ptr [esi]
// eax-[esi]—>(edx,eax)
// operanzi pe 4 octsgi
imul cx // operanzi cu semn
—so

***************Ending Page***************

***************Beginning Page***************
***************page number:11**************
Arhilectura calcullloarelor 5i sixteme a: upmn - ASM
A - _
Impartlrea
~ sintaxa
div op // numere fire“! semn
idiv op // numere cu semn
' este indicat explicit doar impérgitorul
— poate ﬁ registru sau locagie de memorie
- deimpérgitul este implicit gi depinde de
dimensiunea impérgitorului
—37

***************Ending Page***************

***************Beginning Page***************
***************page number:12**************
Arhilectura calcullloarelor 5i sixteme a: upmn - ASM
Operanzi (1)
' impérgitorul nu poate ﬁ 0 constant?!
' dacé impiryitorul este 0 locagie de memorie,
trebuie precizatﬁ §i dimensiunea sa
' douﬁ rezultate: cétul $1 restul
- destinagiile accstora sunt tot implicite
—38

***************Ending Page***************

***************Beginning Page***************
***************page number:13**************
Arhilectura calcullloarelor 5i sixteme a: upmn - ASM
Op eran21 (2)
dimensiunc impammr dcimpﬁnit
———-
39

***************Ending Page***************

***************Beginning Page***************
***************page number:14**************
Arhilectura calcullloarelor 5i sixteme a: 0pm“ - ASM
A .
Imparpre la 0
' dacé impérgitorul are valoarea 0, se produce
0 eroare 1a execugie
i la fel ca in orice limbaj
~ problema poate apérea §i in alte situagii
i obginem acelagi efect, de§i impirﬁtorul este
nenul
—w

***************Ending Page***************


***************Beginning Page***************
***************page number:15**************
Arhileclun calcullloarelor 5i sineme a: open" - ASM
Exemplu

_asm {

mov eax,l

mov edx,1

mov ebx,l

div ebx

)
- secvenga de mai sus produce eroare
—“

***************Ending Page***************

***************Beginning Page***************
***************page number:16**************
Arhilectura calcullloarelor 5i sixteme a: 0pm“ - ASM
De ce?

- impﬁrgitorul este ebx — 4 octeti
- deci deimpértitul este (edx,eax)
~ iar cétul trebuic dcpus in eax
' dar valoarea cétului este 232+] — prea mare

pentru a incépea in eax

i similar cu impérgirea 1a 0

i produce aceea$i eroare
—u

***************Ending Page***************

***************Beginning Page***************
***************page number:17**************
Arhilectura calcullloarelor 5i sixteme a: upmn - ASM
Cénd apare eroarea?
~ dacé §i numai dacé jumétatsa mai
semniﬁcativé a deimpérgitului este mai mare
sau egalé cu impénitorul
~ exemplul anterior
div ebx
i jumétatea mai semniﬁcativé a deimpinitului:
edx (: 1 2 ebx)
—43

***************Ending Page***************

***************Beginning Page***************
***************page number:18**************
Arhilectllra calcullloarelor 5i sixteme a: upmn - ASM

Apare problema in limbajul C?
' nu
' se impart intotdeauna operanzi de acelagi tip
' impérgitorul se alege de dimensiune egalé

cu a tipului de date folosit
- dcimpérgitul are implicit dimensiune dublé

i darjumétatea sa mai semniﬁcativé va primi

valoarea O

—“

***************Ending Page***************

***************Beginning Page***************
***************page number:19**************
Instructiuni pe bigi

***************Ending Page***************

***************Beginning Page***************
***************page number:20**************
Arhilectllra calcullloarelor 5i sixteme a: upmn - ASM
Instructiuni booleene
' implementeazé funcgiile booleene
elementare
i unari: NOT
— binare: AND, OR, XOR
- instrucgiunile au acelea§i nume ca §i
funcgiile pe care le implementeazé
' execugie: se aplicé funcyia, in paralel, pe togi
bigii operanzilor
A6

***************Ending Page***************


***************Beginning Page***************
***************page number:21**************
Arhileclur: calcullloarelor 5i sixleme a: openre - ASM
Exemple

n o t e a x

and bx , l 6

or byte ptr [edx] , lOO

xor [esi] , ecx

test a]. , ah // va ﬁ discutaté ulterior

' §i aici, primul/singuml operand este §i

destinagia rezultatului

—u

***************Ending Page***************

***************Beginning Page***************
***************page number:22**************
Arhilectura calcullloarelor 5i sixteme a: upmn - ASM
Utllltate
- existé operatori similari $i in limbajul C
- rar utilizagi
~ mai ales acolo unde este nevoie dc tratarea
individualé a unor bigi
i lucru cu mégti
- in practicé, doar funcgia AND se pretcazﬁ 1a
aga ceva
—“

***************Ending Page***************

***************Beginning Page***************
***************page number:23**************
Arhilectllra calcullloarelor 5i sixteme a: upmn - ASM
Lucrul cu mégti (1 )
' problemé: trebuie sé testém bitul de pe
pozitia 3 din registrul ax
i pentm testare putem folosi indicatorul Zero al
procesorului
i dar acesta ne poate spune doar dacé intregul
operand (ax) are valoarea 0 sau nu
~ solugie: togi ceilalgi bigi din ax (cu excepgia
pozigici 3) primcsc valoarea 0
—w

***************Ending Page***************

***************Beginning Page***************
***************page number:24**************
Arhilectllra calcullloarelor 5i sixteme a: upmn - ASM
Lucrul cu mégti (2)
- astfel, registrul ax are valoarea 0 dacﬁ $i
numai daci bitul de pe pozitia 3 este O
' deci indicatorul Zero ne va furniza
informayia corecté
and ax, 8 // deoarece 8 = 23
- a1 doilea operand este 0 constanté - mascd
i bitul 1 doar pe poziyia 3 - réméne nemodiﬁcat
—su

***************Ending Page***************

***************Beginning Page***************
***************page number:25**************
Arhileclllrl calcullloarelor 5i sistelne d: operlre - ASM
Lucrul cu ma§t1 (3)
- ceea ce ne doream era 0 testare a valorii
unui bit
i nedistructiv
' in schimb, togi ceilalgi bigi din ax se pierd
' ar trebui ca mai intéi $51 salvﬁm valoarea din
ax in alt registru
i ineﬁcient
—_=.

***************Ending Page***************

***************Beginning Page***************
***************page number:26**************
Arhilectura calcullloarelor 5i sixteme a: upmn - ASM
Lucrul cu mé§ti (4)
~ instrucgiunea test calculcazé tot funcgia
booleané AND
i dar nu scrie rezultatul nicéieri - nedislructiv
i doar seteazé indicatorii de condigii in acela§i
mod
test ax, 8 // ax nu este modiﬁcat
// acum putem testa indicatorul Zero
—.=1

***************Ending Page***************

***************Beginning Page***************
***************page number:27**************
Arhilectura calcullloarelor 5i sixteme a: upmn - ASM
Instructiuni dc deplasare
- sintaxé
shl opl , opZ // deplasare spre stinga
shr opl , op2 // deplasare spre dreapta
' 0p] - operandul asupra céruia se aplicé
deplasarea
- 0p2 - indicé numﬁrul de pozigii p6 care se
face deplasarea

***************Ending Page***************


***************Beginning Page***************
***************page number:28**************
Arhilectura calcullloarelor 5i sixteme a: 0pm“ - ASM
Operan21

~ primul operand poate ﬁ

i registru

i locagie dc memorie (trebuie indicaté explicit

dimensiunea sa)

' a1 doilea operand poate ﬁ

i constanti (l sau mai mult)

i registrul cl - singurul permis
—_=‘

***************Ending Page***************

***************Beginning Page***************
***************page number:29**************
Arhilectura calcullloarelor 5i sixteme a: upmn - ASM
Implementare
- ﬁecare bit din 0p] este mutat spre
stinga/dreapta cu 0p2 pozigii
' bigii care "ies" sunt memoragi, pe rénd, in
indicatorul Carry
i evident, numai ultimul este péstrat
' bigii care "intri" au togi valoarea 0
—.=5

***************Ending Page***************

***************Beginning Page***************
***************page number:30**************
Arhilectura calcullloarelor 5i sixteme a: upmn - ASM
Utilitate practicé (1)
~ pentru numcrc ﬁiri scmn
/deplasare spre sténga cu n pozigii -
echivalent cu inmulgirea cu 2”
\/deplasare spre dreapta cu n pozigii -
echivalent cu impértjrea la 2’1
—.=@

***************Ending Page***************

***************Beginning Page***************
***************page number:31**************
Arhilectllra calcullloarelor 5i sixteme a: upmn - ASM
Utilitate practicz'i (2)
° dar pentru numere cu semn?
\/dep1asare spre sténga - nu se poate
\/deplasare spre dreapta
i pentru a realiza 0 impérgire corecté la 2”, bitul
de semn trebuie sé réméné nemodiﬁcat
i §i in acelagi limp 55 se deplaseze §i spre dreapta
i deci bigii care "intri" nu mai au valoarea 0, ci
sunt egali cu bitul dc semn
57

***************Ending Page***************

***************Beginning Page***************
***************page number:32**************
Arhilectura calcullloarelor 5i sixteme a: 0pm“ - ASM
Deplasare aritmeticﬁ

' sintaxé

s ar opl , 0p2

' operanzii au aceleagi roluri ca anterior

' dar instrucgiunea realizeazi de fapt

impérgire la 2'1pentru numere cu semn
—§x

***************Ending Page***************

***************Beginning Page***************
***************page number:33**************
shl eax,1
shl byte ptr [ebx+ecx],3
shr dx,cl
sar eax,2

***************Ending Page***************

