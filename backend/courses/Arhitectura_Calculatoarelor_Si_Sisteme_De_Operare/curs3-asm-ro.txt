***************Beginning Page***************
***************page number:1**************
Instructiuni de salt

***************Ending Page***************

***************Beginning Page***************
***************page number:2**************
Arhilectura calcullloarelor 5i sixteme a: upmn - ASM
Compoﬂament general
~ modiﬁcé valoarea registrului contor
program
i deci adresa urmz'iloarei instrucliuni care va ﬁ
executati
' categorii
i salt necondigionat - intotdeauna
i salt condigionat - doar in anumite situaﬂi
—@\

***************Ending Page***************

***************Beginning Page***************
***************page number:3**************
Arhilectura calcullloarelor 5i sixteme a: 0pm“ - ASM
Salt necondiyionat

' sintaxé
j mp a dre sé
' exprimarea adresei - prin etichete

i similar limbajului C (instructiunea goto)

i se pot face salturi din blocuri de cod iasm in

blocuﬂ de cod C §i invers
—@1

***************Ending Page***************

***************Beginning Page***************
***************page number:4**************
Arhilectllra calcullloarelor 5i sixteme a: upmn - ASM
Salturi conditionate
' se testeazé 0 condigie 5i se face saltul doar
in cazul in care condigia este adevératé
i sau doar daci este {211le
' in caz contrar execugia continui cu
instrucgiunea urmﬁtoare
- cc condigii putem testa?
i indicatorii de condiyii (luagi individual)
— sau combinagii ale acestora
63

***************Ending Page***************


***************Beginning Page***************
***************page number:5**************
Arllilectura calcullloarelor 5i sistelne do operare - ASM
Pentru 1ndlcat0r1 1nd1v1dua11
indicator testat salt pt. valoarea 1 salt pt. valoarea 0
' Tn toate cazurile trebuie precizaté adresa de
salt
—~

***************Ending Page***************

***************Beginning Page***************
***************page number:6**************
Arhilectura calcullloarelor 5i sixteme a: 0pm“ - ASM
Cond1§11 compuse
- limbajul C - teste pe baza operatorilor
relationali
<, <:, ::, 1:, >, >:
- nu este suﬁcienté testarea unui singur
indicator
— dar relagiile pot ﬁ determinate veriﬁcind togi
indicatorii
—@5

***************Ending Page***************

***************Beginning Page***************
***************page number:7**************
Arhilectura calcullloarelor 5i sixteme a: 0pm“ - ASM
Comparare
- sintaxﬁ
cmp opl , op2
~ realizeazé intern o scédcrc
i nu scrie rezultatul nicéieri
i insi seleazé indicatorii de condigii
- instrucgiunea trebuie urmatﬁ dc un salt care
testeazi 0 anumité relagie intre opl §i op2
66

***************Ending Page***************

***************Beginning Page***************
***************page number:8**************
Arllilectura calcullloarelor 5i sistelne do operare - ASM
Salturl care te steaza relagn
67

***************Ending Page***************


***************Beginning Page***************
***************page number:9**************
Arhilectllra calcullloarelor 5i sixteme a: upmn - ASM
Structuri de control

- in limbajul C nu so recomandé utilizarea
instrucgiunii goto

' in schimb, se folosesc stmcturi de control

' dar implementarea acestora 1a nivelul
procesorului se face tot prin instrucgiuni dc
salt

—os

***************Ending Page***************

***************Beginning Page***************
***************page number:10**************
Arhilectura calcullloarelor 5i sixteme a: upmn - ASM
Stnlctura If (1)
' implementare - salt condigionat pe condigie
inversé celei din limbajul C
- motivagie
i in limbajul C, se executi 0 secvengz'l de cod
dacﬁ 0 condigie este adevératé
i in limbajul de asamblare, instrucgiunile de salt
pot evita execugia unei scavenge de cod
—oa

***************Ending Page***************

***************Beginning Page***************
***************page number:11**************
Arhilectun calcullloarelor 5| sineme a: open" - ASM
Exemplu
' cod C ' cod ASM
int 61X; cmp x,5
// tip cu semn j le maimare
. . 4 mov a, 2
if(x>5) maimare:
a:2 ;
7|]

***************Ending Page***************

***************Beginning Page***************
***************page number:12**************
Arhilectllra calcullloarelor 5i sixteme a: upmn - ASM
Stnlctura If (2)
' dacé avem 5i 0 ramuré else, trebuie
utilizatc doué instructiuni dc salt
~ a doua instructiune se asiguré c5, la
terminarea execupiei instrucpiunilor din
prima ramuré, nu vor ﬁ executate $i
instrucyiunile din a doua ramuré
— salt necondigionat
—1.

***************Ending Page***************


***************Beginning Page***************
***************page number:13**************
- codC ' codASM
if(x>5) cmp x,5
x——; jle nu
else dec x
x++; jmp afara
nu:
inc x

***************Ending Page***************

***************Beginning Page***************
***************page number:14**************
Arhilectura calcullloarelor 5i sixteme a: 0pm“ - ASM
Structura Whlle
' doué instructiuni de salt
i prima pentru a decide dacé se executé 0 noué
iteratie sau se péréseste bucla
. saltul - pe condilia inversé celei din codul C
i a doua pentru a relua execuyia dc 1a inceput
~ la ﬁnalul corpului buclci
' salt necondiﬂonat
73

***************Ending Page***************

***************Beginning Page***************
***************page number:15**************
- codC ' cod ASM
while(x<10) bucla:
x++; cmp x,5
jqe afara
inc x
jmp bucla
afara:

***************Ending Page***************

***************Beginning Page***************
***************page number:16**************
Arhilectura calcullloarelor 5i sixteme a: open“ - ASM
Structura For

' similaré structurii While
' instrucﬁuni auxiliare - delimiteazé clar

i initializarea variabilelor

i actualizarea valorilor variabilelor pentru iteraﬂa

urmétoare
75

***************Ending Page***************


***************Beginning Page***************
***************page number:17**************
Arhilectun calcullloarelor 5| sineme a: open" - ASM
Exemplu
' cod C ' cod ASM
for (1:0; i<:5; i++) mov i, O
s+:3; bucla: cmp i,5

jg afara
add 5,3
inc i
jmp bucla
afara:

_______________________________¥

***************Ending Page***************

***************Beginning Page***************
***************page number:18**************
Arhilectura calcullloarelor 5i sixteme a: upmn - ASM
Structura Do-While
' testul de continuare/ie$ire - la ﬁnal
' se testeazé aceea$i conditie ca in limbajul C
i in ambele limbaje, condigia adevératé duce 1a
reluarea buclei
—11

***************Ending Page***************

***************Beginning Page***************
***************page number:19**************
Arhilectun calcullloarelor 5| sineme a: open" - ASM
Exemplu
' codC ' cod ASM
do { bucla:
s+:i; mov eax, s
i++; add eax, i
} while (i<=5); mov s,eax
inc i
cmp i,5
jle bucla
—78

***************Ending Page***************

