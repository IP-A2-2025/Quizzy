***************Beginning Page***************
***************page number:1**************
Instructiuni de salt

***************Ending Page***************

***************Beginning Page***************
***************page number:2**************
Arhitectura calculatoarelor 5i sisteme de operare - ASM
Comportament gﬁneral
- modiﬁca valoarea ragistrului contor
program
— deci admsa urmatoarai instructiuni care va f1
6X€cutata
' catﬁgorii
— salt necondigionat - intotdeauna
— salt condigionat - doar in anumite situagii
61

***************Ending Page***************


***************Beginning Page***************
***************page number:3**************
Arhitectura calculatoarelor 5i sisteme de operare - ASM
Salt nacondltlonat

' sintaxa
jmp adresé
' exprimaraa adrasai - prin 6tich6te

— similar limbajului C (instrucgiunea goto)

— se pot face salturi din blocuri de cod _asm in

blocuri de cod C §i invars

—62

***************Ending Page***************

***************Beginning Page***************
***************page number:4**************
Arhitectura calculatoarelor 5i sisteme de operare - ASM
Salturi conditionate:
' s6 tﬁstaazé 0 condigie §i $6 facﬁ saltul doar
in cazul in cam condiyia 6st6 adﬁvératé
— sau doar dacé estﬁ falsé
- in caZ contrar 6X66u§ia continué cu
instrucgiunaa urmétoare
' ce condigii putem tersta?
— indicatorii de condigii (luagi individual)
— sau combinagii ale acestora
63

***************Ending Page***************


***************Beginning Page***************
***************page number:5**************
Arhitectura calculatoarelor 5i sisteme de operare - ASM
Pentru 1ndlcat0r1 1nd1V1dua11
indicator testat salt pt. valoarea 1 salt pt. valoarea 0
' in mate cazurile: tmbui6 pmcizaté adresa de
salt
—64

***************Ending Page***************

***************Beginning Page***************
***************page number:6**************
Arhitectura calculatoarelor 5i sisteme de operare - ASM
Cond11111 compuse

- limbajul C - teste pe baza operatorilor

relayionali

<9 <2’ :2’ !:’ >9 >:

' nu este suﬁeienté testarea unui singur

indicator

— dar relagiile pot ﬁ determinate veriﬁeénd togi

indieatorii
65

***************Ending Page***************


***************Beginning Page***************
***************page number:7**************
Arhitectura calculatoarelor 5i sisteme de operare - ASM
Comparare:
' sintaxé
cmp opl,op2
- maliznazé intern 0 scédere
— nu scrie rﬁzultatul nicéieri
— insé seteazé indicatorii dﬁ condigii
' instrucgiunea trebuie urmaté de un salt care
testeazé 0 anumité r61a§ieintr6 cpl §i opZ
66

***************Ending Page***************

***************Beginning Page***************
***************page number:8**************
Arhitectura calculatoarelor §i sisteme de operare - ASM
Saltun cam tezsteraza r61a1111
67

***************Ending Page***************


***************Beginning Page***************
***************page number:9**************
Arhitectura calculatoarelor 5i sisteme de operare - ASM
Structun d6 ccmtrol

- in limbajul C nu $6 recomandé utilizama
instrucgiunii g o t o

- in schimb, se f010$6sc structuri de control

' dar implﬁmentama acestora 1a niv6lul
procasorului s6 face: tot prin instrucgiuni de
salt

68

***************Ending Page***************

***************Beginning Page***************
***************page number:10**************
Arhitectura calculatoarelor 5i sisteme de operare - ASM
Structura If (1)
- implﬁnwntam — salt condigionat p6 condigie
inverrsé 0616i din limbajul C
- motivaﬁe:
— in limbajul C, se executé 0 secvenyé de cod
dacé 0 condigie esta adavératé
— in limbajul de asamblare, instrucgiunilﬁ de salt
pot evita execugia un€i S€cv6n§e de cod
69

***************Ending Page***************


***************Beginning Page***************
***************page number:11**************
Arhitectura calculatoarelor §i sisteme de operare - ASM
Ex6mplu
' cod C ' cod ASM
int a,X; cmp X,5
Uﬂpcusmnn jl€ maimare
... mov a,2
if(x>5) maimare:
a=2;
70

***************Ending Page***************

***************Beginning Page***************
***************page number:12**************
Arhitectura calculatoarelor 5i sisteme de operare - ASM
Structura If (2)

' dacéi avam §i 0 ramuré e l se, trnbuie
utilizatn doué instrucyiuni de salt

- a dnua instructiunﬁ se asiguré (:51, la
tnrminarea nxecuyiei instrucgiunilor din
prima ramuré, nu vor ﬁ executate $i
instrucyiunile din a dnua ramuré
— salt necondigionat

71

***************Ending Page***************


***************Beginning Page***************
***************page number:13**************
Arhitectura calculatoarelor §i sisteme de operare - ASM
Ex6mplu
' cod C ' cod ASM
if(X>5) cmp X,5
X——; jl€ nu
else d€c X
X++; jmp afara
nu:
inc X
afara:
__________________________________7T

***************Ending Page***************

***************Beginning Page***************
***************page number:14**************
Arhitectura calculatoarelor 5i sisteme de operare - ASM
Structura Wh116
' doué instructiuni de salt
— prima pentru a decide dacé s6 executé 0 noué
itaratié sau s6 pérésagte bucla
' saltul - p6 condiyia invﬁrsé celei din codul C
— a doua pantru a relua execuyia de 1a inceput
- la ﬁnalul corpului buclei
' salt necondiyionat
73

***************Ending Page***************


***************Beginning Page***************
***************page number:15**************
Arhitectura calculatoarelor §i sisteme de operare - ASM
Ex6mplu
' cod C ' cod ASM
while(x<lO) bucla:
X++; cmp X,5
jg€ afara
inc X
jmp bucla
afara:
—74

***************Ending Page***************

***************Beginning Page***************
***************page number:16**************
Arhitectura calculatoarelor 5i sisteme de operare - ASM
Structura For

' similaré structurii Whil6
- instrucgiuni auxiliare - d61imiteaz€1 clar

— initializarea variabilelor

— actualizarea valorilor variabilﬁlor pﬁntru iteratia

urmétoare
75

***************Ending Page***************


***************Beginning Page***************
***************page number:17**************
Arhitectura calculatoarelor §i sisteme de operare - ASM
Ex6mplu
' cod C ' cod ASM
for(i=O;i<=5;i++) mov i,O
s+=3; bucla: cmp i,5

jg afara
add 3,3
inc i
jmp bucla
afara:

__________________________________7?

***************Ending Page***************

***************Beginning Page***************
***************page number:18**************
Arhitectura calculatoarelor 5i sisteme de operare - ASM
Structura D0-Wh116
' tﬁstul de continuam/iegire - la ﬁnal
' se t6st6az€1 aceﬁa$i conditiﬁ ca in limbajul C
— in ambele limbaje, condigia adevératéi duce 1a
raluarea buclei
77

***************Ending Page***************


***************Beginning Page***************
***************page number:19**************
Arhitectura calculatoarelor §i sisteme de operare - ASM
Ex6mplu
' cod C ' cod ASM
do { bucla:
s+=i; mov eax,s
i++; add eax,i
} while(i<=5); mov s,eax
inc i
cmp i,5
jle bucla
__________________________________7?

***************Ending Page***************

