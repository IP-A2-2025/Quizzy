[{content={parts=[{text=```
--FlashCardSeparator--
Single
--InteriorSeparator--
What are the two components that determine the address of an element in an array?
--InteriorSeparator--
The starting address of the array and the element's offset within the array.
--InteriorSeparator--
easy
--InteriorSeparator--
2
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
The offset of an element within an array can be expressed using which of the following?
--InteriorSeparator--
(right) A constant
(right) A register
(wrong) Another variable from memory
(wrong) A function call
--InteriorSeparator--
medium
--InteriorSeparator--
3
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In assembly language, what unit is used to specify the offset of an element in an array?
--InteriorSeparator--
Bytes (octets).
--InteriorSeparator--
easy
--InteriorSeparator--
4
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In the C code `int t[100]; t[2] = 5;`, what is the equivalent assembly code, assuming `int` occupies 4 bytes?
--InteriorSeparator--
`mov t[8], 5`
--InteriorSeparator--
medium
--InteriorSeparator--
5
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In the C code `int t[100], i; t[i] = 5;`, where `i` has the value 3, what is the equivalent assembly code, assuming `i` is stored in `eax`?
--InteriorSeparator--
`mov t[eax*4], 5`
--InteriorSeparator--
medium
--InteriorSeparator--
6
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In assembly language, `mov t[eax*4], 5` is syntactically equivalent to what?
--InteriorSeparator--
`mov t+eax*4, 5`
--InteriorSeparator--
easy
--InteriorSeparator--
7
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
When the compiler replaces the array name with an address, what is that address if the array is a global variable? What if it is a local variable?
--InteriorSeparator--
(right) Global: A constant
(right) Local: An address relative to the stack pointer
(wrong) Local: An absolute memory address
(wrong) Global: An address relative to the stack pointer
--InteriorSeparator--
medium
--InteriorSeparator--
8
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Given `int t[100]; int *p=t;`, are `t[i] = 5;` and `p[i] = 5;` equivalent in C?
--InteriorSeparator--
Yes
--InteriorSeparator--
easy
--InteriorSeparator--
9
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Given `int t[100]; int *p=t;`, what is the correct assembly code for `p[i] = 5;` if `p`'s address is in memory and `i` is in `eax`?
--InteriorSeparator--
```assembly
mov ebx,p
mov dword ptr [ebx+eax*4],5
```
--InteriorSeparator--
hard
--InteriorSeparator--
10
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
If a function accepts an array as a parameter in C, what is actually passed on the stack?
--InteriorSeparator--
A pointer to the array's starting address.
--InteriorSeparator--
medium
--InteriorSeparator--
13
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Given `int t[3][3];` and `int **p;`, which of the following function calls are valid?
--InteriorSeparator--
(right) `f(t);` where `void f(int X[][3]) {...}`
(right) `g(p);` where `void g(int **x) {...}`
(wrong) `f(p);`
(wrong) `g(t);`
--InteriorSeparator--
medium
--InteriorSeparator--
15
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
For a statically allocated two-dimensional array `int t[3][3];`, what is the memory representation like?
--InteriorSeparator--
Linear, with elements stored contiguously in row-major order.
--InteriorSeparator--
medium
--InteriorSeparator--
16
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
For a statically allocated array `int t[3][3]`, what is the offset of the element `t[i][j]`?
--InteriorSeparator--
`i*3 + j`
--InteriorSeparator--
hard
--InteriorSeparator--
16
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
When dynamically allocating a two-dimensional array using pointers (e.g., `int **p;`), what does the allocation process create?
--InteriorSeparator--
A table of pointers and the pointed-to arrays
--InteriorSeparator--
medium
--InteriorSeparator--
17
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Why accessing an element in a dynamically allocated array requires two memory accesses?
--InteriorSeparator--
The first access gets p[i] the second p[i][j]
--InteriorSeparator--
hard
--InteriorSeparator--
18
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What two components determine the address of a field within a structure?
--InteriorSeparator--
The starting address of the structure and the field's offset within the structure.
--InteriorSeparator--
easy
--InteriorSeparator--
19
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is address alignment in the context of structures?
--InteriorSeparator--
The requirement that fields in a structure be located at memory addresses that are multiples of their size.
--InteriorSeparator--
medium
--InteriorSeparator--
20
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What can address alignment lead to in the context of memory layout of structures?
--InteriorSeparator--
It can create gaps (unused bytes) between fields, leading to a structure size larger than the sum of its fields' sizes.
--InteriorSeparator--
medium
--InteriorSeparator--
20
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Given `struct S { char a, b; int c; } s;`, what is the size of variable `s` and the offsets of `a`, `b`, and `c`?
--InteriorSeparator--
Size: 8 bytes, a: 0, b: 1, c: 4
--InteriorSeparator--
hard
--InteriorSeparator--
21
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
For `struct S { char a, b; int c; } s; s.a=7; s.c=22;`, what is the assembly code?
--InteriorSeparator--
```assembly
mov byte ptr s,7
mov dword ptr s+4,22
```
--InteriorSeparator--
hard
--InteriorSeparator--
22
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Why is it necessary to explicitly specify the size of operands (e.g., `byte ptr`, `dword ptr`) when accessing structure fields in assembly?
--InteriorSeparator--
Because the assembler needs to know how many bytes to read or write for each field.
--InteriorSeparator--
hard
--InteriorSeparator--
23
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In C, are structures passed by value or by reference?
--InteriorSeparator--
By reference (only pointers to structures are passed).
--InteriorSeparator--
medium
--InteriorSeparator--
24
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What are the two operations involved in translating the arrow operator (->) in C?
--InteriorSeparator--
Offset calculation and dereferencing.
--InteriorSeparator--
medium
--InteriorSeparator--
24
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the assembly translation of `p->b = 11`?
--InteriorSeparator--
```assembly
mov eax,p
mov byte ptr [eax+1],11
```
--InteriorSeparator--
hard
--InteriorSeparator--
25
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the maximum offset complexity for arrays?
--InteriorSeparator--
Limited by the addressing modes of the processor.
--InteriorSeparator--
hard
--InteriorSeparator--
7
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Why is `mov p [eax*4] , 5` incorrect when `p` is a pointer?
--InteriorSeparator--
Because `p` stores a memory address, not the array itself. The address `p` has to be loaded into a register.
--InteriorSeparator--
hard
--InteriorSeparator--
10
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What are the differences in accessing elements in static and dynamic arrays?
--InteriorSeparator--
(right) Static arrays calculate the element offset at compile time
(wrong) Static arrays require two memory accesses
(wrong) Dynamic arrays use row-major memory representation
(right) Dynamic arrays can have non contiguous memory locations
--InteriorSeparator--
hard
--InteriorSeparator--
18
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is the reason to pad structure field memory allocation?
--InteriorSeparator--
(right) To align to processor word size for faster access
(wrong) To reduce the amount of memory used by a structure
(right) Some processors will throw exceptions when accessing unaligned data.
(wrong) To guarantee all struct sizes are the same
--InteriorSeparator--
hard
--InteriorSeparator--
20
--FlashCardSeparator--
```}], role=model}, finishReason=STOP, avgLogprobs=-0.20731308503365586}]