***************Beginning Page***************
***************page number:1**************
Lucrul cu stiva §i apeluri
de funcgii

***************Ending Page***************

***************Beginning Page***************
***************page number:2**************
Arhilectllra calcullloarelor 5i sixteme a: upmn - ASM
Stiva programului

' procesorul folose$te 0 parte din memoria

RAM pentru a o accesa printr-o discipliné

de tip LIFO

i gestiune - adresa vérfului stivei

i mcmoraté in rcgistrul ESP
' structurile de tip stivé sunt necesare in

multe situaﬁi
—au

***************Ending Page***************

***************Beginning Page***************
***************page number:3**************
Arhilectura calcullloarelor 5i sixteme a: upmn - ASM
Introducere in stivé

- sintaxé
pu sh operan d
' operandul poate ﬁ doar pe 2 sau 4 octegi

— se recomandé lucrul numai cu operanzi pe 4

octegi

' valoarea ESP este $05.2th cu dimensiunea

operandului (2 sau 4)

i apoi operandul este copiat in vérful stivei

nu

***************Ending Page***************

***************Beginning Page***************
***************page number:4**************
Arhilectun calcullloarelor 5| sineme a: open" - ASM
Exemple
push eax
push dX
push dword ptr [200]
push word ptr [esi*2+ecx]
push dword ptr 5
push word ptr 14
—xz

***************Ending Page***************

***************Beginning Page***************
***************page number:5**************
Arhilectura calcullloarelor 5i sixteme a: upmn - ASM
Extragere din stivé

~ sintaxé

pop destina tie

' destinagia poate ﬁ tot pe 2 sau 4 octeti

' valoarea din vﬁrful stivei (ESP) se depune la
destinagie

- apoi, 1a valoarea ESP se aduni numirul de
octeti ai operandului

—a_1

***************Ending Page***************


***************Beginning Page***************
***************page number:6**************
Arhileclun calcullloarelor 5i sineme a: 0pm“ - ASM
Exemple
pop eax
pop cx
pop dword ptr [ebx+edi]
pop word ptr [edx+l OO]
- destinagia nu poate ﬁ 0 constantﬁ
—“

***************Ending Page***************

***************Beginning Page***************
***************page number:7**************
Arhilectura calcullloarelor 5i sixteme a: upmn - ASM
Utlllzare practlca
' rolul stivei programului - stocarea de
informatii cu caracter temporar
i salvarea pentru un limp a valorii unui registru,
pentru a-l folosi in alt scop
. apoi valoarea salvaté este restauraté in registm
i variabile locale
~ create la momentul apelului funcliei $i dismlse la
terminarea execugiei funqiei
85

***************Ending Page***************

***************Beginning Page***************
***************page number:8**************
Arhilectura calcullloarelor 5i sixteme a: upmn - ASM
Atenpﬁ
' instrucﬁunile dc introducere in stivé trebuie
riguros compensate dc cele de scoatere din
stivé
i ca numir de instrucgiuni
i ca dimensiunc a opcranzilor
' orice eroare afecteazi mai multe date deceit
pare la prima vedere
86

***************Ending Page***************

***************Beginning Page***************
***************page number:9**************
Arhilectun calcullloarelor 5| sineme a: open" - ASM
Exemplu ( 1 )
push eax
push edx
mov eax,[esi]
mov edx,5
mul edx
mov [esi],eax
pop eax
_______________________________7F

***************Ending Page***************


***************Beginning Page***************
***************page number:10**************
Arhilectura calcullloarelor 5i sixteme a: 0pm“ - ASM
Exemplu (2)
' 0 instrucyiune pop a fost uitaté - efecte
i registrul eax primeste alti valoare deceit avea
initial
i valoarea iniﬁalé a registrului edx nu este
restauraté
' similar daci se executé prea multe
instructiuni pop
BB

***************Ending Page***************

***************Beginning Page***************
***************page number:11**************
Arhilectura calcullloarelor 5i sixteme a: upmn - ASM
Apelun de funcgn

~ la prima vedere - ca 0 instructiune dc salt

i se intrerupe exﬁcuyia liniaré a programului $i se

sare 1a alté adresé

~ diferengé - la terminarea functiei se revinc la

adresa de unde s-a fécut apelul

i deci aceasta a fost memoraté

i informagie temporaré - tot pe stivé
—sa

***************Ending Page***************

***************Beginning Page***************
***************page number:12**************
Arhiletlllrl calcullloirelor 5i sixtelnﬂ d: operlre - ASM
Instnlcgiunea de apel
' sintaxé
c a l l a dre s a
i in Visual C++, adresa este indicati folosind
chiar numele functiei apelate
' efectul instructiunii
i se introduce in stivé adresa instrucgiunii
unnétoare (adIesa de revenire)
— se face salt la adresa indicaté in instrucgiune
90

***************Ending Page***************

***************Beginning Page***************
***************page number:13**************
Arhilectura calcullloarelor 5i sixteme a: open“ - ASM
Revenirea din funcgie
- sintaxé
re t
' efectul instrucgiunii
i preia adresa de revenire din vérful stivei
i face saltul 1a adresa respective"!
—9\

***************Ending Page***************


***************Beginning Page***************
***************page number:14**************
Arhilectura calcullloarelor 5i sixteme a: upmn - ASM
Eron 1n lucrul cu stlva
- 0 instructiune pop omisi (sau una in plus)

i 1a execuﬁa unei instructiuni ret se va prelua
din stivé alt-é. valoare decét adresa coreclﬁ dc
revenire

i efect - bloom-ea programului sau terminarea sa
fonaté

—~n

***************Ending Page***************

***************Beginning Page***************
***************page number:15**************
Arhilectura calcullloarelor 5i sixteme a: upmn - ASM
Parametrn func'gnlor ( 1)
' sunt tot variabile locale - se gésesc pe stivé
' apelantul are responsabilitatea
i dc a-i pune pe stivé la apel
. folusind instrucgiunca push
i de a-i scoate de pe stivi la revenirea din funcyia
apelati
- nu se folose$te instruqiunea pop, oi se adunz'i la
ESP numéml total de octeﬂ ocupat dc parametri
—~n

***************Ending Page***************

***************Beginning Page***************
***************page number:16**************
Arhilectura calcullloarelor 5i sixteme a: upmn - ASM
Parametrii funcgiilor (2)

- in C/C++ parametrii trebuie pu$i in stivé in
ordine inversi celei in care se gésesc in lista
de parametri
i motiv - funcgii cu numz'ir variabil de parametri

~ dc cc trebuie scosi din stivé 1a revenire?

i 1a ﬁnalul ﬁecérei unitz'lgi de program trebuie si
lésém stiva a$a cum am gﬁsit-o la intrare
i altfel apar erori de tipul celor descrise anterior
u

***************Ending Page***************

***************Beginning Page***************
***************page number:17**************
- codC
void dif(int a,int b)
{
int c;
c=a—b;
cout<<c<<endl;

***************Ending Page***************


***************Beginning Page***************
***************page number:18**************
Arhileclurl calcullloarelor 5i sineme a: 0pm“ - ASM
Exemplu (2)
' apelul dif (9, 5) se traduce prin secvenla
de mai jos:
push dword ptr 5
push dword ptr 9
call dif
add esp,8
—9@

***************Ending Page***************

***************Beginning Page***************
***************page number:19**************
Arhilectura calcullloarelor 5i sixteme a: upmn - ASM
Accesul la parametn
' Visual C++ - prin numele lor
i functii cu numér variabil de parametri‘?
~ in general - prin adresele lor
i primul parametru din antetul functiei se gaseste
intotdeauna la adresa EBP+8
i urmétorii parametri, mergénd spre dreapta in
lista parametrilor, sunt 1a adrese corespunzﬁtor
Inai mari: EBP+12, EBP+16 etc.
—~17

***************Ending Page***************

***************Beginning Page***************
***************page number:20**************
Arhilectllra calcullloarelor 5i sixteme a: upmn - ASM
Funcgii - returnarea valorilor
' convengie stabilitﬁ dc compilator
- Visual C++ - rezultatul se depune intr-un
registru - depinde de dimensiunea sa
i tipuri de date de dimensiune l octet: a1
i tipuri de date de dimensiune 2 octeyi: ax
i tipuri dc date de dimensiune 4 octeﬁ: eax
i tipuri de date de dimensiune 8 octegi: edx $i
eax
—W

***************Ending Page***************

***************Beginning Page***************
***************page number:21**************
Arllilectura calcullloarelor 5i sisteme m 0pm“ - ASM
Péstrarea valorilor regi$tri10r

- programul pe care i1 scriem este C/C++
~ nu $tim cum folose$ts compilatoru] regi$trii
' pentru orice funcﬁe pe care 0 scriem in

limbaj de asamblare

i la inceputul executiei functiei trebuie salvagi in

stivé regi§trii pe care ii folosim in funcyie
i 1a terminate, valorile lor trebuie restaurale
— excepgie - eax 5i edx (returnare valori)
w

***************Ending Page***************

