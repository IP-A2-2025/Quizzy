***************Beginning Page***************
***************page number:1**************
Lucrul cu stiva §i apeluri
de funcﬁi

***************Ending Page***************

***************Beginning Page***************
***************page number:2**************
Arhitectura calculatoarelor 5i sisteme de operare - ASM
Stiva programului

- prowsorul f010s6$t6 0 part6 din mermoria

RAM pﬁntru a 0 accﬁsa printr-o discipliné

de tip LIFO

— gestiune - admsa vérfului stivai

— mamoratéi in registrul ESP
' structurila de tip stiv'Zl sunt necesare in

multe: situayii
—80

***************Ending Page***************


***************Beginning Page***************
***************page number:3**************
Arhitectura calculatoarelor 5i sisteme de operare - ASM
Introducere in stivé

' sintaxé
push operand
' operandul poata ﬁ doar p6 2 sau 4 octﬁgi

— se recomandé lucrul numai cu operanzi pe 4

octeU

' valoama ESP este scézuté cu dimensiunea

operandului (2 sau 4)

— apoi 0p€randul ﬁste copiat in vérful stivei

81

***************Ending Page***************

***************Beginning Page***************
***************page number:4**************
Arhitectura calculatoarelor §i sisteme de operare - ASM
Exsmpls
push sax
push dx
push dword ptr [ZOO]
push word ptr [esi*2+scx]
push dword ptr 5
push word ptr l4
—82

***************Ending Page***************


***************Beginning Page***************
***************page number:5**************
Arhitectura calculatoarelor 5i sisteme de operare - ASM
Extragere: din stivé

' sintaxé

pop destinatie

' destinagia poatﬁ ﬁ tot p6 2 sau 4 octati

' valoaraa din vﬁrful stivﬁi (ESP) se depunﬁ la
dastina§i6

' apoi, 1a valoarera ESP se aduné numérul de
octeyi ai operandului

—83

***************Ending Page***************

***************Beginning Page***************
***************page number:6**************
Arhitectura calculatoarelor §i sisteme de operare - ASM
Exezmplez
pop €ax
pop cx
pop dword ptr [ebx+edi]
pop word ptr [edx+100]
' destinagia nu poate ﬁ 0 constanté
—s4

***************Ending Page***************


***************Beginning Page***************
***************page number:7**************
Arhitectura calculatoarelor 5i sisteme de operare - ASM
Ut1llzare practwa
- rolul stivei programului - stocarﬁa de
informatii cu caracter temporar
— salvaraa pentru un timp a valorii unui registru,
pentru a-l folosi in alt scop
' apoi valoarea salvaté este restauraté in registru
— variabile locale
' create: la momentul apelului functiei §i distruse la
terminarea execugiei functiei
85

***************Ending Page***************

***************Beginning Page***************
***************page number:8**************
Arhitectura calculatoarelor 5i sisteme de operare - ASM
Atﬁnpe:

- instructiunila de introducﬁm in stivé tmbuie
riguros compﬁnsate de 0616 d€ scoatam din
stivé

— ca numér d6 instrucljuni
— ca dinmnsiune a operanzilor

' orice eroare afecteazé mai multe date: deceit

pare la prima vedere
86

***************Ending Page***************


***************Beginning Page***************
***************page number:9**************
Arhitectura calculatoarelor 5i sisteme de operare - ASM
Exezrnplu (1 )
push eax
push edx
mov eax,[esi]
mov €dx,5
mul €dx
mov [esi],eax
pop eax
______________________________TF

***************Ending Page***************

***************Beginning Page***************
***************page number:10**************
Arhitectura calculatoarelor 5i sisteme de operare - ASM
Exetmplu (2)
' 0 instrucgiunﬁ pep a fost uitatéi - efecta
— ragistrul eax prime$t6 alté valoare decét avea
iniljal
— valoama initialé a registrului edx nu aste
rastauratéi
' similar dacé s6 executé prera multe
instructiuni pop
88

***************Ending Page***************


***************Beginning Page***************
***************page number:11**************
Arhitectura calculatoarelor 5i sisteme de operare - ASM
Ap61un de funcpl
- 1a prima vedem - ca 0 instrucyiune de salt
— se intrerupe executia liniaré a programului $i se
sare 1a alté adresé
' difer6n§é - 1a t6rminarea functiﬁi $6 r6vin6 la
adresa de unda s-a fécut apelul
— deci aceasta a fost mﬁmoraté
— informayie temporaré - tot pe stivé
89

***************Ending Page***************

***************Beginning Page***************
***************page number:12**************
Arhitectura calculatoarelor 5i sisteme de operare - ASM
Instruclziunﬁa d6 apel
' sintaxé
call adresa
— in Visual C++, adresa estﬁ indicaté folosind
chiar numele funcljei apalate
' ef6ctul instrucgiunii
— se introduce in stivé adresa instructiunii
urmétoare (adresa d€ revenire)
— se facﬁ salt 1a adrasa indicaté in instrucgiune
—90

***************Ending Page***************


***************Beginning Page***************
***************page number:13**************
Arhitectura calculatoarelor 5i sisteme de operare - ASM
Revétnlreza dln funcpe:
' sintaxé
r € t
' efﬁctul instrucgiunii
— preia adresa d6 revﬁnire din vérful stivei
— face saltul la adrﬁsa resp6ctivé
91

***************Ending Page***************

***************Beginning Page***************
***************page number:14**************
Arhitectura calculatoarelor 5i sisteme de operare - ASM
Er0r1 1n lucrul cu stlva
' 0 instrucyiuna pop omiséi (sau una in plus)

— la 6xﬁcutia unai instrucyiuni ret se va pmlua
din stivéi altéi valoare deceit adresa corectéi de
ravenira

— €fect - blocarea programului sau terminarea sa
foryaté

92

***************Ending Page***************


***************Beginning Page***************
***************page number:15**************
Arhitectura calculatoarelor 5i sisteme de operare - ASM
Paranmtnl funcpllor ( 1 )
' sunt tot variabilﬁ locale - $6 gésesc pe stivé
- apalantul am rﬁsponsabilitatﬁa
— de a-i puna pe stivé la apel
' folosind instrucgiunea pu s h
— de a-i scoate de pe stivéi 1a revﬁnirea din funcgia
apelaté
' nu se folose§te instrucgiunea pop, ci se aduné la
ESP numérul total de octeti ocupat de parametri
93

***************Ending Page***************

***************Beginning Page***************
***************page number:16**************
Arhitectura calculatoarelor §i sisteme de operare - ASM
Paranmtrii funcgiilor (2)

- in C/C++ parametrii tr6buie pu$i in stivé in
ordina inversé C€l€i in cam se gés6sc in lista
de paramﬁtri

— motiv - funcgii cu numér variabil de paramatri
' de 06 trabuiﬁ sco$i din stivé 1a revﬁnire?
— la ﬁnalul ﬁecérei unitégi de program tmbuie $51
lésém stiva aga cum am gésit-o la intrare
— altfel apar erori d6 tipul calor descrise anterior
94

***************Ending Page***************


***************Beginning Page***************
***************page number:17**************
Arhitectura calculatoarelor 5i sisteme de operare - ASM
Exezrnplu (1 )

' codCI
void dif(int a,int b)
{

int c;

c=a—b;

cout<<c<<endl;
}

%

***************Ending Page***************

***************Beginning Page***************
***************page number:18**************
Arhitectura calculatoarelor 5i sisteme de operare - ASM
Exezrnplu (2)
- apelul dif (9 , 5) se traducﬁ prin secvenga
dernaijos:
push dword ptr 5
push dword ptr 9
call dif
add esp,8

***************Ending Page***************


***************Beginning Page***************
***************page number:19**************
Arhitectura calculatoarelor 5i sisteme de operare - ASM
Accmsul la paranwtn
' Visual C++ - prin numele lor
— funcgii cu numér variabil de parametri?
- in gﬁneral - prin adreselﬁ lor
— primul parametru din antetul functiei se gésagte
intotdwuna 1a adresa EBP+8
— urmétorii parametri, mergénd spm dreapta in
lista parametrilor, sunt 1a admse corespunzétor
mai mari: EBP+12, EBP+16 6tc.
—97

***************Ending Page***************

***************Beginning Page***************
***************page number:20**************
Arhitectura calculatoarelor 5i sisteme de operare - ASM
Funetii - returnarea valorilor
' eonventie stabilita de eompilator
' Visual C++ - rezultatul se depune intr-un
registru - depinde de dimensiunea sa
— tipuri de date de dimensiune 1 octet: al
— tipuri de date de dimensiune 2 octeti: ax
— tipuri de date de dimensiune 4 octeti: eax
— tipuri de date de dimensiune 8 octeti: edx gi
eax
—98

***************Ending Page***************


***************Beginning Page***************
***************page number:21**************
Arhitectura calculatoarelor §i sisteme de operare - ASM
Pistrarea valorilor r6gi$tri10r

- programul pe cam i1 scriam 6st6 C/C++
- nu $tim cum f010s6$t6 compilatorul r6gi$trii
' p6ntru orice functie pe cam 0 scri6m in

limbaj dﬁ asamblam

— la inceputul execuyiei funcyiei trabuia salvagi in

stivé regi§trii pe care ii folosim in funcgie
— 1a t€rminare, valorile lor trebuie restauratﬁ
— 6xcep11ie - eax $i edx (returnare valori)
99

***************Ending Page***************





