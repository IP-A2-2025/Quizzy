***************Beginning Page***************
***************page number:1**************
Tablouri 5i structuri

***************Ending Page***************

***************Beginning Page***************
***************page number:2**************
Arhilectura calcullloarelor 5i sixteme a: upmn - ASM
Tablouri - acces 1a elemente (1)
~ adresa unui elemental unui tablou cste
formaté din
i adresa de inceput a tabloului
i dcplasamcntul clcmcntului in cadrul tabloului
' cum pot ﬁ exprimate sintactic?
—|m

***************Ending Page***************

***************Beginning Page***************
***************page number:3**************
Arhilectura calcullloarelor 5i sixteme a: upmn - ASM
Tablouri - acces 1a elemente (2)
~ adresa de inceput a tabloului
i prin numele variabilei tablou
- deplasamentul elementului in cadrul
tabloului
i constanté
i registru
i eventual combinagii
— nu o alté variablé din memorie
m

***************Ending Page***************

***************Beginning Page***************
***************page number:4**************
Arhilectllra calcullloarelor 5i sixteme a: upmn - ASM
Diferengé C - limbaj de asamblare
- in limbajul C, indicele exprimé

deplasamentul in elemente ale tabloului
— dimensiunea elementelor depinde de tipul lor
' in limbaj de asamblare se precizeazé
deplasamentul in octcgi
i calculele trebuie ficute de citre programator
—m.1

***************Ending Page***************

***************Beginning Page***************
***************page number:5**************
Arhileclurl calcullloarelor 5i sixleme a: openre - ASM
Exemple (1 )
' cod C
int t [l O O] ;
t [2 1 =5 ;
' traducere in limbaj de asamblare
mov t [8] , 5
~ deoarece tipul int are 4 octegi,
deplasamentul este 2 ~ 4 = 8
—\n1

***************Ending Page***************


***************Beginning Page***************
***************page number:6**************
Arhileclurl calcullloarelor 5i sixleme a: openre - ASM
Exemple (2)
' cod C
int t [100] , i;
// i are valoarea 3
t [i] :5;
' traducere in limbaj de asamblare
// eax are valoarea 3
mov t [eax*4] , 5
—m§

***************Ending Page***************

***************Beginning Page***************
***************page number:7**************
Arhilectura calcullloarelor 5i sixteme a: upmn - ASM
Variante sintactice (1)
mov t [eax*4] , 5
cste echivalent sintactic cu
mov t+eax*4,5
' cit de complexé poate ﬁ expresia
deplasamentului?
- limitaté dc modurile de exprimare a
adreselor in limbajul procesorului
—m

***************Ending Page***************

***************Beginning Page***************
***************page number:8**************
Arhilectura calcullloarelor 5i sixteme a: 0pm“ - ASM
Varlante s1ntactlce (2)
- cu cc inlocuie$te compilatorul numele
tabloului
— tabloul este variabilé globalé - adresa sa este 0
constanté
- ex; [ 1 O O O 1
i tabloul cstc variabilé localé - adrcsa sa cstc
epxrimaté relativ la vérful slivei
' ex.: [ebp-4]
—mv

***************Ending Page***************

***************Beginning Page***************
***************page number:9**************
Arhilectura calcullloarelor 5i sixteme a: open“ - ASM
Pointeri ( l)
- in exemplu] anterior, considerim $i 0
variabilé de tip pointer
int t [1 O O] ,'
int *pIt;
- in limbajul C, urmétoarelc sunt echivalente
t [i] =5;
p [i] :5;
—mx

***************Ending Page***************

***************Beginning Page***************
***************page number:10**************
Arhileclurl calcullloarelor 5i sineme a: 0pm“ - ASM
Pointeri (2)
' dar in limbaj de asamblare?
' NU
mov p [eax*4] , 5 - gre§it
' scriere corecté
mov ebx,p
mov dword ptr [ebx+eax*4] , 5
—\r|9

***************Ending Page***************


***************Beginning Page***************
***************page number:11**************
Arhilectura calcullloarelor 5i sixteme a: open“ - ASM
Tablouri ca parametri (1)
int t [l O O ] ;
int *p=t;
void f(int x[]) {...}
void g(int *x) {. . .}
' ce tipuri de parametri accepté ﬁecare dintre
aceste funcgii?
—m|

***************Ending Page***************

***************Beginning Page***************
***************page number:12**************
Arhileclurl calcullloarelor 5i sixleme a: openre - ASM
Tablouri ca parametri (2)

' toate combinagiile sunt permise

f (t) ;

g (t) ;

f (p) ;

g (p) ;

- dc cc?

***************Ending Page***************

***************Beginning Page***************
***************page number:13**************
Arhilectllra calcullloarelor 5i sixteme a: upmn - ASM
Tablouri ca parametri (3)
- indiferent de sintaxa folosité, pe stivﬁ se
depune un pointer ca parametru
' chiar dacé furnizim un tablou ca parametru
efectiv, pe stivé se depune adresa sa de
inceput
i conversie implicité
— in implementarea funcgiei, accesul la parametru
in limbaj de asamblare se face ca la un pointer
n1

***************Ending Page***************

***************Beginning Page***************
***************page number:14**************
Arhilectura calcullloarelor 5i sixteme a: 0pm“ - ASM
Tablouri bidirnensionale (l)
' tablouri alocate static
int t[3][3];
' tablouri cu alocare dinamicé
int **p;
- transmitere ca parametri
void f(int x[] [3]) {.. .}
void g(int **x) {. . .}

***************Ending Page***************

***************Beginning Page***************
***************page number:15**************
Arhilectura calcullloarelor 5i sixteme a: 0pm“ - ASM
Tablouri bidirnensionale (2)
' apelurivalide
f (t) ;
q (p) ;
' apeluri invalide (erori de compilare)
f (p) ;
g (t) ;
- cauzé - reprezentéri diferite in memorie

***************Ending Page***************


***************Beginning Page***************
***************page number:16**************
Arhilectura calcullloarelor 5i sixteme a: upmn - ASM
Tablou alocat static
~ reprezentare in memorie - liniaré
~ elcmcntclc sunt plasate in mcmorie la
adresc consecutive, in ordinea
HO] [O],t[O] [l],t[O] [2],t[l][01
etc.
~ care este adresa elementului t [i] [j 1 ?
' deplasamentul in tablou: i‘3+j
—"5

***************Ending Page***************

***************Beginning Page***************
***************page number:17**************
Arhilectura calcullloarelor 5i sixteme a: open“ - ASM
Tablou alocat dinamic (l)

~ alocare dinamicé

p=new int* [3];

for (i=0 ; i<3; i++)
p[i] =new int [3];

' sunt create prin alocare
— un tablou de 3 poinleﬂ
i 3 tablouri de céte 3 numere intregi

—m

***************Ending Page***************

***************Beginning Page***************
***************page number:18**************
Arhilectllra calcullloarelor 5i sixteme a: upmn - ASM
Tablou alocat dinarnic (2)
~ care este adresa elementului p [i] [j 1 ?
~ folosind pointcrul p, se accescazé clementul
p [i]
' folosind pointerul p [i] , se acceseazi
elementulp [i] [j]
' sunt necesari 2 pa§i
— complet diferit de modul de acces 1a tabloul
alocat static
H7

***************Ending Page***************

***************Beginning Page***************
***************page number:19**************
Arhilectura calcullloarelor 5i sixteme a: upmn - ASM
Structuri
' adresa unui cémp a1 unei structuri este
formaté din
i adresa de inceput a structurii
i deplasamentul cémpului in cadrul structurii
- similar tablourilor
- dar cﬁmpurile unei structuri pot ﬁ dc tipuri
diferite
— deplasarnentul nu mai este dat de un indics
H8

***************Ending Page***************

***************Beginning Page***************
***************page number:20**************
Arhilectllra calcullloarelor 5i sixteme a: upmn - ASM
Alinierea adreselor

- deplasamentul unui cémp - multiplu dc
dimensiunea sa

' consecingi - pot exista goluri (octegi
neutilizagi) intre cémpuri

— iar dimensiunsa structurii poate ﬁ mai mare
deceit suma dimensiunilor cémpurilor

—m

***************Ending Page***************


***************Beginning Page***************
***************page number:21**************
Arhileclurl calcullloarelor 5i sineme a: 0pm“ - ASM
Exemplu

struct S {

char a,b;

int C;

} s;
- dimensiunea variabilei s de tip S - 8 octegi
' deplasamente: a - 0, b - 1, c - 4
—\zn

***************Ending Page***************

***************Beginning Page***************
***************page number:22**************
Arhileclurl calcullloarelor 5i sixleme a: openre - ASM
Accesul 1a cémpuri (l)
' cod C
s.a=7;
s.c=22;
' traducere in limbaj de asamblare
mov byte ptr s, 7
mov dword ptr s+4, 22
// saumov dword ptr s [4] , 22

***************Ending Page***************

***************Beginning Page***************
***************page number:23**************
Arhilectllra calcullloarelor 5i sixteme a: upmn - ASM
Accesul 1a cémpuri (2)
- de ce trebuie precizaté explicit dimensiunea
operanzilor?
' folosim variabila s, a cirei dimensiune este
de 8 octeti
- dar dorim s5 accesém 1 octet, respectiv 4
octeti
—m

***************Ending Page***************

***************Beginning Page***************
***************page number:24**************
Arhileclllrl calcullloarelor 5i sixtelne d: operlre - ASM
Structuri ca parametri de funcgii
- limbajul C nu permite transmiterea de
structuri ca parametri ai unor functii
— doar pointeri la structuri
' in limbajul C++ este posibil
' cum traducem operatorul —> ‘I
i determinarea deplasamentului
i dereferengierea
—|z_1

***************Ending Page***************

***************Beginning Page***************
***************page number:25**************
Arhileclun calcullloarelor 5i sineme a: 0pm“ - ASM
Exemplu
' cod C
S *p=new S;
p->b=11;
' traducere in limbaj de asamblare
mov eax,p
mov byte ptr [eax+1] , 11

***************Ending Page***************

