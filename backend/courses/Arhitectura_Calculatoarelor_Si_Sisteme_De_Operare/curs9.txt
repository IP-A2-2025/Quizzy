***************Beginning Page***************
***************page number:1**************
1.2. Pipeline - rezolvarea
problemelor

***************Ending Page***************

***************Beginning Page***************
***************page number:2**************
Arhilectun calcullloarelor 5i sineme a: 0pm“ - pan“ a ll-a
Avansarea (l)
add dword ptr [eax] , 5
sub ecx, [eax]
' rezultatul adunérii - calculat de ALU
' dureazé péné cénd este scris la destinatie
' instructiunea de scédere poate prelua
rezultatul adunérii direct de la ALU
—3\

***************Ending Page***************

***************Beginning Page***************
***************page number:3**************
Arhilectlln calcullloarelor 5i sineme a: upmn - pm" a ll-a
Avansarea (2)
Avantaj
' reduce timpii de agteptare
Dezavantaje
' necesiti circuits suplimentare complexe
' trebuie considerate relatiile intre toate
instructiunilc aﬂate in execupie (in pipeline)
—31

***************Ending Page***************

***************Beginning Page***************
***************page number:4**************
Arhilectlln calcullloarelnr 5i sineme do upmn - pan" a ll-a
Unitéti superscalare

' ideea de bazi - mai multe ALU
' se pot efectua mai multe calcule in paralel
' folosité impreuné cu tehnica pipeline
' MAR 5i MDR nu pot ﬁ multiplicate
' cit de mult se pot multiplica ALU?

i depinde de structura si eﬁcienta pipeline

***************Ending Page***************

***************Beginning Page***************
***************page number:5**************
Arhilltlllrl calcullloarelor 5i sineme a: upmn - pm" a ll-a
Unitﬁti superpipeline
- mai multe pipeline in accla$i procesor
i de obicei 2
' 2 (sau mai multe) instrucgiuni executate
complet in paralel
' restriciii
i accesele la memorie $i periferice - secvengial
— uncle instructiuni pot ﬁ executate de un singur
pipeline
31

***************Ending Page***************

***************Beginning Page***************
***************page number:6**************
Arhilectlln calcullloarelar 5i 5mm do 0pm“ - pan" a ll-a
Predictia salturilor (1)

- rezolvarea dependentelor de control
~ ideea de bazé - a "prezice" dacé un salt se

executé sau nu

— nu se a$teapté terminarea instrucliunii de salt
' predictie corecté - féré blocaje In pipeline
~ predictic eronaté - se executi instructiuni

care nu trebuiau executate

— efectul acestora trebuie anulat

35

***************Ending Page***************

***************Beginning Page***************
***************page number:7**************
Arhilectlln calcullloarelar 5i 5mm do 0pm“ - pan" a ll-a
Predictia salturilor (2)

' spor de performanté - cét mai multe
predictii corecte (nu neapérat 100%)

~ o instructiune executaté eronat produce
efecte doar cénd rezultatul este scris la
destinagie

— rezultatele instructiunilor - memorate intern
de procesor péné cénd se veriﬁcé dacé
predicﬁa a fost corecté

—16

***************Ending Page***************


***************Beginning Page***************
***************page number:8**************
Arhilectllrl calcullloarelor 5i sixteme a: open“ - pan“ a ll-a
Scheme de predlctle

Tipuri de scheme
' statice

i intotdeauna aceeasi decizie
- dinamice

i se adapteazé in funciie de comportarea

programului

—37

***************Ending Page***************

***************Beginning Page***************
***************page number:9**************
Arhilectlln calcullloarelnr 5i sineme do upmn - pan" a ll-a
Scheme statice dc predictie
' saltul nu se executé niciodatﬁ
i ram predicgiilor corcctc z 40%
~ saltul se executé intotdcauna
i rata predictiilor corecte z 60%
' salturile inapoi se executé intotdeauna, cele
inainte niciodaté
i combiné variamele anterioare
— raté superioaré a predictiilor
38

***************Ending Page***************

***************Beginning Page***************
***************page number:10**************
Arhilectlln calcullloarelnr 5i sineme do upmn - pan" a ll-a
Scheme dinarnice de predictie (1)
- procesorul reﬁne intr-un tabel comportarea

la salturile anterioare
— salt executat/neexecutat
' un singur element pentm mai multe
instructiuni dc salt
— tabel mai mic —> economic de spaﬂu
—19

***************Ending Page***************

***************Beginning Page***************
***************page number:11**************
Arhilectlln calcullloarelor 5i sineme a: upmn - pm" a ll-a
Scheme dinarnice de predictie (2)
Tipuri de predictori
' locali

i regin infonnagii despre salturile individuals
- globali
i iau in considerate corelaiiile dintre
instructiunile de salt din acela$i program
~ micsti
—w

***************Ending Page***************

***************Beginning Page***************
***************page number:12**************
Arhilectlln calcullloarelor 5i sineme a: upmn - pm" a ll-a

Utilizarea cache-ului in predictie
Cache-ul de instructiuni
' reﬁne vechea comportare a unui salt

— conditie

— adresé destinatie
' trace cache

i memoreazé instrucliunile in ordinea in care sunt

executate
i nu in ordinea ﬁzicé
u

***************Ending Page***************

***************Beginning Page***************
***************page number:13**************
Arhilectlln calcullloarelor 5i sineme a: upmn - pm" a ll-a
Executia speculativé

~ anudité cu predictia salturilor
' se executé toate variantele posibile

i inainte de a 5ti care este cea corecté
' 05nd se cun0a$te varianta corecti,

rezultatele sale sunt validate
- se poate utiliza 5i in circuite simple
—u

***************Ending Page***************


***************Beginning Page***************
***************page number:14**************
Arhilectlln calcullloarelnr 5i sineme do upmn - pan" a ll-a
Cum functioneazé? (1)
' instructiuni de salt conditionat
FL eax > ebx ll
sub eax, ebx sub ebx,eax
- ambele variante se executi in paralel
- cum s6 modiﬁcé regigtrii eax $i ebx?
—43

***************Ending Page***************

***************Beginning Page***************
***************page number:15**************
Arhilectlln calcullloarelnr 5i sineme do upmn - pan" a ll-a
Cum functloneaza? (2)
' nici una din variante nu Ti modiﬁcé
' rezultatele scéderilor sunt depuse in regi$tri
temporari
' cénd se cun0a$te relatia intre eax $i ebx
i sc dctcrmini varianta corccté dc cxccuyic
i se actualizeazi valorile eax si ebx conform
rezultatelor obtinute in varianta corecté
—u

***************Ending Page***************

***************Beginning Page***************
***************page number:16**************
Arhilectlln calcullloarelnr 5i sineme do upmn - pan" a ll-a
Executie speculativé vs. predictie
- nu apar predictii eronate

i rata de succes - 100%
~ necesité multi regi$tri pentru rezultatele
temporare
' gestiunea acestora - complicati
~ ﬁecarc varianté dc executie poate conﬁne
alte salturi etc.
— variantele se multiplicé exponenﬁal
A5

***************Ending Page***************

***************Beginning Page***************
***************page number:17**************
Arhilectlln calcullloarelnr 5i sineme do upmn - pan" a ll-a
Predicatia ( 1)
- folosité in arhitectura Intel IA-64
i §i in alte unititi de procesare
' aserne'métoare cu execugia speculativé
' procesorul conﬁne regi$tri de predicate
i predical - conditie booleanﬁ (bit)
- ﬁecare instructiune 0bi$nuitﬁ are asociat un
asemenea predicat
—“

***************Ending Page***************

***************Beginning Page***************
***************page number:18**************
Arhilectlln calcullloarelnr 5i sineme do upmn - pan" a ll-a
Predicatia (2)
- 0 instructiune produce efecte dacé $i numai
dacé predicatul asociat cste true
i altfel rezultatul séu nu este scris 1a destinatie
' instrucﬁunile de test pot modiﬁca valorile
predicatelor
~ se pot implementa astfcl ramiﬁcatii in
program
—47

***************Ending Page***************

***************Beginning Page***************
***************page number:19**************
- pseudocod

if (R1==0) {
R2=5;
R3=8;
}

else

***************Ending Page***************

***************Beginning Page***************
***************page number:20**************
Arhilectllra calcullloarelor 5i sixteme a: 0pm“ - pan“ a ll-a
Exemplu (continuare)
' limbaj de asamblare "clasic"
cmp R1 , O
j ne E l
mov R2 , 5
mov R3 , 8
jmp E2
E1 : mov R2 , 2 1
E2 :
—¢9

***************Ending Page***************


***************Beginning Page***************
***************page number:21**************
Arhilectun calcullloarelor 5i sineme a: 0pm“ - pan“ a ll-a
Exemplu (continuare)
~ limbaj de asamblare cu predicate
cmp Rl , O , Pl
< P 1 >mov R2 , 5
< P l >mov R3 , 8
<P2>mov R2 , 2 l
' predicatele Pl $i P2 lucreazi in pereche
i P2 este intotdeauna inversul lui P1
i prima instructiune ii modiﬁcé pe améndoi
5|]

***************Ending Page***************

***************Beginning Page***************
***************page number:22**************
Arman-m calcullloarelnr 5i sineme do upmn - pan" a ll-a
Executla out-of-order
~ instructiunile nu se mai termini obligatoriu
in ordinea in care $i-au inceput execugia
' scop - eliminarea unor blocaje in pipeline
' posibilﬁ atunci cénd intre instrucgiuni nu
existé dependente
—§.

***************Ending Page***************

***************Beginning Page***************
***************page number:23**************
Arhilectun calcullloarelor 5i sineme a: 0pm“ - pan“ a ll-a
Exemplu

in a1 , 2 7 8

add bl , a1

mov edx, [ebp+8]

' prima instructiune - foarte lenté

' a doua instrucpiune trebuie sé agtepte
termmarea prlmela

' a treia instrucyiune nu depinde de cele
dinaintea sa - se poate termina inaintea lor

51

***************Ending Page***************

***************Beginning Page***************
***************page number:24**************
Arhilectlln calcullloarelor 5i sineme a: upmn - pm" a ll-a
Redenurnlrea I'ﬁngtI'IIOI'
' dependente de date
i apar cénd doué instructiuni folosesc aceea$i
resursé (variabilé/registru)
i numai cénd cel putin una din instmqiuni
modiﬁcé resursa respectivé
i dacé resursele sunt registri, unele dependenle se
pot rezolva prin redenumire
—s_1

***************Ending Page***************

***************Beginning Page***************
***************page number:25**************
Arhilectun calcullloarelor 5i sineme a: 0pm“ - pan“ a ll-a

Tipuri de dependente de date
' RAW (read Lifter write)

i prima instructiune modiﬁci resursa, a doua 0

citc$tc

' WAR (write after read)

— invers
' WAW (write afier write)

i ambele instrucgiuni modiﬁcﬁ resursa

***************Ending Page***************

***************Beginning Page***************
***************page number:26**************
Arhilectun calcullloarelor 5i sineme a: 0pm“ - pan“ a ll-a
Dependente RAW
' dependente "adevérate"
' nu pot ﬁ eliminate
mov eax,5
sub ebx,eax
~ valoarea scrisé in eax de prima instrucgiune
este necesaré instructiunii urmétoare
—.=5

***************Ending Page***************


***************Beginning Page***************
***************page number:27**************
Arhilectun calcullloarelor 5i sineme a: 0pm“ - pan“ a ll-a
Dependente WAR
' numite 5i antidependenge
add esi,eax
1 _
mov eax,l6
sub ebx,eax
- prima instrucliune trebuie executaté inaintea
celei de-a doua (nu se poate in paralel)
—.=@

***************Ending Page***************

***************Beginning Page***************
***************page number:28**************
Arhilectllra calcullloarelor 5i sixteme a: 0pm“ - pan“ a ll-a
Dependente WAR - rezolvare
add esi,eax add esi,eax
mov eax,l6 mov reg_tmp,l6
sub ebx, eaz: sub ebx, reg_tmp
—§1

***************Ending Page***************

***************Beginning Page***************
***************page number:29**************
Arhilectllra calcullloarelor 5i sixteme a: open“ - pan“ a ll-a
Dep endente WAW

' dependents de iegire

div ecx

sub ebx,edx

mov eax,5

add ebp,eax
————————————————————————§

***************Ending Page***************

***************Beginning Page***************
***************page number:30**************
Arhilectllra calcullloarelor 5i sixteme a: open“ - pan“ a ll-a
Dependente WAW - rezolvare
div ecy: div ecx,3
sub ebx, edgi sub ebx , edx
mov eax, 5 mov reg_tmp, 5
add ebp , eax add ebp, reg_tmp
—§9

***************Ending Page***************

***************Beginning Page***************
***************page number:31**************
Arhilectun calcullloarelor 5i sineme a: 0pm“ - pan“ a ll-a
Utllltate

' ajuté 1a cre$terea perfonnantei?
' cregte potentialul de paralelizare
' mai eﬁcienté in combinapie cu alte tehnici

i structural superpipeline

i execulia out-of-order
—ou

***************Ending Page***************

***************Beginning Page***************
***************page number:32**************
Arhilectun calcullloarelor 5i sineme a: 0pm“ - pan“ a ll-a
Eﬁcienta abordérii
- mai mulgi regi$tri
i folosigi intern de procesor
— nu sunt accesibili programatorului
' de ce?
i redenumirea se face automat
i programatorul poate gresi (exploatare
ineﬁcienti a resurselor)
i cre$terea performamei programelor vechi
a.

***************Ending Page***************

