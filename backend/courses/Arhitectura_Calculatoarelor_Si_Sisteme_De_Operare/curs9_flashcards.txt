[{content={parts=[{text=--FlashCardSeparator--
Single
--InteriorSeparator--
What is the primary goal of using a pipeline in computer architecture?
--InteriorSeparator--
To improve performance by overlapping the execution of multiple instructions.
--InteriorSeparator--
easy
--InteriorSeparator--
1
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What are the main advantages of using forwarding in a pipeline?
--InteriorSeparator--
(right) Reduces waiting times
(wrong) Simplifies circuit design
(wrong) Eliminates dependencies between instructions
(right) Allows the result of an addition to be used directly by a subtraction instruction.
--InteriorSeparator--
medium
--InteriorSeparator--
2
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What are the disadvantages of using forwarding in a pipeline?
--InteriorSeparator--
(wrong) Reduces the number of ALUs required.
(right) Requires complex additional circuits.
(right) Needs to consider relationships between all instructions in the pipeline.
(wrong) Eliminates the need for memory access.
--InteriorSeparator--
hard
--InteriorSeparator--
3
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the core idea behind using superscalar units?
--InteriorSeparator--
To have multiple ALUs to perform multiple calculations in parallel.
--InteriorSeparator--
easy
--InteriorSeparator--
4
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What determines the limit on how many ALUs can be multiplied in a superscalar unit?
--InteriorSeparator--
The structure and efficiency of the pipeline.
--InteriorSeparator--
medium
--InteriorSeparator--
4
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the key feature of superpipeline units?
--InteriorSeparator--
Having more pipelines in the same processor, typically two.
--InteriorSeparator--
easy
--InteriorSeparator--
5
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What are the restrictions typically associated with superpipeline units?
--InteriorSeparator--
(right) Memory and peripheral accesses are sequential.
(wrong) All instructions can be executed by any pipeline.
(wrong) There are no restrictions.
(right) Some instructions can only be executed by a single pipeline.
--InteriorSeparator--
hard
--InteriorSeparator--
5
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the main purpose of branch prediction?
--InteriorSeparator--
To resolve control dependencies by predicting whether a jump will be executed or not.
--InteriorSeparator--
easy
--InteriorSeparator--
6
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What happens in the pipeline if a branch prediction is incorrect?
--InteriorSeparator--
Instructions that should not have been executed are executed, and their effects must be undone.
--InteriorSeparator--
medium
--InteriorSeparator--
6
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
How does a processor handle the results of instructions when branch prediction is used?
--InteriorSeparator--
(wrong) Discards the results immediately if the prediction is incorrect.
(wrong) Immediately writes the results to memory.
(right) Stores the results internally until the prediction is verified.
(wrong) Writes the results to a special cache accessible only after verification.
--InteriorSeparator--
hard
--InteriorSeparator--
7
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What are the two main types of branch prediction schemes?
--InteriorSeparator--
Static and Dynamic.
--InteriorSeparator--
easy
--InteriorSeparator--
8
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What are the types of static prediction schemes?
--InteriorSeparator--
(right) Jump is never executed.
(wrong) Adaptive prediction based on program behavior.
(right) Jump is always executed.
(right) Backward jumps are always executed, forward jumps never executed.
--InteriorSeparator--
medium
--InteriorSeparator--
9
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
How does a dynamic prediction scheme work?
--InteriorSeparator--
The processor stores the behavior of previous jumps in a table.
--InteriorSeparator--
easy
--InteriorSeparator--
10
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What types of predictors are used in dynamic prediction schemes?
--InteriorSeparator--
(right) Local predictors.
(wrong) General predictors.
(right) Global predictors.
(right) Mixed predictors.
--InteriorSeparator--
medium
--InteriorSeparator--
11
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the function of a trace cache?
--InteriorSeparator--
Stores instructions in the order they are executed, not in physical order.
--InteriorSeparator--
medium
--InteriorSeparator--
12
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is speculative execution?
--InteriorSeparator--
Executing all possible variants of an instruction before knowing the correct one.
--InteriorSeparator--
easy
--InteriorSeparator--
13
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
In speculative execution, when are the results of the correct variant validated?
--InteriorSeparator--
(wrong) Results are never validated.
(wrong) The operating system validates the results before writing to the registers
(right) When the correct variant is known.
(wrong) Results are directly written to memory.
--InteriorSeparator--
medium
--InteriorSeparator--
13
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
How are registers modified during speculative execution before the correct variant is known?
--InteriorSeparator--
Results of operations are stored in temporary registers.
--InteriorSeparator--
medium
--InteriorSeparator--
15
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What are the advantages of speculative execution over branch prediction?
--InteriorSeparator--
(wrong) It requires fewer temporary registers
(right) It does not produce incorrect predictions
(wrong) It is simpler to implement.
(wrong) It reduces the need for memory access
--InteriorSeparator--
hard
--InteriorSeparator--
16
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What are the disadvantages of speculative execution compared to branch prediction?
--InteriorSeparator--
(wrong) Lower success rate.
(right) Requires many registers for temporary results.
(right) The management of temporary registers is complicated.
(wrong) Cannot be used with complex circuits
--InteriorSeparator--
hard
--InteriorSeparator--
16
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is predication in computer architecture?
--InteriorSeparator--
A technique where each instruction has an associated predicate (boolean condition).
--InteriorSeparator--
easy
--InteriorSeparator--
17
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
When does an instruction produce effects in predication?
--InteriorSeparator--
Only if its associated predicate is true.
--InteriorSeparator--
medium
--InteriorSeparator--
18
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
How are predicates modified in predication?
--InteriorSeparator--
(wrong) By the operating system.
(wrong) Automatically after a certain period of execution.
(right) By test instructions.
(wrong) Can only be changed upon reboot of the OS.
--InteriorSeparator--
medium
--InteriorSeparator--
18
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is out-of-order execution?
--InteriorSeparator--
Instructions do not necessarily finish in the order they started.
--InteriorSeparator--
easy
--InteriorSeparator--
22
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is the purpose of out-of-order execution?
--InteriorSeparator--
(wrong) To simplify pipeline design.
(right) To eliminate stalls in the pipeline.
(wrong) To guarantee sequential execution.
(wrong) To increase memory access speeds
--InteriorSeparator--
medium
--InteriorSeparator--
22
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
When is out-of-order execution possible?
--InteriorSeparator--
(wrong) All instructions.
(right) When there are no dependencies between instructions.
(wrong) When instructions are executed in a loop.
(wrong) When the memory addresses have already been accessed
--InteriorSeparator--
medium
--InteriorSeparator--
22
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is register renaming?
--InteriorSeparator--
A technique to resolve data dependencies by assigning different registers to instructions that use the same register.
--InteriorSeparator--
medium
--InteriorSeparator--
24
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What are the types of data dependencies?
--InteriorSeparator--
(right) RAW (read after write).
(wrong) RAR (read after read).
(right) WAR (write after read).
(right) WAW (write after write).
--InteriorSeparator--
medium
--InteriorSeparator--
25
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is a RAW dependency?
--InteriorSeparator--
The first instruction modifies a resource and the second reads it.
--InteriorSeparator--
medium
--InteriorSeparator--
25
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Can RAW dependencies be eliminated?
--InteriorSeparator--
(wrong) Yes, using specialized algorithms.
(right) No.
(wrong) Only in certain cases, when the value can be derived from another source
(wrong) Only if the code is rewritten.
--InteriorSeparator--
hard
--InteriorSeparator--
26
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is a WAR dependency also known as?
--InteriorSeparator--
Anti-dependency.
--InteriorSeparator--
medium
--InteriorSeparator--
27
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
How can a WAR dependency be resolved?
--InteriorSeparator--
(wrong) By delaying the first instruction
(right) By register renaming, using a temporary register.
(wrong) Cannot be resolved.
(wrong) Reordering the instructions
--InteriorSeparator--
hard
--InteriorSeparator--
28
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is a WAW dependency also known as?
--InteriorSeparator--
Output dependency.
--InteriorSeparator--
medium
--InteriorSeparator--
29
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
How can a WAW dependency be resolved?
--InteriorSeparator--
(wrong) By executing the instructions sequentially
(right) By register renaming, using a temporary register.
(wrong) By using forwarding techniques.
(wrong) by deleting one of the instructions
--InteriorSeparator--
hard
--InteriorSeparator--
30
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What are the benefits of using register renaming?
--InteriorSeparator--
(wrong) Simplifies program code.
(right) Helps increase performance.
(right) Increases the potential for parallelization.
(wrong) Reduces memory access requirements
--InteriorSeparator--
medium
--InteriorSeparator--
31
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Why are renamed registers not directly accessible to the programmer?
--InteriorSeparator--
(right) Register renaming is done automatically.
(right) Prevents programmers from making errors and inefficiently exploiting resources.
(wrong) It does not prevent any errors.
(wrong) It is easier for the programmer to manage registers
--InteriorSeparator--
hard
--InteriorSeparator--
32
--FlashCardSeparator--
}], role=model}, finishReason=STOP, avgLogprobs=-0.20962778635503065}]