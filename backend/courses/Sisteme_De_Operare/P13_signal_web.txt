***************Beginning Page***************
***************page number:1**************
Programare concurentﬁ in C (VII) :
Gestiunea proceselor, partea a III-a:
Semnale UNIX
CrisUan Vidrascu
vidxascuﬁinicmauxro

***************Ending Page***************

***************Beginning Page***************
***************page number:2**************
Sumar
- lntroducere
~ Categorii de semnale
- Tipurile de semnale predeﬁnite ale UNIX-ului
~ Cererea explicité de generare a unui semnal
— primitiva kill
- Coruperea semnalelor — primitiva signal
- Definirea propriilor hand/ere de semnal
~ Blocarea semnalelor
- Asteptarea unui semnal

***************Ending Page***************

***************Beginning Page***************
***************page number:3**************
Introducere
Semnalele UNIX reprezinté un mecanism
fundamental de manipulare a proceselor si de
comunicare intre procese, ce asiguré tratarea
evenimentelor asincrone apérute Tn sistem.
Un semnal UNIX este o fntrerupere software
generaté Tn momentul producerii unui anumit
eveniment si transmisé de sistemul de operare
unui anumit proces.

***************Ending Page***************

***************Beginning Page***************
***************page number:4**************
Introducere (contJ
Un semnal este generatde aparitia unui evenimenl exceptional
(care poate fi o eroare, un evenimem extern sau o cerere explicité).
Orice semnal are asociat un tip, reprezentat printr-un numér
intreg pozitiv (ce codiﬁcé cauza sa), si un proces destinatar.
Odaté generat, semnalul este pus Tn coada de semnale a
sistemului, de unde este extras $i transmis procesului destinatar
de cétre sistemul de operare.
Transmiterea semnalului cétre destinatar se face imediat dupé
ce semnalul a ajuns Tn coada de semnale, cu o exceptie: dacé
primirea semnalelor de tipul respectiv a 1051 blocaré de cétre procesul
deslinatar, atunci transmiierea semnalului se va face abia in momentul
cénd procesul destinatar va debloca primirea acelw tip de semnal.

***************Ending Page***************

***************Beginning Page***************
***************page number:5**************
Introducere (contJ
Tn momentul Tn care procesul destinatar primeste acel semnal, el
isi intrerupe executia si va execute o anumité actiune (vie, o
functie de tratare a acelui semnal, functie numité handler de
semnal) care este atasatz'a tipului cle semnal primit, dupz'a care
procesul i$i va relua executia din punctul in care a fost intrerupt
(cu anumite exceplii: unele semnale vor cauza terminarea iortaté a
acelui proces).
Tn concluzie, fiecare tip de semnal are asociat o actiune (un
handler) specificé acelui tip de semnal.

***************Ending Page***************


***************Beginning Page***************
***************page number:6**************
Categorll de semnale
Evenimentele ce genereaza semnale se impart Tn trei categorii:

~ erori (in procesul destinatar)
o eroere inseamné ca pmgiamui a iaw u opelalie invalidé Si nu poate sé-si
cuminue execuiia. Nu luaie eronie geneveazé semnaie‘ Cl dear acele erori cave
pol apare in orice punci al programului, cum ar ii. impémrea Ia zero, accesarea
unei adrese de memorie invalide. elc.

' evenimente externe (procesului destinatar)
Evenimentele externe sunt in genevai legaie me npevaiiile l/O sau de aciiuniie
aimr procese, cum at ii: susirea daleior (pe lm sucker sau pipe), \ermlriarea unui
proces liu, expirarea intervalului de limp Sela! pemm 0 aiarmé, sau suspendarea
ori lerminarea programului de cétre utiilzalor (pm apésarea lasteior ‘z on ‘c).

' cereri explicite
o oerele explicifé inseamné generarea unui semnal de cétre un (all) proces, prin
apelul primiIiVei kill.

WM m», MW“, MMWM

***************Ending Page***************

***************Beginning Page***************
***************page number:7**************
Categorll de semnale (cuntJ
Semnalele pot fi generate sincron sau asincron.
' Un semnal sincron este generat de 0 anumité actiune specificé Tn
program si esle livrat (dacé nu este blocat) in timpul acelei actiuni.
- Evenimeme ce geneleaza semna\e sinerone- erorile sr cererne explicite ale
unul proces de a genera semnale penlru el rneuer
' Un semnal asincron esie general de un eveniment din afara
zonei de control a procesului care il receptioneaza; cu ake
cuvinte, un semnal ce este receptionat, Tn timpul executiei
procesului destinatar, la un moment de 1imp ce nu poate fi
anticipat.
- Evenimeme ce geneveazé eemnere aslncrone evenlmen\e\e exieme sr
cererile expﬁcite ale unui proces de a genera semnale desiinate akor procese.
WM We, Wm.“ , Mmmepee

***************Ending Page***************

***************Beginning Page***************
***************page number:8**************
Categorii de semnale (cuntJ

Pentru fiecare tip de semnal existé o aciiune implicité de tratare
a acelui semnal, specificé sistemului de operare UNIX respectiv.
Aceasté actiune esle denurnité handlerul implicit de semnal
atasat acelui \ip de semnal.
Atunci cénd semnalul este livrai procesuiui, acesta este intrerupt 5i are
trei posibilitéti de componare:

' fie sé execute aceasté aciiune implicité,

' fie 55 ignore semnalul,

' fie 55 execute o anumité funcﬂe handler utilizator.
Selarea unuia dintre cele trei comporiamente se iace cu ajutorul
apelului primitivelor signal sau sigaction.

6mm mm», Mn.“ § Whom rpm

***************Ending Page***************

***************Beginning Page***************
***************page number:9**************
Tipurile de semnale predeﬁnite ale UNIX-ului
Tipurile predefinite de semnale din UNIX se clasifici in mai multe
categorii:
' semnale standard de eroare: SIGFPE, SIGILL, SIGSEGV,
smsus
' semnale de lerminare a proceselor: SIGHUP, SIGINT, SIGQUIT,
SIGTERM, SIGKILL
' semnale de alarmé: SIGALRM, SIGVTALRM, SIGPROF
' semnale asincrone l/O: SIGIO, SIGURG
' semnale pentru controlul proceselor: SIGCHLD, SIGCONT,
sms'rop, SIGTSTP, SIGTTIN, sm'r'rou
‘ alte tipuri de semnale: SIGPIPE,SIGUSR1,SIGUSR2
MM mm», Mu.“ , Mmmrpw

***************Ending Page***************

***************Beginning Page***************
***************page number:10**************
Tipurile de semnale predeﬁnite ale UNIX-ului (cont)
Lisla semnalelor UNIX predefinite, mai exact numérul Tntreg asociat
fiecérui tip de semnal, poate 1i oblinuté cu comanda urmétoare:
UNIX> kill —l
iar pagina de manual ce conﬁne descrierea semnalelor esie:
UNIX> man 7 signal
Observaﬂe: o parle dimre acesle Upun de semnaha depmd side euponm elem de parlea
de hardware a calcwalorului respectiv‘ nu numai de smemul de operare de pe ace\
calculator. Din aces! mow, exxsti mm deosebin in modw de \mplementare a acestor
semnale pe diferlle \ipuri de armiemuvi de calculaioare (adlcé unele semnale se p0a\e 55
nu vie implementate demo, sau sé lie imp\emema\e cu 7mm dileremej.
Exemme de semnme ce pm dWen de \a un up de arhilecluré Ia ahul cele generate de
emri, cum ar n smeus (care nu esle implemenlal \n Linux“ pemm herdwerem use).
In ooncluzie: lrebuie sludialé documenlana hpului de ca\cu\alor pe care n uhlizau pemm
a vedea ce semnale aveli la dispozitie

MM we», Mu.“ , Mmmewe

***************Ending Page***************


***************Beginning Page***************
***************page number:11**************
Cererea explicité de general-e a unui semnal — primitiva kill
Apelul de sistem kill este utilizat pentru a cere explicit
generarea unui semnal. lnterfata acestei functii:
int kill (int pid, int I'd-signal)

- pid = PID-Ul procesului destinalar
' id-signal = tipul semnalului
' valoarea returnaté este 0, in caz de reusité, sau -1, Tn caz
de eroare.
Efect: in urma execuliei funcliei kill se genereazz'i un semnal
de tipul specificat, destinal procesului specificat.

***************Ending Page***************

***************Beginning Page***************
***************page number:12**************
Cererea explicitﬁ de general-e a unui semnal — primitiva kill
Observalie: prin apelul kill(pfd,0) ; nu se trimite nici un
semnal, dar este util pentru verificarea validitétii PID-ului
respecliv (1.9., dacé existé un proces cu ace\ PID in momentul apelulm, sau nu): se
relumeazé 0 dacé PID-ul specificat esie valid, sau -1, in caz contrar.
Pentru cererea explicité de generare a unui semnal se poate
folosi si COmanda kill:

UNIX> kill —semnal pid

Un proces Tsi poate trimite semnale sie Tnsusj folosind funclia
raise, ce are interfata:

int raise(int id-signal)

Efect: este echivalem cu apelul kill(getpid( ) ,fd's/‘gna/h .

***************Ending Page***************

***************Beginning Page***************
***************page number:13**************
Coruperea semnalelor — primitiva signal

Actiunea asociaté unui semnal poate fi:

- o actiune implicité (specwicémslemmui de operare respectiv),

~ sau ignorarea semnalului,

' sau un hand/er propriu, definit de programator.
Se utilizeazé termenul de curupere a unui semnal cu sensul de:
setarea unui handler propriu pentru acel tip de semnal.
Noté: uneori, se loloseste 5i termenul de tralare a semnalului.
Observatie: semnalele SIGKILL si SIGSTOP nu pot fi corupte,
ignorate sau blocate!

***************Ending Page***************

***************Beginning Page***************
***************page number:14**************
Coruperea semnalelnr — primitiva signal (cont.)
Specificarea acliunii asociate unui semnal se poate face cu
apelurile de sistem signal sau sigaction.

Interfala primitivei signal este:
siqhandlerit signal (int id'slgnal, sighandlerit action)
I I'd-signal = tipul semnalului céruia i se asociazé acea acliune
' action = acliunea (112., hand/erul de semnal) ce se asociazé
semnalului; poate 1i numele unei Iuncpi deime de programmer, sau poale Iua
una dinlre vamrile:
- are)“ : specmca achunea \mpllClli (cea gamma de oélre slslemu‘ de
uperave) la vecepﬂonarea semnalulul
- SIGilGN : Spemlicé laplul cé procesul va ignora acel semnal
' valoarea returnalé este vechiul handler pentru semnalul
specificat, sau constanta simbolicé SIGiERR in caz de eroare.

***************Ending Page***************

***************Beginning Page***************
***************page number:15**************
Coruperea semnalelnr — primitiva signal (cont.)
Interfala primirivei signal este:
sighandler_t signal (int /d-slgna/, sighandler_t act/an)
Efect: se asociazé handlerul speciiical pemru acel tip de semnaL
Ca urrnare, ulterior (piné \a o noué recorupere), ori de céte ori procesul va
receptiona semnalul id'sr'gnal, se va executa handlerul de semnal action.
Observatie: Tn general nu este bine ca programul s5 ignore semnalele
(mai ales pe acelea care reprezmti evemmenle \mporlanle). Dacé se doreste ca
programul sé nu receptioneze semnale in timpul execuiiei unei
anumite portiuni de cod (pemm a nu n imrempré), soluiia cea mai indicaté
este sé se blacheze primirea semnalelor, nu ca ele sé fie ignoraie.

***************Ending Page***************


***************Beginning Page***************
***************page number:16**************
Coruperea semnalelnr — primitiva signal (cont.)
Interfala primiqivei signal este:
sighandler_t signal (int /d-slgna/, sighandler_t act/an)
Dacé argumemul acimn este numele unei functii definite de utilizaior,
aceasté functie trebuie sé aibé proiotipul sighandlerit, definit astfel:
typedef void (*Sighandlerit) (int);
Lev, tipul “iunclie ce Tntoarce tipul voidv si are un argumem de Hp int".
Noté: la momentul executiei unui handler de semnal, acest argument
va avea ca valoare numérul semnalului ce a determinal execulia acelui
handler. in acest fel, se poate asigna 0 aceea$i functie ca $i hand/er
pentru mai multe semnale, in corpul ei puiénd sii, pe baza
argumemului primit, care dintre acele semnale a cauzat apelul
respectiv‘

Mwmw, w.“ W “mm-“1W

***************Ending Page***************

***************Beginning Page***************
***************page number:17**************
Coruperea semnalelnr — primitiva signal (cont.)
Exemplu: un program care sé ignore Tmreruperile de 1astaturé, adicé
semnalul sIGINT(generatde1astele CTRL+C) si semnalul SIGQUIT
(genera! de tastele CTRL+\ ).
A 5e vedea programul sig-exl .c féré ignorarea celor doué semnale
(is, poale ri Tnlrerupl/opril cu 0me respecuv CTRL+\ ), si respectiv programul
sig-exZ .c cu ignorarea celor doué semnale (19, va Iulaféré a puteah
inverupl/oprll cu mama, respectlv CTRL+\ ).
Sé modiﬁcém exemplul anterior astfel: corupem semnalele sé execuie
un handler propriu, care sé afiseze un anumi! mesa]. lar apoi reiacem
comportamentul implicit al semnalelor.
A se vedea programul sig-ex3 .c

***************Ending Page***************

***************Beginning Page***************
***************page number:18**************
Deﬁnirea propriilor handlere de semnal
Un handler de semnal propriu este o funclie definité de programator,
ce va fi apelalé atunci cénd procesul receptioneazé semnalul céruia ii
este asociaté.
Strategii principale folosite in scrierea de hand/ere proprii:

' Se poate ca handlerul sé noiifice primirea semnalului prin sekarea
unei variabile globale 5i apoi sé returneze imedial, urménd ca in
bucla principalé a programului, sé se veriiice periodic dacé acea
variabilé a fosi setaté, in care caz se vor efectua operatiile dorite.

' Se poaie ca handlerul sé termine executia procesului, sau sé
transfere execulia intr-un punct Tn care procesul poate sé-si
recupereze starea in care se aﬂa in momentul recepiionérii
semnalului.

***************Ending Page***************

***************Beginning Page***************
***************page number:19**************
Deﬁnirea propriilor handlere de semnal (c0nt.)
Atenlie: trebuie luate mésuri specials atunci cénd se scrie codul
pentru handlerele de semnal, deoarece acestea pot fi apelate
asincron, adicé la momente de limp imprevizibile.
Spre exemplu, Tn timp 0e se execuié handlerul asociat unui semnal
primit, acesta poate Ii Tntrerupt prin receptia unui alt semnal (3| doHea
semnal trebuie sé fie de an 1ip decét pHmul; dacé este ace\as\ \lp de semna‘. e\ va n
blocal péné cénd se \erminé \ralarea pnmmm semnm).
Important: prin urmare, primirea unui semnal poate intrerupe nu
doar execulia programului respectiv, ci chiar execulia hand/erului
unui semnal anterior primit, sau poate intrerupe executia unui
apel de sislem efecluat de program in acel moment.

***************Ending Page***************

***************Beginning Page***************
***************page number:20**************
Blocarea semnalelor
Blocarea semnalelorinseamné cé procesul spune sistemului de
operare sf! nu Ti transmit?! anumite semnale (ele vor riméne in
coada de semnale, péné cénd procesul va debloca primirea Ior),
Nata": nu este recomandabil ca un program sé blocheze semnalele pe
to! parcursul execuiiei sale, ci numai pe durata executiei unor portiuni
critics ale codului séu. Astfel, dacé un semnal ajunge Tn timpul
executiei acelei poniuni de program, el va fi livrat procesului abia dupé
terminarea executiei acesteia si deblocarea acelui tip de semnal.

***************Ending Page***************


***************Beginning Page***************
***************page number:21**************
Blocarea semnalelor
Blocarea semnalelorinseamné cé procesul spune sistemului de
operare s51 nu Ti transmit?! anumite semnale (ele vor réméne in
coada de semnale, péné cénd procesul va debloca primirea Ior),
Blocarea semnalelor se realizeazé cu functia sigprocmask, ce
utilizeazé structure de daie sigset_t (care este u mascé de bili, cu
semnilicagia de set de semnme ales penlru mocare).
Cu primitiva sigpending se poaie veriﬁca existema, in coada de
semnale, a unor semnale blocaie (decl care a§teapié sé ﬁe democate peniru a
puleaii livrale procesului).
Exemplu: a se vedea fisierul sursé sig-ex4 .c

***************Ending Page***************

***************Beginning Page***************
***************page number:22**************
Asteptarea unui semnal
Dace‘: aplicagia este inﬂuentaté de evenimente externe, sau
folose$te semnale pentru sincronizare cu alte procese, atunci ea
nu lrebuie sé facé altceva decét sé a$tepte semnale.
Se poate folosi Tn acest scop functia pause, ce are prototipul:
int pause( )
Efect: suspendarea execuiiei programului péné la sosirea unui semnal.
Observafie: simplitatea acestei fuanii poate ascunde erori greu de
detectat. Deoarece programul principal nu face altceva decét sé
apeleze pause( ), inseamné cé cea mai mare pane a activiiétii utile in
program o realizeazé handlerele de semnal. Tnsé, codul acestor
hand/ere nu este indicat sé fie prea lung, deoarece poate fi Tmrerupt
de alte semnale.

***************Ending Page***************

***************Beginning Page***************
***************page number:23**************
Asteptarea llIllll semnal (contJ
Modalitatea cea mai indicaté, pentru asteptarea unui anumit semnal
(IE, agleplarea primulux semna‘ pnmil, dmﬂ-O mumme hxalé de semnale), este de a
folosi iunclia sigsuspend, ce are proiotipul:
int sigsuspend ( const sigset_t :set)
Efect: se inlocuie$te masca de semnale curenté a procesului cu cea
specilicaté de parametrul 5915i apoi se suspendé executia procesului
péné la receptionarea unui semnal, de cétre proces (dew un semnal care
nu esle blocat, admé nu este cuprlns in masca de semnale curemé).
Masca de semnale réméne la valoarea setaté (f.e., valoarea lui set)
numai péné cénd fuania sigsuspend( ) returneazé, momem in care
este reinstalaté, Tn mod auiomai, vechea mascé de semnale.

***************Ending Page***************

***************Beginning Page***************
***************page number:24**************
Asteptarea llIllll semnal (contJ
Modalitatea cea mai indicaté, pentru asteptarea unui anumit semnal
(IE, agleplarea primulux semna‘ pnmil, dmﬂ-O mumme hxalé de semnale), este de a
folosi iunclia sigsuspend, ce are proiotipul:
int sigsuspend ( const sigset_t :set)
Valoarea relumaté: 0, in caz de succes, respectiv -1, in caz de esec
(iar variabila errno este setaté Tn mod corespunzénor: EINVAL,
EFAULT sau EINTR).
Exemplu: un program care Tsi suspendé execuﬂa in asiepmrea
semnalului SIGQUIT(genera1de\aslele CTRL+\), iéré a fi intrerupl de
alte semnale. A se vedea fisierul sursé sig-exS .c

***************Ending Page***************

***************Beginning Page***************
***************page number:25**************
Blbllograﬁe obllgatorle
Cap.4, §4.5 din manualul, Tn format PDF, accesibil din pagina
disciplinei “Sisteme de operare":
| https = //pr0£s , info‘ uuuc 4 ru/"vldra>cu/SU/buoks /H=\numl‘D*SO . 951i
Programele demonstrative amimite pe parcursul aceslei prezentéri pol vi descércale de
la adresa urmélcare:
.
https://pr0fs.1nfo.ua1c.rQ/'v)drascu/SO/cursq:1/Ciproqrarvs/s,g"nl/
inneuariv
MWWW W.“ 5m‘. W12“.

***************Ending Page***************

