[{content={parts=[{text=--FlashCardSeparator--
Single
--InteriorSeparator--
What type of systems are UNIX and Linux considered, in the context of program execution?
--InteriorSeparator--
Multi-tasking systems
--InteriorSeparator--
easy
--InteriorSeparator--
3
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What can concurrent access to files by different processes sometimes lead to?
--InteriorSeparator--
(right) Destruction of data integrity
(wrong) Increased file size
(wrong) Faster processing speeds
(right) Undesired effects
--InteriorSeparator--
medium
--InteriorSeparator--
3
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the purpose of implementing mechanisms for exclusive file access in UNIX systems?
--InteriorSeparator--
To allow only one process to access a file at a time
--InteriorSeparator--
easy
--InteriorSeparator--
3
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the key observation a programmer must consider to benefit from concurrent file access?
--InteriorSeparator--
No special techniques are required beyond basic file access.
--InteriorSeparator--
medium
--InteriorSeparator--
5
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What happens when running multiple instances of a program accessing the same file concurrently?
--InteriorSeparator--
(right) File accesses happen simultaneously.
(wrong) The program crashes.
(wrong) The file becomes corrupted.
(right) File accesses happen in an approximately concurrent timeframe.
--InteriorSeparator--
medium
--InteriorSeparator--
5
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the purpose of the `sleep(5)` call in the `access_v1.c` program in the context of concurrent file access?
--InteriorSeparator--
It introduces a delay to illustrate the effects of concurrent access, creating a window for other processes to interfere.
--InteriorSeparator--
hard
--InteriorSeparator--
6
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What structure is used to specify a file lock in UNIX-like systems?
--InteriorSeparator--
(wrong) file_lock
(right) flock
(wrong) mutex
(wrong) semaphore
--InteriorSeparator--
easy
--InteriorSeparator--
8
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Where is the `flock` data structure defined?
--InteriorSeparator--
In the `fcntl.h` header file
--InteriorSeparator--
easy
--InteriorSeparator--
8
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which field in the `flock` structure indicates the type of lock?
--InteriorSeparator--
(wrong) l_offset
(wrong) l_pid
(right) l_type
(wrong) l_len
--InteriorSeparator--
easy
--InteriorSeparator--
9
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What are the possible values for the `l_type` field in the `flock` structure?
--InteriorSeparator--
F_RDLCK, F_WRLCK, and F_UNLCK
--InteriorSeparator--
easy
--InteriorSeparator--
9
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What do the constants SEEK_SET, SEEK_CUR, and SEEK_END represent in the context of the `flock` structure and file locking?
--InteriorSeparator--
(right) SEEK_SET: Beginning of file
(wrong) SEEK_CUR: Beginning of current line
(right) SEEK_CUR: Current position in file
(wrong) SEEK_END: Beginning of End of file
--InteriorSeparator--
medium
--InteriorSeparator--
9
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the purpose of the `l_start` field in the `flock` structure?
--InteriorSeparator--
It indicates the position from which the locked portion begins, relative to the origin specified by `l_whence`.
--InteriorSeparator--
medium
--InteriorSeparator--
9
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Who manages the `l_pid` field in the `flock` structure, and what does it store?
--InteriorSeparator--
The `fcntl` function manages it and stores the PID of the process owning the lock.
--InteriorSeparator--
medium
--InteriorSeparator--
9
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is the purpose of the `fcntl` function in relation to file locking?
--InteriorSeparator--
(right) To put a lock on a file
(right) To remove a lock from a file
(wrong) To create a new file
(wrong) To close a file descriptor
--InteriorSeparator--
easy
--InteriorSeparator--
10
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What are the three possible values for the `mod` parameter in the `fcntl` function when used for file locking?
--InteriorSeparator--
F_SETLK, F_GETLK, and F_SETLKW
--InteriorSeparator--
medium
--InteriorSeparator--
10
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What happens if `fcntl` with `F_SETLK` fails due to a conflict with an existing lock?
--InteriorSeparator--
(wrong) The process is terminated.
(right) The `errno` variable is set to `EACCES` or `EAGAIN`.
(wrong) The file is automatically closed.
(wrong) The system crashes.
--InteriorSeparator--
medium
--InteriorSeparator--
10
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does the `F_SETLKW` option for `fcntl` do?
--InteriorSeparator--
It allows putting locks in a "blocking" mode, where the function waits until the lock can be acquired.
--InteriorSeparator--
medium
--InteriorSeparator--
10
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What happens to a file lock when the process that set it closes the file or terminates?
--InteriorSeparator--
The lock is automatically released.
--InteriorSeparator--
medium
--InteriorSeparator--
11
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Are file locks inherited by child processes created with `fork()`?
--InteriorSeparator--
(wrong) Only write locks are inherited
(wrong) Yes, all locks are inherited
(right) No, locks are not inherited
(wrong) Only read locks are inherited
--InteriorSeparator--
hard
--InteriorSeparator--
11
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does CREW stand for in the context of file locking?
--InteriorSeparator--
Concurrent Read or Exclusive Write
--InteriorSeparator--
medium
--InteriorSeparator--
12
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which type of file lock is exclusive and which is shared?
--InteriorSeparator--
(right) Write locks (F_WRLCK) are exclusive.
(wrong) Read locks (F_RDLCK) are exclusive.
(right) Read locks (F_RDLCK) are shared.
(wrong) Write locks (F_WRLCK) are shared.
--InteriorSeparator--
medium
--InteriorSeparator--
12
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
On what principle does the correct functioning of write locks rely?
--InteriorSeparator--
The cooperation of processes to ensure exclusive access to files.
--InteriorSeparator--
hard
--InteriorSeparator--
12
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What does it mean when file locks are described as "advisory"?
--InteriorSeparator--
(right) Processes must cooperate and use locks for mutual exclusive access.
(wrong) Locks are mandatory and enforced by the OS.
(wrong) Locks are only suggestions and can be ignored.
(right) Locks are not mandatory.
--InteriorSeparator--
hard
--InteriorSeparator--
12
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What will happen if a process writes directly to a file without acquiring a lock, even if another process has a lock on that file?
--InteriorSeparator--
The write operation will NOT be blocked.
--InteriorSeparator--
hard
--InteriorSeparator--
12
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Why is the initial implementation of `access_v2.c` (with file-level locking) not optimal?
--InteriorSeparator--
(right) The processes effectively work sequentially, not concurrently.
(wrong) The locks are not released properly, causing deadlocks.
(right) Processes perform their tasks sequentially because only one can lock the entire file at a time.
(wrong) It causes excessive context switching.
--InteriorSeparator--
hard
--InteriorSeparator--
15
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the suggested optimization for file access in `access_v3.c`?
--InteriorSeparator--
Lock only the character being replaced ('#') and only for the minimum necessary time.
--InteriorSeparator--
medium
--InteriorSeparator--
15
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What potential issue can occur in `access_v3.c` during optimized file access?
--InteriorSeparator--
(wrong) The file descriptor can become corrupted.
(right) The character '#' might be overwritten by another process between detection and locking.
(wrong) The lock may not be released.
(wrong) The locking mechanism can fail.
--InteriorSeparator--
hard
--InteriorSeparator--
16
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
How can the issue in `access_v3.c` (race condition between detection and locking of '#') be corrected?
--InteriorSeparator--
After acquiring the lock, verify again if the character is still '#' and retry if not.
--InteriorSeparator--
hard
--InteriorSeparator--
17
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is the purpose of the `access_v4.c` program?
--InteriorSeparator--
(right) It provides a corrected version of access_v3.c, fixing the race condition.
(wrong) It slows down the file access.
(wrong) It prevents the OS from managing the file correctly.
(wrong) It creates multiple copies of the file.
--InteriorSeparator--
hard
--InteriorSeparator--
17
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
According to the recommended book by C. Vidrascu, where can I find more information?
--InteriorSeparator--
Cap. 3, §3.2 din cartea “Sisteme de operare — manual pentru ID”, autor C. Vidrascu.
--InteriorSeparator--
easy
--InteriorSeparator--
18
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Where can the demonstration programs mentioned in the presentation be downloaded from?
--InteriorSeparator--
(wrong) From the OS documentation.
(right) From the specified URL provided in the presentation.
(wrong) From the course instructor’s email.
(wrong) From the operating system’s git repository.
--InteriorSeparator--
easy
--InteriorSeparator--
18
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the suggested reading to explore in detail more information?
--InteriorSeparator--
Cap. 55 din cartea “The Linux Programming Interface”.
--InteriorSeparator--
easy
--InteriorSeparator--
18
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What manual pages are suggested to read in order to understand locks?
--InteriorSeparator--
(wrong) man 1 kill, man 2 signal si man 3 assert.
(right) man 2 fcntl, man 2 flock si man 3 lockf.
(wrong) man 2 create, man 2 open si man 3 close.
(wrong) man 2 printf, man 2 scanf si man 3 memset.
--InteriorSeparator--
easy
--InteriorSeparator--
18
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What command documentations are useful for file locks?
--InteriorSeparator--
man 1 flock si man 8 lslocks
--InteriorSeparator--
easy
--InteriorSeparator--
18
--FlashCardSeparator--
}], role=model}, finishReason=STOP, avgLogprobs=-0.21733266267396578}]