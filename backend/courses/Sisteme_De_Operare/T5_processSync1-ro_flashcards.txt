[{content={parts=[{text=--FlashCardSeparator--
Single
--InteriorSeparator--
What is the fundamental concept behind multiprogrammed operating systems?
--InteriorSeparator--
Parallel and concurrent processing.
--InteriorSeparator--
easy
--InteriorSeparator--
3
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is a "race condition"?
--InteriorSeparator--
A situation where the final outcome of cooperating processes depends on the exact order of execution.
--InteriorSeparator--
medium
--InteriorSeparator--
4
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following techniques can be used to avoid race conditions?
--InteriorSeparator--
(right) Implementing mutual exclusion
(wrong) Increasing the number of processes
(right) Preventing multiple processes from accessing shared resources simultaneously
(wrong) Ignoring the problem
--InteriorSeparator--
medium
--InteriorSeparator--
7
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is mutual exclusion?
--InteriorSeparator--
A technique that ensures only one process can use a shared resource at any given time.
--InteriorSeparator--
easy
--InteriorSeparator--
8
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following are requirements for a solution to the critical section problem?
--InteriorSeparator--
(right) Mutual exclusion
(right) Progress
(wrong) Fairness
(wrong) Deadlock prevention
--InteriorSeparator--
medium
--InteriorSeparator--
11
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the "progress" requirement for solving the critical section problem?
--InteriorSeparator--
If no process is in its critical section and some processes want to enter, the selection of which process enters next cannot be postponed indefinitely.
--InteriorSeparator--
hard
--InteriorSeparator--
11
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the "bounded waiting" requirement for solving the critical section problem?
--InteriorSeparator--
There is a limit on the number of times other processes can enter their critical sections after a process has requested to enter its own critical section, and before that process is granted access.
--InteriorSeparator--
hard
--InteriorSeparator--
11
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following are implementation options for mutual exclusion?
--InteriorSeparator--
(right) Disabling interrupts
(right) Busy waiting solutions
(wrong) Increasing process priority
(wrong) Using more memory
--InteriorSeparator--
medium
--InteriorSeparator--
12
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the main drawback of disabling interrupts for mutual exclusion?
--InteriorSeparator--
It is only suitable for uniprocessor systems and short critical sections.
--InteriorSeparator--
medium
--InteriorSeparator--
12
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is a typical template for a process regarding critical sections?
--InteriorSeparator--
Entry Section -> Critical Section -> Exit Section -> Remainder Section
--InteriorSeparator--
easy
--InteriorSeparator--
13
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In Solution 1 (using a turn variable) for the 2-process critical section problem, what condition does the `while` loop check?
--InteriorSeparator--
`while turn != i` (where `i` is the process ID).
--InteriorSeparator--
medium
--InteriorSeparator--
16
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Why is Solution 1 for the 2-process critical section problem incomplete?
--InteriorSeparator--
It violates the progress requirement, leading to potential starvation.
--InteriorSeparator--
hard
--InteriorSeparator--
17
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In Solution 2 (using a flag array) for the 2-process critical section problem, what does setting `flag[i] = true` indicate?
--InteriorSeparator--
Process Pi desires to execute its critical section.
--InteriorSeparator--
medium
--InteriorSeparator--
18
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Why is Solution 2 for the 2-process critical section problem incomplete?
--InteriorSeparator--
It can lead to deadlock and starvation if both processes set their flags to true before entering the while loop.
--InteriorSeparator--
hard
--InteriorSeparator--
20
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What data structures are used in Peterson's solution (Solution 3) for the critical section problem?
--InteriorSeparator--
(right) A shared variable `turn`
(right) A shared boolean array `flag[]`
(wrong) A queue
(wrong) A stack
--InteriorSeparator--
medium
--InteriorSeparator--
21
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In Peterson's solution, what does `turn = j` signify?
--InteriorSeparator--
Process Pi gives the other process Pj a chance to enter its critical section.
--InteriorSeparator--
medium
--InteriorSeparator--
21
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In Peterson's solution, what condition must be met for a process `Pi` to enter its critical section?
--InteriorSeparator--
Either `flag[j]` is false, or `turn` is equal to `i`.
--InteriorSeparator--
hard
--InteriorSeparator--
23
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Why does Peterson's solution satisfy the mutual exclusion requirement?
--InteriorSeparator--
Because both processes cannot execute their While statements simultaneously and `flag[0]` and `flag[1]` cannot both be true at the same time.
--InteriorSeparator--
hard
--InteriorSeparator--
23
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Why does Peterson's solution satisfy the progress and bounded waiting requirements?
--InteriorSeparator--
A process is only blocked in the while loop. If the other process is not ready, it will proceed. If the other process sets the turn variable, it will eventually allow the blocked process to proceed.
--InteriorSeparator--
hard
--InteriorSeparator--
25
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Who is credited with the first correct complete solution to the critical section problem for two processes?
--InteriorSeparator--
Dekker
--InteriorSeparator--
medium
--InteriorSeparator--
26
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is a key idea introduced by Dekker in his solution to the critical section problem?
--InteriorSeparator--
The concept of a favored process and allowing access to any process when the access request is uncontested.
--InteriorSeparator--
hard
--InteriorSeparator--
26
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the fundamental approach in Lamport's Bakery Algorithm for handling the critical section problem with n processes?
--InteriorSeparator--
Giving each process a number, similar to customers in a bakery, and serving them in order of their number.
--InteriorSeparator--
medium
--InteriorSeparator--
29
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which data structures are shared among the processes in Lamport's Bakery Algorithm?
--InteriorSeparator--
(right) `choosing[]`
(right) `number[]`
(wrong) `lock`
(wrong) `semaphore`
--InteriorSeparator--
medium
--InteriorSeparator--
30
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does `choosing[i] := true` signify in Lamport's Bakery Algorithm?
--InteriorSeparator--
Process Pi is in the process of choosing a number.
--InteriorSeparator--
medium
--InteriorSeparator--
31
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What are the possible states of `flag[i]` in Eisenberg & McGuire's algorithm for the n-process critical section problem?
--InteriorSeparator--
(right) idle
(right) want-in
(right) in-cs
(wrong) waiting
--InteriorSeparator--
hard
--InteriorSeparator--
32
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the purpose of the Test-and-Set instruction in solving the critical section problem?
--InteriorSeparator--
Atomically test the current value of a variable and set it to true.
--InteriorSeparator--
medium
--InteriorSeparator--
34
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is a limitation of using Test-and-Set or Swap for mutual exclusion?
--InteriorSeparator--
They satisfy mutual exclusion and progress, but not bounded waiting.
--InteriorSeparator--
hard
--InteriorSeparator--
39
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What are spinlocks?
--InteriorSeparator--
A software solution used in the OS kernel for protecting critical sections, where a process repeatedly checks a lock until it becomes available.
--InteriorSeparator--
medium
--InteriorSeparator--
41
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What are the two standard, atomic operations used to access a semaphore?
--InteriorSeparator--
wait() and signal()
--InteriorSeparator--
easy
--InteriorSeparator--
43
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does the wait(S) operation do?
--InteriorSeparator--
Decrements the semaphore value, and if the value becomes negative, suspends the process.
--InteriorSeparator--
medium
--InteriorSeparator--
43
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
How are semaphores implemented to avoid busy waiting?
--InteriorSeparator--
By suspending and resuming processes/threads.
--InteriorSeparator--
medium
--InteriorSeparator--
44
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the difference between binary and general semaphores?
--InteriorSeparator--
Binary semaphores are initialized to 1 and used for mutual exclusion, while general semaphores are initialized to n > 1 and represent multiple instances of a resource.
--InteriorSeparator--
medium
--InteriorSeparator--
48
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is a deadlock?
--InteriorSeparator--
A situation where two or more processes are blocked indefinitely, waiting for an event that can only be caused by one of the waiting processes.
--InteriorSeparator--
medium
--InteriorSeparator--
52
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is starvation?
--InteriorSeparator--
A situation where a process waits indefinitely to enter the critical section.
--InteriorSeparator--
medium
--InteriorSeparator--
52
--FlashCardSeparator--
}], role=model}, finishReason=STOP, citationMetadata={citationSources=[{startIndex=1702, endIndex=1847}, {startIndex=2105, endIndex=2243}, {startIndex=10413, endIndex=10559}]}, avgLogprobs=-0.12223242453179654}]