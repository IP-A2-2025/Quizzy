[{content={parts=[{text=--FlashCardSeparator--
Single
--InteriorSeparator--
What concept does the Producer-Consumer problem illustrate?
--InteriorSeparator--
The concept of cooperating processes.
--InteriorSeparator--
easy
--InteriorSeparator--
4
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following are classic synchronization problems?
--InteriorSeparator--
(right) Producer-Consumer problem
(right) Dining Philosophers problem
(wrong) Banker's Algorithm
(wrong) Shortest Job First
--InteriorSeparator--
medium
--InteriorSeparator--
3
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the purpose of the 'mutex' semaphore in the unbounded buffer Producer-Consumer solution?
--InteriorSeparator--
To control the critical section and provide exclusive access to the buffer.
--InteriorSeparator--
medium
--InteriorSeparator--
6
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the function of the 'empty' semaphore in the bounded buffer Producer-Consumer problem?
--InteriorSeparator--
It counts the number of empty locations in the buffer.
--InteriorSeparator--
medium
--InteriorSeparator--
11
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
In the bounded buffer Producer-Consumer problem, what happens if the order of `wait(empty)` and `wait(mutex)` in the producer process is switched?
--InteriorSeparator--
(right) A deadlock may occur.
(wrong) The consumer starves.
(wrong) The producer starves.
(wrong) The program runs faster.
--InteriorSeparator--
hard
--InteriorSeparator--
15
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does CREW stand for in the context of the Readers and Writers problem?
--InteriorSeparator--
Concurrent Read Exclusive Write.
--InteriorSeparator--
easy
--InteriorSeparator--
16
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
In the Readers and Writers problem, which processes might suffer from starvation in version #1 (reader priority)?
--InteriorSeparator--
(right) Writers
(wrong) Readers
(wrong) Neither readers nor writers
(wrong) Both readers and writers equally
--InteriorSeparator--
medium
--InteriorSeparator--
18
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In the Readers and Writers problem, how does version #2 prioritize access to the shared resource?
--InteriorSeparator--
It prioritizes writers over readers.
--InteriorSeparator--
easy
--InteriorSeparator--
19
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is a key characteristic of Readers and Writers version #3?
--InteriorSeparator--
(right) Requests are handled in the order of arrival
(right) Prevents starvation for both readers and writers.
(wrong) Prioritizes readers over writers
(wrong) Prioritizes writers over readers
--InteriorSeparator--
medium
--InteriorSeparator--
20
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In the Readers and Writers problem (version #1), what is the purpose of the 'readcount' variable?
--InteriorSeparator--
To keep track of the number of reader processes currently reading the shared object.
--InteriorSeparator--
medium
--InteriorSeparator--
21
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In the Readers and Writers problem, why is a mutex needed to protect the `readcount` variable?
--InteriorSeparator--
To ensure mutual exclusion when updating the `readcount`.
--InteriorSeparator--
medium
--InteriorSeparator--
21
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
In the Dining Philosophers problem, what can occur if each philosopher picks up their left chopstick simultaneously?
--InteriorSeparator--
(right) A deadlock
(wrong) Starvation of one philosopher
(wrong) Increased throughput
(wrong) Improved resource utilization
--InteriorSeparator--
hard
--InteriorSeparator--
33
--FlashCardSeparator--
}], role=model}, finishReason=STOP, avgLogprobs=-0.18260402854429472}]