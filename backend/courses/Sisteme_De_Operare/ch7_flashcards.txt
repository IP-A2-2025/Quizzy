[{content={parts=[{text=--FlashCardSeparator--
Single
--InteriorSeparator--
What is the purpose of classical problems of synchronization?
--InteriorSeparator--
To test newly-proposed synchronization schemes.
--InteriorSeparator--
easy
--InteriorSeparator--
3
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following are classical problems of synchronization?
--InteriorSeparator--
(right) Bounded-Buffer Problem
(right) Dining-Philosophers Problem
(wrong) Banker's Algorithm
(wrong) Shortest Job First
--InteriorSeparator--
medium
--InteriorSeparator--
3
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In the Bounded-Buffer problem, what is the initial value of the 'mutex' semaphore?
--InteriorSeparator--
1
--InteriorSeparator--
easy
--InteriorSeparator--
4
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In the Bounded-Buffer problem, what is the initial value of the 'full' semaphore?
--InteriorSeparator--
0
--InteriorSeparator--
easy
--InteriorSeparator--
4
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In the Bounded-Buffer problem, what is the initial value of the 'empty' semaphore?
--InteriorSeparator--
n (the number of buffers)
--InteriorSeparator--
easy
--InteriorSeparator--
4
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
In the Readers-Writers problem, which of the following are true?
--InteriorSeparator--
(right) Multiple readers can read at the same time.
(right) Only one writer can access the shared data at a time.
(wrong) Readers and writers can access the shared data concurrently.
(wrong) Writers have exclusive access, preventing all readers.
--InteriorSeparator--
medium
--InteriorSeparator--
7
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In the Readers-Writers problem, what is 'rw_mutex' initialized to?
--InteriorSeparator--
1
--InteriorSeparator--
easy
--InteriorSeparator--
7
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In the Readers-Writers problem, what is 'read_count' initialized to?
--InteriorSeparator--
0
--InteriorSeparator--
easy
--InteriorSeparator--
7
--FlashCardSeparator--

--FlashCardSeparator--
Hard
--InteriorSeparator--
Explain a potential issue with the simple semaphore solution to the Dining-Philosophers problem.
--InteriorSeparator--
It can lead to deadlock if all philosophers pick up their left chopsticks simultaneously.
--InteriorSeparator--
hard
--InteriorSeparator--
12
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In the monitor solution to the Dining Philosophers problem, what is the purpose of the `test(i)` function?
--InteriorSeparator--
To check if philosopher `i` can start eating.
--InteriorSeparator--
medium
--InteriorSeparator--
13
--FlashCardSeparator--

--FlashCardSeparator--
Hard
--InteriorSeparator--
Describe how the monitor solution to the Dining Philosophers problem avoids deadlock.
--InteriorSeparator--
By ensuring that a philosopher only picks up chopsticks if both are available, preventing a circular wait.
--InteriorSeparator--
hard
--InteriorSeparator--
13, 14
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In Windows, what is used to protect access to global resources on uniprocessor systems?
--InteriorSeparator--
Interrupt masks
--InteriorSeparator--
medium
--InteriorSeparator--
16
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What synchronization mechanism is used on multiprocessor Windows systems?
--InteriorSeparator--
Spinlocks
--InteriorSeparator--
medium
--InteriorSeparator--
16
--FlashCardSeparator--

--FlashCardSeparator--
Hard
--InteriorSeparator--
How do Windows dispatcher objects indicate whether a resource is available or not?
--InteriorSeparator--
Signaled-state (object available) or non-signaled state (thread will block)
--InteriorSeparator--
hard
--InteriorSeparator--
16
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Prior to kernel version 2.6, how did Linux implement short critical sections?
--InteriorSeparator--
By disabling interrupts.
--InteriorSeparator--
medium
--InteriorSeparator--
18
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What replaced spinlocks on single-CPU Linux systems?
--InteriorSeparator--
Enabling and disabling kernel preemption.
--InteriorSeparator--
medium
--InteriorSeparator--
18
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the data type for atomic integers in Linux?
--InteriorSeparator--
atomic_t
--InteriorSeparator--
easy
--InteriorSeparator--
19
--FlashCardSeparator--

--FlashCardSeparator--
Hard
--InteriorSeparator--
Explain how disabling kernel preemption on a single-CPU system effectively replaces spinlocks.
--InteriorSeparator--
Disabling preemption prevents another process from interrupting the current process, thus acting as a lock and preventing concurrent access to critical sections.
--InteriorSeparator--
hard
--InteriorSeparator--
18
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which synchronization tools does POSIX provide?
--InteriorSeparator--
(right) Mutex locks
(right) Condition variables
(wrong) Spinlocks
(wrong) Interrupt Masks
--InteriorSeparator--
medium
--InteriorSeparator--
20
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What header file is required for POSIX mutex locks?
--InteriorSeparator--
pthread.h
--InteriorSeparator--
easy
--InteriorSeparator--
21
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What are the two versions of POSIX semaphores?
--InteriorSeparator--
Named and unnamed.
--InteriorSeparator--
easy
--InteriorSeparator--
22
--FlashCardSeparator--

--FlashCardSeparator--
Hard
--InteriorSeparator--
Explain the key difference between named and unnamed POSIX semaphores regarding inter-process communication.
--InteriorSeparator--
Named semaphores can be used by unrelated processes, whereas unnamed semaphores are limited to use within the same process.
--InteriorSeparator--
hard
--InteriorSeparator--
22
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What header file is required for POSIX semaphores?
--InteriorSeparator--
semaphore.h
--InteriorSeparator--
easy
--InteriorSeparator--
23, 24
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What type of lock is typically associated with POSIX condition variables?
--InteriorSeparator--
A POSIX mutex lock.
--InteriorSeparator--
medium
--InteriorSeparator--
25
--FlashCardSeparator--

--FlashCardSeparator--
Hard
--InteriorSeparator--
Explain why POSIX condition variables are typically used with a POSIX mutex lock.
--InteriorSeparator--
Because C/C++ do not provide a monitor construct, a mutex is needed to provide mutual exclusion when accessing shared data associated with the condition variable.
--InteriorSeparator--
hard
--InteriorSeparator--
25
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which synchronization features does Java provide?
--InteriorSeparator--
(right) Java monitors
(right) Semaphores
(wrong) Spinlocks
(wrong) Interrupt Masks
--InteriorSeparator--
medium
--InteriorSeparator--
27
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What happens when a thread tries to acquire an unavailable lock in Java?
--InteriorSeparator--
It is placed in the object's entry set.
--InteriorSeparator--
medium
--InteriorSeparator--
30
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What happens when a thread calls `wait()` in Java?
--InteriorSeparator--
It releases the lock, its state is set to blocked, and it is placed in the wait set.
--InteriorSeparator--
medium
--InteriorSeparator--
31
--FlashCardSeparator--

--FlashCardSeparator--
Hard
--InteriorSeparator--
Describe the sequence of steps that occur when a Java thread calls `notify()`.
--InteriorSeparator--
An arbitrary thread is selected from the wait set, moved to the entry set, and its state is set to runnable.
--InteriorSeparator--
hard
--InteriorSeparator--
32
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What class in Java provides reentrant locks?
--InteriorSeparator--
ReentrantLock
--InteriorSeparator--
easy
--InteriorSeparator--
35
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the purpose of the `finally` clause when using reentrant locks in Java?
--InteriorSeparator--
To ensure the lock is released even if an exception occurs.
--InteriorSeparator--
medium
--InteriorSeparator--
35
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
With which class are Condition variables associated in Java?
--InteriorSeparator--
ReentrantLock
--InteriorSeparator--
medium
--InteriorSeparator--
37
--FlashCardSeparator--

--FlashCardSeparator--
Hard
--InteriorSeparator--
Explain how a condition variable is created and used in conjunction with a `ReentrantLock` in Java to manage threads waiting for a specific condition to be met.
--InteriorSeparator--
A condition variable is created using `lock.newCondition()`. Threads wait using `condVar.await()` and are signaled using `condVar.signal()` when the condition is met, all within the `lock()` and `unlock()` block of the `ReentrantLock`.
--InteriorSeparator--
hard
--InteriorSeparator--
37, 38, 39
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is a memory transaction?
--InteriorSeparator--
A sequence of read-write operations to memory that are performed atomically.
--InteriorSeparator--
medium
--InteriorSeparator--
41
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is OpenMP?
--InteriorSeparator--
A set of compiler directives and API that support parallel programming.
--InteriorSeparator--
medium
--InteriorSeparator--
42
--FlashCardSeparator--

--FlashCardSeparator--
Hard
--InteriorSeparator--
Explain how functional programming languages can help avoid data races.
--InteriorSeparator--
By treating variables as immutable and not maintaining state, functional languages eliminate the possibility of race conditions arising from concurrent modification of shared variables.
--InteriorSeparator--
hard
--InteriorSeparator--
43
--FlashCardSeparator--
}], role=model}, finishReason=STOP, avgLogprobs=-0.10389322073348446}]