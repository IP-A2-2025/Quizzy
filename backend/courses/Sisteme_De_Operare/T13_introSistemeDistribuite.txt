***************Beginning Page***************
***************page number:1**************
Distrihuled Operating Systems
Introduction t0
Distributed Systems
C.Vidrascu
https://profs‘int11.uaic.ro/~vidmscu

***************Ending Page***************

***************Beginning Page***************
***************page number:2**************
Distributed Operating Systems
Agenda
' Flynn‘s taxonomy
' Distributed systems types
' Design issues for DS
' History of DS
2

***************Ending Page***************

***************Beginning Page***************
***************page number:3**************
Distributed Operating Systems
Flynn's taxonomy (1966) (1 )
' The processor (CPU) has 2 functional parts:
, the control unit : decides what operations need
to be done
— the processing unit : executes those operations
' A control unit may command one or several
processing units
3

***************Ending Page***************

***************Beginning Page***************
***************page number:4**************
Distributed Operating Systems
Flynn's taxonomy (2)

' SISD

, Singlc Instruction, Singlc Data
° SlMD

e Single Instruction, Multiple Data
' MISD

e Multiple Instruction, Single Data
' MIMD

i Multiple Instruction, Multiple Data

4

***************Ending Page***************

***************Beginning Page***************
***************page number:5**************
Distributed Operating Systems
SISD (1)

' only one control unit
' only one processing unit
' von Neumann architecture
° it works completely _ l

sequencially: i _-

the execution of the next

instruction only starts after

ﬁnishing the execution of

the previous one 5

***************Ending Page***************

***************Beginning Page***************
***************page number:6**************
Distrihuled Operating Systems
' Examples: SISD (2)
WAC 1. EM 360 cm.
5i I ~ l
CDC 7$00 7 PD?) 7 ill lamwp
. 1 H o 1 ‘X,
6

***************Ending Page***************

***************Beginning Page***************
***************page number:7**************
Distribuled Operating Systems
SIMD (1)
' one control unit and several
processing units
' the same instruction is executed _
in parallel 0n different data i
‘ implementations:
, vector pipelines (e.g. IBM 9000)
e processor arrays (eigi ILLIAC IV)
7

***************Ending Page***************


***************Beginning Page***************
***************page number:8**************
nIsIInIIIIea upmnIIg Systems
I I I I I I
I I I I I I
I I I I I I
I I I I .. I I
i i i i I I
I I I I I I
I I I I I I
!_______ ______! |_______ _____! !______ _______|
8

***************Ending Page***************

***************Beginning Page***************
***************page number:9**************
Distribuled Operating Systems
' Examples: ( )
V Mm 1v MM mmmm
’»/-
r j km *_. ‘
w_,‘ i H ~ .' -,
cmxvm _i CMW v Mzmmml
:a
‘Til
Q5 L. 5, i
V 9

***************Ending Page***************

***************Beginning Page***************
***************page number:10**************
Distributed Operating Systems
SIMD (4)

° not all operations can be done in parallel
' in practice, combinations SISD-SIMD

e Intel: MMX, SSE
' the problem is caused by the conditional

instructions

, instruction streams diverge because of them

e solution: disabling of processing units with

incorrect data
e drawback: loss ofperformance 10

***************Ending Page***************

***************Beginning Page***************
***************page number:11**************
Distribuled Operating Systems
MISD

° several control units and

only one processing unit
' different operations l

executed on the same data, E

in parallel E
' implementation — ???
° pipeline systems

i supersealar processor

computers (ergr CDC 6600)

° redundant systems 11

***************Ending Page***************

***************Beginning Page***************
***************page number:12**************
Distribuled Operating Systems

' several control units and

several processing units _-
° more than one instruction E~I

=

streams, executed: an.

i independently a.

i cooperatively
' distributed systems are MIMD

12

***************Ending Page***************

***************Beginning Page***************
***************page number:13**************
Distributed Operating Systems
I*-—_"_-—_-*-—_--"-----—_-—_-—_-—_-—_-—_-—_--_------—_-—_------—|
l Realise Global: I
i Mun l [\lem 1 Mun ll i
I I
I I

Rem‘ lll'ﬂ ( 0|l¢( Ml e

I—_-—_- *-—_-—_------—_-—_ ----—_-—_-—_-—_-—_-—_-—_-—_- """1
i i
i :

I
I I
1 I
I I
1 i
1 MeIImIe MIIIIIIIII [\lelnnne i
\ LOUILI LIII Illll Lmu l
L__________________________________________________________________i

13

***************Ending Page***************

***************Beginning Page***************
***************page number:14**************
Distribuled Operating Systems
' Examples: ( )
mqmw mmmmw WW
' J
a‘ \ V I)
\ ,» ,k
MW?“ W‘ @1 , Mm
14

***************Ending Page***************


***************Beginning Page***************
***************page number:15**************
Distribuled Operating Systems
MIMD - classiﬁcation
° computers can have shared memory or not
e computers With shared memory - multiprocessors
' all processors have the same address space for accessing
the memory
' generally speaking, are called parallel systems
e computers Without shared memory - multicomputers
' each processor has its own address space
' generally speaking, are called distributed systems
' based on the interconnection topology:
e bus vs‘ switched 15

***************Ending Page***************

***************Beginning Page***************
***************page number:16**************
Distributed Operating Systems
Interconnection
' tightly coupled systems
e fast transfer 0f messages between the
processmg units
e transfer data ratc - high
' loosely coupled systems
e slow transfer, low data rate
' this classiﬁcation can be done both for
software, as well as for hardware
16

***************Ending Page***************

***************Beginning Page***************
***************page number:17**************
Distributed Operating Systems
Distributed systems types
° diferrent combinations are posible based on
the hardware/software interconnection types
° parallel systems: systems which are tightly
coupled in hardware
' distributed systems are usually loosely
coupled in hardware
' variants of distributed systems:
e network operating systems
e "true" distributed systems 17

***************Ending Page***************

***************Beginning Page***************
***************page number:18**************
Distributed Operating Systems
Parallel systems
' tightly coupled software, running on tightly
coupled hardware
° hardware: a single multiprocessor computer
(iier a computer with several physical CPUs or,
nowadays, with several cores in CPU)
° software: e.g. any time-sharing operating
system for SMPs (UNIX, Windows, etc‘)
18

***************Ending Page***************

***************Beginning Page***************
***************page number:19**************
Distributed Operating Systems

Network operating systems (1)

' loosely coupled software, running on loosely
coupled hardware

' independent computers (workstations),
connected in a LAN network

' each workstation has its own operating system
i the same operating system on all workstations
or
— not, ire‘ different OSes, or different versions of it

19

***************Ending Page***************

***************Beginning Page***************
***************page number:20**************
Distributed Operating Systems
Network operating systems (2)

° from one workstation tasks can be executed on

other workstations:

i running some commands/programs remotely

i ﬁle transfer
' more complex communications mechanisms

i ex.: ﬁle server
° there has to be an agreement between all

workstations about the syntax and the meaning

of the messages transferred between them

ire, protocols for communication 20

***************Ending Page***************

***************Beginning Page***************
***************page number:21**************
Distributed Operating Systems
"True" distributed systems (1)
' tightly coupled software, running on loosely
coupled hardware
‘ the users see the distributed system as a single
classical computer (single-system image)
e What kind of user? end-users, but also programmers
, end-users point of vicw: the running applications scc
the system's resources in a uniﬁed manner, no matter
which machines they run 0n
i programmers piotvt: system calls hide the distributed
details 21

***************Ending Page***************


***************Beginning Page***************
***************page number:22**************
Distributed Operating Systems
"True" distributed systems (2)

Characteristics of a distributed OS:
° Uniﬁed mechanism for interprocess communication
' Uniform management of processes

e not acceptable to have different scheduling policies on

different individual machines

' Uniﬁed ﬁle system
' Conclusion: all machines are running the same OS kernel
' Plus: a higher-level collection ofsystem management

components that coordinate the machines’ activities 22

***************Ending Page***************

***************Beginning Page***************
***************page number:23**************
Distributed Operating Systems
Design issues
' Distributed systems have (also) requirements
different from those 0f classical SlSD
computers
' When we design a distributed system, what
issues we have t0 deal with?
- transparency
— reliability
- performance
- scalability 23

***************Ending Page***************

***************Beginning Page***************
***************page number:24**************
Distributed Operating Systems
Transparency
' at the end-user level
i when running a command, the system hides
from the user on how many (and which)
computers that command will run
' at the programmer level
i thc system calls interfaces hide the distributed
structure 0f the system
24

***************Ending Page***************

***************Beginning Page***************
***************page number:25**************
Distributed Operating Systems
Aspects of transparency (1)
° location transparency

e hardware and software resources can be located
anywhere in the sistem

e they can be accessed in the same way from any
machine

, examples of resources: processors, ﬁles,
peripheral devices, etc‘

25

***************Ending Page***************

***************Beginning Page***************
***************page number:26**************
Distributed Operating Systems
Aspects of transparency (2)
' migration transparency

, extends the location transparency for moving
resources

e ifa resource migrates from one machine to
another, must be possible to access it using the
same name as before the migration

e this issue is important for migrating resources
between servers, without downtime

26

***************Ending Page***************

***************Beginning Page***************
***************page number:27**************
Distribuled Operating Systems
Aspects of transparency (3)
' replication transparency
e The OS can make copies (duplicates) of resources
without the users knowing about it
e example: a couple ofﬁle servers, which works
together t0 provide a distributed ﬁle-system
' cach servcr stores a subset of the ﬁles
' when a client makes a request to a server, ifthe request
implies a ﬁle stored somewhere else, the server forwards
the request and sends back to the client the ﬁle received,
but can keep a local copy ofit for future accesses
' goal: for performance 27

***************Ending Page***************

***************Beginning Page***************
***************page number:28**************
Distribuled Operating Systems
Aspects of transparency (4)
' concurrency transparency
e refers to the concurent accesses at some
resources made by several users/programs
e the users will not notice the existence of other
users
e the accesses requested in parallel are solved by
the OS sequencially
28

***************Ending Page***************


***************Beginning Page***************
***************page number:29**************
Distributed Operating Systems
Aspects of transparency (5)
' parallelism transparency

, goal: the programmers write applications as for
classical uniprocessor computers, but the
compiling and/or runtime environment takes
advantage ofthe parallel computing capabilities
of the system

i in parallel computing theory this is called:
implicit parallelism

, It is hard to achieve in the current state of IT

29

***************Ending Page***************

***************Beginning Page***************
***************page number:30**************
Distribuled Operating Systems
Reliability
' A distributed system can have many
computing nodes

i it is very likely that some components goes
down (iiei malfunction)

— availability i the periods of time in which the
system is non-functional to be as short as
possible

, fault-tolerance i the system must be capable to
function even when some components are down

30

***************Ending Page***************

***************Beginning Page***************
***************page number:31**************
Distributed Operating Systems
Performance

' the reason for developing parallel and
distributed system was to have an increased
performance (i.e. computing power)

' these kind of systems are not j ustiﬁed
economically for running simple tasks, which
can be solved by classical computers

' the limiting factor of performance in distributed
systems is communication

— hardware and software
i ﬁne-grained parallelism vs, coarse-grainedparallelisng1

***************Ending Page***************

***************Beginning Page***************
***************page number:32**************
Distributed Operating Systems
Scalability
' describes how the performance of a parallel or
distributed system is increased When the
number of CPUs/machines is increased
' preferable i liniar increase
° liniar increase is hard t0 get
i some applications are inherently sequencial
i communication between nodes i bottleneck
i centralized components or data tables i bottleneck
— centralized vs, distributed algorithms 32

***************Ending Page***************

***************Beginning Page***************
***************page number:33**************
Distribuled Operating Systems
History of dlstrlbuted systems
' 1954: DYSEAC, a general-purpose synchronous computer,
with distributed control
‘ l970s-l980s: important research advances in distributed
computing, but implementations had modest commercial success
' 19905: clusters of commodity hardware (PCs)
e improvcd performance and availability over that of a single PC
' 20005: grids i "super virtual computers" 8L Virtual Org.
i a collection of computer resources from multiple locations
(organisations/enterprises, etc.) to reach a common goal of them
' After 2007: clouds i grids with users from outside the VO
i service models: SaaS, PaaS, IaaS
i deployment models: public_ private, hybrid 33

***************Ending Page***************

***************Beginning Page***************
***************page number:34**************
Distributed Operating Sys'ems
' Bibliograﬁe obligatorie
capitolele despre sisteme distribuite din
i Silberschatz : “Operating System Concepts”
(cap. | 9 din [05(3101)
sau
— Tanenbaum : “Modern Operating Systems”
(cap.8 din [M0541]
° Bibliograﬁe recomandaté
i Andrew S. Tanenbaum : “Inlroductt'on to Distribuled .Slvstems",
Prentice Hall, I995

***************Ending Page***************

