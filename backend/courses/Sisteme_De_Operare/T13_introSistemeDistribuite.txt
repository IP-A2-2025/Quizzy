***************Beginning Page***************
***************page number:1**************
Distributed Operating Systems
Introduction t0
Distributed Systems
C.Vidrascu
https://pr0fs.inf0.uaic.r0/~vidrascu

***************Ending Page***************

***************Beginning Page***************
***************page number:2**************
Distributed Operating Systems
Agenda
' Flynn's taxonomy
' Distributed systems types
' Design issues for DS
' History 0f DS
2

***************Ending Page***************


***************Beginning Page***************
***************page number:3**************
Distributed Operating Systems
Flynn's taxonomy (1966) (l)
' The processor (CPU) has 2 functional parts:
— the control unit : decides What operations need
to be done
— the processing unit : executes those operations
' A control unit may command one or several
processing units
3

***************Ending Page***************

***************Beginning Page***************
***************page number:4**************
Distributed Operating Systems
Flynn's taxonomy (2)

' SISD

— Single Instruction, Single Data
' SIMD

— Single Instruction, Multiple Data
' MISD

— Multiple Instruction, Single Data
' MIMD

— Multiple Instruction, Multiple Data

4

***************Ending Page***************


***************Beginning Page***************
***************page number:5**************
Distributed Operating Systems
srso (1)

' only one control unit
' only one processing unit
' von Neumann architecture
' it works completely j

sequencially: I; —.-

the execution of the next m

instruction only starts after

ﬁnishing the execution of

the previous one 5

***************Ending Page***************

***************Beginning Page***************
***************page number:6**************
Distributed Operating Systems
' Examples: ( )
_ Uvacl [BM 350 -_ CRAY!
H " - HE"- . "_:-:; -:-_'_!-_' 1 _ ‘r - . .-
0130mm .1 - H- PDPI _ L Dell Laptop
Q rf'ril-f . 1 r’ _.._'1 " m “if
6

***************Ending Page***************


***************Beginning Page***************
***************page number:7**************
Distributed Operating Systems
SIMD (1)
' one control unit and several
processing units
' the same instruction is executed H —'-
in parallel on different data j";
e —'I
' 1mplementatlons:
— vector pipelines (cg. IBM 9000)
— processor arrays (e. g. ILLIAC IV)
7

***************Ending Page***************

***************Beginning Page***************
***************page number:8**************
Distributed Operating Systems

Ulu'tntr {It (‘ﬁlll'l'lll
i"'_"_ '__"__i i"__"_ '__"_'i i_"'_" "'_"'i
| | | | | |
I I I I I I
I ALIT 1 I I ALU 2 I I ALU 11 I
I I I I I I
| | | | | |
| | | | ... | |
| | | | | |
| | | | | |
| | | | | |
I I I I I I
I Mam 1 I I Mam 2 I I Mun 11 I
| | | | | |
| | | | | |
!_______ _______! !_______ _______! !_______ _______!

Rem] I'llfﬂTﬂl'lfffﬂlT

***************Ending Page***************


***************Beginning Page***************
***************page number:9**************
Distributed Operating Systems
' Examples: ( )
_ _ [LLIAC w mm Cell Processor-EFL]
I“: _ _ E j l. "'T- if; 5:.‘ .-
‘I _T I PHIEI F l! W -. ‘ski 1?:- .' J
-. .. ' ' .H ;' I a
Cray X-MP ‘r Cray Y-LEP ._...1.-,,-.. Thinking Machine-,5 ISM-2
=".- If | 4-... ._ '--
9

***************Ending Page***************

***************Beginning Page***************
***************page number:10**************
Distributed Operating Systems
SIMD (4)

' not all operations can be done in parallel
° in practice, combinations SISD-SIMD

— Intel: MMX, SSE
' the problem is caused by the conditional

instructions

— instruction streams diverge because of them

— solution: disabling of processing units With

incorrect data
— drawback: loss of performance 10

***************Ending Page***************


***************Beginning Page***************
***************page number:11**************
Distributed Operating Systems
MISD

' several control units and

only one processing unit
' different operations J

executed on the same data, a

in parallel E
' implementation - 7??
' pipeline systems

— supersealar processor

computers (e. g. CDC 6600)

' redundant systems 11

***************Ending Page***************

***************Beginning Page***************
***************page number:12**************
Distributed Operating Systems
' several control units and
several processmg un1ts a.
' more than one instruction §~I
streams, executed: 3-
— independently ‘I
— cooperatively
' distributed systems are MIMD
12

***************Ending Page***************


***************Beginning Page***************
***************page number:13**************
Distributed Operating Systems
i______'“_______“_______'“_______“'_______"_______“'_________'i
I Reﬁne Glubale I
I Mun 1 Mun 2 - - - Mun 11 I
I I
| |
!_______ ___________________ _____________________________ _______!
i______' _______“_________' _______'“______“'_______“ ______'i
| |
I I
I Prurrsur 1 Pl'nresm' 2 Pl'ucrsur 11 I
I I
| |
| . . . |
| |
| |
I I
I III-1111:1011‘: III-1111:1011‘: Memm'ie I
I Lumln Lnrnln Lornln I
| |
!___________________________________________________________________!

***************Ending Page***************

***************Beginning Page***************
***************page number:14**************
Distributed Operating Systems
' Exampl6s: ( )

a EMPOWERS I-E.-’C0mpaq Afphafilj-‘er Intel M32
F“ . H‘ ~ ~ a
a! ‘ix -'__'_.'_--"- - PHI-J.’ __.--""-_-I"I__-__I I!)

I r _. ‘:1 ..-.-. J, " "

AND} Uptcmn Cray XT3 ‘5, [BM Bil-‘T.

14

***************Ending Page***************


***************Beginning Page***************
***************page number:15**************
Distributed Operating Systems
MIMD - classiﬁcation
° computers can have shared memory or not
— computers With shared memory - multiprocessors
' all processors have the same address space for accessing
the memory
' generally speaking, are called parallel systems
— computers Without shared memory - multicomputers
' each processor has its own address space
' generally speaking, are called distributed systems
' based on the interconnection topology:
— bus vs. switched 15

***************Ending Page***************

***************Beginning Page***************
***************page number:16**************
Distributed Operating Systems
Interconnection
' tightly coupled systems
— fast transfer of messages between the
processing units
— transfer data rate - high
' loosely coupled systems
— slow transfer, low data rate
' this classiﬁcation can be done both for
software, as well as for hardware
l6

***************Ending Page***************


***************Beginning Page***************
***************page number:17**************
Distributed Operating Systems
Distributed systems types
' diferrent combinations are posible based on
the hardware/ software interconnection types
' parallel systems: systems which are tightly
coupled in hardware
' distributed systems are usually loosely
coupled in hardware
' variants of distributed systems:
— network operating systems
— "true" distributed systems 17

***************Ending Page***************

***************Beginning Page***************
***************page number:18**************
Distributed Operating Systems
Parallel systems
° tightly coupled software, running on tightly
coupled hardware
' hardware: a single multiprocessor computer
(i.e. a computer with several physical CPUs or,
nowadays, with several cores in CPU)
' software: e. g. any time-sharing operating
System for SMPS (UNIX, Windows, etc.)
18

***************Ending Page***************


***************Beginning Page***************
***************page number:19**************
Distributed Operating Systems
Network operating systems (l)
' loosely coupled software, running on loosely
coupled hardware
' independent computers (workstations),
connected in a LAN network
' each workstation has its own operating system
— the same operating system on all workstations
OI‘
— not, i.e. different OSes, or different versions of it
19

***************Ending Page***************

***************Beginning Page***************
***************page number:20**************
Distributed Operating Systems
Network operating systems (2)

' from one workstation tasks can be executed on

other workstations:

— running some commands/programs remotely

— ﬁle transfer
' more complex communications mechanisms

— eX.: ﬁle server
' there has to be an agreement between all

workstations about the syntax and the meaning

of the messages transferred between them

i.e. protocols for communication 20

***************Ending Page***************


***************Beginning Page***************
***************page number:21**************
Distributed Operating Systems
"True" distributed systems (l)
' tightly coupled software, running on loosely
coupled hardware
' the users see the distributed system as a single
classical COInputcl‘ (single-system image)
— What kind of user? end-users, but also programmers
— end-users point of View: the running applications see
the system's resources in a uniﬁed manner, no matter
Which machines they run on
— programmers p.o.v.: system calls hide the distributed
details 21

***************Ending Page***************

***************Beginning Page***************
***************page number:22**************
Distributed Operating Systems
"True" distributed systems (2)

Characteristics of a distributed OS:
' Uniﬁed mechanism for interprocess communication
' Uniform management of processes

— not acceptable to have different scheduling policies on

different individual machines
' Uniﬁed file system
' Conclusion: all machines are running the same OS kernel
' Plus: a higher-level collection of system management
components that coordinate the machines’ activities 22

***************Ending Page***************


***************Beginning Page***************
***************page number:23**************
Distributed Operating Systems
Design issues
' Distributed systems have (also) requirements
different from those of classical SISD
computers
' When we design a distributed system, What
issues we have to deal with?
- transparency
- reliability
- performance
- scalability 23

***************Ending Page***************

***************Beginning Page***************
***************page number:24**************
Distributed Operating Systems
Transparency
' at the end-user level
— When running a command, the system hides
from the user on hoW many (and Which)
computers that command Will run
' at the programmer level
— the system calls interfaces hide the distributed
structure of the system
24

***************Ending Page***************


***************Beginning Page***************
***************page number:25**************
Distributed Operating Systems
Aspects of transparency (l)
' location transparency

— hardware and software resources can be located
anywhere in the sistem

— they can be accessed in the same way from any
machine

— examples of resources: processors, ﬁles,
peripheral devices, etc.

25

***************Ending Page***************

***************Beginning Page***************
***************page number:26**************
Distributed Operating Systems
Aspects of transparency (2)
' migration transparency

— extends the location transparency for moving
resources

— if a resource migrates from one machine to
another, must be possible to access it using the
same name as before the migration

— this issue is important for migrating resources
between servers, Without downtime

26

***************Ending Page***************


***************Beginning Page***************
***************page number:27**************
Distributed Operating Systems
Aspects of transparency (3)
' replication transparency
— The OS can make copies (duplicates) of resources
without the users knowing about it
— example: a couple of ﬁle servers, which works
together to provide a distributed ﬁle-system
° each server stores a subset of the ﬁles
° when a client makes a request to a server, if the request
implies a ﬁle stored somewhere else, the server forwards
the request and sends back to the client the ﬁle received,
but can keep a local copy of it for future accesses
° goal: for performance 27

***************Ending Page***************

***************Beginning Page***************
***************page number:28**************
Distributed Operating Systems
Aspects of transparency (4)
' concurrency transparency
— refers to the concurent accesses at some
resources made by several users/programs
— the users Will not notice the existence of other
users
— the accesses requested in parallel are solved by
the OS sequencially
28

***************Ending Page***************


***************Beginning Page***************
***************page number:29**************
Distributed Operating Systems
Aspects of transparency (5)
' parallelism transparency

— goal: the programmers write applications as for
classical uniprocessor computers, but the
compiling and/ or runtime environment takes
advantage of the parallel computing capabilities
of the system

— in parallel computing theory this is called:
implicit parallelism

— It is hard to achieve in the current state of IT

29

***************Ending Page***************

***************Beginning Page***************
***************page number:30**************
Distributed Operating Systems
Reliability
' A distributed system can have many
computing nodes

— it is very likely that some components goes
down (i.e. malfunction)

— availability — the periods of time in which the
system is non-functional to be as short as
possible

— fault-tolerance — the system must be capable to
function even When some components are down

3O

***************Ending Page***************


***************Beginning Page***************
***************page number:31**************
Distributed Operating Systems
Performance

' the reason for developing parallel and
distributed system was to have an increased
performance (i.e. computing power)

' these kind of systems are not justified
economically for running simple tasks, which
can be solved by classical computers

' the limiting factor of performance in distributed
systems is communication

— hardware and software
— ﬁne-grained parallelism vs. coarse-grainedparallelisng1

***************Ending Page***************


***************Beginning Page***************
***************page number:32**************
Distributed Operating Systems
Scalability
' describes how the performance of a parallel or
distributed system is increased When the
number of CPUs/machines is increased
' preferable — liniar increase
' liniar increase is hard to get
— some applications are inherently sequencial
— communication between nodes — bottleneck
— centralized components or data tables — bottleneck
— centralized vs. distributed algorithms 32

***************Ending Page***************


***************Beginning Page***************
***************page number:33**************
Distributed Operating Systems
History of distributed systems
' 1954: DYSEAC, a general-purpose synchronous computer,
With distributed control
' l970s-l980s: important research advances in distributed
computing, but implementations had modest commercial success
' 1990s: clusters of commodity hardware (PCs)
— improved performance and availability over that of a single PC
' 2000s: grids — "super virtual computers" & Virtual Org.
— a collection of computer resources from multiple locations
(organisations/enterprises, etc.) to reach a common goal of them
' After 2007: clouds — grids With users from outside the VO
— service models: SaaS, PaaS, IaaS
— deployment models: public, private, hybrid 33

***************Ending Page***************


***************Beginning Page***************
***************page number:34**************
Distributed Operating Systems
' Bibliograﬁe obligatorie
capitolele despre sisteme distribuite din
— Silberschatz : “Operating System Concepts”
(cap.19 din [OSC10])
S2111
— Tanenbaum : “Modern Operating Systems”
(cap.8 din [MOS4])
' Bibliograﬁe recomandatii
— Andrew S. Tanenbaum : “Introduction to Distributed Systems”,
Prentice Hall, 1995

***************Ending Page***************


