[{content={parts=[{text=--FlashCardSeparator--
Single
--InteriorSeparator--
What is the only way to create a new process in UNIX/Linux, as discussed in the lecture?
--InteriorSeparator--
By calling the `fork` function.
--InteriorSeparator--
easy
--InteriorSeparator--
3
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is the primary function of the `exec` family of primitives?
--InteriorSeparator--
(right) To replace the current program with a new one.
(wrong) To create a copy of the current process.
(right) To "re-cover" the process with a new program.
(wrong) To terminate the current process.
--InteriorSeparator--
medium
--InteriorSeparator--
5
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What happens to the PID of a process after a successful `exec` call?
--InteriorSeparator--
The PID remains the same.
--InteriorSeparator--
easy
--InteriorSeparator--
5
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following are categories within the `exec` family of functions, based on how command-line parameters are passed?
--InteriorSeparator--
(right) Number of parameters is variable (line of command is given by enumeration).
(wrong) Number of parameters must be greater than 5.
(right) Number of parameters is fixed (line of command is specified by a vector).
(wrong) Number of parameters is optional.
--InteriorSeparator--
medium
--InteriorSeparator--
5
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In the `execl` and `execv` functions, what does the `ref` argument represent?
--InteriorSeparator--
The name of the program that will replace the calling process.
--InteriorSeparator--
easy
--InteriorSeparator--
6
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following are true regarding the `ref` argument in `execl` and `execv`?
--InteriorSeparator--
(wrong) It is optional.
(wrong) The file must be in `/tmp`.
(right) It must be the name of an executable file.
(right) It must be in the current directory, or its full path must be specified.
--InteriorSeparator--
medium
--InteriorSeparator--
6
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What should the last argument in `argv[]` be when using `execv` or `execve`?
--InteriorSeparator--
NULL
--InteriorSeparator--
easy
--InteriorSeparator--
6,7
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the purpose of the `env` parameter in the `execle` and `execve` functions?
--InteriorSeparator--
To pass a set of environment variables to the new program.
--InteriorSeparator--
easy
--InteriorSeparator--
7
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which `exec` function is considered the system call for process re-covering?
--InteriorSeparator--
(wrong) execl
(wrong) execv
(right) execve
(wrong) execlp
--InteriorSeparator--
medium
--InteriorSeparator--
7
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
If `ref` in `execlp` or `execvp` does not contain a '/', where is the executable file searched?
--InteriorSeparator--
In the directories specified in the PATH environment variable.
--InteriorSeparator--
easy
--InteriorSeparator--
8
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What value is returned by the `exec` functions upon failure?
--InteriorSeparator--
-1
--InteriorSeparator--
easy
--InteriorSeparator--
9
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What happens if an `exec` function is successful?
--InteriorSeparator--
(right) The function does not return.
(wrong) The function returns 0.
(wrong) The function returns the PID of the new process.
(right) The calling program is replaced by the new program.
--InteriorSeparator--
medium
--InteriorSeparator--
9
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
After a process is re-covered using `exec`, what happens to the effective user ID if the setuid bit is set on the loaded file?
--InteriorSeparator--
The effective user ID of the process becomes the owner of the loaded file.
--InteriorSeparator--
medium
--InteriorSeparator--
10
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
After a process is re-covered using `exec`, what happens to signal handlers that were previously intercepted?
--InteriorSeparator--
(wrong) They are blocked.
(right) They are reset to the default handlers.
(wrong) The user handles them.
(wrong) They are ignored.
--InteriorSeparator--
medium
--InteriorSeparator--
10
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What happens to file descriptors if the `FD_CLOEXEC` bit is set on them before an `exec` call?
--InteriorSeparator--
The file descriptor is closed upon `exec`.
--InteriorSeparator--
medium
--InteriorSeparator--
10
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
According to the lecture, what can be observed when running the `before_exec.c` program followed by `after_exec.c`?
--InteriorSeparator--
(wrong) `after_exec` will not be executed.
(right) The variable `anyBytesRead` in `after_exec` will have a value of -1.
(right) Standard input is inherited as closed in the re-covered process.
(wrong) `before_exec` will terminate with an error.
--InteriorSeparator--
hard
--InteriorSeparator--
12
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In the example of recursive re-covering (`exec_rec.c`), what is modified in the second `exec` call to prevent an infinite loop?
--InteriorSeparator--
The argument passed to the program is modified.
--InteriorSeparator--
medium
--InteriorSeparator--
13
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In the example involving `com-0.c` and `com-2.c`, what happens to the standard output stream?
--InteriorSeparator--
The standard output stream is redirected to the `fis.txt` file, and `com-2.c` inherits this redirection.
--InteriorSeparator--
hard
--InteriorSeparator--
14
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What happens to buffered write operations (e.g., `fprintf`, `fwrite`) when `exec` is called?
--InteriorSeparator--
(wrong) Buffers are automatically flushed to disk.
(right) The information in the buffers is lost.
(wrong) An error code is returned.
(right) The `fflush` function must be called to force the write before calling `exec`.
--InteriorSeparator--
hard
--InteriorSeparator--
15
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What functions can be used for duplicating a file descriptor and redirecting standard I/O streams?
--InteriorSeparator--
`dup` and `dup2`
--InteriorSeparator--
medium
--InteriorSeparator--
16
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
In the `redirect.c` example, what file is the standard output initially redirected to?
--InteriorSeparator--
(wrong) /dev/null
(right) fis.txt
(wrong) /dev/fd/1
(right) /dev/tty
--InteriorSeparator--
hard
--InteriorSeparator--
16
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
When re-covering a program with a script (e.g., `my_script.sh`), what actually re-covers the calling program?
--InteriorSeparator--
An instance of the interpreter specified in the first line of the script.
--InteriorSeparator--
medium
--InteriorSeparator--
17
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What does the `WIFEXITED(ret)` macro check after a `wait(&ret)` call?
--InteriorSeparator--
(right) If the child process terminated normally.
(wrong) If the child process was killed by a signal.
(wrong) If there was an error during `exec`.
(right) If the child process exited using exit().
--InteriorSeparator--
medium
--InteriorSeparator--
18
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does the `WEXITSTATUS(ret)` macro return after a `wait(&ret)` call, if the child process terminated normally?
--InteriorSeparator--
The exit status of the child process.
--InteriorSeparator--
easy
--InteriorSeparator--
18
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What does the function `system(comanda)` do?
--InteriorSeparator--
(wrong) It executes comanda in the background.
(right) It creates a new process.
(right) It loads the default shell, and the shell will execute the command.
(wrong) It executes a system call directly.
--InteriorSeparator--
medium
--InteriorSeparator--
19
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the purpose of the `fflush` function in relation to `exec`?
--InteriorSeparator--
It forces the writing of buffered data to a file before calling `exec`, preventing data loss.
--InteriorSeparator--
hard
--InteriorSeparator--
15
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What properties does the "new program" inherit from the "old program" when a process is re-covered using exec?
--InteriorSeparator--
(wrong) Program counter
(right) PID
(wrong) Memory mappings
(right) Open file descriptors
--InteriorSeparator--
hard
--InteriorSeparator--
10
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
If a script file is passed as the `ref` argument to an `exec` function, what must the first line of the script contain?
--InteriorSeparator--
A shebang line (e.g., `#!/bin/bash`) specifying the interpreter for the script.
--InteriorSeparator--
hard
--InteriorSeparator--
6, 8, 17
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What does the observation about `stdin` being closed in `after_exec` demonstrate about file descriptors after an `exec` call?
--InteriorSeparator--
(wrong) File descriptors are randomly reassigned.
(right) Open file descriptors are inherited by the new program.
(right) Changes to file descriptors in the old program affect the new program.
(wrong) All file descriptors are closed.
--InteriorSeparator--
hard
--InteriorSeparator--
12
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Explain the significance of the "Supervisor-workers" pattern mentioned in the lecture.
--InteriorSeparator--
It illustrates a cooperative pattern for parallel computation using fork, wait, and exec.
--InteriorSeparator--
hard
--InteriorSeparator--
19
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Why is it important to check the return status of `wait` and use macros like `WIFEXITED` and `WEXITSTATUS`?
--InteriorSeparator--
(wrong) To prevent memory leaks.
(right) To determine if the child process terminated normally or was signaled.
(right) To retrieve the exit code of the child process if it terminated normally.
(wrong) To free the resources of the terminated child.
--InteriorSeparator--
hard
--InteriorSeparator--
18
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Explain why losing buffered output is possible when exec is called and how to prevent it.
--InteriorSeparator--
Buffered output is lost because the buffers are not automatically flushed to disk before exec. This can be prevented by calling fflush() to manually flush the buffers before the exec call.
--InteriorSeparator--
hard
--InteriorSeparator--
15
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
In the context of exec, what is the difference between the `ref` argument and the `argv[0]` argument?
--InteriorSeparator--
(wrong) `ref` is optional, while `argv[0]` is mandatory.
(right) `ref` specifies the actual executable file, while `argv[0]` specifies the process name.
(wrong) `ref` and `argv[0]` must always be identical.
(right) `ref` specifies the location of the executable to load and execute.
--InteriorSeparator--
hard
--InteriorSeparator--
9
--FlashCardSeparator--
}], role=model}, finishReason=STOP, avgLogprobs=-0.17985348682728539}]