[{content={parts=[{text=--FlashCardSeparator--
Single
--InteriorSeparator--
What is the primary goal of synchronization tools in concurrent processing?
--InteriorSeparator--
Maintaining data consistency and ensuring orderly execution.
--InteriorSeparator--
easy
--InteriorSeparator--
4
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following are requirements for a solution to the critical-section problem?
--InteriorSeparator--
(right) Mutual Exclusion
(right) Progress
(wrong) Atomicity
(wrong) Concurrency
--InteriorSeparator--
medium
--InteriorSeparator--
11
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is a preemptive kernel?
--InteriorSeparator--
A kernel that allows preemption of a process when running in kernel mode.
--InteriorSeparator--
medium
--InteriorSeparator--
12
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the purpose of the `turn` variable in Peterson's solution?
--InteriorSeparator--
Indicates whose turn it is to enter the critical section.
--InteriorSeparator--
medium
--InteriorSeparator--
13
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What can processors or compilers reorder to improve performance?
--InteriorSeparator--
(right) Operations that have no dependencies
(wrong) Atomic operations
(wrong) Operations within a critical section
(wrong) Operations involving shared resources
--InteriorSeparator--
medium
--InteriorSeparator--
16
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Why is disabling hardware interrupts generally inefficient on multiprocessor systems as a synchronization technique?
--InteriorSeparator--
It is not broadly scalable.
--InteriorSeparator--
medium
--InteriorSeparator--
19
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is a memory barrier?
--InteriorSeparator--
An instruction that forces any change in memory to be propagated to all other processors.
--InteriorSeparator--
medium
--InteriorSeparator--
20
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does the `test_and_set` instruction do atomically?
--InteriorSeparator--
Returns the original value of a passed parameter and sets the new value of the passed parameter to true.
--InteriorSeparator--
medium
--InteriorSeparator--
23
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Under what condition does the `compare_and_swap` instruction perform the swap?
--InteriorSeparator--
Only if `*value == expected` is true.
--InteriorSeparator--
medium
--InteriorSeparator--
25
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is an atomic variable?
--InteriorSeparator--
(right) Provides atomic updates on basic data types
(wrong) A variable that can only be accessed once
(wrong) A variable that automatically resets to zero
(wrong) A variable used to store the process ID
--InteriorSeparator--
medium
--InteriorSeparator--
28
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is a spinlock?
--InteriorSeparator--
A mutex lock that requires busy waiting.
--InteriorSeparator--
medium
--InteriorSeparator--
30
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What are the two atomic operations used to access a semaphore?
--InteriorSeparator--
wait() and signal().
--InteriorSeparator--
easy
--InteriorSeparator--
33
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What problems can arise from the incorrect use of semaphores?
--InteriorSeparator--
(right) Deadlock
(right) Omitting of wait() and/or signal()
(wrong) Priority Inheritance
(wrong) Increased CPU utilization
--InteriorSeparator--
medium
--InteriorSeparator--
38
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is a monitor?
--InteriorSeparator--
A high-level abstraction that provides a convenient and effective mechanism for process synchronization.
--InteriorSeparator--
medium
--InteriorSeparator--
39
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the purpose of a condition variable in a monitor?
--InteriorSeparator--
Allows a process to suspend itself until another process signals it.
--InteriorSeparator--
medium
--InteriorSeparator--
41
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following liveness issues can occur in concurrent systems?
--InteriorSeparator--
(right) Deadlock
(right) Starvation
(wrong) Memory Leaks
(wrong) Segmentation Faults
--InteriorSeparator--
medium
--InteriorSeparator--
51
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is priority inversion?
--InteriorSeparator--
A scheduling problem where a lower-priority process holds a lock needed by a higher-priority process.
--InteriorSeparator--
medium
--InteriorSeparator--
52
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the purpose of the priority-inheritance protocol?
--InteriorSeparator--
To prevent priority inversion by allowing a lower-priority process to temporarily inherit the priority of a higher-priority process.
--InteriorSeparator--
medium
--InteriorSeparator--
53
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Why is Peterson's Solution not guaranteed to work on modern architectures?
--InteriorSeparator--
Processors and/or compilers may reorder operations that have no dependencies.
--InteriorSeparator--
hard
--InteriorSeparator--
13, 16
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Explain the race condition involving `next_available_pid` when creating child processes using `fork()`.
--InteriorSeparator--
Two processes could request a PID simultaneously, leading to the same PID being assigned to both without mutual exclusion.
--InteriorSeparator--
hard
--InteriorSeparator--
8
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What implications does a weakly ordered memory model have on concurrent programming?
--InteriorSeparator--
(right) Memory modification of one processor may not be immediately visible to other processors
(wrong) Memory modifications are guaranteed to be consistent across all processors
(wrong) Memory access is always serialized
(wrong) All processors share the same cache
--InteriorSeparator--
hard
--InteriorSeparator--
20
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Explain how instruction reordering can lead to incorrect results in Peterson's solution.
--InteriorSeparator--
The `flag = true;` instruction might be reordered after `x = 100;`, causing another thread to read an outdated value of `x`.
--InteriorSeparator--
hard
--InteriorSeparator--
17, 18
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Describe a scenario that demonstrates deadlock using semaphores.
--InteriorSeparator--
Two processes each wait on a semaphore held by the other, resulting in both being blocked indefinitely.
--InteriorSeparator--
hard
--InteriorSeparator--
51
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is the potential downside of implementing semaphores with busy waiting, even with short critical sections?
--InteriorSeparator--
(right) Applications may spend lots of time in critical sections
(wrong) Requires disabling interrupts, which can stall other processes.
(wrong) Increases context switching overhead.
(wrong) Reduces memory allocation efficiency.
--InteriorSeparator--
hard
--InteriorSeparator--
35
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In the monitor implementation using semaphores, what is the purpose of the `next` semaphore and `next_count` variable?
--InteriorSeparator--
To allow signaling processes to yield the monitor and allow waiting processes to resume, maintaining mutual exclusion.
--InteriorSeparator--
hard
--InteriorSeparator--
44
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Explain the difference between "signal and wait" and "signal and continue" approaches for condition variables in monitors, including potential trade-offs.
--InteriorSeparator--
(right) "Signal and wait" involves the signaling process waiting until the resumed process leaves the monitor
(right) "Signal and continue" involves the signaling process continuing execution, with the resumed process waiting to re-enter the monitor
(wrong) "Signal and wait" is generally faster due to reduced context switching.
(wrong) "Signal and continue" always prevents deadlocks because processes relinquish resources immediately.
--InteriorSeparator--
hard
--InteriorSeparator--
43
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Explain how the compare_and_swap instruction can be used as a building block to construct atomic variables, providing an example.
--InteriorSeparator--
It allows uninterruptible updates on basic data types, as illustrated by its use in implementing the increment() operation.
--InteriorSeparator--
hard
--InteriorSeparator--
28, 29
--FlashCardSeparator--
}], role=model}, finishReason=STOP, avgLogprobs=-0.16672102730229216}]