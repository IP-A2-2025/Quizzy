***************Beginning Page***************
***************page number:1**************
Chapter 13:
File-System Interface
—

***************Ending Page***************

***************Beginning Page***************
***************page number:2**************
“53$? Chapter 13: File-System Interface
I File Concept
I Access Methods
I Disk and Directory Structure
I File-System Mounting
I File Sharing
I Protection
W.n.=y..mc.m.,.wim.,.m m WMMMMule“

***************Ending Page***************

***************Beginning Page***************
***************page number:3**************
N

W Ob jectwes

I To explain the lunction oi ﬁle systems

I To describe the interface-$10 ﬁle systems

I To discuss ﬁle-system design lradeofis, including access

methods, ﬁle sharing, ﬁle locking, and directory structures

I To explore ﬁle-system protection

0mm, sh..." Cum,“ , w Wm ta 1 sllhmmu. Bllvln m m... Wt

***************Ending Page***************

***************Beginning Page***************
***************page number:4**************
“if? File Concept
I Contiguous logical address space
I Types:
. Data
> numeric
> character
> binary
. Program
I Contents deﬁned by ﬁle‘s creator
0 Many types
> Consider text ﬁle, source file, executable file
0,...55.5.5,...55555.5555r5555.555 {so 555.555555555555555551555‘.

***************Ending Page***************

***************Beginning Page***************
***************page number:5**************
A
My?’ File Attributes

I Name — only information kept in human-readable form

I Identifier — unique tag (number) identifies ﬁle within ﬁle system

I Type — needed ior systems that support different types

I Location — pointer to ﬁie location on device

I Size — current file size

I Protection — controls who can do reading, writing, executing

I Time, date, and user identification e data for protection, security‘
and usage monitoring

I lniormation about ﬁles are kept in the directory structure, which is
maintained on the disk

I Many variations, including extended ﬁle attributes such as ﬁle
Checksum

I lntormation kept in the directory structure

***************Ending Page***************

***************Beginning Page***************
***************page number:6**************
my!“ File info Window on Mac os x
“-
mam... ""-
—
arr
11:31
Hr” 2.1;: ‘

***************Ending Page***************

***************Beginning Page***************
***************page number:7**************
A
“W File Operations
I File is an abstract data type
I Create
I Write — at write pointer location
I Read - al read pointer location
I Reposition within file - seek
I Delete
I Truncate
I 0pen(F) — search the directory structure on disk for entry Fl,
and move the oontent of enlry to memory
I Close (F,) e move the content of entry F, in memory to
directory structure on disk
Wm,5,‘...HCBBMWMGM m WMMMHue-“1W;

***************Ending Page***************

***************Beginning Page***************
***************page number:8**************
N
“W Ope n F | les
I Several pieces of data are needed to manage open ﬁles:
. Open-file tablet tracks open ﬁles
. File pointer: pointer to last read/write location, per
process lhal has lhe ﬁle open
' File-open count: counter of number of times a file is
open — lo allow removal of data from Open-file table when
last processes closes it
° Disk location of the lile: cache of data access information
' Access rights: per-process access mode information
swam, sh"... Cum,“ e in» mm t3 t Sllhvmhlu. Bllvln "a m". mu

***************Ending Page***************

***************Beginning Page***************
***************page number:9**************
A
“W Open File Locking
I Provided by some operating systems and ﬁle systems
i Similar to reader-writer locks
' Shared lock similar to reader lock — several processes can
acquire concurrently
. Exclusive lock similar to writer lock
I Mediates access to a file
I Mandatory or advisory:
' Mandatory e access is denied depending on locks held and
requested
i Advisory e processes can find status of locks and decide
what to do
Wm,=,i...n¢.m.,,iam.,.m ta! Slimmer““ta-“1mm

***************Ending Page***************


***************Beginning Page***************
***************page number:10**************
“if; Flle Locklng Example — Java APl
impon Javavlov‘;
impun lava niu channels 2
publlc class LockingExample(
public slalic ﬁnal bunlean EXCLUSlVE = lalse‘
publlc slallc ﬁnal bonlsan SHARED : lrue‘
public slalic void mam(5mn9 arsgﬂ) lhmws lOEXceDUO" (
FlleLock sharedLuck : null‘
FlleLnnk exclusiveank = null‘
\rvl
RandomAccessFlle ral I new RanﬂumAccsssFlls("llle,lxl", 'rw'l:
// gel ‘he channel lor the file
FlleChannel ch : reﬁgelChannsll)‘
H lhls locks lhe ﬁrs! hall of the ﬁle - excluswe
exclusiveLuck : m luckﬂl ral lengthQ, EXCLUSWE),
I" NOW modlly [he Gala ‘I
H release lhe lock
excluswemckleleasso‘

***************Ending Page***************

***************Beginning Page***************
***************page number:11**************
by}; File Locking Example — Java APl (Cont)
HWS \Dcks the second he‘? uﬂhe We - shared
sharedLock = ch.lock(rai.lengm()!2+1, rauengxm
SHARE )‘

/“ Now read (he data , . ‘l
/! re\ease lhe \Ock
sharedLockJeleaseO‘

)calch Qava \o IOExceplion iue) (
Syslem err prinzlnuoe);

)ﬁnal\y(
if (excmslveLock 1: nuH)
eXClUslvsLuck releaSeO;
ii (sharedLock l: null)
sharedLockJeleaseO‘

>

>
>

***************Ending Page***************

***************Beginning Page***************
***************page number:12**************
W Flle Types — Name, Extenslon
mum-m-
M m hmuiﬂl "Wm"
ww-
hm... m W
-m—
Illuwn
HIRI-
'nInVPMII
m-m-—
-m—
W.
HI-—
mm...
Mm. b4 MW w
vin'IlU
ww-
m. .... mm m.
M. .Q. Mr.
M m.
wail--
M. 511i 8060 m NV nimlnn

***************Ending Page***************

***************Beginning Page***************
***************page number:13**************
N
"1W File Structure
I None - sequence of words, bytes
I Simple record structure
0 Lines
' Fixed length
9 Variable length
I Complex Structures
0 Formatted document
' Relocatable load ﬁle
I Can simulate last two with first method by inserling
appropriate oontrol characters
I Who decides:
' Operating system
° Program
Wm,,MWWHNW M WMMM.mqnimm

***************Ending Page***************

***************Beginning Page***************
***************page number:14**************
My}; Sequential-access File
beginning mnemposin'on end
rewind Izmadorwﬂte»

***************Ending Page***************

***************Beginning Page***************
***************page number:15**************
it‘
‘a’; Access Methods
I Sequential Access
:ead next
uxita next
zaset
no read aﬂer last write
(rewrite)
I Dlrect Access - ﬁle is ﬁxed length loglcal records
zead n
urine n
position m n
read next
write next
zewzit: n
n = relatwe block number
I Relatlve block numbers allow OS lo decide where ﬁle should be placed
' See allocation problem in Ch 12

***************Ending Page***************

***************Beginning Page***************
***************page number:16**************
W Simulation of Sequential Access on Direct-access File
implementalim lor direct amass
read next reed cp,
cp = op + I;
write next write cp,
cp = 0p + 1;
0mm, sh..." Cum,“ 7 w Wm u w “mm-e Bllvin m a“... @zuu

***************Ending Page***************

***************Beginning Page***************
***************page number:17**************
A
my? Other Access Methods
I Can be built on top of base methods
I General involve creation ol ari index tor the ﬁle
I Keep index in memory for fast determination ol location oi
data to be operated on (consider UPC code plus record of
data about that item)
I If too large, index (in memory) of the index (on disk)
I IBM indexed sequential-access melhod (ISAM)
' Small master index, points to disk blocks of secondary
index
0 File kept sorted on a deﬁned key
Q All done by the OS
I VMS operating system provides index and relative ﬁles as
another example (See next Slide)

***************Ending Page***************

***************Beginning Page***************
***************page number:18**************
my; Example of Index and Relative Files
logical record
lasl name number
w- —
mil-
--
-/ -
index lile relative lile

***************Ending Page***************


***************Beginning Page***************
***************page number:19**************
‘4y? Directory Structure
I A collection of nodes containing information about all ﬁles
Directory ' ' ' ' '
III-
Files -
Bath the directory structure and the files reside on disk
A
Wm.s,i..mc.,wpm.,.m M “imam-mWWIWM

***************Ending Page***************

***************Beginning Page***************
***************page number:20**************
A
MW Disk Structure
I Disk can be subdivided into partitions
I Disks or parlitiuns can be RAID protected against failure
I Disk or partition can be used raw — without a ﬁle system, or
formatted with a ﬁle system
I Partitions also known as minidisks, slices
I Entity containing file system known as a volume
I Each volume containing file system also tracks that lile system’s
info in device directory Or volume table Of contents
I As well as general-purpose file systems there are many
special-purpose file systems, frequently all within the same
operating system or computer
0mmshamanwkmdm tun timing-Mi“mi-1min

***************Ending Page***************

***************Beginning Page***************
***************page number:21**************
“if? A Typical File-system Organization
partihonA disk2
dlsk1
Minn c <
panmon B THes
dlskS

***************Ending Page***************

***************Beginning Page***************
***************page number:22**************
A
9W3‘ Types of File Systems
I We mostly talk ol general-purpose ﬁle systems
I Bul syslems frequeriliy have may ﬁle syslems, some general- and
some special- purpose
I Consider Solaris has
° tmpfs — memory»based volatile FS for fast, temporary l/O
' objfs — interface into kernel memory lo gel kernel symbols for
debugging
' Otis — Contract ﬁle system for managing daemons
° lofs — loopback ﬁle system allows one FS to be accessed in
place of another
° proofs — kernel interface to process structures
' ufs, zfs — general purpose file systems
Wm, 5"..." “WP w mm in, “mm W“ m W“. W;

***************Ending Page***************

***************Beginning Page***************
***************page number:23**************
“8;; Operations Performed on Directory
I Search lorafile
I Createafile
I Delete a ﬁle
I Lisladireclory
I Rename a ﬁle
I Traverse the ﬁle system

***************Ending Page***************

***************Beginning Page***************
***************page number:24**************
A
W Directory Organization
The directory is organized logically to obtain
I Efficiency — locating a ﬁle quickly
I Naming i convenient lo users
' Two users can have same name for different files
i The same ﬁle can have several different names
I Grouping — logical grouping of ﬁles by properties, (e.g., all
Java programs, all games, ...)
Dam", slam. Cum,“ , in?‘ a.“ a» Sllhvumu. Bllvln "a m". mu

***************Ending Page***************

***************Beginning Page***************
***************page number:25**************
Mfr Single-Level Directory
I A single directory (or all users
dlleckzry
ﬁles
I Naming problem
I Grouping problem
ommmumcumpmmm uzs “mm alumna-VIM“

***************Ending Page***************

***************Beginning Page***************
***************page number:26**************
W Two-Level Directory
I Separate directory for each user
@3513: m1 m2 IIIIS m4
USGIWO
Mew mullm I ""- nu “ml
Q O O O O O I C Q O Q
I Path name
I Cari have the same ﬁle name for different user
I Efficient searching
I No grouping capability
0mm sh..." Cum,“ , 1M 5.1mm uzi silhmznlu. elm-i "a mm mu

***************Ending Page***************

***************Beginning Page***************
***************page number:27**************
‘97¢ Tree-Structured Directories
mmm mmmmz: Illm
i . O t l O I
MEI!!! mum EM
. I O O

I O
Ill-Ilium
i t I I § O

***************Ending Page***************


***************Beginning Page***************
***************page number:28**************
“)Fr Tree-Structured Directories (Cont.)
I Efﬁcient searching
I Grouping Capability
I Current directory (working directory)
' ed lspell/mail/pzog
' type 11m:
Wm.smmmmumkwm rm srmmmm.mmiwr.

***************Ending Page***************

***************Beginning Page***************
***************page number:29**************
A
we?) Tree-Structu red Dlrectorles (Cont)
I Absolute or relative path name
I Creating a new ﬁle is done in current directory
I Delete a ﬁle
m <fila-nama>
I Creating a new subdirectory is done in current directory
mkdi: <di:—name>
Example: if in current directory /mail
mkdir count:
“um
Deleting “mail” a deleting the entire subtree rooted by “mail”
Wmmsmm Cummprwmm lus sllhmmu. Bllvlnlndélinlﬁﬂll

***************Ending Page***************

***************Beginning Page***************
***************page number:30**************
ujﬁr Acycllc-Graph Dlrectorles
I Have shared subdirectories and ﬁles
n5: all w Gaunt muniwords n51
list rade W7
om“,smmmmmmmwmm W “mama-W“mi-"mu

***************Ending Page***************

***************Beginning Page***************
***************page number:31**************
A
W Acyclic-Graph Directories (Cont)
I Two different names (aliasing)
I If dictdeleies list: dangling pointer
Solutions:
' Backpoiniers, so we can delele all pointers
Variable size records a problem

' Backpoiriiers using a daisy Chain organization
' Entry-hold-count solution

I New directory entry type
' Link — another name (pointer) to an existing ﬁle
l Resolve the link e follow poinier lo locale ihe iile

***************Ending Page***************

***************Beginning Page***************
***************page number:32**************
9);; General Graph Directory
{ext mall count book bQQK mall unhe hyp
o o n
aI/l count Links)!‘ hex
0 o \‘Q

***************Ending Page***************

***************Beginning Page***************
***************page number:33**************
93$!‘ General Graph Dlrectory (Cont.)
I How do we guarantee no cycles?
0 Allow only links to lile not subdirectories
' Garbage collection
0 Every lime a new link is added use a Cycle detection
algorithm to determine whether it is OK
Wm", sh"... Cum,“ 7 w mm u :1 Sllhvmnlu. 51M“ m m". owl

***************Ending Page***************

***************Beginning Page***************
***************page number:34**************
A
1.4;‘) F|le System Mountlng
I A ﬁle system must be mounted belore it can be accessed
I A unmounted file system (i.e., Fig. 11-11(b)) is mourned a1 a
mount point
/
o
o usels
mu o o Ned 5.1, 1m
‘
I" hi —
A ~ . help doc
lav 1n)
WWW““WPWW an sum-u W“ m W18,“

***************Ending Page***************

***************Beginning Page***************
***************page number:35**************
m
W Mount Pomt
/
-
—
m
P199

***************Ending Page***************

***************Beginning Page***************
***************page number:36**************
A
“gs, Ft le S hart ng
I Sharing of files on multi-user systems is desirable
I Sharing may be done through a protection scheme
I On distributed systems, iiles may be snared across a network
I Network File System (NFS) is a common distributed ﬁle-sharing
method
I If multi-user system
° User IDs identify users, allowing permissions and
protections to be per-user
Group IDs allow users to be in groups, permitting group
access righis
' Owner oi a ﬁle / directory
. Group 0V a ﬁle / directory
OM", sh..." “We” a.“ i1 t‘ mm.‘ W“ .ii w; Wit

***************Ending Page***************


***************Beginning Page***************
***************page number:37**************
A
“53' File Sharing — Remote File Systems
I Uses networking to allow ﬁle system access between systems
I Manually via programs like FTP
° Automatically, seamlessly using distributed file systems
. Semi automatically via the world wide web
I Client-sewer model allows clients to mount remote file systems from
sewers
° Server can serve multiple clients
0 Client and user-on-client identiﬁcation is insecure or complicated
o NFS is standard UNIX client-sewer file sharing protocol
° CIFS is standard Windows protocol
. Standard operating system lile calls are translated into remote calls
I Distributed lnlormation Systems (distributed naming services) such
as LDAP, DNS, NIS, Active Directory implement unlﬁed access to
infomialion needed for remote computing
Wm,5"..."curumkm-am m1 sum-a saunas-mm;

***************Ending Page***************

***************Beginning Page***************
***************page number:38**************
N
so?) F|le Sharmg - Fallure Modes
I All ﬁle systems have failure modes
' For example corruption of directory structures or other non-
user dala, called metadata
I Remote ﬁle systems add new failure modes, due to network
failure, server failure
I Recovery from failure can involve state information about
status of each remote request
I Stateless protocols suoh as NFS v3 include all information in
each request, allowing easy recovery but less security
Wm." swim. Cum,“ , in?‘ mm t1 u Silhvmnlu. elm-l "a m". em

***************Ending Page***************

***************Beginning Page***************
***************page number:39**************
A
91$} F| le Sharmg — Con5|stency Semantlcs
I Specify how multiple users are to access a shared ﬁle
simultaneously
0 Slmllar to Ch 5 process synchronization algorithms
t Tend to be less complex due to dlsk |/O and network
latency (for remote ﬁle systems
' Andrew File System (AFS) implemented complex rernole file
sharing semantics
° UrllX ﬁle system (UFS) implements:
> Wntes to an open ﬁle visible immediately to other users of
the same open ﬁle
> Sharing ﬁle pointer to allow multiple users to read and write
concurrently
0 AFS has session semantics
t Writes only visible to sessions starting after the file is
closed A
om", 5"..." Emmi“ m» all,“ q :5 Slam-a W“ m 5.‘; W;

***************Ending Page***************

***************Beginning Page***************
***************page number:40**************
m
My‘) Protection
I File owner/creator should be able to control:
° what can be done
' by whom
I Types of access
' Read
Q Write
O Execute
' Append
' Delete
. List
Wm.5,‘..MMWPMG.“ {w ﬂ-hmwm“minim”

***************Ending Page***************

***************Beginning Page***************
***************page number:41**************
A
my?“ Access Llsts and Groups
I Mode of access: read, write, execute
I Three classes of users on Unix l Linux
RWX
a] owner access 7 1» 1 1 1
RWX
b) group access s Q 1 1 0
RWX
c) public access 1 2 0 o 1
I Ask manager to create a group (unique name), say G, and add
some users 10 rhe group‘
I For a particular file (say game) or subdireclory, define an
appropriate access.
owigrmyblic
chmod 761 game
Attach a group m a file
=11qu r; game A
We“, 51...." “We raw am 1“. sum-a W“ .14 W‘. W.

***************Ending Page***************

***************Beginning Page***************
***************page number:42**************
WWlndows 7 Access-Control Llst Management
W M Mm
Mm. mnmmmmm
WW...“
lstsrzm
Ina-me amen-“m
12-.“ WWW
kaW-mm
‘Y4M.mam
m,“ J
m J
Mm ¢
H ¢
m. 4
Wm
mazwm-W“
WW“
w» \
WmmmBWPWW M sum.‘ “Mum-‘mm

***************Ending Page***************

***************Beginning Page***************
***************page number:43**************
p»

W A Sample U NIX Directory Listing
-n\‘-rw-r-- 1 pbg staff 31200 Sep 3 08:30 immps
dm x--- 5 pbg staff 512 Jul 8 0933 privule/
dm'xm'xr'x 2 pbg sluﬂ' 512 Jul Z 09:35 doc/
dm'xn\‘x--- 2 pbg sludcm 512 Aug 3 14:13 sludcm-proj/
-rw-r--r-- 1 pbg slaff 9423 Feb 24 2003 programc
'rwxrrxr'x 1 pbg sluﬂ' 20471 Feb 24 2003 program
dm'x--x--x 4 pbg facully 512 Jul 31 10:31 lib/
11m x---- 3pbg \lull 1024 Aug 29 06:52 muil/
dmxrwxmx 3 pbg slaﬂ' 512 Jul 809135 test!

Wm, W WM,” mm M 51mm.‘ W“ .n. “vim

***************Ending Page***************

***************Beginning Page***************
***************page number:44**************
End of Chapter 13
—

***************Ending Page***************

