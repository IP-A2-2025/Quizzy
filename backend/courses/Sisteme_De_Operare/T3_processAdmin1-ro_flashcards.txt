[{content={parts=[{text=--FlashCardSeparator--
Single
--InteriorSeparator--
What is a process, in the context of operating systems?
--InteriorSeparator--
An active (dynamic) entity of the OS, being the traditional unit of work in a computing system.
--InteriorSeparator--
easy
--InteriorSeparator--
3
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following are included in a process?
--InteriorSeparator--
(right) Code section
(right) Data section
(wrong) Kernel Space
(wrong) Hardware Drivers
--InteriorSeparator--
medium
--InteriorSeparator--
3
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What are the main process states?
--InteriorSeparator--
Running, waiting, ready.
--InteriorSeparator--
easy
--InteriorSeparator--
5
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What are the transitions between process states?
--InteriorSeparator--
(right) Scheduling
(right) I/O request
(wrong) Hardware Failure
(wrong) System Shutdown
--InteriorSeparator--
medium
--InteriorSeparator--
6
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the purpose of the Process Control Block (PCB)?
--InteriorSeparator--
It is a data structure representing a process in the OS, storing information about it.
--InteriorSeparator--
easy
--InteriorSeparator--
7
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What information is stored in the PCB?
--InteriorSeparator--
(right) Process ID (PID)
(right) Program counter
(wrong) System clock frequency
(wrong) Network IP Address
--InteriorSeparator--
medium
--InteriorSeparator--
7
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the difference between independent and cooperating processes?
--InteriorSeparator--
Independent processes cannot affect or be affected by other processes, while cooperating processes can.
--InteriorSeparator--
medium
--InteriorSeparator--
9, 10
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What are the benefits of using cooperating processes?
--InteriorSeparator--
(right) Capturing natural concurrency
(right) Achieving speedup through parallelism
(wrong) Reducing memory usage
(wrong) Simplifying debugging
--InteriorSeparator--
medium
--InteriorSeparator--
11
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is a thread?
--InteriorSeparator--
A single sequential instruction flow (program counter, stack, register values).
--InteriorSeparator--
easy
--InteriorSeparator--
12
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is a process in relation to threads?
--InteriorSeparator--
(right) Resource context and container for one or more threads
(wrong) A thread is a container for processes
(wrong) A single instruction within a thread
(wrong) An older term for a thread
--InteriorSeparator--
medium
--InteriorSeparator--
12
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is multiprogramming?
--InteriorSeparator--
Multiple processes executing on a single CPU by "apparent parallelism."
--InteriorSeparator--
medium
--InteriorSeparator--
14
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What are the benefits of concurrent processes?
--InteriorSeparator--
(right) Resource sharing
(right) Increased computation speed
(wrong) Reduced security risks
(wrong) Guaranteed determinism
--InteriorSeparator--
medium
--InteriorSeparator--
14
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does the `fork()` primitive do?
--InteriorSeparator--
Creates a new process (child process).
--InteriorSeparator--
easy
--InteriorSeparator--
15
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What does the `wait()` system call do in the parent process after a `fork()`?
--InteriorSeparator--
(right) Pauses the parent process until the child process terminates
(wrong) Terminates the child process
(wrong) Immediately returns without waiting
(wrong) Creates a new thread in the parent process
--InteriorSeparator--
hard
--InteriorSeparator--
15
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does the `exec()` primitive do?
--InteriorSeparator--
Replaces the current process image with a new executable image.
--InteriorSeparator--
medium
--InteriorSeparator--
17
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What happens to the child process's environment after a `fork()` call?
--InteriorSeparator--
(right) Inherits the parent's execution environment
(right) Can have its environment changed by the parent
(wrong) Gets a completely new, empty environment
(wrong) Shares the exact same memory space as the parent
--InteriorSeparator--
hard
--InteriorSeparator--
16
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What happens to a child process if its parent terminates before it does?
--InteriorSeparator--
It becomes a child of the init process (PID 1).
--InteriorSeparator--
hard
--InteriorSeparator--
19
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is a "zombie" process?
--InteriorSeparator--
(right) A process that has terminated, but its process table entry has not yet been reclaimed.
(wrong) A process that is currently running but not responding.
(wrong) A process that is blocked indefinitely.
(wrong) A process that has been swapped out to disk.
--InteriorSeparator--
hard
--InteriorSeparator--
19
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What are the main objectives of process scheduling?
--InteriorSeparator--
To allocate CPU time to jobs/processes in a way that optimizes system performance.
--InteriorSeparator--
easy
--InteriorSeparator--
21
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What are some common objectives of process scheduling?
--InteriorSeparator--
(right) Fairness
(right) Resource utilization
(wrong) Increased code complexity
(wrong) Minimal memory allocation
--InteriorSeparator--
medium
--InteriorSeparator--
22
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the ready queue?
--InteriorSeparator--
Processes residing in main memory, ready to execute and waiting to be executed.
--InteriorSeparator--
medium
--InteriorSeparator--
23
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What are the levels of scheduling in an operating system?
--InteriorSeparator--
(right) High-level (job scheduling)
(right) Low-level (dispatching)
(wrong) Mid-level (thread scheduling)
(wrong) Very-high level (user scheduling)
--InteriorSeparator--
hard
--InteriorSeparator--
26
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the difference between a long-term and a short-term scheduler?
--InteriorSeparator--
Long-term scheduler selects processes to load into memory, short-term selects a process for CPU allocation.
--InteriorSeparator--
medium
--InteriorSeparator--
27
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which is true about a short-term scheduler?
--InteriorSeparator--
(right) Also known as CPU scheduler
(wrong) Responsible for loading processes into memory
(wrong) Executes infrequently
(right) It's execution occurs frequently
--InteriorSeparator--
hard
--InteriorSeparator--
27
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the difference between I/O-intensive and CPU-intensive processes?
--InteriorSeparator--
I/O-intensive processes generate frequent I/O requests, CPU-intensive processes rarely generate them.
--InteriorSeparator--
easy
--InteriorSeparator--
28
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What factors should a scheduling algorithm consider?
--InteriorSeparator--
(right) Whether a task is I/O-intensive or CPU-intensive
(right) Whether a task is batch or interactive
(wrong) Amount of free disk space
(wrong) Number of users logged into the system
--InteriorSeparator--
hard
--InteriorSeparator--
29
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is context switching?
--InteriorSeparator--
Switching the CPU to another process, requiring saving the state of the old process and loading the saved state of the new process.
--InteriorSeparator--
medium
--InteriorSeparator--
31
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What are the actions performed by the dispatcher during a context switch?
--InteriorSeparator--
(right) Context switch
(wrong) Copying memory pages
(wrong) Updating the system clock
(right) Return to unprivileged processor mode
--InteriorSeparator--
hard
--InteriorSeparator--
32
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the purpose of assigning priorities to processes?
--InteriorSeparator--
To favor processes with higher priority values in scheduling.
--InteriorSeparator--
medium
--InteriorSeparator--
33
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is priority inversion and how can it be avoided?
--InteriorSeparator--
(right) High-priority process is blocked by a low-priority process
(wrong) Low-priority process is blocked by a high-priority process
(right) Solved through priority inheritance
(wrong) Resolved by increasing the quantum of low-priority processes
--InteriorSeparator--
hard
--InteriorSeparator--
35
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is external priority manipulation?
--InteriorSeparator--
Static values, depending on user rank, etc.
--InteriorSeparator--
medium
--InteriorSeparator--
34
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What does the UNIX primitive 'nice()' do?
--InteriorSeparator--
(right) Decreases the priority of a job
(wrong) Increases the priority of a job
(wrong) Terminates a job
(wrong) Renames a job
--InteriorSeparator--
hard
--InteriorSeparator--
34
--FlashCardSeparator--
}], role=model}, finishReason=STOP, avgLogprobs=-0.16440911112541973}]