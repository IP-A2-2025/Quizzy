***************Beginning Page***************
***************page number:1**************
PROGRAMARE DE SISTEM iN C PENTRU PLATFORMA LINUX (V)
Comunicaﬁa inter-procese:
Canale de comunicagie anonime §i cu nume
Cristian Vidra$cu
vidraschinfo .uaic . r0
Mai,2021
1/4‘

***************Ending Page***************

***************Beginning Page***************
***************page number:2**************
\ntmducere \mroducere
Carma anunime Canale anonime
Came cu Hume Ma Crearea \on cu pnmmva plpe
MOdUl d9 UUHZSFS a me canm QHOVWW
CB'BC‘E"§“°1E“'““"E PW“ Demo. exemme de cornumcane vae doué process
ambeletlguvlde canals
Sabloane de wmumcahe imre Canale C“ nume (Ma) v
prunese— Crearea ‘DY, CU prlrmnva mkflfO
Modul d9 unhzare a unw cana\ cu Hume
Avhcaw ale canalemrde , .
mumm Despre persistema Wormahw dmir'un hmer m
DEDSEbiH QB cana\e\or Cu Hume faté (18 DEE anomme
Helsnnle mm vanes _ _ _ _ _
Caraclerlstlcl comune penlru ambele llpurl de canale
Caraclenshci Si VESWCN ale canahehar d9 comumcatie
Componamemm \mphmt de Up bumm
Comporlamentu‘ de Up nebmcam
Sabloane d9 comunicatie intre procese
Clasmcavea 5ab\car\elur de comunlcaue \nter'prucesie
Samonul d9 COMUHICGUS unu/rla'unu/
SHWOUUI d9 COVTHJHICGUS unu/rla'mu/l/
Sabkmul d9 comunlcaue mu/N-Ia-unu/
Samonul L19 comunlcahe mu/lv/a'mu/tr
Aplicalii ale canalelor de comunioalie
Apucaua #1 mplememarea uﬂm semalor
Apucaua #2 \mplememarea Una aphcam chem'server
Hefel'ihle biblioglalice
Memu de navigare Cumumcatia inter-process: Canme d9 cumumcatie anomme 5i cu nume 2 / 4‘

***************Ending Page***************

***************Beginning Page***************
***************page number:3**************
lntroducere
‘ij Tipuri de comunicatie Tntre procese:
anaecunume m . . . . . -
ZEGQEWmgmm I comunlcatla prln memorle partajata (“shared-memory communication")
ambeke hguvl d2 canals
53mmammmamm e.g. prin fi5iere mapate in memorie, sau mapéri anonime si cu nume, $.21.
Avhoaw we canmewl de
camumcane
mum‘ I comunicatia prin schimb d6 mesaje (“message-passing communication")
— comunicalie localé
A canale anonime (numite, uneori, si canale interns)
A canale CU nume, i.e. fiSiGFG ﬁfO (numite, uneori, si canale externe)
- comunicalie la distanlé
‘ socket-uri
Meruu d9 navigare Cornurucatia Nev-process: Canme de ccmumcatie anomme 5i cu nume a / 41

***************Ending Page***************

***************Beginning Page***************
***************page number:4**************
lntroducere (cont.)

‘""M'E Un canal de comunicalie UNIX, sau pipe, este o “conducti” prin care pe la un capét
Came annulme . _ A _ . _ -

cmmm mg se scrlu mesajele (ce constau In secvenle de octetl), lar pe la celalalt capat acestea
@chfsm:WEIPEM sunt citite (cu extractia Ior din canal) — deci practic se comporté ca o structuré de tip
55mmdecommmm coadé, adicé o listé FIFO (First-In,First-Out).

prunese— u . . . _ . _ .

A Nota: de fapt, un pipe chlar este Implementat de nucleul UNIX/Llnux ca 0 llsta FIFO, cu o capacItate
Dhcaw me canmek)! de

M constanté, gestionaté Tn kernelspace

Helermle mbhngvahce

Rolul unui canal: o asemenea “conducté” FIFO poate fi folosité pentru comunicare

de cétre doué (sau mai multe) procese, pentru a transmite date de la unul la altul (!).

Canalele de comunicatie UNIX se impart in doué subcategorii:

I (Jana/e anon/me: aceste “conducte” sunt create Tn memoria interné a sistemului UNIX
respectiv, féré niciun nume asociat Ior Tn sistemul de fieiere;

I cana/e cu nume: aceste “conducte” sunt create tot in memoria inlerné a sistemului, dar au
asociate céte un nume, reprezentat printr-un fisier de tipul special ﬁlo, care este péstrat in sistemul
de fisiere (din acest motiv, aceste fisiere fifo se mai numesc si pipe-uri cu nume).

Meniu de navigare Cornumcatia \mev-procese: Canme de ccmumcatie anomme si cu nume 4/41

***************Ending Page***************

***************Beginning Page***************
***************page number:5**************
\ntruducere \ntroducere
Cana\e annulme Canals anonime
Clearea luv‘ cu pnmmva pipe Crearea ‘on cu pnmmva pipe
MW‘ ﬁe “Ware a “"w mil Modul de unhzare a unm canm anomm
anomm ~ <
Demo exemple as Demo. exemme de cumumcane mne doua process
cumumnans We ma Canme cu Hume (m0)
pyocese Crearea \cv, cu prlmmva mkfifo
Canms cu nume m Modul de uhhzare a unm cana\ cu nume
Camden“ mm Dem Despre Perslstema \nlormahe\ dmirryun nw m
ambslenwmecanale Deosebm a\e caneﬂebr cu Hume late de ce\e anomme
Sabloane de oomumcaue Imve Caracleristici comune penlru ambele lipuri de canale
gvocese Caraclenshci 5i reswchi ale canahehar de comumcatie
Aphcaula|gcana|ewde Componamemm \mphmf de Up bwcam
cumumcahe Componamemm de up nebmcam
Refevmle mbhugraﬂce Sablaane de comunicatie inne procese
Clashcavea sabmanelor de comumcaue mter'procese
Samonul de comumcaue unu/rla'unu/
Samonul de comumcaue unu/rla'rnull/
Samunul d9 comunlcaﬂe mu/N-Ia-unu/
Samunul d9 Comunicahe mu/(I'la'mu/U
Aplicatii ale canalelor de comunicalie
Apﬁcaha #1 ‘mplememarea unw semalor
Apﬁcaha #2 \mplementarea we‘ aphcaui chem/server
Helerinle bibliogralice
Memu de navigare Cumumcatia inler-procese: Canme d9 cumumcatie anomme 5i cu nume 5 / 4‘

***************Ending Page***************

***************Beginning Page***************
***************page number:6**************
Crearea lor, cu primitiva pipe
‘"‘mdm'e Un canal anon/m se creeazé cu ajutorul primitivei pipe.
CanaIe annulme . .. V
9mm wmmpipe Interfata acesteI funcIII este urmatoarea ([5]):
mt P1Pe(1nt *p>
PW I p = parametrul efectIv de apel trebuIe sa er un vector int [2] , care va fI actuallzat
CanaIe cu Hume m0) . A .. _
de funCIle In felul urmator-
ambeIeIWdeml
sgﬂgjgedewm“"‘°a“e'""e — p [0] va fi descriptorul de fisier deschis pentru capétu/ de cit/re al canalului
ijmmuanIIczllcanaIeIm — p [1] va fi descriptorul de fi$ier deschis pentru capétul de scriere al canalului
Reiennle bIbIIugrafIce _ ,_ ,_
I valoarea returnata este O, In caz de succes, sau —1, In caz de eroare.
Efect: in urma executiei primitivei intfds[2];
pipe se creeazé un canal anonim $i p'pe(fds)‘
este deschis automat la ambe/e capete — (11 a)
A . . ~ . . . IéaIiiIIIIIIEUI]IIIIJI‘IQI'III‘ IIIHlQIIYIIiE[I]‘IIIULI971)‘
In cmre la capatul referIt prIn descrIptorul
p[0] si, respectiv, in scriere la capétul referit prin descriptorul p[1].
Men'Iu de navigare CcmunIcaIia ImeI-procese: CanaIe de ccmumcaue anomme SI cu nume 6 l 41

***************Ending Page***************

***************Beginning Page***************
***************page number:7**************
Modul de utilizare a unui canal anonim
‘"‘mdm'e Dupa crearea unui canal anonim, folosirea sa pentru comunicalia locala Tnlre doua
Canaleannmrne I . . . I .A I _
harem cupnmlwapipe (sau ma| multe) procese se face pr|n scnerea Informa'Iuel In acest canal $I, respectlv,
mymmede prln cmrea Informatlel dln canal.
ccmumoauslmredoua . A . . . .
Mme lar scrlerea In canal $| respectlv oltlrea
Came cu "me his) :ullinglmnu» I I I I I
WNW-n ,,¢,l1,=‘,ll.»,l dln canal, prln |ntermed|ul celor dol
Caraclerlsncl ccmune Denim r ' J ‘ . . . -
mm (’ \ descnpton p[O] SI p[l] , se efectueaza
1% ‘ l \Ihmmul- I) la fel ca pentru f|$|ere|e oblanwte,
a w/ Le. folosmd apelunle read $| wrlte,
Refenneblbllugrahce P V H d l Fl l' .. . . . .
‘ me” '9 escr'pm ° ermmgn We sau cu funclllle l/O dln blblloteca stdlo.
* * *
Restrict/‘e importanta:
Deoarece acest tip de canale sunt anon/me (i.e., nu au nume), pot fi ulilizate pentru
comunicatie doar de catre procese “inrudite” prin apeluri fork/exec.
De ce? Motivatia este urmatoarea: . . . (vezi slide_u| urmator)
Menlu de navigare CcmuﬂlcalialﬂleY-WOCBSBI Canals de ccmumcaue anorume slcu nume 7/4‘

***************Ending Page***************

***************Beginning Page***************
***************page number:8**************
Modul de utilizare a unui canal anonim (cont)
‘"‘mdm'e Mot/valie: pentru ca doua (sau mai multe) procese sa poata folosi un canal anonim
Canaleannmme . A _ _ V _ .. _ _
Omam cupnmmvapipe pentru a comumca Intre ele, acele procese trebme sa alba la dlspozme cel dOI
mymmede descrlptorl p[0] sl p[1] obtlnutl prln crearea canalulw. Dem procesul care a creat
pm canalul pnn apelulp1pe,vatrebu|sa|e transmlta cumva celullalt proces.
Canals cu nume hi0)
Zaﬁ;fl‘sl“‘§‘;@§"§.§e""“ De exemplu, in cazul cand se doreste s5 se utilizeze un canal anonim pentru
m p ,. n
53mmdewmmauem comunicarea intre doué procese de tipul parinte-ﬁu, atunci este suficient sa se
Aplmamlecanalem apeleze primitiva pipe de creare a canalului inaintea apelului primitivei fork de
WWW m creare a procesulul ﬂu. In acest fel, pnn clonare, avem la dlspozme $| |n procesul ﬂu
cei doi descriptori necesari pentru comunicare prin intermediul acelui canal anonim.
QM M Noté:
ldlUl mm mm mm H . H . . .
Transmlterea descrlptorllorcanalulul
» are loc si Tn cazul apelului primitivelor
We
exec (deoarece descriptorii de fisiere
Valium MW, d es chi s e s e m °$t en esc prin exec).
Menlu de navigare Ccmunlcatia lﬂleY-WOCBSBI Canals de ccmumcaue anomme SI cu nume 8 l 41

***************Ending Page***************

***************Beginning Page***************
***************page number:9**************
mm“ A/fé restrict/e: Figura 1 - un canal anunim, 'rmediat dupé apelul pipe:
Came annmrrre . A . _ "Q'PWW \Lw MP8‘
Grammy mnmpipe Daca un proces Isl Inchlde vreunul dIntre - n, -
| . | . t . m, fdn! mm mm
mg “mm 7 capete e unur cana anonlm, a un0| nu \ / \
ﬁligammm“ mai are nicio posibilitate de a redeschide //H\
CMQMMWWO“ ulterior acel capét al canalului. I I.
Caramensncr Comuﬂe Denim
amberermem. r * * km.
Sabloane de wmumcaue "We
Dvocese Frgula 2 , urr canal ancmm dupé apelul mm; Frgula a - un canal anunim, dupé cuntigurarea “unul-\a-unul":
Aphcatu a\e cana\e\or de Wm“ ‘Md Pam“ ‘Md
—>
\\\ // 1 V\\ ///
\ ///><\\ 1/ ///\\\,
\ / \\ // /"' \_\
\C-ﬁ
kernel kvrnK-l
Noté: vom vedea ulterior cé aceste doué restrictii de folosire a canalelor anonime nu
mai sunt valabile si in cazul canalelor cu nume (l).
Menru de navigare 9 l 41

***************Ending Page***************


***************Beginning Page***************
***************page number:10**************
Demo: exemple de comunicalie intre doué procese
‘"‘mdm'e I Exemplul #1: un program care exemplifica modul de utilizare a unui canal anonim
Canals annnrrne I I II V . II
9mm cupnmlwapipe pentru comunlcana Intre doua procese, de tlpul producator-consumator.
Moduldeullllzarsaunulcanal A I _ I I I I I I I II
gwyexemde In acest exemplu se llustreaza foloswea prlmltlvelor read $| wrlte (I.e., funclllle
Z7lil§““e‘""e“°"a din APl-ul POSIX) pentru a citi din canal, respectiv pentru a scrie in canal.
Canals cu Hume hi0) . . v .
or» A SB vedea f|$|eru| sursa P1Pe_eX1-C ([2])-
ambele \rgun de canale
51:2? “e WWW "\"e WWI WWII, Efectul acestui program: mai intai se creeazé
Aplrcalualecanalelorde WWII rmlrfm‘ \ ,/ - un canal anonim si un proces fiu. Apoi, procesul
M l W l lI W parinte citeste o secventa de caraclere de
mam‘ lil 4> ‘LII (‘l 4> l1 la tastatura, secvenla terminata cu combinalia de
r I,l Il taste CTRL+D (Lea, caracterul EDF In UNIX), 5| le
_" r,r-I:lrw ‘4 transmite procesului fiu, prin intermediul canalului
““"""""“' "“"““""“ anonim, doar pe acelea care sum Iitere mici. lar
41 um rnmr Ill :Uk'r mm“; \|||\A\<‘<|1|\*\<’riplllr~ . . . .
SIM IIIII W II “madam m I mm “Md procesul flu olteste dln canal caracterele trasmlse
de procesul périnte si le afiseazé pe ecran.
Observatie: pentru explicatii suplimemare despre acest program demonstrativ, consultali exemplul
[FirstDemo — pipeiex1] din suportul online de laborator ([3]).
Menru de navigare Ccmunrcatia rmer-procese: Canals de ccmumcaue anonrme SI cu nume 10 l 41

***************Ending Page***************

***************Beginning Page***************
***************page number:11**************
Demo: exemple de comunicalie intre doué procese (cont)

‘"‘mdm'e Pentru comunicatia prin intermediul canalelor anonime se pot folosi sl funcliile l/O de nivel lnalt:

Canals annulme

lcltfﬁfllifl‘T313515; I Exemplul #2: un alt program care exemplifica folosirea unui canal anonim pentru

WW

m“ WM 7 comunicatia lntre doué procese, de tipul producétor-consumator.

cumunlcalls lnlre doua l

“we De aceasta data, se utilizeaza funcliile fscanf si, respectiv, fprintf (i.e., din

Canals cu Hume (Mo

CalaclelslaWWW biblioteca stdio) pentru a citi din canal $i, respectiv, pentru a scrie in canal.

ambsle “W. de canale

53mmdemmmim A se vedea fisierul sursa pipe_ex2 . c ([2]).

Wise ,

fffjf'cjlca"a‘e‘“'de Nola‘: in acest caz, este necesara conversia descriptorilor de fisiere de la tipul int (La, descriptorii

Rehnmemmwm folosili de apelurile l/O din APl-ul POSIX) la descriptori de tipul FILE* (Le, descriptorii folositi de
funcliile l/O din biblioteca stdio), lucru realizabil cu ajutorul funcliei de bibliotecé fdopen.
Efeclul acestui program: mai Tntéi, se creeaza un canal anonim si un proces fiu. Apoi, procesul tata
cileste o secvenla de numere de la tastatura, secvenla terminata cu combinalia de taste CTRL+D
(i.e., caracterul EOF in UNIX), 5i le transmite procesului fiu, prin intermediul canalului anonim. Iar
procesul fiu citeste din canal numerele trasmise de procesul périnte si Ie afiseazé pe ecran.
Observer/e: pentru explicalii suplimentare despre acest program demonstrativ, consultali exemplul
[SecondDemo , pipe_ex2] din suportul online de Iaborator ([3]).

Meniu de navigare Ccmunlcalia lﬂleY-WOCBSBI Canale de cumunlcalie anonlme si cu nume l1 I41

***************Ending Page***************

***************Beginning Page***************
***************page number:12**************
\mmducere \mroducere
oanaa annnime Canale anonime
Cam w me n10 Crearea \on cu pnmmva plpe
AWE,“ In, cu mm“ Modul de uuhzare a unm cana‘ anomm
mm Demo. exemwe de comunlcane Tmre doué process
Mudul de utlllzave a unul canal v
W me Canale cu nume (mo)
Desple persls'ema mw'maw Crearea \or, cu prlmmva mkflfo
MW" "W "'0 Modul de unhzare a unw cana\ cu Hume
“mm?” “MW °“ Despre persistema Wormahw dmimm hmer rm:
Mme Iala deems anomme . a
Deosebm a\e caneﬂebr cu Hume fata de ce\e anomme
Caracter\s\\c\ Eumune permu _ _ _ _ _
ambeletigunde canals Caraclerlstlcl comune penlru ambele llpurl de canale
, Caraclenshci si restnchi ale canzﬂehar de comumcatie
Sabloane de wmumcahe lmre
"me Comporlamemu‘ \mphmf de Up bwcam
Comporlamemm de Up nebkncam
Anhcaw ale canalswr d8
cumumcans Sablaane de comunicatie intre procese
olaamavea sabmanelor de comunlcaue \meraprocese
Helsnnle mbhngvahce
Samonul de comunlcahe unu/alaaunu/
Samonul de comunlcahe unu/alaarnull/
aamunm 119 comunlcaue mu/N-Ia-unu/
Samuml a9 comunicahe mu/(Iala'mu/tr
Aplicatii ale canalelor de comunicalie
Apﬁcaha #1 \mplementalea unw semalor
Apﬁcaha #2 \mplememarea Una aphcam chem/server
Helerinle bibliogralice
Memu de navigare Ccmumcatia imer-procese: name d9 cumumcatie anomme si cu nume 12 / 4‘

***************Ending Page***************

***************Beginning Page***************
***************page number:13**************
Crearea lor, cu primitiva mkf ifo

‘""me'e Un canal cu nume se creeazé cu ajutorul primitivei mkf ifo.

Came annulme _ .. V

cmwm mg Interfata acesteI func'nl este urmatoarea ([5]):

ﬁll???“ “WM int mkf ifo (char *nume, int permisiuni)

Modu‘ de uullzave a unul canal

ELZSZZQWMWm. I nume = numele fisierului (de tip fifo) ce va ﬁ creat

dmtrun User We

Demm'ia'ecana‘8‘°m“ I permisiuni = permisiunile pentru fisierul ce va fi creat

Came?“:Qmunelpww I valoarea returnaté este O, Tn caz de succes, sau *1, Tn caz de eroare.

Sji'gjge“"“Wmmmm Efect: in urma execuiiei primitivei mkf if o se creeazé un canal cu nume, dar féré a fi

j:m§;1fs°a"a'@‘°'°s deschis la ambele capete (I), precum se Tntémplé in cazul creérii unui canal anonim.

WWW‘ Noté: crearea unui fisier ﬁfo se mai poate face cu ajutorul primitivei mknod apelaté cu flag-ul S_IFIFD.
De asemenea, mai poate fi creat si direct de Ia Iinia de comandé (119., prompterul shell-ului), cu
comenzile mkfifo sau mknod.
Exemplu de creare a unui fi$ier fifo: a se vedea fi$ieru| sursé mkfifo_ex. c ([2]).
Observatie: pentru explicatii suplimemare despre acest program demonstrativ, consultati exemplul
[ThirdDemo — mkfifoiex] din suportul online de laborator ([3]).

Meniu de navigare Cornumcatia \mev-procese: Canme de cumumcatie anomme si cu nume 13 I41

***************Ending Page***************

***************Beginning Page***************
***************page number:14**************
Modul de utilizare a unui canal cu nume
‘"‘mm'e Dupa crearea unui canal cu nume, folosirea sa pentru comunicalia locala intre doua
CWEWW mg (sau mai multe) procese se face prin scnerea informa'nei In acest canal $I, respecllv,
iii???“ WW“ prin citirea informaliei din canal.
Modui de ullllzare a unul canal
3:55?" 13353;“ Wm. lar scrierea in canal 5i, respectiv, citirea din canal se efectueaza la fel ca pentru
2:;isggz'zzggagiz'nige iisierele obisnuite. Si anume: mai intai se deschide explicit fisierul la “capatul” dorit
ﬁ;§;f§}‘ﬂf1§§2;;;§e“"“ (cel de citire ei/sau cel de scriere), pentru a se obline descriptorul necesar, apoi se
5:1‘;ngammumwiwe scrie in el si/sau se citeete din el, prin intermediul descriptorului oblinut explicit, i.e.
jgmgfsm'sim folosind apelurile de sistem read si write, sau cu funcliile de citire/scriere din
Helmmimgam biblioteca stdio, iar la sférsit se inchide descriptorul respectiv.
, * *
Observatie importanté: deoarece acest tip de canale nu sunt anonime (i.e., au nume
prin care pot fi referite), pot fi utilizate pentru comunicaiie intre orice procese care
cunosc numele fi$ierului fifo respectiv, deci nu mai avem restrictia de la canale
anonime, aceea ca procesele trebuiau sa fie “inrudite” prin fork/exec.
Meniu de navigare Ccmunicalia inlev-procese: Canaie de ccmunicatie anonime si cu nume 14 I41

***************Ending Page***************

***************Beginning Page***************
***************page number:15**************
Modul de utilizare a unui canal cu nume (cont)
‘"‘mdm'e Asadar, operatiile asupra canalelor fifo se vor face fie cu primitivele I/O de nivel scazut (i.e., open,
M read, write, close), fie cu functiile I/O de nivel inalt din biblioteca standard de l/O din C (i.e., fopen,
W)? fread/fscanf, fwrite/fprintf, fclose, s.a.).
mkfxfo
:1“::::“""WWm‘ La fel ca pentru fisiere obi$nuite, “deschiderea” unui ii$ier fifo se face explicit, printr-un
Despve persis'emainimmaiiei . . A I .. I . I .
dimwnwm apel al functiei open sau fopen, intr-unul din urmatoarele treI modurI p08lbl|e,
Deossblri ale canaleloi cu I I ‘I I . - I
""“e'a‘“e°e‘“”°"‘me spe0|f|cat prln parametrul transmls funcllel de deschldere:
Caraclerislici CDMUHE pemvu
SUSHIILIWIII'IIIIIII I read & write (/.e., deschlderea ambelor capete ale canalulw)
‘W— I read-only (i.e., deschiderea doar a capatului de citire)
ADlicalii ale canalsior ds
M I write-only (i.e., deschiderea doar a capatului de scriere)
Fleislinle biblingvalice
Observatie importanta:
Implicit, deschiderea se face in mod blocant, i.e. o deschidere read-only trebuie sé se
“sincronizeze” cu una write-only. Cu alte cuvinte, daca un proces incearca s51
deschida un capat al canalului, apelul funcliei de deschidere rimane blocat (i.e.,
functia nu returneaza) pana cénd un alt proces va deschide celalall capét al canalului.
Meniu de navigare Ccmunicalia inlev-prccese: Canaie de ccmunicatie ancnime si cu nume 15 I41

***************Ending Page***************

***************Beginning Page***************
***************page number:16**************
Despre persistenla informaliei dintr-un fi$ier fifo
‘""me'e Observalie: un canal cu nume este creat tot in memoria interné a sistemului (ca $i
Canals annulme I I . . . . I
Canalwme MI unul anonlm), dar In plus are asoclat un nume, reprezentat prlntr-un f|$|er de llpul
3;???“ WM“ special ﬁfo, care este pastrat in sistemul de ﬁaiere.
Modul de ullllzave a unul canal
CDueggrrggpersslemamlovmallel Conc/uzie: informatiile continute ln acest tip de fisiere sunt stocate Tn memoria principala, nu pe disc, si
mm" "w ~10 ca urmare nu sunt persistente. (Practic, continutul unui fisier fifo este gestionat, de cétre nucleul
D b.“ I l l
"Sifmmiiiilliilfmi SO-ului, tot ca o coada FIFO aﬂaté Tn memorie, Ia fel ca 5i Tn cazul canalelor anonime.)
Caraclerlsllclcnmune pemvu . . - . . A v
M Asadar, perloada de retentle a Informallel stocate Intr-un canal este urmatoarea:
Sabloane de wmumcalleimre . . I I -
wese— Spre deosebIre de f|$|erele oblsnune ( ce pastreazé informalia scrisa Tn ele pe o perioada
ZZlTJILZilma'sm'“ nedeterminata — mai precis, pana la 0 eventuala operalie de modificare sau slergere ), Tn cazul unui
MEL fi$ier ﬁfo informalia scrisa in el se pastreaza doar din momentul scrierii $i péna in
momentul cand atat procesul care a scris acea informalie, cat $i orice alt proces ce-I
accesa, termina accesul la acel canal fifo (lnchizandu-sl capetele canalului), iar
aceasta numai daca informalia nu este consumata mai devreme, prin citire.
Demo: a se vedea fi$ierul sursé testare_retentie_fifo . c ([2]).
Noté: pentru mai multe explicatii despre acest program si descrierea comportamentului sau Ia execulie,
Meniu de navigm consultati exemplul [FourthDemo — testareirelentieififo] din suportul online de laborator ([3]). ‘6,41

***************Ending Page***************

***************Beginning Page***************
***************page number:17**************
Deosebiri ale canalelor cu nume falé de cele anonime
‘"‘mm'e I Funclia de creare a unui fi$ier ﬁfo (i.e., canal cu nume) nu realizeazé $i
m deschiderea automaté a celor doué capete ale canalului, precum la canalele
ﬁll???“ WM“ anonime, ci acestea trebuie sé fie deschise explicit, dupé creare, prin apelul unei
:dpidpﬂu,ml functii de deschidere a acelui ﬁ$ier.
g55§ég§égg§§g;§;e I Un canal ﬁfo poate ﬁ deschis, la oricare dintre capete, de orice proces, indiferent
Si?;‘§ll‘lfl§$§l§.§e""“ dacé acel proces are sau nu vreo legéturé de “rudenie” (prin fork/ exec) cu
523::dwmmnem procesul care a creat canalul respectiv.
m Aceasta este posibil deoarece un proces trebuie doar $51 cunoascé numele
W fisierului ﬁlo pe care doreste sé-l deschidé, pentru a-l putea deschide. Evident,
mai trebuie $i ca procesul respectiv sé aibé drepturi de acces pentru acel fi$ier fifo.
I Dupé ce un proces inchide un capét al unui canal fifo, acel proces poate
redeschide din nou acel capét al canalului.
Motivul pentru care ar dori aceasta: poate constata, ulterior momentului inchiderii,
cé are nevoie sé mai efectueze si alte operatii l/O asupra acelui capét.
Meniu de navigare Ccmunicatia lﬂleY-pYOCBSBI Canale de cumunicalie EﬂOﬂlme si cu nume 17 I41

***************Ending Page***************


***************Beginning Page***************
***************page number:18**************
\nlmducere \mroducere
Carma annnime Canale anonime
Canab w mm Ma Crearea \on cu pnmmva plpe
4L)‘ Modul de uuhzare a unm canm anomm
CB'BC‘E"§“°‘ “We PW“ Demo. exemp\e de comunlcane Tmre doué process
ambeletlgunde canals
Caractensum S. [mm ale Canal? cu nume (ma)
“Mel” d2 WW“ Crearea \cv, cu prlmmva mkfifo
82;“;"amm' "“P“°"‘ “9"” Modul de uhhzare a unm cana\ cu Hume
Compcnamenluldeup Despre persistema \nlormahe\ mmmn hmer fifo
nemmm Deosebin a\e caneﬂebr cu Hume ma de ce\e anomme
Sam" de wmumcamm Caracleristici comune pemm ambele lipuri de canale
E v v
"me Caraclenshm SI restnclu ale cana\e\or de comumcatle

Aphcawalecanalemrde Componamemm \mphmt de Up bmcam
w Componamemm de up nemocam
Meme Wm '3'" Sablaane de comunicatie intre procese

Clasmcavea sabmanelor de comunlcaue mter'procese

Samonul de comunlcahe unu/rla'unu/

Samonul de comunlcahe unu/Ja'rnull/

Samuml de comunlcaue mu/N-Ia-unu/

Samuml de comunicahe mu/(Ha'mu/tr

Aplicatii ale canalelor de comunicalie
Apﬁcaha #1 mplememarea unw semalor
Apﬁcaha #2 \mplementarea Una aphcaui chem/server
Helerinle bibliogralice
Memu de navigare Comumcatia inter-process: Canme d9 cumumcatie anomme 5i cu nume 1a / 4‘

***************Ending Page***************

***************Beginning Page***************
***************page number:19**************
Caracleristici $i restric'Itii ale canalelor de comunicalie
‘""mm'e I Ambele tipuri de canale sunt canale unidirectionale, adica pe la un capat se scrie
Canals annulme . _ A . v -
CIIIIIIIIIIII Mg Informana |n canal, lar pe la capatul opus se olteste.
ﬁ;§;‘§§1‘ﬂf}§§2;§;§e“"“ Nota“: lnsé putem avea mai mulli scriitori (i.e., toate procesele ce au acces la
EZJZEZ'FQZ‘§J.;TSIQZYIZ'E capatul de scriere, pot sa scrie Tn canal), si/sau mai multi cititori (i.e., toate
ComporlarnenlullrnpllclLdellp .. . . ~ . V _
35;;QIIIIIIIIIIIIIIII procesele ce au acces la capatul de cmre, pot sa olteasca dIn canal).
nehlncanl I I I I I
Saw,dewm,,,,,,,e,m,e I Unltatea de Informalle pentru ambele tlpun de canale este octetul.
,IIhIIIIIIbCIHQQM Cu alte cuvmte, cantltatea mlnlma de Informalle ce poate ll scnsa In canal,
respectlv cmta dln canal, este de 1 octet.
Flemnnle blbllngvance
I Capacitatea unui canal de comunicalie este limitaté la o anumita dimensiune
maximé (e.g., 4 K0, 16 K0, 64 K0, $.a.), ce este configurabilé.
Spre exemplu, Tn Linux (incepand de la versiunea 2.6.35) se poate afla, respectiv
configura, capacitatea unui canal de comunicalie prin operaliile F_GETPIPE_SZ,
respectiv F_SETPIPE_SZ, disponibile prin apelul de sistem fcntl.
Pentru detalii, consultali documentalia acestui apel (i.e., man 2 fcntl ), precum $i explicaliile
prezenlale in exerciliul rezolvat [A pipe‘s capacity].
Meniu de navigare Ccmunlcalia lmev-procese: Canale de cumunlcalie anornrne si cu nume 19 I41

***************Ending Page***************

***************Beginning Page***************
***************page number:20**************
Caracteristici $i restrictii ale canalelor de comunicatie (com)
‘""me'e I Practic, ambele tipuri de canale (i.e., si cele anonime, $i cele cu nume)
m functioneaza ca o coada, adica 0 lista FIFO (First-In, First-Out), deci citirea din
Eififilsﬂfljiiiﬂiiem'“ canal se face cu “distrugerea” (i.e., consumul din canal a) informatiei citite (!), iar
fjn'jfgil'liiﬁgiifgjlj'e scrierea Tn canal se face prin “inserarea” Tn coada a informaliei scrise.
Camponamenlul mm Ge up
Eiiiilmmmp Concluzie: asadar, citirea dintr-un fi$ier fifo difera de citirea din fi$iere obisnuite,
222,222.;dwmmahem pentru care citirea se face fara consumarea informatiei din fisier.
w I in cazul fisierelor obisnuite am vézut ca existé notiunea de offset (i.e., pozilia
MM‘ curenta in ﬁsier, de la care se efectueazé operatia curenté de citire sau scriere).
in schimb, nici pentru fi$ierele fifo, nici pentru canalele anonime nu existé aceasta
notiune de offset, ele functionénd precum o coada FIFO.
Meniu de navigare Cornumcatia \mev-procese: Canafe de cumumcatie anomme si cu nume 20 I41

***************Ending Page***************

***************Beginning Page***************
***************page number:21**************
Comportamentul implicit, de tip blocant
‘""me'e I Citirea dintr-un canal de comunicaiie funciioneaza in felul urmator:
Canals annmrne
M — Apelul de citire read va citi din canal 3i va returna imediat, fara sa se
Caraclerislicicnmune penlvu . v . . . H . . A . a
% blocheze, numal daca mal este suﬂclenta Informatle In canal, |ar in acest caz
Exilﬁimgiilfmp valoarea returnata reprezinta numarul de octeti citili din canal.
bl c . . . c . .
ciﬁiilnaemmip — Altfel, daca canalul este gol, sau nu conllne suf|0|enta Informatle, apelul de
Samedewmmaiem citire read va raméne blocat pana cand va avea suficienta informaiie in canal
Apicmlgcanaime pentru a putea citi cantitatea de informaiie specificata, ceea ce se va intampla
Hammembmgm in momentul cand un alt proces va scrle |n canal.

- Alt caz de excepiie la citire: daca un proces incearca sa citeasca din canal $i
niciun proces nu mai este capabil sa scrie in canal (deoarece toate procesele
si-au inchis deja capatul de scriere), atunci apelul read returneazé imediat
valoarea O prin care se semnalizeaza ca “a citit EDF" din canal.

Concluzie: pentru a se putea citi EUF din canal, trebuie ca mai intéi toate
procesele Sé TnChidé canalul in scriere (adica sa inchida descriptorul corespunzétor
capatului de scriere).

Meniu de navigare Ccmunicatia lﬂleY-pYOCBSBI Canale de ccmumcalie anomme si cu nume 21/41

***************Ending Page***************

***************Beginning Page***************
***************page number:22**************
Comportamentul implicit, de tip blocant (cont)
gm‘ I Scrierea intr-un canal de comunicalie functioneaza in felul urmétor:
M — Apelul de scriere write va scrie in canal $i va returna imediat, léra sa se
M blocheze, numai daca mai este suficient spaliu liber in canal, iar in acest caz
ZZTEZ'QZZTLTQﬁQfM valoarea returnata reprezinta numarul de octeti efectiv scri$i in canal (care poale
ggﬁgi'gamemldﬂp sa nu coincidé intotdeauna cu numarul de ucteti ce se doreau a se scrie, caci pot apare evenluale erori l/O).
slggggedewmmawm — Altfel, daca canalul este plin, sau nu conline suficient spaliu liber, apelul de
Aphcawalecanalelurde scriere write va raméne blocat péna cand va avea suficient spaliu liber in
:22:le canal pentru a putea scrie informaiia specificata ca argument, ceea ce se va

intampla in momentul cénd un alt proces va citi din canal.

i Alt caz de exceptie la scriere: daca un proces incearca sa scrie in canal si
niciun proces nu mai este capabil sa citeasca din canal (deoarece toate
procesele si-au inchis deja capatul de citire), atunci sistemul va trimite acelui
proces semnalu/ SIGPIPE, ce cauzeaza terminarea forlala a procesului, féra
a afisa insa vreun mesa] de eroare (Nola: versiunile mai vechi de Linux aﬁsau “Broken pipe").

Meniu cle navigare Ccmuﬂlcalia lﬂleY-WOCBSBI Canale de cumumcatie anomrne si cu nume 22 I41

***************Ending Page***************

***************Beginning Page***************
***************page number:23**************
Comportamenlul implicit, de lip blocant (cont)
‘""me'e Observalie: in locul primitivelor read $i write din APl-ul POSIX, putem lolosi
m functiile l/O de nivel inalt din biblioteca stdio pentru a citi din canal (e.g., cu fread,
EZZQEIFSEZQZQZIZEM'“ fscanf, $.a.) si, respectiv, pentru a scrie in canal (e.g., cu fwrite, fprintf, $.a.).
EZETSZ'FQZELTSILZYE'E $i aceste functii de bibliotecé au un comportament implicit blocant, similar cu cel
QZQIKISTPWD descris mai sus, singura diferenla ﬁind aceea ca, reamintili-vé, aceste functii lucreazé
2:222“wmmmm buffer-izat (!), i.e. folosind un cache local in user-space.
23:31 :fecmeiwde Consecinlé: modul de lucru buffer-izat al funcliilor |/O din stdio, poate cauza uneori
mmembimgm erori logice (i.e., bug-uri) dificil de depistat, datorate neatenliei programatoru/ui, care
poate uita s51 forleze “golirea” buffer-ului in canal cu ajutorul funciiei ff lush, imediat
dupa apelul funcliei de scriere utilizate pentru a scrie acea informaiie in canal.
Si astfel. un proces cititor al acelei informatii va raméne blocat in apelul de citire, deoarece informalia
inca nu a ajuns in canal, iar programatorul va cauta cauza blocajului in alté parte, crezand ca
informatia, pe care o scrisese, a ajuns “instantaneu” (i.e., féra nicio intérziere sesizabilé) in canal (!).
Recomandare: acordali mare atentie sa nu comiteli acest gen de greseli logice, céci Ie-am Observat de
nenumarate ori, pe parcursul anilor, in programele scrise de studenti.
Meniu de navigare Ccmunicatia Wiley-process: Canaie de cumunicatie anonime si cu nume 23 I41

***************Ending Page***************

***************Beginning Page***************
***************page number:24**************
Comportamentul de tip neblocant
‘"‘mm'e Cele descrise mai devreme, despre blocarea apeluriior de citire, respecliv de scriere,
Canaleannmme A _ _ . __ _ _ .
CWEWW mg in cazul canaiulw gol, respectiv plin, corespund comportamentuiw impilclt, de tlp
Giggle?“:WEIPEM blocant, al canaielor de comunicalie.
Caraclerislici SI resiviclii ale
ZZTLEQZLTEZTLTQEITM Acest comportament implicit poate fi modificat, pentru ambele tipuri de canale de
Siiillnammm comunicafrie, intr-un comportament de tip neblocant, situatie in care apeiurile de citire
Samedewmmaiem $i, respectiv, de scriere, nu mai rémén biocate in cazul canalului gol $i, respectiv, in
Apimaiialecanaieim cazul canaluiui plin, ci returneazé imediat vaioarea — 1, seténd in mod corespunzétor
Helevinle bibiingvalice Varlablla errno'
Mai muit, putem modifica separatcomportamentul pentru oricare dintre cele doué
capete ale unui canal, nu suntem limitaii doar la a schimba simultan comportamentul
pentru ambeie capete (i).
in plus, in cazul canaielor cu nume, o deschidere neblocanté a unuia dintre capetele
canaiului va reusi imediat, féré s51 mai astepte ca vreun alt proces sé deschidé celélalt
capét, precum se intémplé in cazul deschiderii impiicite, de tip blocant.
Meniu de navigare Ccmunicaiia inlev-procese: Canaie de cumunicaiie anonime si cu nume 24 I41

***************Ending Page***************

***************Beginning Page***************
***************page number:25**************
Comportamentul de tip neblocant (cont.)
‘""me'e Modificarea comportamentului implicit in comportament neblocant se realizeazé prin
Canaie annulme . _ _ _ . _
CWEWW mg setarea atrlbutulw U_NONBLOCK pentru descnptorul corespunzator aceluI capat al
GTE?“:WEIPEM canalului de comunicaiie pentru care se dore$te modificarea comportamentului.
Caracierisiici SI resmciu ale
gﬁijﬁejmﬁgfmp Setarea atributului O_NONBLOCK pentru descriptorul dorit, se poate face astfel:
biocam
§§Q§§;;?“““'°E“P 1. ﬁe direct la deschiderea explicité a canalului, e.g. printr-un apel de forma:
S;“Q:§Q*°“°'““"‘°ﬁ“"""* fdiout = open ( " canaljifo" , U_WRONLY | O_NONBLOCK ) ;
jggjjgfjammm'de care va seta la deschidere atributul D_NDNBLDCK doar pentru capétul de scriere.
MEL Aceasté modalitate este posibilé numai pentru canale cu nume (i.e., fi$iere ﬁfo).
2. ﬁe dupé deschiderea, implicité sau explicité, a canalului, utlizénd primitiva fcntl,
e.g. printr-un apel de forma: fcntl (fd_0ut, F_SETFL, U_NUNBLUCK) ;
Aceasté modalitate este posibilé pentru ambele tipuri de canale.
Exerciﬂu: scrieti un program prin care s51 determinaii capacitatea ambelor tipuri de
canale de comunicajtie pe sistemul Linux pe care lucraii.
Plaza/vale dacé nu reusm 557i rezcivau singunv ciml exelcllule Iezoivale [A pipe'S capacity] si [A Mds capaclly] prezemale in suporiui de iaborator.
Meniu de navigare Cornumcatia \mev-procese: Canaie de cumumcatie anomme si cu nume 25 I41

***************Ending Page***************


***************Beginning Page***************
***************page number:26**************
\mruducere \ntroducere
Gamma annnime Canale anonime
Came cu Hume mg Crearea \on cu pnmmva plpe

Modul de uuhzare a unm canm anomm
Camwm‘ ‘mm Pew“ Demo. exemp\e de comunlcatle Tmre doué process
ambeletlgunde canals
Sabloane de cemumcahe imre Canale C“ nume ("I") v
gracese Crearea \cv, cu prlmmva mkflfo
Claszcavea sabbanehwvde Modul de uuhzare a unm cana\ cu nume
commune Inw'pmse Despre persistema \nlormahei dmir'un nw m
sanlqnm d9 Gamma“ Deosebin a\e caneﬂebr cu Hume Iaté de ce\e anomme
UHUHS'WMV
5ablﬂmﬂ de wwumcahe Caracleristici comune penlru amhele lipuri de canale
"""HEW'" Caraclenshci si restnchi ale canzﬂemr de comumcatie
ailixmgjfnmmma“ Componamemm \mphcw de Up mocam
5511mm de commune Componamemm de up nebmcam
m“""’i""“"' Sabloane de comunicatie inlre procese
Aphcam ale canaleblde Clasmcarea 5ab\car\elur de comumcaue \nter'prucesie
MW‘ Samonul de comumcaue unu/rla'unu/
Mam“ mum; mm Samonul de comumcaue unu/rla'mu/t/

Sabkmul d9 comunlcaue mulll-Ia-unu/

Sabkmul d9 comunlcahe mu/llr/a'mu/U

Aplicatii ale canalelor de comunioalie
Apﬁcaha #1 implementarea unw semalor
Apﬁcaha #2 implementarea we‘ aphcaui chem/server
Helerinle bibliogralice
Memu de navigare Comumcatia inler-procese: Canme d9 cumumcatie anomme 5i cu nume 26 / 4‘

***************Ending Page***************

***************Beginning Page***************
***************page number:27**************
Clasificarea $abloanelor de comunicatie inter-procese
‘"‘mm'e Dupé numérul de procese “scriitori” si, respectiv, de procese “cititori” ce utilizeazé un
m anumit canal de comunicatie (anonim sau cu nume) pentru a comunica intre ele,
Eififilsﬂfljiiiﬂiiem'“ putem diferentia urmétoarele $ab|oane de comunicatie inter-procese:
1% I Comunicatie unuI-Ia-unul: canalul este tolosit de un singur proces “scriitor” pentru
gjflggffgjfgﬁjjjf a transmite date unui singur proces “cititor”.
sbéitmdu'm. I Comunicatie unuI-Ia-multi: canalul este folosit de un singur proces “scriitor” pentru
ﬁy:g;ymfwumww a transmite date mai multor procese “cititori”.
i171?;7§j,f°m““‘ca“e I Comunicatie multi-la-unul: canalul e folosit de mai multe procese “scriitori” pentru
§§‘m‘°j§';'fe‘a"a'e‘°'de a transmite date unui singur proces “cititor”.
ML I Comunicatie multi-Ia-multi: canalul e tolosit de mai multe procese “scriitori” pentru
a transmite date mai multor procese “cititori”.
Meniu de navigare Cornumcatia truer-procese: Canate de cumumcatie anomme si cu nume 27 I41

***************Ending Page***************

***************Beginning Page***************
***************page number:28**************
$ablonul de comunicatie unuI-Ia-unul
‘""me'e Comunicatia unul-la-unul reprezinta sablonul cel mai simplu, neridicand probleme
Canaie annmn'ie . I . . I I I II I _I
CIIIIIIIIIIII MI deosebIte de implementare. Din acest motiv, este $| cel mai folosn in practica.
5335:1332g‘;2;;:.:*""“ Example: cele doua programe demonstrative prezentate anterior, in sectiunea despre canale anonime,
Sabloanedeccmunicatieimre se Tncadreaza in acest sablon de comunicatie.
Slﬁtiigiifiﬁﬁifjliie Demo: exercitiile rezolvate ['Producer-consumer’ pattern #1, (v2, using fifos for IPC)] 5i, respectiv,
ijgjjgyutsjmnumm [‘Pr0ducer—c0nsumer‘ pattern #2, (v2, using fifos for |PC)] din suportul online de laborator ([3]),
sabijnyidimumie ilustreaza alte doua programe care, fiecare in parte, utilizeaza un canal cu nume pentru comunicatia
Sablonuidecumunioalie unulela'unul intre doué procese, unul cu rol de producétor, iar celalalt cu rol de consumator.
m In’! V n I
Saublojuiud: cumurttcalte ,t * ,,
mullrria'mullr
2:;ﬁrz'zm'tmde Celelalte trei sabloane ridicé anumite probleme de sincronizare, datorate accesului
MW‘ concurent al mai multor procese la cate unul, sau la ambele, dintre capetele canalului,
probleme de care trebuie s51 se tiné cont la implementarea acestor $ab|oane.
Vom trece in revista, pe rand, aceste probleme de sincronizare, ce pot avea efecte
asupra integritétii date/0r transmise prin canal (i.e., “coruperea” mesajelor).
Meniu de navigare Cornunicatia inter-process: Canaie de cumunicatie anonirne si cu nume 28 I41

***************Ending Page***************

***************Beginning Page***************
***************page number:29**************
$ablonul de comunicatie unuI-Ia-mulﬁ

‘"‘mdm'e Factori ce pot genera anumite probleme de sincronizare, cu efecte asupra integrita'tii date/0r:

Gamma annulme

AWEWW "'0 I lungimea mesajelor:

Caractensumcumune emvu

%% — mesaje de lungime constanté

W Nu ridicé probleme deosebite — fiecare mesa] poate fi citit atomic (i.e., dintr-o

ZEZIJESZLEZZ'ZZZSZE daté, printr-un singur apel read).

“Md/I'm‘ i mesaje de lungime variabila“

SMZTZLYLZZ°W“"‘°““S Pot apare probleme de sincronizare, deoarece mesajele nu mai pot fi citite

milﬁvmmm atomic. Solutia este folosirea mesajelor formatate astfel:

ZSLﬁrz'im'eb'“ MESAJ = HEADER + MESAJUL PROPRIU-ZIS ,

ML header-ul fiind un mesa] de lungime fixé ce conﬁne lungimea mesajului
propriu-zis.
Protoco/ul de comunicalie utilizat: sunt necesare 2 apeluri read pentru a citi
un mesa] Tn intregime, de aceea trebuie garantat accesul exclusiv la canal
(folosind, spre exemplu, blocaje pe fisiere).

Meniu de navigare Cornumcatia \mev-procese: Canme de cumumcatie anomme si cu nume 29 I41

***************Ending Page***************

***************Beginning Page***************
***************page number:30**************
$ablonul de comunicatie unuI-Ia-mulﬁ (cont)

‘"‘mdm'e Factori ce pot genera anumite probleme de sincronizare, cu efecte asupra integrita'tii date/0r:

Canme annulme

M)‘ I destinatarul mesajelor:

Caractensumcnmune ermu

% — mesaje cu destinatar oarecare

W Nu ridica probleme deosebite — fiecare mesa] poate fi citit si prelucrat de

22323313232222‘??? oricare dintre procesele “cititori”.

“Md/I'm‘ i mesaje cu destinatar specificat

31713;?LZ§,°"”“"‘°““6 Trebuie asigurat faptul ca mesajul este citit exact de citre “cititorul” caruia Ti

317:7me mm“ era destinat. Solutia — am putea folosi mesaje formatate astfel:

ZSLﬁrz'im'eb'“ MESAJ = HEADER + MESAJUL PROPRIU-ZIS ,

ML header-ul continénd un identificator al destinatarului.
Pentru citife, siar putea aplica protocolul de comunicatie discutat Ia mesaje de lungime
variabila. lnsé, apare 0 prob/ems? sup/imentaré: dacé un “cititor” a citit un mesa] care nu-i era
destinat Iui, cum facem sa-I Iivram celui caruia Ti era destinat? O solutie ar fi sé il scrie Tnapoi
in canal, si apoi va face o pauza aleatoare Tnainte de a Tncerca sa citeascé din nou din canal.
Nata: aceasta solutie poate suferi de fenomenul de starvation.

Meniu de navigare Cornumcatia \mev-procese: Canme de cumumcatie anomme si cu nume 30 I41

***************Ending Page***************

***************Beginning Page***************
***************page number:31**************
$ablonul de comunicatie mulﬁ-Ia-unul

‘"‘mdm'e Factori ce pot genera anumite probleme de sincronizare, cu efecte asupra integritétii date/0r:

Cana]e annmrne

AWEWW "'0 I lungimea mesajelor:

Caractensumcnmune enivu

%% — mesaje de lungime constanté

W Nu ridicé probleme deosebite — fiecare mesa] poate fi scris atomic (i.e., dintr-o

ZEZIJESZLEZZ'ZZZSZE daté, printr-un singur apel write).

“ﬂy/I'm‘ i mesaje de lungime variabila“

ii?§,‘f$]jj,°°m“"‘““e Trebuie indicaté “cititorului” lungimea fiecérui mesa]. Solutia este folosirea

i1712;%:’5,f““""‘““‘e mesajelor formatate astfel:

§§¥111L21°mme MESAJ = HEADER + MESAJUL PHOPRIU-ZIS ,

ML header-ul fiind un mesa] de lungime fixé ce conﬁne lungimea mesajului
propriu-zis.
Nu ridicé probleme deosebite — fiecare mesa], astfel formatat, poate fi scris
atomic, printr-un singur apel write, deci nu trebuie garantat accesul exclusiv
la canal.

Memu de navigare Ccmunmatia water-process: Cana]e de cumunmatie anomrne si cu nume 3] M]

***************Ending Page***************

***************Beginning Page***************
***************page number:32**************
$ablonul de comunicatie mulli-Ia-unul (cont)
‘"‘mdm'e Factori ce pot genera anumite probleme de sincronizare, cu efecte asupra integritétii date/0r:
Canme annulme
M)‘ I destinatarul mesajelor:
Caractensum cmmune permu
w — mesaje cu expeditor oarecare
W Nu ridicé probleme deosebite — fiecare mesa] poate fi citit de procesul “cititor”
213.3333: $215752? si prelucrat Tn ace|a$i fel, indiferent de la care dintre procesele “scriitori”
“EM/I'm‘ provine acel mesa].
317:3;?L331°°m“"‘”““e — mesaje cu expeditor specificat
3175me Wm Trebuie asigurat cé mesajul ii indicé “cititorului” care este “scriitorul” care i l-a
ffliallLZ‘l°a"a‘e‘°'°e trimis. Solutia — mesaje formatate in felul urmétor:
My‘ MESAJ = HEADER + MESAJUL PROPRIU-ZIS,
header-ul continénd un identificator al expeditorului.
Nata“: scrierea mesajului astfel formatat se va face printr-un singur apel
write, la fel ca la mesaje de lungime variabilé.
Memu d9 navigare Cornurucatia \mev-procese: Canme de cumumcatie anomme si cu nume 32 / 41

***************Ending Page***************

***************Beginning Page***************
***************page number:33**************
$ablonul de comunicatie mulﬁ-Ia-mulri
‘"‘mdm'e Problemele de sincronizare ce pot apare in cazul acestui sablon, pot fi cauzate de oricare dintre factorii
M discutati Ia sabloanele unuI»/a»multi 5i multi-Iaunul:
Candi cu nume Illa . .
6mmmmpem I lunglmea mesalelor
4M2“ “"“CW'E I expeditorul mesajelor
51:2? de mum“ m I destinataru/ mesajelor
Clasrhcarea sabmanemr de
mmm mwmcgse Tratarea acestora se poate face prin combinarea soluliilor prezentate Ia sabloanele precedente.
Sablonu) ds cnmumcaue
“Mr/arm
5357327Lii,°“m“"““ Noté: pentru simplitatea programarii, uneori se poate prefera Tnlocuirea unui singur
S bl \d l , , , , . .
MZ$LZHZ°"”“"W canal foloslt pentru comun|ca1|e unul-la-mu/tl, cu maI multe canale folosne pentru
Sablonu) de cumumcaue
mm” comunicatie unuI-la-unul, Le. cu céte un canal pentru fiecare proces “cititor” existent.
Aphcamale canaleblde _ . . _ . . . .
we‘ EVIdent, se poate proceda Slmllar 3| pentru sabloanele unul-Ia-muli! $| muIII-Ia-mulil.
R ‘em brbh g Or _ _ ‘ . v . .

e ‘e D a ce Demo: a se vedea programele suma,p1pes . c 5| suma,f1fos.c ([2]), care reprezmta rescrlerl ale
programului suma_fi1es . c din lectia practice despre fork 5i wait, prin Tnlocuirea fisierelor obisnuite
cu canale (anonime si, respectiv, cu nume) pentru comunicaliile dintre supervisor si workeri.
Comunicatiile dinspre workeri spre supervisor folosesc sablonul mu/ri-Ia-unul. in schimb, sablonul
unul-Ia-multi pentru comunicatiile dinspre supervisor spre workeri I-am implementat pe baza ideii de
mai sus, (Pentru explicatii suplimentare despre aceste doua programe, puteii consulta exemplele

Meniu de navigm [FifthDemo — sumaipipes] $i [SixthDemo — sumaififos] din suportul online de laborator ([3]). ) 33,41

***************Ending Page***************


***************Beginning Page***************
***************page number:34**************
\nlmducere \mroducere
Gamma annnime Canale anonime
Cana\e cu Mme mg Crearea \on cu pnmmva plpe
4L)‘ Modul de uhhzare a unm cana‘ anomm
CEme‘ “We PW“ Demo. exemp\e de comunlcane Tmre doué process
ambeleﬂgmlde canals
Sabloane de wmumcahe imre Canale c“ nume (ma) v
2mm Crearea \ov, cu prlmmva mkflfo
Modul de uhhzare a unm cana‘ cu Hume
ADUCQW ale CQHQMOI d8 , .
mmm Despre persistema \nlormahe\ dmir'un hmer m
‘Mam M ‘mpmmwa Deosebin a\e caneﬂebr cu Mme Iaté de ce\e anomme
‘"““ 5mm’ Caracleristici comune enlru ambele u uri de canale
Aphcaha #2 \mp\emen(area v v P _ P v
\mev aphcaw chem/server Caraclenshm 5| restnchl ale canzﬂehar de comumcane
Comporlamemu‘ \mphmf de Up bwcam
‘9*
Hemmwm '3'" Comporlamemu‘ deup nebkncam
Sablaane de comunicatie intre procese
Clasmcavea sabmanelor de comunlcaue \mer'procese
Samonul de comunlcahe unu/rla'unu/
Samonul de comunlcahe unu/Ja'rnull/
Samunul de comunlcaue mu/N-Ia-unu/
Samunul a9 comunicahe mu/(Ha'mu/tr
Aplicatii ale canalelor de comunicalie
Aphcaha #1 mplememarea uﬂm semalov
Aphcaha #2 \mplememarea unex aphcam chem server
Helerinle bibliogralice
Memu de navigare Comumcatia inter-process: Game d9 cumumcatie anomme 5i cu nume 34 / 4‘

***************Ending Page***************

***************Beginning Page***************
***************page number:35**************
Aplicalia #1: implementarea unui semafor

‘"‘mm'e Cum am putea implementa un semafor folosind canale fifo’?

Canals anomme

M O posibilé implementare ar oonsla in urmétoarele idei:

Caraclerlsllcl comune peniru

ambelellgurlde canals . _ . . . . . . . . ..

55mmdemmmm Initializarea semaforulul s-ar reallza prln crearea unUI fl$lel f/fo de calre un proces cu

A rol de superwzor (acesta poate fl oncare dintre procesele ce vor lol05| acel semafor,

Dlloalu ale canalelor de

AZZTZQIZTT imprgmm sau poate li un proces separat).

unui semalor

3171111 LTZLEEZFJZI“ Acest proces supervizor va scrie inilial in canal 1 octet oarecare, dacé e vorba de un

My‘ semafor binar (sau n octeli oarecare, dacé e vorba de un semafor general n-ar).
lar apoi va pastra deschise ambele capete ale canalului pe toaté durata de execulie a
proceselor ce vor folosi acel semafor (cu scopul de a nu se pierde pe parcurs
informalia din canal, datorilé inexistenlei la un moment dal a macar unui proces care
sé aibé deschis mécar vreunul dintre capete, conform celor disculate anterior legat de
perioada de retenlie a informaliei intr-un canal ﬁfo).

Meniu cle navigare Ccmunicalia ruler-process: Canale de comunicalie anonime si cu nume 35 I41

***************Ending Page***************

***************Beginning Page***************
***************page number:36**************
Aplicatia #1: implementarea unui semafor (cont)

‘""me'e Operatia wait va consta in citirea unui octet din fieierul ﬁfo.

M Mai precis, intai se va face deschiderea Iui, urmaté de citirea efectiva a unui octet, 5i apoi eventual

ca a‘ u u e ”° inchidereafieierului.

Caracteristici commie penilu

SSHddm'H Operatia s1gnal va consta in scrierea unui octet in fl$lefu| fifo.

1mm— Mai precis, intai se va face deschiderea Iui, urmaté de scrierea efectivé a unui octet, si apoi eventual

:mflgll°a"a‘e‘°me inchiderea fisierului.

A iiCaliaM im lamentarea ..

“5w we p Observatn:

Apiicalia #2 implementarea '

“"“”“Ca“‘°“*"‘“'”' i) citirea se va face, in modul implicit, blocant, ceea ce va asigura aeteptarea

Refevinle bibiingrafice . . A . . . ~ . A u
procesului la punctui de intrare in sectiunea sa critica atunCI cmd semaforul este pe
roeu", adica daca canalul ﬁfo este gol.
ii) scrierea nu se va putea bloca (cu conditia ca n-ul semaforului general s51 nu
depaeeascé capacitatea maxima pe care 0 putem configura pentru un canal).
Temé: implementati in C un semafor binar pe baza ideilor de mai sus si scrieti un program demonstrativ
in care sé utilizati semaforul astfel implementat pentru asigurarea excluderii mutuale a unei sectiuni
critice de cod (pentru “inspiratie” in scrierea programului demonstrativ, revedeti problemele de
sincronizare discutate in cursurile teoretice #5 si #6 ).

Meniu de navigate Ccmunicatia inter-process: Canaie de cumunicatie anonime si cu nume 36 I41

***************Ending Page***************

***************Beginning Page***************
***************page number:37**************
Aplicaiia #2: implementarea unei aplicaiii client/server
‘""me'e O aplicaiie cu arhitectura de tip client/server este compusa din doua componente:
Canaie anomme
Canaremm ma I serverul: este un program care dispune de un anumit numar de servicii (i.e.,
53.3511?‘ZZQZQZIZEM'“ funciii, operaiii, etc.), pe care le pune la dispozitia clieniilor.
$3,233?‘*“°'““"‘“““""* I clientul: este un program care “interogheazé” serverul, solicitandu-i efectuarea
Q:;jj1;jl;°a"a‘e‘°'“e unui serviciu (dintre cele puse la dispoziiie de acel server).
CES??2;ZL£“°‘E“*“‘”“ Exemp/u: Browserele pe care Ie folositi pentru a naviga pe INTERNET sunt un exemplu de program
55:11:‘ $522332!” client, care se conecleaza la un program server, numil server de web, solicitandu-i transmiterea unei
Reiennlebibiingraﬂce pagini web, care apoi este afieata in fereastra grafica a browserului.
lmp/ementarea unei apl/caii/ de tip client/servero puteii face in felul urmator:
Programul server va ﬁ rulat in background, ei va stain aeteptarea cererilor din partea
clieniilor, putand servi mai mulii clienii simultan.
lar clientii vor putea fi rulaii mai mulii simultan (din acelasi cont si/sau din conturi
utilizator diferite), 5i se vor “conecta” la serverul rulat in background.
Nata: pot exista, Ia un moment dat, mai multe procese client care Tncearca, fiecare independent de
celelalte, sa foloseasca serviciile puse la dispozitie de acelasi proces server.
Meniu de navigare Ccmunicatia inleY-WOCBSBI Canaie de cumumcatie anomme si cu nume 37 I41

***************Ending Page***************

***************Beginning Page***************
***************page number:38**************
Aplicatia #2: implementarea unei aplicatii client/server (cont)
‘"‘mdm'e Observatie: in realitate, programul server este rulat pe un anumit calculator, iar clientii pe diverse alte
M calculatoare, conectate la INTERNET, comunicatia realizéndu-se folosind socket-uri, prin intermediul
4Q~CWMWW "’° retelelor de calculatoare.
5:553:22ZZVEZSZIZEM lnsé puteti simula aceasté “realitate” folosind comunicatie prin canale cu nume si executénd toate
Sabina“dwmwcaneimre procesele (l.e., serverul 5i clientii) pe un acelasi calculator, eventual din conturi utilizator diterite.
Q:‘;Z";1g§l;°“"a‘e‘°'“e Tipurile de servere existente in realitate, d.p.d.v. al serviri/ “simultane”a mai mu/tor
Qillcligéfmplmma clienti, se impart in doué categorii:
unei a llcatll clieanerver . .
p I server Iterat/v
Relennle blbllngraflcs
Cét timp dureazé efectuarea unui serviciu (i.e., rezolvarea unui client), serverul
este blocat: nu poate réspunde cererilor venite din partea altor clienti. Deci nu
poate rezolva mai multi clienti Tn acelasi timp!
I server concurent
Pe toaté durata de timp necesaré pentru efectuarea unui serviciu (i.e., rezolvarea
unui client), serverul nu este blocat, ci poate réspunde cererilor venite din partea
altor clienti. Deci poate rezolva mai multi clienti in acelaei timp!
Meniu de navigare Ccmunlcatia inter-process: Canale de cumumcatie anonlme si cu nume 38 I41

***************Ending Page***************

***************Beginning Page***************
***************page number:39**************
Aplicaiia #2: implementarea unei aplicagii client/server (cont)
‘5W1 Detalii legate de implementare:
M)‘ I Pentru implementarea unui server de tip iterativ este suficient un singur proces
M secveniial. in schimb, pentru implementarea unui server de tip concurent este
jbld—mm nevoie de mai multe procese secveniiale: un proces supervisor, care aeteapté
Q:¥Z"il£§ll°“"a‘e‘°'de sosirea cererilor din partea clieniilor, $i la fiecare cerere sosité, el va crea un nou
ZZIIMEZZSI proces fiu, un worker care va fi responsabil cu rezolvarea propriu-zisé a clientului
High“: respectiv, iar supervisor-ul va relua imediat asteptarea sosirii unei noi cereri, féré
sé astepte terminarea procesului fiu. (Sau, alternativ, se poate implementa printr-un singur
proces mum-threaded‘)

I Pentru comunicarea intre procesele client ei procesul server este necesar sé se
utilizeze, drept canale de comunicatie, fieiere ﬁfo. (Motivu/z nu se pot folosi canale
anonime deoarece procesul server si procesele clienti nu sunt anudite prin fork/exec.)

I Permisiunile fieierelor fifo folosite pentru comunicaiie trebuie configurate adecvat,
astfel incét s5 permité executia proceselor client din conturi utilizator diferite (i).

Meniu de navigare Ccmunicatia imer-procese: Canaie de cumunicatie anonime si cu nume 39 I41

***************Ending Page***************

***************Beginning Page***************
***************page number:40**************
Aplicatia #2: implementarea unei aplicatii client/server (cont)
‘"‘mm'e I Un alt aspect legat tot de comunicatie: serverul nu cunoaate in avans clientii ce se
Canals annulme _ . ._ A _ . I v ~
CWEWW mg vor conecta la el pentru a le oferI serVIcn, In schImb cllentul trebule sa cunoasca
Giggle?“:WEIPEM serverul la care se va conecta pentru a beneficia de serviciul oferit de el.
EZZ'ZZQE“m'wmmwe Ce inseamna aceasta d.p.d.v. practic ’?
Aplicatu ale canalelor de . _ A _ .
W Serverul va crea un canal f/fo cu un nume flxat, cunoscut In programul client, 5| va
:1:g§ﬁ$3‘;ﬂmpigmmea aetepta sosirea informatiilor pe acest canal.
unei a licatu clientserver _ , _ _
Remlm m Un cllent oarecare se va conecta la acest canal flfo cunoscut $I va transmlte
informatii de identificare a sa, care vor fi folosite ulterior pentru realizarea etectivé
a comunicatiilor implicate de serviciul solicitat (cel mai probabil va fi nevoie sa
utilizati canale suplimentare, particulare pentru acel client, pentru a nu se
“amesteca” intre ele comunicatiile destinate unui client cu cele destinate altui
client conectat la server in acelasi timp cu primul ).
Temé: implementati un joc multi-p/ayer “in retea", pe baza ideilor descrise mai sus.
Meniu de navigare Cornunicatia inter-process: Canale de cumumcatie anonime si cu nume 40 I41

***************Ending Page***************

***************Beginning Page***************
***************page number:41**************
Bibliografie obligatorie
‘"‘mdm'e [1] Cap. 5, §5.1,§5.2,§5.3 si §5.5 din cartea “Sisteme de operare — manual pentru ID‘, autor
M C. Vidrascu, editura UAIC, 2006. Nora": este accesibila, in format PDF, din pagina disciplinei
4‘—)~cm‘““““" "’° “Sisteme de operare":
Caracierisiici cmrnune peniru
Mm o https I //profs . info . uaic . r0/"vidrascu/SU/books/ManualIDeSE] . pdf
Sabloane de ccmunicatie inire
pruce5e— . I . I II I I II
IIIIIIII aiecanaieiorde [2] Programele demonstrative amlntlte pe parcursul acestel prezentari pot fl descarcate de la:
AZGTMIWTM I I https : //profs . info . uaic . ro/'vidrascu/SO/cursuri/C-programS/pipe/
“we r Wm
o https : //pr0fs . info . uaic . r0/”vidrascu/SO/cursuri/C-programs/fifo/
[3] Suporiul online de Iaborator asociai acestei prezeniari:
l https : //pr0fs . info . uaic . r0/"vidrascu/SO/labs/suport_1ab12 . html
Bibliografie suplimeniara:
[4] Cap. 44 din cartea “The Linux Programming Interface : A Linux and UNIX System Programming
Handbook", autor M. Kerrisk, editura No Starch Press, 2010.
o https : //profs . info . uaic . r0/”vidrascu/SU/books/TLPI 1 .pdf
[5] POSIX API: man 2 pipe, man 2 mkfifo, man 2 fcntl.
Meniu d9 navigare Ccmunicaiia inter-process: Canaie de cumunicaiie ancnime 5i cu Hume 41 r41

***************Ending Page***************

