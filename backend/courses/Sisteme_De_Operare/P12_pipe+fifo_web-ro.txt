***************Beginning Page***************
***************page number:1**************
PROGRAMARE DE SISTEM iN C PENTRU PLATFORMA LINUX (V)
Comunicagia inter-procese:
Canale de comunicagie anonime §i cu nume
Cristian Vidra$cu
vidrascu©info uaic ro
Mai, 2021
1/41

***************Ending Page***************

***************Beginning Page***************
***************page number:2**************
A
lntroducere Introducere
w Canale anonime
Canale Cu nume IﬁfOI Crearea Ion-cu pr|m|t|valp1pe .
_ _ _ Modul de ut|l|zare a unul canal anonlm
caraCterPSt'C! comune pentru Demo: exemple de comunicatie Tntre doua procese
ambele tlpurl de canale ’
Sabloane de comunicatie intre' Canale CU nume (hf?) _ _ _
grocese Crearea lor, cu pr|m|t|va mkf 1f o
_ _, Modul ole utilizare a unui canal cu nume
Apllcatu ale canalelor de . . . . . . . .
comunicatie Despre per5|stenta informatlel dintr-un f|$|er f/fo
Deosebiri ale canalelor cu nume fata de cele anonime
Referinte bibliografice _ _ _ _ _
Caractenstlcl comune pentru ambele tlpurl de canale
Caracteristici 5i restrictii ale canalelor de comunicatie
Comportamentul implicit, ole tip blocant
Comportamentul de tip neblocant
Sabloane de comunicatie intre procese
Clasificarea sabloanelor de comunicatie inter-procese
Sablonul ole comunicatie unul-la-unu/
Sablonul de comunicatie unul-la-mu/ti
Sablonul cle comunicatie multi-la-unu/
Sablonul ole comunicatie multi-la-mu/ti
Aplicatii ale canalelor de comunicatie
Aplicatia #1: implementarea unui semator
Aplicatia #2: implementarea unei aplicatii client/server
Referinte bibliografice
Meniu de navigare Comunicatia inter-procese: Canale de comunicatie anonime $i cu nume 2/41

***************Ending Page***************


***************Beginning Page***************
***************page number:3**************
f o
lntroducere
'Cdl Tipuri de comunicatie Tntre procese:
W I comunicaﬁa prin memorie partajaté (“shared-memory communication”)
Wm e.g. prin fisiere mapate Tn memorie, sau mapéri anonime $i cu nume, $.a.
mm I comunicatia prin schimb ole mesaje (“message-passing communication”)
— comunicafie loca/é
A canale anonime (numite, uneori, $i canale interne)
A canale CU nume, i.e. fi$iere ﬁfO (numite, uneori, $i canale externe)
— comunicafie la distanfé
‘ socket-uri
Meniu de navigare Comunicatia inter-procese: Canale de comunicatie anonime $1 cu nume 3 / 41

***************Ending Page***************

***************Beginning Page***************
***************page number:4**************
O O

lntroducere (cont)

'“tmdmere Un canal de ccmunicatie UNIX, sau pipe, este 0 “conducta” prin care pe la un capat
Canale anonime . . A . . v V

Canalecunume Iﬁfol se scrlu mesajele (ce constau In secvente de octetl), |ar pe la celalalt capat acestea
Cafjtegsﬁcisomunelpemw i sunt citite (cu extractia Ior din canal) — deci practic se comporta ca 0 structura de tip
am ee IQUI'I ecanae ’

SabloanedeGomunicatielntre coada, adica o lista FIFO (First-ln,First-Out).

grocese v _ _ , . . c .
Aplicatiialecanalelor de Nota: ole tapt, un pipe chlar este Implementat de nucleul UNIX/ Llnux ca o llsta FIFO, cu o capaCItate
wie— constanta, gestionata Tn kernel-space.

Referinte bibliografice

Rolul unui canal: 0 asemenea “conducta” FIFO poate fi folosita pentru comunicare

de catre cloua (sau mai multe) procese, pentru a transmite date cle la unul la altul (!).

Canalele de comunicatie UNIX se impart Tn cloua subcategorii:

I cana/e anonime: aceste “conducte” sunt create Tn memoria interna a sistemului UNIX
respectiv, fara niciun nume asociat Ior Tn sistemul ole fieiere;

I cana/e cu nume: aceste “conducte” sunt create tot Tn memoria interna a sistemului, dar au
asociate cate un nume, reprezentat printr-un fieier de tipul special fifo, care este pastrat tn sistemul
ole fieiere (din acest motiv, aceste fieiere fifc se mai numesc $i pipe-uri cu nume).

Meniu de navigare Comunicatia inter-procese: Canale de comunicatie anonime $i cu nume 4/41

***************Ending Page***************


***************Beginning Page***************
***************page number:5**************
A
lntroducere lntroducere
Canale anonime Canale anonime
Crearea Ior, cu primitiva pipe Crearea lor, cu primitiva pipe
Modui de utilizare a unui canal Modul de utilizare a unui canal anonim
anonim _ . . A c
Demo: exemple de Demo. exemple ole comunicatie intre doua procese
comunicatie intre doua I Canale cu nume (fifO)
FOCGSG . . . .
p Crearea lor, cu primitiva mkf 1f o
Canale cu nume (fifo) Modul ole utilizare a unui canal cu nume
Caracteristici comune pentru Despre pchIStenta informatiei dintr-pn f|$|er flfo .
ambe|e tiguri de Camaﬂe Decsebiri ale canalelor cu nume fata cle cele anonime
Sabloane cle comunicatie intre Caracteristici comune pentru ambele tipuri de canale
Procese— Caracteristici $i restrictii ale canalelor de comunicatie
Apucaﬁi a|e cana|e|or de Comportamentul implicit, ole tip blocant
comunicatie Comportamentul cle tip neblocant
Referinte bibliografice Sabloane de comunicatie intre procese
Clasificarea sabloanelor cle ccmunicatie inter-procese
Sablonul ole comunicatie unul-la-unu/
Sablonul cle comunicatie unul-la-mu/ti
Sablcnul cle comunicatie multi-la-unu/
Sablonul ole comunicatie multi-la-mu/ti
Aplicatii ale canalelor de comunicatie
Aplicatia #1: implementarea unui semafor
Aplicatia #2: implementarea unei aplicatii client/server
Referinte bibliografice
Meniu de navigare Comunicatia inter-procese: Canale de comunicatie anonime $i cu nume 5/41

***************Ending Page***************

***************Beginning Page***************
***************page number:6**************
~ Q
Crearea lor, cu primitiva pipe
'“"°du°e‘e Un canal anonim se creeaza cu ajutorul primitivei pipe.
Canale anonime . . . v
C rer, err errrrrrrrraeaee lnterfaia acestel funcjul este urmatoarea ([5]):
Modul de utilizare a unui canal
greasyexemplede lnt p1p6<1nt *p)
comunicaiie Tntre doua
pm I p = parametrul efectlv de apel trebwe sa fle un vector int [2] , care va fl actuallzat
Canale cu numegfifo) _ A V
Caracteristicicomune pentru de fUﬁCtle In felu' urmator'
ambele tipuri de canale
Sfoﬂgjgedecomunicaﬁemtre — p[O] va fi descriptorul cle fieier deschis pentru capatul de cit/re al canalului
Qggcuagglzifecana'e'orde — p[1] va fi descriptorul de fieier deschis pentru capatul de scriere al canalului
Referinte bibliografice v A A
I valoarea returnata este O, In caz cle succes, sau -1, In caz de eroare.
EfeCt: Tn urma eXGCUtiei prlmltlvel int wisp];
pipe se creeaza un canal anonim ei p'pei-fds};
este deschis automaz‘ la ambele capete — (ir_“—i1)‘—\
" ' ' v - - - fl—'_1lij {frj E:[IIII], tilif, lie-[1]; 'r,.--.,rrit|191-|[f|:j:5;["1 ], trqu liar-p];
In c|t|re Ia capatul referlt prln descrlptorul
p[O] ei, respectiv, Tn scriere Ia capatul referit prin descriptorul p[1] .
Meniu de navigare Comunicatia inter-procese: Canale de comunicaiie anonime 5i cu nume 6/41

***************Ending Page***************


***************Beginning Page***************
***************page number:7**************
~ Q
Modul de utilizare a unui canal anonim
'“tmduwe Dupa crearea unui canal anonim, folosirea sa pentru comunicalia locala Tntre doua
Canaleanonime . . . I I I A _ _
Creamaorlcuprimmvapipe (sau mal multe) procese se face pnn scnerea Informajuel In acest canal $l, respectlv,
Modul de utilizare a unui canal
gggyexemplede prin citirea informaliei din canal.
comunicalielntre doua , A . . . .
procese lar scrlerea In canal $l respectlv c|t|rea
Canalecu Hume ﬁfo mullingprmiusri . . . . .
ﬁcteﬂsﬂcimpem HM H III.Wm;W clln canal, prln Intermedlul celor dol
am ee i uri ecanae I ' ' ' V
ﬁ% Q’ _ “I descrlpton p[O] $l p[1] , se efectueaza
,a oane ecomunlcale |n re ijrlpt‘ . . . .
P— LEI-min“ Hf I Ia fel ca pentru flelerele oblenwte,
Aplicalii ale canalelor de —-_—-'-'III—I" . . . . .
whe— ‘L1H 11"" I /.e. folosmd apelurlle read $| wrlte,
Referinte bibliografice P H d ' l Fl l' ' .. . . . .
ma“ '5 escrlpnrs U mm mg U p'pa sau cu funcfulle l/O dln blblloteca stdlo.
* * *
Restrict/e importanté:
Deoarece acest tip de canale sunt anonime (i.e., nu au nume), pot fi utilizate pentru
comunicalie doar de cétre procese “lnrudite” prin apeluri fork/ exec.
De ce? Motivalia este urmatoarea: . . . (vezi slide-ul urmator)
Meniu de navigare Comunicatia inter-procese: Canale de comunicalie anonime 5i cu nume 7/41

***************Ending Page***************

***************Beginning Page***************
***************page number:8**************
~ '1
Modul cle utilizare a unui canal anonim (cont)
'“tr°d“ere_ Mot/valie: pentru ca doua (sau mai multe) procese sa poata folosi un canal anonim
W pentru a comunica Tntre ele, acele procese trebuie sa aiba Ia dispozilie cei doi
rindipldl descriptori p[O] $i p[1] oblinuli prin crearea canalului. Deci procesul care a creat
ZFQZZZaﬁemedm canalul prin apelul pipe, va trebui sa le “transmita” cumva celuilalt proces.
Canale cu nume gfifo)
Zirﬁlifiisﬁﬁﬁiriiﬁiliemw De exemplu, Tn cazul cand se dorecte s51 se utilizeze un canal anonim pentru
Srabloanedecomumcalemtre comunicarea Tntre doua procese de tipul parinte-fiu, atunci este suficient sa se
m apeleze primitiva pipe de creare a canalului fnaintea apelului primitivei fork de
RT—tLb|f— creare a procesului fiu. ln acest fel, prin clonare, avem Ia dispozilie $i Tn procesul fiu
cei doi descriptori necesari pentru comunicare prin intermediul acelui canal anonim.
parent 0th Nota':
W0) W m) mm “Transmiterea” descriptorilor canalului
| LL: l are Ioc $i Tn cazul apelului primitivelor
exec (deoarece descriptorii de fi$iere
Fi'edesmpwrsmra"“dimrypipe “mm” deschise se moctenesc prin exec).
Meniu de navigare Comunicatia inter-procese: Canale de comunicalie anonime 5i cu nume 8/41

***************Ending Page***************


***************Beginning Page***************
***************page number:9**************
Intmducere A/té reStriCIIIe: Figura 1 — un canal anonim, imediat dupa apelul pipe:
CanaIe anonime I A I I USETPIIEESEI 1.1551‘ I'IJCE'SE
Crearea lor, cu primitivapipe DaCa UH prOCeS ISI lﬁChlde VFGUHUl dlntre - m
' . - - fr][-El]' fd['l.] Edi-El] [6E1]

Demexemplede capetele unu| canal anonlm, atun0| nu f, a

. -. g’ we
comunica ie in re doua - - - - - - . f ‘~
eeeee l t mal are n|c|o pOSIbllltate ole a redeschlole f, H\
Ca"a'e°“““me””°> ulterior acel capat al canalului. I I.
Carac eris ici comune en ru
ambeltetiptiride canalrlreJ t * * * kernel
Sabloane de comunicaiie intre
Diocese Figura 2 — un canal anonim, olupa apelul fork: Figura 3 — un canal anonim, dupa configurarea “unul-la-unul”:
Aplicaiii ale canalelor de parent Child parent Child
Referinle bibliografice fd [Ell Eli [11 Eli [U1 Ed. [11 flﬂ [II f-ﬂ [UI

‘HR .r
fr "a
kernel kernel
Nota': vom vedea ulterior ca aceste doua restriclii de folosire a canalelor anonime nu
mai sunt valabile $i in cazul canalelor cu nume (l).
Meniu de navigare 9/41

***************Ending Page***************

***************Beginning Page***************
***************page number:10**************
~ Q
Demo: exemple de comunicalie intre doua procese
lntroducere . ' ' " ' ' ' '
I Exemplul #1 . un program care exempllflca modul cle utlllzare a unw canal ancnlm
Canale anonime . . A v . v
C rer, err errrrrrrrreeree pentru comunlcajua lntre doua procese, ole tlpul producatcr—consumatcr.
Modul de utilizareaunui canal A . V . . . . . _ . ..
gggyexemplede In acest exemplu se |lustreaza fclcswea prlmltlvelor read $l wrlte (/.e., funcjulle
comunica ie Tn re doua - - - - - - A
ereeeee t t clln APl-ul POSIX) pentru a c|t| clln canal, respectlv pentru a scrle |n canal.
Canale cu nume (fifo) . I v .
Caracteristicicomune pentru A se Vedea fl$lerUI sursa plpe—eX1 ° C ([2])'
ambele tiQUl'i de canale
Sabloane de comunicaﬁemtre Efectul acestui program: mai lntéi S€ creeaza
Emcese . .. .
Aplicawalecanalelorde m“ _n un canal anonim $i un proces fiu. Apoi, procesul
wie— rrrerr ) < rrrrre parinte citeste o secventa ole caractere ole
W .. )—.. “I l‘]—- )\ la tastatura, secventa termlnata cu comblnajua de
( ) I) taste CTRL+D (i.e., caracterul EOF in UNIX), $i le
\_‘ -"/ transmite procesului fiu, prin intermediul canalului
""i'l" "Mk" anonim, cloar pe acelea care sunt litere mici. lar
a} Afterﬂrrkf'_,l hIflAftﬂr clus'mg unused descripturs I f. .t t din n I r t r I tr m.
Selling upcl pipelc lrunsfardclc: Frcmu purenlhanchild procesu IU Cl eS e I ca a ca aC e e e as lse
cle procesul parinte $i le afi$eaza pe ecran.
Observalie: pentru explicalii suplimentare despre acest program demonstrativ, ccnsultati exemplul
[FirstDemo — pipe_ex1] din suportul online cle laborator ([3]).
Meniu de navigare Comunicatia inter-procese: Canale cle comunicalie anonime 5i cu nume 10/41

***************Ending Page***************


***************Beginning Page***************
***************page number:11**************
O O
Demo: exemple de comunicatie intre doua procese (cont)

'“tmducere Pentru comunicatia prin intermediul canalelor anonime se pot folosi $i functiile l/O de nivel inalt:

Canale anonime

Crearea or, cu rimiiva i e . . v . . .

Moat-id;utilizafealnuﬁaiai I Exemplul #2: un alt program care exempllflca foloswea unul canal anonim pentru

foeguogijaxgjgfrjgoué * comunicatia intre doua procese, de tipul producétor-consumator.

:“ese De aceasta data, se utilizeaza functiile fscanf $i, respectiv, fprintf (i.e., din

anale cu nume (fifo)

Caracterislammpemw biblioteca stdio) pentru a citi din canal $i, respectiv, pentru a scrie in canal.

ambele tiQuri de canale

Sabloanedecomunicatetnre A se vedea fisierul sursa pip€_€X2 . c ([2]).

QFOCGSG s

fjr'rifuarﬁizjfecana'e'°rde Nota: in acest caz, este necesara conversia descriptorilor de fisiere de la tipul int (i.e., descriptorii

Referimebibuograﬁce folositi de apelurile l/O din APl-ul POSIX) la descriptori de tipul FILE>I< (i.e., descriptorii folositi de
functiile l/O din biblioteca stdio), lucru realizabil cu ajutorul functiei de biblioteca fdopen.
Efectul acestui program: mai intai, se creeaza un canal anonim $i un proces fiu. Apoi, procesul tata
citeste o secventa de numere de la tastatura, secventa terminata cu combinatia de taste CTRL+D
(i.e., caracterul EOF in UNIX), $i le transmite procesului fiu, prin intermediul canalului anonim. lar
procesul fiu citeste din canal numerele trasmise de procesul parinte $i le afiseaza pe ecran.
Observatie: pentru explicatii suplimentare despre acest program demonstrativ, consultati exemplul
[SecondDemo — pipe_ex2] din suportul online de laborator ([3]).

Meniu de navigare Comunicatia inter-procese: Canale de comunicatie anonime $i cu nume 11 /41

***************Ending Page***************

***************Beginning Page***************
***************page number:12**************
A
lntroducere lntroducere
Canale anonime Canale anonime
Canale Cu Hume IﬁfOI Crearea Ion-cu pnmltlvalplpe .
Crearea Ion Cu primitiva Modul cle ut|l|zare a unul canal anonlm
mkfifo Demo: exemple ole comunlcatle lntre doua procese
Modul de utilizare a unui canal _
Cu nume I Canale cu nume (flfO)
DGSDFG persistenla informaliei Crearea lor, cu primitiva mkf ifo
gntr'ugfls'? f/fo | | Modul cle utilizare a unui canal cu nume
eose "1a e cana e or .Cu Despre persistenta informatiei dintr-un fisier fifo
nume fala de cele anonlme _ _ ’ ’ - ’ .
Deosebln ale canalelor cu nume fata cle cele anonlme
Caracteristici comune pentru _ _ _ _ _
ambe|e tiguri de cana|e Caractenstlcl comune pentru ambele tlpurl de canale
. . A Caracteristici si restrictii ale canalelor de comunicatie
Sabloane de comumcajue lntre ’ . .’ . . ’
|;rocese Comportamentul Impllclt, ole tlp blocant
_ __ Compcrtamentul cle tlp neblocant
Apllcalu ale canalelor de
comunicatie Sabloane de comunicatie intre procese
. . . . Clasificarea sabloanelor cle comunicatie inter-procese
Refennte blbllograflce ’ _ _ ’
Sablonul ole comunlcafue unul-la-unu/
Sablcnul cle comunicatie unul-la-mu/li
Sablcnul cle comunicatie multi-la-unu/
Sablonul cle comunicatie mu/fi-la-mu/li
Aplicatii ale canalelor de comunicatie
Aplicatia #1: implementarea unui semafor
Aplicalia #2: implementarea unei aplicalii client/server
Referinte bibliografice
Meniu de navigare Comunicatia inter-procese: Canale de comunicatie anonime $i cu nume 12/41

***************Ending Page***************


***************Beginning Page***************
***************page number:13**************
O O

Crearea lor, cu primitiva mkf if o

'“"°du°e‘e Un canal cu nume se creeaza cu ajutorul primitivei mkf ifo.

Canale anonime . . . v

Canalecunume ﬁfe Interfata acestel funcjul este urmatoarea ([5]):

$111???“ °“ primitiva i int mkf ifo (char >I<nume, int permisiuni)

Modul de utilizare a unui canal

EZQSEZersistenlainformalei I nume = numele ficierului (de tip fifo) ce va fi creat

dintr-un fi$ier fifo

fjgiegtrgjggjlgagme I permisiuni = permlsmnlle pentru f|$|erul ce va fl creat

Cafﬁtegsﬁc?somunelpemw I valoarea returnata este O, Tn caz ole succes, sau - 1, Tn caz cle eroare.

am ee IQUFI ecanae

Sljoi'gjgedeC°muni°alielmre Efect: Tn urma executiei primitivei mkfifo se creeaza un canal cu nume, dar fa'ra a fi

ﬁlicfililicana'e'°rde deschis la ambe/e capete (l), precum se Tntampla Tn cazul crearii unui canal anonim.

mm Nora: crearea unui fi$ier fifo se mai poate face cu ajutorul primitivei mknod apelata cu flag-ul S_IFIFO.
De asemenea, mai poate fi creat $i direct cle la linia ole comancla (i.e., prompterul shell-ului), cu
comenzile mkfifo sau mknod.
Exemplu cle creare a unui fi$ier fifo: a se vedea fi$ierul sursa mkfifo_ex . c ([2]).
Observarie: pentru explicatii suplimentare despre acest program demonstrativ, consultati exemplul
[ThirdDemo — mkfifo_ex] din suportul online ole laborator ([3]).

Meniu de navigare Comunicatia inter-procese: Canale cle comunicalie anonime $i cu nume 13/41

***************Ending Page***************

***************Beginning Page***************
***************page number:14**************
~ Q
Modul de utilizare a unui canal cu nume
'"tmdmere Dupa crearea unui canal cu nume, folosirea sa pentru comunicalia locala intre doua
Canaleanonime . . . . . . A _ _
Canaiecunume;ﬁfo; (sau mai multe) procese se face prin scrierea informaliei in acest canal $l, respectiv,
$111???“ C“ primitiva i prin citirea informaliei din canal.
Modul de utilizare a unui canal
3:352:333318informaiiei lar scrierea in canal ei, respectiv, citirea din canal se efectueaza la fel ca pentru
Efiiegiéi'iiiilalﬁﬁﬁe fieierele obienuite. Si anume: mai intai se deschide explicit fieierul Ia “capatul” dorit
jiﬁgijﬂsfﬁ33232;?“ (cel de citire ei/sau cel de scriere), pentru a se obline descriptorul necesar, apoi se
Sfoi'gjgedeC°municaieimre scrie in el ei/sau se citeete din el, prin intermediul descriptorului oblinut explicit, i.e.
Qgrlfuarilgifecana'elorde folosind apelurile de sistem read ei write, sau cu funcliile de citire/scriere din
Referimebibiograﬁce biblioteca stdio, iar Ia sfareit se inchide descriptorul respectiv.
* * *
Observafie importanta': deoarece acest tip de canale nu sunt anonime (i.e., au nume
prin care pot fi referite), pot fi utilizate pentru comunicalie intre orice procese care
cunosc numele fieierului fifo respectiv, deci nu mai avem restriciia de Ia canale
anonime, aceea ca procesele trebuiau sa fie “inrudite” prin fork/exec.
Meniu de navigare Comunicatia inter-procese: Canale de comunicalie anonime $i cu nume 14/41

***************Ending Page***************


***************Beginning Page***************
***************page number:15**************
~ Q

Modul de utilizare a unui canal cu nume (cont)

'“troducere Aeadar, operatiile asupra canalelor fifo se vor face fie cu primitivele l/O de nivel scazut (i.e., open,

w read, write, close), fie cu functiile l/O de nivel inalt din biblioteca standard de l/O din C (i.e., fopen,

m? fread/fscanf, fwrite/fprintf, fclose, $.a.).

mkfifo r

21°,‘iﬁlndjmm'mna' La fel ca pentru fieiere obienuite, “deschiderea” unui fieier fifo se face explicit, printr-un

Despre persistenfainformatiei . . A . v . . _ _

gnir-ugquiTrf/fo H apel al functiei open sau f Open, intr-unul din urmatoarele trei moduri peeibile,

"umefaiédm'eammme specificat prin parametrul transmis functiei de deschidere:

Caracteristici comune pentru

ambele ipuride canale . . . .

Sabloantedecomumcaﬁem I read & write (/.e., deschiderea ambelor capete ale canalulw)

FOCGSG . - v I I I

P—A |_ t, I H d I read-only (/.e., deschiderea doar a capatulw de c|t|re)

picailaecanaeor e

m—f— I write-only (i.e., deschiderea doar a capatului de scriere)

Referinte bibliografice
Observafie importanfé:
Implicit, deschiderea se face Tn mod blocant, i.e. 0 deschidere read-only trebuie sa se
“sincronizeze” cu una write-only. Cu alte cuvinte, daca un proces fncearca sa
deschida un capét al canalului, apelul functiei de deschidere ramane blocat (i.e.,
functia nu returneaza) pana cand un alt proces va deschide celalalt capat al canalului.

Meniu de navigare Comunicatia inter-procese: Canale de comunicatie anonime $i cu nume 15/41

***************Ending Page***************

***************Beginning Page***************
***************page number:16**************
O O
Despre persistenta informatiei dintr-un fi$ier fifo
'“tmdmere _ Observaiie: un canal cu nume este creat tot Tn memoria interna a sistemului (ca $i
2:? w unul anonim), dar Tn plus are asociat un nume, reprezentat printr-un fi$ier de tipul
ﬁllialii'°“fuprimmva_ i special fifo, care este pastrat Tn sistemul de fi$iere.
gjgggejiilaiit: Conc/uzie: informatiile continute Tn acest tip ole fi$iere sunt stocate Tn memoria principala, nu pe disc, $i
(liggigifisazZZnalelorcu ca urmare nu sunt persistente. (Practic, continutul unui fi$ier fifo este gestionat, de catre nucleul
numefatadeceleanonime SO-ului, tot ca 0 coada FIFO aflata Tn memorie, la fel ca $i Tn cazul canalelor anonime.)
M A$adar, perioada de retentie a informatiei stocate Tntr-un canal este urmatoarea:
Wm Spre deosebire d6 fi$iere|e Obi$nuite ( ce pastreaza informatia scrisa Tn ele pe o perioada
w nedeterminata — mai precis, pana Ia 0 eventuala operatie ole modificare sau $tergere ), Tn CaZUI unui
MM; fi$ier fifo informatia scrisa Tn el se pastreaza doar din momentul scrierii $i pana Tn
momentul cand atat procesul care a scris acea informatie, cat $i orice alt proces ce-I
accesa, termina accesul Ia acel canal fifo (Tnchizandu-$i capetele canalului), iar
aceasta numai daca informatia nu este consumata mai devreme, prin citire.
Demo: a se vedea fi$ieru| sursa testare_retentie_fifo . c ([2]).
Nota: pentru mai multe explicatii despre acest program $i descrierea comportamentului sau la executie,
Meniu de navigare consultati exemplul [Fourth Demo — testare_retentie_fifo] din suportul online de laborator ([3]). 16/ 41

***************Ending Page***************


***************Beginning Page***************
***************page number:17**************
~ Q
Deosebiri ale canalelor cu nume fata de cele anonime
'"tmdmere _ I Functia cle creare a unui fieier fifo (i.e., canal cu nume) nu realizeaza ei
2:? w deschiclerea automata a celor cloua capete ale canalului, precum la canalele
ﬁllialii'°“fuprimmva_ i anonime, ci acestea trebuie sa fie deschise explicit, clupa creare, prin apelul unei
:dpndptlttfmtl functii cle deschiclere a acelui fieier.
glftfd'ffﬂm I Un canal fifo poate fi deschis, la oricare dintre capete, cle orice proces, indiferent
gifgfgstuijiiggrzggzlgemw daca acel proces are sau nu vreo legatura de “rudenie” (prin fork/ exec) cu
$322129 de Oomunicatie We procesul care a creat canalul respectiv.
m Aceasta este posibil deoarece un proces trebuie cloar sa cunoasca numele
;—tlblf— fieierului fifo pe care cloreete sa-l cleschicla, pentru a-l putea deschide. Evident,
mai trebuie ei ca procesul respectiv sa aiba drepturi de acces pentru acel fieier fifo.
I Dupa ce un proces inchicle un capat al unui canal fifo, acel proces poate
redeschicle din nou acel capat al canalului.
Motivul pentru care ar clori aceasta: poate constata, ulterior momentului inchiderii,
ca are nevoie sa mai efectueze ei alte cperatii l/O asupra acelui capat.
Meniu de navigare Comunicatia inter-procese: Canale de comunicatie anonime $i cu nume 17/41

***************Ending Page***************

***************Beginning Page***************
***************page number:18**************
A
lntroducere lntroducere
w Canale anonime
Canale Cu nume IﬁfOI Crearea Ion-cu pr|m|t|valp1pe .
. . _ Modul cle ut|l|zare a unul canal anonlm
caraCterISt'C! comune pentru Demo: exemple ole ccmunicatie lntre doua procese
ambele tlpurl de canale ’
Caracteristici $i restrictii ale I Canale cu nume (fifo)
cana'e'or d9 comlm'célle _ Crearea lor, cu primitiva mkf ifo
aggaﬁrtamentu' 'mpl'C'L de t'p Modul ole utilizare a unui canal cu nume
Comportamentul de tip Despre persistenta informatiei dintr-un fisier fifo
neblocant Deosebiri ale canalelor cu nume fata cle cele anonime
sab'oane d9 comunicaiie We Caracteristici comune pentru ambele tipuri de canale
QFOCGSG . . . . . .. . .
Caracteristici 5| restrict“ ale canalelor ole comunlcatle
Aplicatii ale canalelor de Comportamentul implicit, cle tip blocant
W'G— Comportamentul de tip neblocant
Referinte bib'io raﬁce Sabloane de comunicatie intre procese
Clasificarea sabloanelor cle ccmunicatie inter-procese
Sablonul ole comunicatie unul-la-unu/
Sablcnul cle comunicatie unul-la-mu/ti
Sablcnul cle comunicatie multi-la-unu/
Sablonul cle comunicatie multi-la-mu/ti
Aplicatii ale canalelor de comunicatie
Aplicatia #1: implementarea unui semafor
Aplicatia #2: implementarea unei aplicatii client/server
Referinte bibliografice
Meniu de navigare Comunicatia inter-procese: Canale de comunicatie anonime $i cu nume 18/41

***************Ending Page***************


***************Beginning Page***************
***************page number:19**************
O O
Caracteristici $i restrictii ale canalelor de comunicatie
'"tmdmere _ I Ambele tipuri cle canale sunt canale unidirectionale, aclica pe la un capat se scrie
W informatia Tn canal, iar pe la capatul opus se citeste.
§§§$1§Sfjf§§gﬂggj,§entu i Nota: Tnsa putem avea mai multi scriitcri (i.e., tcate procesele ce au acces la
SZQZEETSSZiiﬁligliea'e _ capatul cle scriere, pot sa scrie Tn canal), ci/sau mai multi cititcri (i.e., toate
53:1 dmptlpt de up procesele ce au acces la capatul cle citire, pot sa citeasca din canal).
8:1, commcaﬁemtm I Unitatea de informatie pentru ambele tipuri de canale este octetul.
m Cu alte cuvinte, cantitatea minima cle informatie ce poate fi scrisa Tn canal,
RT—ttbb|f— respectiv citita din canal, este cle 1 octet.
I Capacitatea unui canal de comunicatie este limitata la c anumita dimensiune
maxima (e.g., 4 Kc, 16 Kc, 64 K0, $.a.), ce este ccnfigurabila.
Spre exemplu, Tn Linux (Tncepancl cle Ia versiunea 2.6.35) se poate afla, respectiv
configura, capacitatea unui canal cle ccmunicatie prin cperatiile F_GETPIPE_SZ,
respectiv F_SETPIPE_SZ, disponibile prin apelul cle sistem fcntl.
Pentru detalii, consultati documentatia acestui apel (i.e., man 2 fcntl ), precum $i explicatiile
prezentate Tn exercitiul rezclvat [A pipe’s capacity].
Meniu de navigare Ccmunicatia inter-procese: Canale de comunicatie anonime $i cu nume 19/41

***************Ending Page***************

***************Beginning Page***************
***************page number:20**************
O O
Caracteristici ei restrictii ale canalelor de comunicatie (cont)
'“tmdmere I Practic, ambele tipuri cle canale (i.e., $i cele ancnime, $i cele cu nume)
w , v v . v . v , . . . . .
Canalecunume ﬁfe functioneaza ca 0 ccada, adlca 0 Ilsta FIFO (First-In, First-Out), decl c|t|rea din
Cafjtegstcisomunelpenfu i canal se face cu “distrugerea” (i.e., consumu/ din canal a) informatiei citite (l), iar
am ee IQUI'I ecanae
5553332835‘;$13539 scrierea in canal se face prin “inserarea” in coada a infcrmatiei scrise.
Comportamentul implicit, de tip
EZCmaQQrtamemumeﬁp Concluzie: aeaclar, citirea dintr-un fieier fifo difera de citirea din fieiere cbienuite,
neblocant , , V v . . . . . .
Sabloanedecomumcaﬁem pentru care c|t|rea se face fara ccnsumarea Informatlel c||n f|$|er.
QFOCGSG
Aplicatiialecanalelorde A , , , , v V . V . . . .
m_t— I ln cazul f|$|ere|cr cblenwte am vazut ca eXIsta nctlunea de offset (/.e., p02|t|a
MM; curenta in fieier, cle Ia care se efectueaza cperatia curenta de citire sau scriere).
in schimb, nici pentru fieierele fifo, nici pentru canalele ancnime nu exista aceasta
notiune cle offset, ele functionand precum 0 ccada FIFO.
Meniu de navigare Ccmunicatia inter-procese: Canale de comunicatie anonime $i cu nume 20/41

***************Ending Page***************


***************Beginning Page***************
***************page number:21**************
~ '1
Comportamentul implicit, de tip blocant

'CthI_ I Citirea dintr-un canal de comunicaiie funciicneaza in felul urmator:
Acana'ecﬁfme ”'"° — Apelul de citire read va citi din canal $i va returna imediat, fara sa se
M blocheze, numai daca mai este suficienta informaiie in canal, iar in acest caz
Zinilielftgleeﬁﬁﬁgfdeﬁe valoarea returnata reprezinta numarul de ccteii citiii din canal.
Egﬁiégarﬁmenwldeﬁp — Altfel, daca canalul este gcl, sau nu ccniine suiicienta informaiie, apelul de
sﬁgjgedecomumcaiieimre citire read va ramane blocat pana cand va avea suficienta informaiie in canal
isgcaﬂizifecanaieiorde pentru a putea citi cantitatea de informaiie specificata, ceea ce se va intampla
T W in momentul cand un alt proces va scrie in canal.

— Alt caz de excepiie la citire: daca un proces incearca sa citeasca din canal $i
niciun proces nu mai este capabil sa scrie in canal (deoarece tcate procesele
$i-au inchis deja capatul de scriere), atunci apelul read returneaza imediat
valoarea O prin care se semnalizeaza ca “a citit EOF” din canal.

Conc/uzie: pentru a se putea citi EOF din canal, trebuie ca mai intai toate
procesele Sé TnChidé canalul Tn scriere (adica sa inchida descriptorul corespunzator
capatului de scriere).

Meniu de navigare Comunicaiia inter-procese: Canale de comunicaiie anonime $i cu nume 21 /41

***************Ending Page***************

***************Beginning Page***************
***************page number:22**************
~ '1
Comportamentul implicit, de tip blocant (cont)
'Ceeeeeeeel _ I Scrierea intr-un canal de ccmunicaiie funciicneaza in felul urmatcr:
Ml; — Apelul de scriere write va scrie in canal $i va returna imecliat, fara sa se
M * blocheze, numai daca mai este suficient spaiiu liber in canal, iar in acest caz
Zinilieilleeiﬁiﬁifdetip valcarea returnata reprezinta numarul cle ccteii eiectiv scri$i in canal (care poate
Egigﬁmenwl o'eﬁlO sa nu coincida intotdeauna cu numarul ole octeii ce se doreau a se scrie, caci pct apare eventuale ercri l/O).
sﬁgjenedecomumcaiieimre — Altfel, claca canalul este plin, sau nu coniine suiicient spaiiu liber, apelul ole
isgcagiafcanaieiorde scriere write va ramane blocat pana cand va avea suficient spaiiu liber in
T We canal pentru a putea scrie informaiia specificata ca argument, ceea ce se va
intampla in momentul cancl un alt proces va citi din canal.

— Alt caz cle excepiie la scriere: daca un proces incearca sa scrie in canal $i
niciun proces nu mai este capabil sa citeasca din canal (decarece toate
procesele $i-au inchis deja capatul de citire), atunci sistemul va trimite acelui
proces semna/u/ SIGPIPE, ce cauzeaza terminarea fcriata a procesului, fara
8. afi$a insa VFGUl'l mesaj d9 eroare (Nata: versiunile mai vechi cie Linux afi$au “Broken pipe”).

Meniu de navigare Comunicaiia inter-procese: Canale cle comunicaiie anonime $i cu nume 22/41

***************Ending Page***************


***************Beginning Page***************
***************page number:23**************
O O
Comportamentul implicit, de tip blocant (cont)
'"tmducere _ Observaiie: in Iocul primitivelor read ci write din APl-ul POSIX, putem folosi
Zi+ funciiile l/O de nivel inalt din biblioteca stdio pentru a citi din canal (e.g., cu fread,
giﬁgﬁsﬁggrzggzlgeniu i fscanf, $.a.) $i, respectiv, pentru a scrie in canal (e.g., cu fwrite, fprintf, $.a.).
fjiiﬁirlsjgiﬁggea'e _ Si aceste funciii de biblioteca au un comportament implicit blocant, similar cu cel
Extxiidmilptdenp descris mai sus, singura diferenia fiind aceea ca, reamintiii-va, aceste funciii Iucreaza
8:11 comunicatiemtre buffer-izat (i), i.e. folosind un cache local in user-space.
Qgicuariljfecana'elorde Consecinia': modul de Iucru buffer-izat al funciiilor l/O din stdio, poate cauza uneori
Reierimebibiograﬁce erori Iogice (i. e., bug-uri) diiicil de depistat, datorate neateniiei programatorului, care
poate uita sa forieze “golirea” buffer-ului in canal cu ajutorul funciiei fflush, imediat
dupa apelul funciiei de scriere utilizate pentru a scrie acea informaiie in canal.
Si astfel, un proces cititor al acelei informaiii va ramane blocat in apelul de citire, deoarece informaiia
inca nu a ajuns in canal, iar programatorul va cauta cauza blocajului in alta parte, crezand ca
informaiia, pe care o scrisese, a ajuns “instantaneu” (i.e., fa'ra' nicio intairziere sesizabi/a') in canal (i).
Recomandare: acordaii mare ateniie sa nu comiteii acest gen de greseli logice, caci le-am observat de
nenumarate ori, pe parcursul anilor, in programele scrise de studenii.
Meniu de navigare Comunicaiia inter-procese: Canale de comunicaiie anonime $i cu nume 23 / 41

***************Ending Page***************

***************Beginning Page***************
***************page number:24**************
~ '1
Comportamentul de tip neblocant
'“tmdmere Cele descrise mai devreme, despre blocarea apelurilor de citire, respectiv de scriere,
Canaleanonime A . . . I I I I I
Canalecunume ﬁfe in cazul canalulw gol, respectiv plin, corespund comportamentului impIICIt, de tip
Cafjtegsﬁcisomunelpemw i blocant, al canalelor de comunicatie.
am ee ipuri ecanae ’
Caracteristici $i restrictii ale
gjnrjéegft;fejjj$;§?j;jdetip Acest comportament implicit poate fi modificat, pentru ambele tipuri de canale de
blocan . . A . . . A . . .
Cogpirtamenwldeﬁp comunicatle, intr-un comportament de tip neblocant, Situatie in care apelurile de Citire
ne ocant
Sabloanedecomunicaiieintre $i, respectiv, de scriere, nu mai raman blocate in cazul canalului gol $i, respectiv, in
QFOCGSG
Aplcawaiecanaieiorde cazul canalului plin, ci returneaza imediat valoarea -1, satand in mod corespunzator
comunicatie . .
Referinte bibliografice varlablla errno'
Mai mult, putem modifica separatcomportamentul pentru oricare dintre cele doua
capete ale unui canal, nu suntem limitati doar la a schimba simultan comportamentul
pentru ambele capete (l).
in plus, in cazul canalelor cu nume, o deschidere neb/ocanta' a unuia dintre capetele
canalului va reu$i imediat, fara sa mai a$tepte ca vreun alt proces sa deschida celalalt
capat, precum se intampla in cazul deschiderii implicite, ole tip blocant.
Meniu de navigare Comunicatia inter-procese: Canale de comunicatie anonime $i cu nume 24/41

***************Ending Page***************


***************Beginning Page***************
***************page number:25**************
O O
Comportamentul de tip neblocant (cont)
'“imdmere Modificarea comportamentului implicit in ccmportament neblocant se realizeaza prin
Canale anonime . . . v _ V
Canalecunume iﬁfol setarea atributulw D_NDNBLDCK pentru descriptcrul ccrespunzatcr acelw capat a|
Cafjtegsﬁcisomunelpemw i canalului de comunicatie pentru care se doreste modificarea comportamentului.
am ee IQUI'I ecanae ’ ’
Caracteristici $i restrictii ale
gi";§§$;fjf;§i§fdetip Setarea atributului O_NONBLOCK pentru descriptorul dcrit, se poate face astfel:
blocant
ﬁjgopcﬂﬁmenw'deim 1. fie direct Ia deschiderea explicita a canalului, e.g. printr-un apel cle forma:
350213329 de C°mumcaieimre fd_0ut = open ( " canal_fif0" , O_WRONLY i O_NONBLOCK) ;
jjgcuagiljfecana'e'mde care va seta Ia deschiclere atributul 0_NONBLOCK cloar pentru capatul de scriere.
MM; Aceasta modalitate este posibila numai pentru canale cu nume (i.e., ficiere fifo).
2. fie dupa deschiclerea, implicita sau explicita, a canalului, utlizancl primitiva fcntl,
e.g. printr-un apel de forma: fcnt1(fd_0ut, F_SETFL, D_NDNBLUCK) ;
Aceasta modalitate este posibila pentru ambele tipuri de canale.
Exercitiu: scrieti un program prin care sa determinati capacitatea ambelor tipuri de
canale de comunicatie pe sistemul Linux pe care Iucrati.
Rezo/vare: daca nu reu$iti sa-I rezclvati singuri, cititi exercitiile rezclvate [A pipe’s capacity] $i [A fifo’s capacity] prezentate in suportul cle Iaborator.
Meniu de navigare Comunicatia inter-procese: Canale cie comunicatie anonime $i cu nume 25/41

***************Ending Page***************

***************Beginning Page***************
***************page number:26**************
A
lntroducere lntroducere
w Canale anonime
Canale Cu nume IﬁfOI Crearea Ior,l<l;u prlmltlvalplpe .
. . _ Modul ole utlllzare a unul canal anonlm
caraCterISt'C! comune pentru Demo: exemple de comunicatie Tntre doué procese
ambele tlQUi'l de canale ’
Sabloane de comunicaiie intre' Canale CU nume (hf?) _ _ _
grocese Crearea Ior, cu prlmltlva mkf 1f o
Clasificarea $abloane|0r de MOdUI d9 utilizare a unui Canal CU nume
comunicaiie inter-procese Despre persistenta informaiiei dintr-un fisier fifo
Sablonu' de comun'cai'e Deosebiri ale canalelor cu nume faié ole cele anonime
unul-la-unul
$ab|0nu| d9 comunicaiie Caracteristici comune pentru ambele tipuri de canale
grilli-la-Tu/I/ _ _ Caracteristici $i restrictii ale canalelor de comunicatie
mﬁigfugjlcomun'cat'e Comportamentul implicit, ole tip blocant
Sablonul de comunicaﬁe Comportamentul ole tlp neblocant
mum/3mm?’ Sabloane de comunicatie intre procese
Aplicaiii ale canalelor de Clasificarea sabloanelor de comunicaiie inter-procese
wie— Sablonul ole comunicatie unul-la-unu/
Sablonul de comunlcatle mu/ﬂ-la-unu/
Sablonul ole comunicatie multi-la-mu/Ii
Aplicatii ale canalelor de comunicaiie
Aplicatia #1: implementarea unui semafor
Aplicaiia #2: implementarea unei aplicaiii client/server
Referinte bibliografice
Meniu de navigare Comunicatia inter-procese: Canale de comunicaiie anonime $i cu nume 26/41

***************Ending Page***************


***************Beginning Page***************
***************page number:27**************
~ Q
Clasificarea $abloanelor de comunicatie inter-procese
'“tmdmere Dupa numarul de procese “scriitori” $i, respectiv, de procese “cititori” 0e utilizeaza un
Canale anonime I I I I I A
Canalecunume Iﬁfol anumlt canal de comunlcajue (anonlm sau cu nume) pentru a comunlca Intre ele,
Cafjtegsﬁcigomunelpemw putem diferentia urmatoarele sabloane de comunicatie inter-procese:
am ee IQUI'I ecanae ’ ’ ’
Sabloane de comunicatie Tntre I I I I II I I II
W I Comumcafue unul-la-unul: canalul este foIQSIt de un smgur proces scrutor pentru
2133553: $322125? a transmite date unui singur proces “cititor”.
unul-la-unul . . . . . I‘ . . ,,
Sablonwdecomunicaue I Comunlcafue unul-la-mu/Zl: canalul este fo|05|t de un smgur proces scrlltor pentru
unul-la-mulfi
mgjjjjfomumcaﬁe a transmlte date mal multor procese “Cltltorl”.
Ziﬁﬁ;?',,jj;°m“mca“e I Comunicatie mu/fi-la-unul: canalul e folosit de mai multe procese “scriitori” pentru
fgﬁiizjfecana'e'°rde a transmite date unui singur proces “cititor”.
MM; I Comunicatie mu/fi-la-mu/fi: canalul e folosit de mai multe procese “scriitori” pentru
a transmite date mai multor procese “cititori”.
Meniu de navigare Comunicatia inter-procese: Canale de comunicatie anonime 5i cu nume 27/41

***************Ending Page***************

***************Beginning Page***************
***************page number:28**************
O O
$ablonul de comunicatie unuI-Ia-unul
'"tmducere Comunioatia unul-la-unu/ reprezinta sablonul oel mai simplu, neridioanol probleme
Canale anonime . . . I I I I A I V
Canaiecunumei/fo; oleoseblte de Implementare. D|n aoest motlv, este sl oel mal foloslt |n praotloa.
$135331?3333,2359“ a Exemple: oele oloua programe demonstrative prezentate anterior, in seotiunea olespre oanale anonime,
Sabloane de comunicatieintre $9 incadreazé. Tn aCGSt $ab|0n de Gomunicatie.
QFOCGSG
ggfnsfjﬁjgfgfrji'fﬁlge Demo: exeroitiile rezolvate [’Produoer-oonsumer’ pattern #1, (v2, using fifos for IPC)] si, respectiv,
Sabijnyldicomunicatie [Producer-consumer’ pattern #2, (v2, using fifos for |PC)] din suportul online de laborator ([3]),
Sabllzniildipomunicaﬁe ilustreaza alte oloua programe care, fieoare in parte, utilizeaza un canal cu nume pentru comunioatia
Sablonuldeoomunicatie unul-la-unu/ intre oloua procese, unul cu ro| ole produoator, iar oelalalt cu rol ole oonsumator.
multi-la-unu/
Sablonulde comunioatie .k * *
multi-la-multi
QEQCuaiilillcana'e'mde Celelalte trei sabloane riolioa anumite probleme de sinoronizare, datorate aooesului
MM; oonourent aI mai multor prooese Ia oate unul, sau Ia ambele, olintre oapetele oanalului,
probleme ole oare trebuie sa se tina oont Ia implementarea aoestor sabloane.
Vom treoe in revista, pe rand, aoeste probleme de sinoronizare, oe pot avea efeote
asupra integritétii date/or transmise prin canal (i.e., “ooruperea” mesajelor).
Meniu de navigare Comunioatia inter-prooese: Canale de oomunioatie anonime si cu nume 28/41

***************Ending Page***************


***************Beginning Page***************
***************page number:29**************
O O
$ablonul de comunicatie unuI-Ia-mulﬂ

'“tmducere Factori ce pot genera anumite probleme de sincronizare, cu efecte asupra integrita'ﬂi date/0r:

Canale anonime

Canalecu numegfifog I lung/mea mesajelor-

Caracteristici comune pentru

—‘°—Zm§e'e“:d't At * — mesaje de lungime constanta'

W Nu ridica probleme deosebite — fiecare mesaj poate fi citit atomic (i.e., dintr-o

213:2? Z'ZLTZZZYZZEZG data, printr-un singur apel read).

unul-la-unul

jjjggjfujfomumcaﬁe — mesaje de lungime variabi/a

Ziiﬁgiijf°mumcaﬁe Pot apare probleme ole sincronizare, deoarece mesajele nu mai pot fi citite

Sablonul de comunicatie _ , , _

mu/ﬂ-Ia-mu/r/ atom/c. Solufua este foloswea mesajelor formatate astfel:

iEr'LCuaﬁiLZl?eca"a'e'°rde MESAJ = HEADER + MESAJUL PROPRlU-ZIS ,

——9—Re‘e““tebib"° ‘am header-ul fiind un mesaj de Iungime fixa ce conﬁne lungimea mesajului
propriu-zis.
Protoco/u/ de comunicafie utilizat: sunt necesare 2 apeluri read pentru a citi
un mesaj Tn Tntregime, de aceea trebuie garantat accesul exclusiv Ia canal
(folosind, spre exemplu, blocaje pe fi$iere).

Meniu de navigare Comunicatia inter-procese: Canale de comunicatie anonime $i cu nume 29/41

***************Ending Page***************

***************Beginning Page***************
***************page number:30**************
O O
$ablonul de comunicatie unuI-Ia-mulﬂ (cont)

'“tmducere Factcri ce pot genera anumite probleme de sincronizare, cu efecte asupra integrita'ﬂi date/0r:

Canale anonime

Acana'ew "ume ﬁfo I destinataru/ mesajelor:

Caracteristici comune entru

% — mesaje cu destinatar oarecare

W Nu riclica probleme deosebite — fiecare mesaj poate fi citit $i prelucrat de

21321:? ii: QTZZZZEZZZG oricare clintre procesele “cititori”.

SbEir'nd/th — mesaje cu destinatar specificat

Ziggﬂjjf°mumcaﬁe Trebuie asigurat faptul ca mesajul este citit exact de catre “cititcrul” caruia Ti

1175;13ij omunicaﬁe era destinat. Solutia — am putea folosi mesaje formatate astfel:

iEr'LCuaﬁiLZl?eca"a'e'°rde MESAJ = HEADER + MESAJUL PROPRlU-ZIS ,

MM; header-ul continancl un identificator aI destinatarului.
Pentru citire, s-ar putea aplica protocclul cle comunicatie discutat la mesaje de lungime
variabila. Insa, apare 0 prob/ema' sup/imentara: claca un “cititor” a citit un mesaj care nu-i era
destinat lui, cum facem sa-l Iivram celui caruia Ti era destinat? O solutie ar fi sa Tl scrie Tnapoi
Tn canal, $i apoi va face o pauza aleatcare Tnainte de a Tncerca sa citeasca din nou din canal.
Nota': aceasta solutie poate suferi cle fencmenul de starvation.

Meniu de navigare Ccmunicatia inter-procese: Canale de comunicatie anonime $i cu nume so / 41

***************Ending Page***************


***************Beginning Page***************
***************page number:31**************
O O
$ablonul de comunicatie muIﬂ-Ia-unul

'“tmducere Factori ce pot genera anumite probleme de sincronizare, cu efecte asupra integrita'ﬂi date/0r:

Canale anonime

Canalecu numegfifog I lung/mea mesajelor-

Caracteristici comune pentru

—‘°—Zm§e'e“:d't At * — mesaje de lungime constanta'

W Nu ridica probleme deosebite — fiecare mesaj poate fi scris atomic (i.e., dintr-o

213:2? Z'ZLTZZZYZZEZG data, printr-un singur apel write).

unul-la-unul

jjjggj'ndujfomumcaﬁe — mesaje de lungime variabi/a

ZZ?,!Z,ZELSZ,C°m““ica“e Trebuie indicata “cititorului” lungimea fiecarui mesaj. Solutia este folosirea

Sablonul de comunicatie _

mu/ri-Ia-mu/r/ mesajelor formatate astfel:

iEr'LCuaﬁiLZl?eca"a'e'°rde MESAJ = HEADER + MESAJUL PROPRlU-ZIS ,

——9—Re‘e““tebib"° ‘am header-ul fiind un mesaj de Iungime fixa ce conﬁne lungimea mesajului
propriu-zis.
Nu ridica probleme deosebite — fiecare mesaj, astfel formatat, poate fi scris
atomic, printr-un singur apel write, deci nu trebuie garantat accesul exclusiv
Ia canal.

Meniu de navigare Comunicatia inter-procese: Canale de comunicatie anonime $i cu nume 31 /41

***************Ending Page***************

***************Beginning Page***************
***************page number:32**************
O O
$ablonul de comunicatie muIﬂ-Ia-unul (cont)
ac ori ce p0 genera anumi e pro eme e sincronizare, cu e ec e asupra in egri a’ ii a e 0r:

‘ntmducere F t t t bl d f t t t I d t I
Canale anonime
Canalecu numegfifog I destinataru/ mesajelor-
Caracteristici comune pentru
% * — mesaje cu expeditor oarecare
W Nu ridica probleme deosebite — fiecare mesaj poate fi citit de procesul “cititor”
213:2? Z'ZLTZZZYZZEZG ei prelucrat Tn acelaei fel, indiferent de Ia care dintre procesele “scriitori”
unul-la-unul
jjj}jgflr'nduifomun'cat'e provme acel mesa].
Ziﬁlﬁgﬂjjf°mumcam — mesaje cu expeditor specificat
Sablonuldecomunicatie , , V . A. . . v H . . .,, H .. ,, .
mum-Ia-muw Trebwe aSIgurat ca mesajul || Indlca eltltorulw care este scrutorul care | I-a
ﬁcﬁlillcana'e'm trimis. Solutia — mesaje formatate Tn felul urmator:
M MESAJ = HEADER + MESAJUL PROPRlU-ZIS,

header-ul continand un identificator a| expeditorului.

Nota': scrierea mesajului astfel formatat se va face printr-un singur apel

write, Ia fel ca Ia mesaje de lungime variabila.

Meniu de navigare Comunicatia inter-procese: Canale de comunicatie anonime $i cu nume 32/41

***************Ending Page***************


***************Beginning Page***************
***************page number:33**************
O O

$ablonul de comunicatie mulﬂ-Ia-mulﬂ

'“troducere Problemele ole sincronizare ce pot apare in cazul acestui sablon, pot fi cauzate de oricare olintre factorii

w discutati la sabloanele unul-la-mu/ri si mu/ri-la-unul:

Canale cu nume (fifo)

Caracteristici comune pentru I lungimea mesajelor

mm * I expeditoru/ mesajelor

$50233? de C°mu"'°a"e "we I destinataru/ mesajelor

Clasificarea sabloanelor de . . ..

comunicaiieimer-procese Tratarea acestora se poate face prin comblnarea solufuilor prezentate Ia sabloanele precedente.

Sablonul de comunicaiie

unul-la-unul

fif}i',§i',,ji,c°m“"'ca“e Nora’: pentru simplitatea programarii, uneori se poate prefera inlocuirea unui singur

Sablonul de comunicaiie , . . . . .

mum-em canal foloslt pentru comunlcajue unul-la-mu/il, cu mal multe canale folosne pentru

Sablonul de comunicaiie

muirr'mui’ comunlcafue unul-la-unul, /.e. cu cate un canal pentru flecare proces “cltltor” eXIstent.

Aplicaiii ale canalelor de . . I I I I I I

m_t— Evldent, se poate proceda s|m||ar sl pentru sabloanele unul-la-mu/r/ sl mu/il-la-mu/il.

Referinte bibliografice . . . . c . .
Demo: a se vedea programele suma_p1pes.c s| suma_f 1fos . c ([2]), care reprezmta rescrlerl ale
programului suma_files . c din lectia practica despre fork si wait, prin Tnlocuirea fisierelor obisnuite
cu canale (anonime si, respectiv, cu nume) pentru comunicaiiile olintre supervisor si workeri.
Comunicatiile dinspre workeri spre supervisor folosesc sablonul mu/ri-la-unul. in schimb, sablonul
unul-la-mulri pentru comunicaiiile dinspre supervisor spre workeri l-am implementat pe baza ideii de
mai sus. (Pentru explicatii suplimentare despre aceste doua programe, puteti consulta exemplele

Meniu de navigare [FifthDemo — suma_pipes] si [SixthDemo — suma_fifos] din suportul online ole laborator ([3]). ) 33/41

***************Ending Page***************

***************Beginning Page***************
***************page number:34**************
A
lntroducere lntroducere
Canale anonime Canale anonime
Canale Cu nume IﬁfOI Crearea Ion-cu prlmltlvalplpe .
. . _ Modul cle ut|l|zare a unul canal anonlm
caraCterISt'C! comune pent“ Demo: exemple ole ccmunicatie intre doua procese
ambele tlQUi'l de canale ’
Sabloane de comunicaiie intre' Canale CU nume (hf?) _ _ _
grocese Crearea lor, cu prlmltlva mkf 1f o
_ _, Modul ole utilizare a unui canal cu nume
Apllcaiu ale canalelor de . . . . . . . .
comunicatie Despre per5|stenia informailel dmtr-un f|$|er f/fo
m Deosebiri ale canalelor cu nume faia cle cele anonime
um“ semafor Caracteristici comune ntr mb l ti ri d n l
Aplicaiia #2: implementarea _ _ _ _ Pen u a e e pu e ca_ a _e
unei apucatii Ghent/server Caracteristici $| restrict“ ale canalelor de comunlcafue
R f _ bbr f Comportamentul implicit, ole tip blocant
e erlnte | logra Ice -
Comportamentul cle tlp neblocant
Sabloane de comunicatie intre procese
Clasificarea sabloanelor cle ccmunicaiie inter-procese
Sablonul ole comunicaiie unul-la-unu/
Sablonul cle comunicaiie unul-la-mu/ii
Sablcnul cle comunicaiie multi-la-unu/
Sablonul ole comunicaiie mu/fi-la-mu/ii
Aplicaiii ale canalelor de comunicaiie
Aplicaiia #1: implementarea unui semafor
Aplicaiia #2: implementarea unei aplicaiii client/server
Referinie bibliografice
Meniu de navigare Comunicaiia inter-procese: Canale de comunicaiie anonime $i cu nume 34/41

***************Ending Page***************


***************Beginning Page***************
***************page number:35**************
~ '1

Aplicalia #1: implementarea unui semafor

'“tmdmere Cum am putea implementa un semafor folosinol canale fifo ?

Canale anonime

Awna'emume ﬁlo O posibila implementare ar consta Tn urmatoarele idei:

Caracteristici comune pentru

ambeletiguride canale ' I I I I I I I I I I V

Sabloanedecomumcaﬁeme lnljuallzarea semaforulw s-ar reallza prln crearea unul f|$|er f/fo ole catre un proces cu

QFOCGSG . . . . -

Aplcamalecanalelorde rol de superwzor (acesta poate fl or|care ollntre procesele ce vor folosr acel semafor,

——le?cuarl:§a§iimplementarea sau poate fi un proces separat).

unuisemafor

A licaia 2: im lemen area . . . . . A v

uﬁeialllllGrim/seller Acest proces superwzor va scrle |n|jual |n canal 1 octet oarecare, olaca e vorba de un

——9—Re‘e""teb‘b"° ‘aﬁce semafor binar (sau n octeli oarecare, olaca e vorba de un semafor general n-ar).
lar a|ooi va pastra deschise ambele capete ale canalului pe toata durata de execulie a
proceselor ce vor folosi acel semafor (cu scopul ole a nu se pierole pe parcurs
informalia din canal, olatorita inexistenlei la un moment clat a macar unui proces care
sa aiba deschis macar vreunul olintre capete, conform celor oliscutate anterior legat ole
|oerioao|a de retenlie a informaliei lntr-un canal fifo).

Meniu de navigare Comunicatia inter-procese: Canale de comunicafrie anonime 5i cu nume 35/41

***************Ending Page***************

***************Beginning Page***************
***************page number:36**************
O O

Aplicatia #1: implementarea unui semafor (cont)

'“"°du°e‘e Operatia wait va consta Tn citirea unui octet din fieierul fifo.

w Mai precis, Tntai se va face deschiolerea lui, urmata ole citirea efectiva a unui octet, $i apoi eventual

anaecu numeg i0) A . . . .

C ' H |nch|derea f|$|erulu|.

Caracteristici comune pentru

am ee i uri ecanae ' . . A . . A . . .

—p—Sa:|0'antede:Omumc'aﬁemtre Operatla elgnal va consta |n scnerea unu| octet |n flelerul f/fo.

M Mai precis, Tntai se va face oleschiolerea lui, urmata ole scrierea efectiva a unui octet, $i apoi eventual

fjicuagigjifecana'e'°r de Tnch iolerea fieieru l u i.

Aplicatia #1: implementarea ..

uml senator Observatll:

Apllcat|a#2_tlrnplementarea . . . ’ A . . . .

‘me'ap""al"""e"”se”er I) c|t|rea se va face, |n moolul Impllclt, blocant, ceea ce va aSIgura aeteptarea

Referinte bibliografice . . A . . . V . A H
procesulul Ia punctul ole |ntrare |n sectlunea sa cr|t|ca atuncl c|no| semaforul este pe
roeu”, adica olaca canalul fifo este gol.
ii) scrierea nu se va |outea bloca (cu conolitia ca n-ul semaforului general sa nu
depaeeasca capacitatea maxima pe care o putem configura pentru un canal).
Tema': implementati Tn C un semafor binar pe baza ioleilor de mai sus $i scrieti un program demonstrativ
Tn care sa utilizati semaforul astfel implementat pentru asigurarea excluderii mutuale a unei sectiuni
critice ole cool (pentru “inspiratie” Tn scrierea programului demonstrativ, reveoleti problemele de
sincronizare oliscutate Tn cursurile teoretice #5 $i #6).

Meniu de navigare Comunicatia inter-procese: Canale de comunicatie anonime $i cu nume 36/41

***************Ending Page***************


***************Beginning Page***************
***************page number:37**************
~ Q
Aplicatia #2: implementarea unei aplicatii client/server
'“"°du°e‘e O aplicatie cu arhitectura' de tip client/server este compusa din doua componente:
Canale anonime
Canaiecunumeiﬁfo, I serverul: este un program care dispune de un anumit numar de servicii (i.e.,
ZZTQEZSQE?ZZTZQZIZMU functii, operatii, etc.), pe care Ie pune Ia dispozitia clientilor.
SléfofljjgedeC°mum°aieintre I clientul: este un program care “interogheaza” serverul, solicitandu-i efectuarea
ﬁji°uagigjtfe°ana'e'°rde unui serviciu (dintre cele puse Ia dispozitie de acel server).
ﬁiifiiiiigimp'ememama Exemp/u: Browserele pe care le folositi pentru a naviga pe INTERNET sunt un exemplu de program
ﬁiifiiliiiiLTZLT/Ziiiiiea client, care se conecteaza Ia un program server, numit server de web, solicitandu-i transmiterea unei
Referintebibliografice pagini web, care apoi este afisata Tn fereastra grafica a browserului.
lmp/ementarea unei ap/icatii de tip client/servero puteti face Tn felul urmator:
Programul server va ii rulat Tn background, si va sta Tn asteptarea cererilor din partea
clientilor, putand servi mai multi clienti simultan.
lar clientii vor putea fi rulati mai multi simultan (din acelasi cont si/sau din conturi
utilizator diferite), si se vor “conecta” Ia serverul rulat Tn background.
Nota: pot exista, Ia un moment dat, mai multe procese client care Tncearca, fiecare independent de
celelalte, sa foloseasca serviciile puse la dispozitie de acelasi proces server.
Meniu de navigare Comunicatia inter-procese: Canale de comunicatie anonime si cu nume 37/41

***************Ending Page***************

***************Beginning Page***************
***************page number:38**************
O O
Aplicatia #2: implementarea unei aplicatii client/server (cont)

'“tmducere Observatie: in realitate, programul server este rulat pe un anumit calculator, iar clientii pe diverse alte

w calculatoare, conectate la INTERNET, comunicatia realizandu-se folosind socket-uri, prin intermediul

w retelelor de calculatoare.

Carac erisicicomune en ru A c . . c . . . . . . A

ambeltetigtiridecanal: t lnsa putetl slmula aceasta “realrtate” folosmd comunlcatle prln canale cu nume sl executand toate

Sabloanedecomunicatierntre procesele (i.e., serverul si clientii) pe un acelasi calculator, eventual din conturi utilizator diferite.

QFOCGSG

5531,05,;grgana'e'“ de Tipurile de servere existente in realitate, d.p.d.v. al servirii “simultane” a mai multor

A licatia #1: im lementarea . . A A v ..

Xﬁﬁisgmgizor pl clientl, se Impart |n doua categoru:

picatla :lmpementarea
uneia licatii client/server , ,
.p . . . I server Iterat/v

Referinte bibliograflce
cat timp dureaza efectuarea unui serviciu (i.e., rezolvarea unui client), serverul
este blocat: nu poate raspunde cererilcr venite din partea altor clienti. Deci nu
poate rezolva mai multi clienti in acelasi timp!

I server concurent
Pe toata durata de timp necesara pentru efectuarea unui serviciu (i.e., rezolvarea
unui client), serverul nu este blocat, ci poate raspunde cererilcr venite din partea
altor clienti. Deci poate rezolva mai multi clienti in acelasi timp!
Meniu de navigare Comunicatia inter-procese: Canale de comunicatie anonime si cu nume 38/41

***************Ending Page***************


***************Beginning Page***************
***************page number:39**************
~ '1
Aplicatia #2: implementarea unei aplicatii client/server (cont)
'“imdmre Detalii Iegate de implementare:
Canale anonime
Ml; I Pentru implementarea unui server de tip iterativ este suficient un singur proces
Caracteristici comune pentru I A . I . I
M secvential. In schimb, pentru implementarea unur server ole tip concurent este
Sabloane de comunicatie intre _ _ _ . V
pocese— nevme de mar multe procese secventiale: un proces superwsor, care asteapta
A licatii ale canalelor de . . . . . . . . v
C§municaie sosirea cererilor din partea clientilor, si Ia fiecare cerere sosita, eI va crea un nou
Aplicatia#1:implementarea I I . I I III I I
XBiLZZSZZZmpiememarea proces flu, un worker care va fl responsabil cu rezolvarea propriu-ZIsa a clientulw
RIpI'thI'tI respectiv, iar supervisor-ul va relua imediat asteptarea sosirii unei noi cereri, féré
eerine l IOQI'alCe

Sé astepte terminarea prOCeSUIUi fiu. (Sau, alternativ, se poate implementa printr-un singur

proces multi-threaded.)

I Pentru comunicarea intre procesele client si procesul server este necesar sé se
utilizeze, drept canale d9 comunicatie, fisiere fifO. (Motivul: nu se pot folosi canale
anonime deoarece procesul server si procesele clienti nu sunt inrudite prin fork/exec.)

I Permisiunile fisierelor fifo folosite pentru comunicatie trebuie configurate adecvat,
astfel incét sé permité executia proceselor client din conturi utilizator diferite (i).

Meniu de navigare Comunicatia inter-procese: Canale de comunicatie anonime si cu nume 39/41

***************Ending Page***************

***************Beginning Page***************
***************page number:40**************
~ Q
Aplicatia #2: implementarea unei aplicatii client/server (cont)
'“imdmere I Un alt aspect legat tot cle ccmunicatie: serverul nu cuncaete in avans clientii ce se
Canale anonime . . .. A . . _ V V
Canalecunume ﬁfe vor conecta la el pentru a le cferi serwcu, |n schimb clientul trebwe sa cuncasca
Cafjtegstcisomunelpemw serverul la care se va conecta pentru a beneficia de serviciul oferit cle el.
am ee IQUI'I ecanae
SéfokZlZZQedeC°mum°aiiem Ce inseamna aceasta d.p.cl.v. practic ?
Aplicatii ale canalelor de _ . A _ _
W Serverul va crea un canal f/fo cu un nume fixat, cunoscut |n programul client, $| va
p ica,|a I Imp emen area
XEiLZZZZZZmpiememarea aetepta scsirea informatiilcr pe acest canal.
unei aplicatii client/server _ _ _ _
Rf .t W. f. Un client carecare se va conecta la acest canal f/fc cuncscut SI va transmite
eerine l iograice ’
informatii cle identificare a sa, care vcr fi fclcsite ulterior pentru realizarea efectiva
a ccmunicatiilor implicate de serviciul solicitat (cel mai probabil va fi nevoie sa
utilizati canale suplimentare, particulare pentru acel client, pentru a nu se
“amesteca” intre ele comunicatiile destinate unui client cu cele destinate altui
client ccnectat la server in acelaei timp cu primul ).
Tema': implementati un joc multi-p/ayer “in retea”, pe baza ideilcr descrise mai sus.
Meniu de navigare Comunicatia inter-procese: Canale de comunicatie anonime $i cu nume 40/41

***************Ending Page***************


***************Beginning Page***************
***************page number:41**************
O O
Bibliografie obligatorie
'“tmducere [1] Cap. 5, §5.1,§5.2,§5.3 si §5.5 din oartea “Sisteme de operare — manual pentru ID”, autor
w C. Vidrascu, editura UAIC, 2006. Nota: este acoesibila, in format PDF, din pagina disoiplinei
Canale cu numegfifo) “Sisteme de Operare”2
Caracteristioi comune pentru
w 0 https : //profs . info . uaic . ro/"vidrascu/SO/books/ManualID-SO . pdf
Sabloane de comunicatie intre
M I I I I o I I o
Aplicatiialecanalelor de [2] Programele demonstrative amintite pe paroursul aoestei prezentari pot fl desoaroate de la:
:Tuffatbr f 0 https : //profs . info . uaic . ro/Nvidrascu/SO/cursuri/C-programs/pipe/
eerine l iograioe
0 https : //profs . info . uaic . ro/Nvidrascu/SO/cursuri/C-programs/fifo/
[3] Suportul online de laborator asooiat aoestei prezentari:
0 https : //profs . info .uaic .ro/Nvidrascu/SO/1abs/suport_1ab12 .html
Bibliografie suolimentara:
[4] Cap. 44 din oartea “The Linux Programming Interface : A Linux and UNIX System Programming
Handbook”, autor M. Kerrisk, editura No Starch Press, 2010.
0 https : //profs . info . uaic . ro/Nvidrascu/SO/books/TLPI 1 .pdf
[5] POSIX API: man 2 pipe, man 2 mkfifo, man 2 fontl.
Meniu de navigare Comunioatia inter-prooese: Canale de oomunioatie anonime si cu nume 41 /41

***************Ending Page***************





