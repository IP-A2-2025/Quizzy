***************Beginning Page***************
***************page number:1**************
‘\ Gavnlut Dragos

***************Ending Page***************

***************Beginning Page***************
***************page number:2**************
> Destructor
> C/CH operators
S U m ma ry > Operators for classes
k > Operations with Objects

***************Ending Page***************

***************Beginning Page***************
***************page number:3**************
l Destructor

***************Ending Page***************

***************Beginning Page***************
***************page number:4**************
Dest ructor
> A destructor function is called whenever we want to free the memory that an
object occupies‘
> A destructor (if exists) is only one and has no parameters.
> A destructor can not be static
> A destructor can have diiferent access modiﬁers (publiclprivate/pmtected).
APP-CPD
SliSS Dill ‘
¢ a
Privlte: x
m x; 1‘
publit: x
nae ~ a ,,
l7;u::l7au(} 1 ml!) ¢ ) l
Darezzwauﬂ i i
vuid miiﬂl)
t
v.1! a;
)

***************Ending Page***************

***************Beginning Page***************
***************page number:5**************
Dest ructo r
> The most common usage of the destructor is to deallocate the memory that
has been allocated within the constructor or other functions‘
APP-CPP
(1-5; 51'1";
r
¢har - text;
Publis:
Striﬂllﬂﬂﬂst (nip - s)
( I!!! - “Eu (harls!r)en(s) . 11;
mem¢PY(IEXI, S, S!r1!n($7 ~ :7;
)
-5(riﬂ|l)
r
at‘!!! ‘Ext;
text . nullpir;
)
)
void ma1ﬂ(}
r
Strinl ~ S Z new Strinll“!~‘“);
// sumo Hvlritiqns
mm 5;
i________________________________________________

***************Ending Page***************

***************Beginning Page***************
***************page number:6**************
Dest ructor
> This code will not compile‘ The destructor of class Date is pnvate.
ADPIPP
‘1:55 Date
<
PrivaKQ
in! x,
publxc
Dat9()‘
EH!!!
.Dz<1<v,
b
Date Ditél) inuu) ‘ ... >
Date ~Dat§() < ... >
WM MEMO enor £2245: ‘Datex'Datek cannot access prvvate member
< me a declared in class ‘Dale’
> ' note: compuer has generated ‘Data: Date‘ here
note: see declaralvon 01‘Dale ,

***************Ending Page***************

***************Beginning Page***************
***************page number:7**************
Dest ructor ‘
> This code will compile r because the destructor will (even if pn'vate) is not be ‘
called {the object is created in the heap memory and it is never deallucatedy l
ADPIPP I
slass Date
( l
Privlte:
in! x;
mm: l
men: \
l
y “mu;
D;I:::Darl(7 z xllll7 ( ... 1
I Dﬂezz-Ditlll ( ...)
vain m.1»<>
t
Din q - m mm;
)—

***************Ending Page***************

***************Beginning Page***************
***************page number:8**************
Dest ructor
> This code will not compile because “delete d" call wtll attempt to use a
private destructon

ADPIPP

‘1:55 Date

<

private
‘he x,

publxc
Dat2()e

EH!!!
.Dzeenv,

b

Date Datél) inuu) t ... >

Date ~Dat2() < ... >

void ma!"(7

( error C1248: 'DaleII~DaLe‘I cannot access private membel
. e ~. e "e" n=¢e4>, ‘
declared m ctass Date

> note: compller has generated ‘Date: 'Date‘ here

nme: see dedarzuun of 'Date“

***************Ending Page***************

***************Beginning Page***************
***************page number:9**************
Dest ructor
> This code will compile‘ The destructor is pn'vate , but it can be access by a
method from its class (In this case DestroyData].
ADPIPP
‘liSS Dill
(
Privlta:
in! x;
uuuaacz
mnqw
mu: W14 u-mmmwm q);
Privlta:
_ﬂl!l()$
L
nasmaﬂ71x0n7(~u)
Dﬂlzz-DIKIU ( m)
wan unuwasu-uyunlluna ~11
(
is‘!!! a;
)
vuid mi1n4>
(
v.1! ~¢ - "A" n.!l<:;
Darezzhesrruyhara(17;
)

***************Ending Page***************

***************Beginning Page***************
***************page number:10**************
Destructor prp 4
. . . chss me 4 1
Lets conslder the follnwmg class: mm: 1
"emu 4 "ma-‘em nus called \n“); ) r
h 1
The destrucmr is called when: I‘
A. When program ends, (or every global vanahle ‘1
=
m "no 4 mm w; r 4
a Al'l- end-Wm .-~. .. ....e ‘1
m "v.41 4 ‘
m d; 1
New u;
>
c When the execution exlsts a scov (or vanable deﬁned wlthln a speciﬁc scope)
m nah-1) 4
a" um (earerdarwr 4
M: 4;
1
rewm a;
n When the deln: D ramr is called Over e hes allocated instance
m. ~e - r... m4);
elm. d;
Mum a;

***************Ending Page***************

***************Beginning Page***************
***************page number:11**************
Destructor
> Objects are destroyed in the reverse order oi their creation (similar to the
way a stack works —) first created is the last destroyed)‘
App.cpp Outguts:
mass Yrui dim: Dale
public:
~YreeU ( pmmmm mm"); ) dtor: Animal
15m m‘ tltor: Cai
publiil 11ml: Tree
.{sr41 t printfl“dterz (ir\n“)? y
1;.” m.) t
public:
~lnxmil() i prlnlf(“dlurz ln1m11\n“71 i
ii.” M
t
vie; ‘z
IIHHIIIIIIIII
Animil s~
WV c
.D.tt<> t pr!n!f(“d!nr: DI!e\n“)2 t
i
vuid mii"()
t
v.1! a;
)

***************Ending Page***************

***************Beginning Page***************
***************page number:12**************
> ObJEClS are destroyed m the reverse order of therr creation (sirmlar to the
way a stack WOI'kS —> ﬁrst created v'S the last destroyed].
APPLPP Outguts:
$3ng < dtor: Date
J“! mm “dlur Yrqu“ , “m “"‘M'
y, (7 ( p ( ) ) mov mm ptr‘ [this],ecx
=13; m t push offset Sm"; "dtur: Date\n"
P“ *‘ “ or ‘r n“ call _printf
>, a <7 r p 1mm“ c \ 7,) a“ “v.4
<1.“ Animal r
M11; 1<>< r "m ¢= r M m) > mov EIXAwnrd ptr [this]
} m p 1 a m r add ECX,Z
(513$ Dan call Animalz:-Anima1
r
2'89 t’ mov ecx,dword ptr [this] /
Jim; ., add Hm
pun)“ (all Car: :~Czr‘
.Dite<> r nr!nlf(“d(ur Di(e\n“)’ )
3;“ mm mov ecxmword Dtr [this]
( call Tree: 2-Tree
“It! a,
v

***************Ending Page***************

***************Beginning Page***************
***************page number:13**************
Destructor
> If the destructor is missing, but the class has data members that have their
own destructors, one will be created by delault !
A .c
public: “ “ 11ml: r'lmmill
); ~Yru() ( Imam atm- Yru\|| 1, > dtm; (a,
d r 1' > v
W23‘? ( Al'UYY TreP
.{irl> ¢ printfl“dturz <ir\n“>; y
1;.” m.) (
Puh!ie:
~lnimil() l prinlf(“dlurz Animil\n“71 l
ii.” M
t
lliiillill
{1r ‘z
Animal i~
WV c
)
vain main(7
l
am a;
)

***************Ending Page***************

***************Beginning Page***************
***************page number:14**************
Dest ructor
> Let's analyze the followmg code. Each abject created has Its unique ID‘ Upon
execution the following Code will output:
APP-CPD
‘Ht globalild Z a,
(lass Dan Outputs:
< V
m m, ctal vd: 1
.D1<t<> < prin(f(“d(ur 14 Xd\n“, 1a); >
b
VD,“ mitnt>
<
nit: ~¢ Z new u.t=<>,
¢t1t<t a,
‘kt y

***************Ending Page***************

***************Beginning Page***************
***************page number:15**************
Let's ahatyze the tcltdwrhg cdde. Each object created has rts unique ID. Updh
executlon the following Code wvll output:
vvr gluhalrm e e.
class Dam Outputs:
t
mt ,a. ctur rd: 1
‘"“Mélterr r graham“. m . grassrrra. pmmm 1d saw. my, > “midi Z
mud) t amount“ Ad zdth“, my, ) ctol' id: 3
iém amt) ctor rd: 4
t We ‘a . m- An array of 5 rhstahces of er rd; 5
delete a, type Data rs created. dtdr ‘d. 1
>
Thvs program writ crash as only the ﬁrst object rh the “d” array rs destrdyed.
And rt is hdt rh the rrght drder anyway.

***************Ending Page***************

***************Beginning Page***************
***************page number:16**************
Let's anatyze the foltowing code. Each object created has its unique ID. Upon
execution the fotlowlng Code wilt output:
inc ermine e e.
class Dam Outguts:
t .
int in, ctor id: 1
enauw) t Drlnltwar Ad mn“, m, ) ctor id: 3
3;», mt) cwr id: 4
k Date ~ e View Dat5[5]r ctor ‘d: 5
adenoid, dtor id: 5
> dtor id: 4
dtor td: 3
Now the program runs correctly. dtor ‘d. Z
Whenever an array of instances is created into the heap, use dtor id: 1
deleteﬂ operator to destroy rt and not delete operator,
delete[] opcrator wilt catt the dcstructor function (if anyt for cvcry ob1ect W
the array in the reverse order (starting trorn the tast and rnoving torwerd to
the ﬁtSt).

***************Ending Page***************

***************Beginning Page***************
***************page number:17**************
l C/C++ operators

***************Ending Page***************

***************Beginning Page***************
***************page number:18**************
Operators
> Depending on that operators necessary number of parameters there are:
a Unary ‘a
a‘ Binary
e Ternary
~z~ Multi parameter
> Depending on the operation type, there are:
- Arithmetic
~z~ Relational
a Logical
- Bitwise operators
~z» Assignment
,, Others
r Depending on the overloading possibility ,
~:» Those that can be overloaded
,, Those that can NOT be overloaded

***************Ending Page***************

***************Beginning Page***************
***************page number:19**************
Arithmetic operators i
+ Binary Yes A + B Value/ reference
- Binary Yes A - B Value! reference
‘ Binary Yes A ' B Value/ reference
/ Binary Yes A/ B Value/ reference
96 Binary Yes A 96 B Value! reference
++ (post/pre-fix) Unary Yes A++ or ++A Valuel reference
-- (post/pre-fix) Unary Yes A-- or --A Value/ reference

***************Ending Page***************

***************Beginning Page***************
***************page number:20**************
Relational operators ‘
i
== Binary Yes A == B bool or Value/reference ‘
> Binary Yes A > B bool or Value/reference ‘
< Binary Yes A < B bool or Value/reference
<= Binary Yes A <= B bool or Value/reference i
>= Binary Ves A >= B bool or Value/reference

\ != Binary Ves A != B bool or Value/reference

***************Ending Page***************

***************Beginning Page***************
***************page number:21**************
Loglcal operators
8-K Binary Yes A M B bool or Value/reference ‘1

| | Binary Yes A | | B bool or Value/reference ‘1
l Unary Yes l bool or Value! reference ‘l

***************Ending Page***************

***************Beginning Page***************
***************page number:22**************
Bi twise operators ‘
i
B Binary Yes A B B Value/ reference ‘
| Binary Yes A | B Value/reference ‘
‘ Binary Yes A A B Value/reference “
<< Binary Yes A << B Value/reference “
>> Binary Yes A >> B Value! reference

\ - Unary Yes ~A Value/reference

***************Ending Page***************


***************Beginning Page***************
***************page number:23**************
A551gnment operators

= Binary Yes A = B Value/reference
+= Binary Yes A += B Value/reference
-= Binary Yes A -= B Value/reference
-: Binary Yes A ‘I B Value/reference
/= Binary Yes A /= B Value/ reference
%= Binary Yes A %= B Value/reference
>>= Binary Yes A >>= B Value/reference
<<= Binary Yes A <<= B Value/reference
&= Binary Yes A &= B Value/reference
"= Binary Yes A “= B Value/reference
|= Binary Yes A |= B Value/reference

***************Ending Page***************

***************Beginning Page***************
***************page number:24**************
Operators (others)
sizeof Unary No sizeof(A) Value
new Unary Yes new A pointer (N)
delete Unary Yes delete A <Nune>
Condition (Y) Ternary No C ZA:B A or B depending on the
evaluation of C
:1 (scope) No A::B
Cast (type) Binary Yes (A)B or A(B) B casted to A
-> (pointer) Binary Yes A->B B from A
, (member) Binary Yes A,B B from A
[] (index) Binary Yes A[B] Value/reference
() (function) Multi Yes A(B,C,.“) Value/reference
, (list) Binary Yes (A,B) Val/rei for (A follow by B)

***************Ending Page***************

***************Beginning Page***************
***************page number:25**************
Operators (evaluation order)

1v :: (scope) 13_ H

Z» 0[]->~‘+" 14.7;
3, + - ! - ++ - -1type)" & sizeof 15. = += -= "= /= %=>>= <<= &= A= |=
4, " / % 1e‘ ,
6' << >> a‘
7, < <= > >= 1‘
s‘ == l=

‘3, &

m. ”

***************Ending Page***************

***************Beginning Page***************
***************page number:26**************
Operators for
> classes

***************Ending Page***************

***************Beginning Page***************
***************page number:27**************
Operators for classes
> A class can define a series of special iunctions that behave exactly as an ‘E
operator - that is to allow the program to explain how the compiler should
understand certain operations between classes 3‘
> Use keyword: “operator”
> These functions can have various access operators (and they comply to rules
imposed by the operators - if an operator is declared private then it can only
be accessed within the class)
> Operators can be implemented outside the classes e in this case, if it is
needed, they can be declared as “friend” functions in order to be accessed
by private members from a class

***************Ending Page***************

***************Beginning Page***************
***************page number:28**************
Operators for classes
> In this case the nperaton- is overloaded allowing addition operation between
an Integer and another Integer
APP~¢PP
=1»; mm i‘
‘ mt "M; g
mm: x
mtegerunt m) 1 vammn 0 ‘a
Ant aver-m" (must lntélér I‘); X
mt lnttltrnnptrltankanst mm n)
return m“ . Liane;
>
(
mew Rum);
mm mm);
m X Z m . m
2

***************Ending Page***************

***************Beginning Page***************
***************page number:29**************
Operators for classes
> In this case the nperaton- is overloaded allowing addition operation between
an Integer and another Integer
> The addition operation is applied for the left parameter, the right parameter
being the argument, In other words: “n1+n2" ¢> “n1.operat0r+(n2)"
APP~¢PP
=1»; lmenr x
‘ mt "M; g
mm: x
mtegerunt m) 1 vammn 0 ‘a
m awmw (must mew n); ‘a ,
in mmnumnnmm m." n)
ma In"
‘ m, m
mew mm);
2 1m X Z m . "z;

***************Ending Page***************

***************Beginning Page***************
***************page number:30**************
Operators for classes
> Parameters don't have to be a const or a reference, Using the operator is
similar to using a function (all of the promotion rules apply).
> It is however recommended to use const references when the result of an
operator does not modify the arguments
APP~¢PP
=1»; mew i‘
‘ mt "M; g
mm: x
rmegerunt vﬂ) 1 vsmmn 0 ‘a
m over-m" (zmqer n); X
3'“ tnmrnmnmmau m
return vane . Lune;
3m "no
( Integer Harm);
mew mm);
m X Z m . "z;
2

***************Ending Page***************

***************Beginning Page***************
***************page number:31**************
Operators for classes
> Similarly, the return value does not have a predefine type (e.g. while the
usual understanding is that adding, multiplying, etc of two values of the same
type will produce a result o! the same type, this is not mandatorylg
APPIPP
(liss Inteeer
t
An! valuH,
peeIIt
Integer<Int val) valu=(val) <>
Inteeer aperitur' (Inteeer 17,
t
Integer Integer uperatur'tlﬂteger I)
< Inteeer r:§(vi1ue¢1.vi1ul7t
return r13,
t
rgIe neIn<>
t
Inteeer n1(1BB)t
Integer nItIeet,
Integer nztt>,
"BantnL
>

***************Ending Page***************

***************Beginning Page***************
***************page number:32**************
Operators for classes
> Operators Work as a function. They also can be overloaded.
> In this case me Integer class supports an addition operation between two
Integer objects, or between an Integer object and a float variable
APMPP
(16;; Knl==lr
l
l“! value;
Wﬂk
ln&eier(ln& val) z valuﬁlval) l)
ﬁn! uperalur¢ 1(uns! Knl==lr At) l ... >
l“! Overzlor~lflozl n»);
x
.“l [n§€E€F"uD€Fi%ar~1€laa§ “r
l
rail," value . ll“11“,
>
lam ml“, ,
l
Inteier nlllﬂﬂ);
mm, "11180)?
“(X-"1.“n
“1,:“1.11@
>

***************Ending Page***************

***************Beginning Page***************
***************page number:33**************
> Operators work as a function. They also can be overloaded.
> In this case me code does nut compile because there already VS an
“operatun” function with a "ﬂoat" parameter
APMPP
(16;; lull!!!
(
‘"1 value;
um‘
ln\eier(ln\ val) z valu€(val) &)
m1 annals" 1mm! {mun w ( n
¢|q=1 ﬂueraler‘1(leal n»);
2;‘ WWWMMM m
[ return mug ~ 1mm;
> ,
Wm "mu
&
hula "mm;
{Meier mum);
m 1 Z “1 . “1;
1m y Z m . 1,2‘;
>

***************Ending Page***************

***************Beginning Page***************
***************page number:34**************
Pay attenuon Bl operators‘ usage order and don't assume DUECUO", I" thYS
casc thc codc docs NOT compile. Thc lmcgcr [Lass handles (hc addliion
between an Integer and a float, but noi the other way around lbetween a
ﬂoat and an Integer). Thvs vs not pussvble wvth a function from the classt
r1355 tnteeer
<

m\wnm
Wm“

Intezer<xnt val) n value<va11 (r

in! onerator' (cons! lnteger ax) 4 '1' >

in! oﬂevntovv4flon! av)»
L
,nt rnterer upereter.<rre=t nr
(

return value . <tnt1nr,
)
turd n.rn<>
(

rnrtetr "1(1097.

3&5? 155T; error c2677; binary w; no global operator
\ found which takes type ‘Integer’ (or there is no
' acceptable canveIslom

***************Ending Page***************

***************Beginning Page***************
***************page number:35**************
> The code compiles r friend functions solve both cases (/ntegen/‘laat and
luut+lnteer
APPIPP
class Inllﬁer
(
ln\ value;
Wu“:
Inlaaariﬁn! vzl\ = vzluaivzl\ :>
frAend An! ﬂueraler~ {coast Inllger nee (lea! Vex);
(riend inQ ﬁnera¢er~ 1(1eaQ nil‘ ceu;( Integer ii)
n
In! aptra!ar'((an5! lutli!r ee, Flue! val
(
return A,value e {ln!)val
>
ln\ nueri\nr~‘flni\ vi], ‘uﬂs\ ln\eger ll
1
neennn £.vzlue . {Kallvzl
)
new miM] ,
t
lnlmlmr "11166);
Integer nun»);
An! y . n1.1¢en1:~nn1ee,§¢:;
>

***************Ending Page***************

***************Beginning Page***************
***************page number:36**************
> The code compiles r friend functions solve both cases (/ntegen/‘laat and
luut+lnteer
APPIPP
class Inllﬁer
(
ln\ value;
Wu“:
Inlagar1£nl vzl) = vzlul1vzl) {>
frAend An! ﬁveraler~ {coast Inllﬁer AA‘ (lea! Vex);
(riend inQ ﬁnera¢er~ 1(1eaQ nil‘ ceu;( Integer en)
n
In! aptra!ar'((an5! lutli!r ee, Flaa! val
(
return A,value e 1An!)va >
>
ln\ nueri\nr"flni\ vi], ‘uﬂs\ “\eger ll
1
neennn {.vzl e . {Kallvz >
)
new miM] ,
t
lnlmlmr n11! a);
Integer nm v
An! y . n1,1¢.n1: e ‘n1.1.§¢:;
>

***************Ending Page***************

***************Beginning Page***************
***************page number:37**************
Thvs code wru NOT compvle, There are {we operators deﬁned {one as part 01
the (lass, and [he othcr onc as a frvcnd funcuon). both of [ham rcfcmng to
the same operauon (Integer r Integeriv
11355 [utﬁgev
r
mrwmﬁ
WM“
rm‘ ovﬁva\ov> ([n\egev r),
rr,lnd ,HQ up!r=¢ur. <rn¢lglr "1. rn¢lglr "11.
QQQ Integer onerator'(lnteger x
<
re\urn \hrs >vilue > r,v=1ue,
QM WWW (“Wager M, rmw m
(
return nl value ~ "Z valut,
)
vu,d m=,r<> V ‘ ,
( error LZSQZ: ‘uper'atcr » 15 anvblguuus
l/vtzgu' rmeer, note: mum be 'm Integermpermr ~{Integ-zr)‘
“w KW)» "m; Hr 1m WWW H'Integenlnteger)‘
IEEHHIHI

***************Ending Page***************

***************Beginning Page***************
***************page number:38**************
Operators for classes
> Relational operators are defined exactly as the arithmetic ones. From the
compiler point of View, there is no real difference between those two.
APPIPP
class Inllﬁer
t
Int value;
Wu“:
Inlagarlln! v1!) = vzlullvzl) t)
heel ﬁverzler > leans! Ineeeer e t;
n
haul Inteierzzﬂﬂeritnr > ‘sunst Intlier e r
l tr lvzlu! > £.vzlue)
return erne;
reenrn reteet
)
vmdme
t ,
Integer muse);
Integer nzlzm)‘
n; (n2 > n1)
urnnerl~nz ma! nere (a n1");
>

***************Ending Page***************

***************Beginning Page***************
***************page number:39**************
Operators for classes
> Relational operators do not need to return a bool even though this is what is
expected fmm them. Keep in mind that the compiler does not dirverentiete between
arithmetic or logical operator. In this case, the operator> returns an object.
APFWPP
(his mew
t
m value;
mum:
lriteaertim m» = imam» t»
Integer operator‘ > (tons! mew t s);
me mitt/met»,
3;“ Mmmmm,
( mutt-m“ t5 w, vane);
t
mew Integeruoyeriwr s (twist Integer t 1»
( mew rasttms'wilne . Lvilnl);
return res; '
i
void “MU
t
Integer mm);
w...» '0!sz
(n1 > "1» wimvnueﬂ,
)

***************Ending Page***************

***************Beginning Page***************
***************page number:40**************
Operators for classes
> The same logic applies for logical operators as well {from the compiler point
of view they are not different from the arithmetic or relational operators).
APFWPP
(his mew
(
m m“;
mum:
mgwrm m» = mmm» n
Integer operator‘ u (cons! Integer l n
ma Pmmmo,
3;“ Mmmmn
( DMMFC'i/ﬂue is w, Hm);
i
1mm lnlrxeruvverilw u mm 1mm l 1)
( may rlsﬂhisrwilne i “mo;
return res; '
l
void mm
(
Integer Harm);
mm» nun);
(n1 u "1» wimvimn,
)

***************Ending Page***************

***************Beginning Page***************
***************page number:41**************
Operators for classes
> An unary operator does not have a parameter {if it is defined within the class]
or one parameter if it is defined as a “friend” function.
> Similar to the binary operators, there is no restriction for what these methods
return, In the case below x will have the value 80.
APP~¢pP
:Llss 1w»
( m is»; r
Public: x
m er- m v11 = "mm/11) n ‘r
H ‘r
gin Intelernowrmr r 0
3m “no '7
r
m“
)—

***************Ending Page***************

***************Beginning Page***************
***************page number:42**************
Operators for classes

> The presented methods can be applied in the same way for the following operatorsfl‘

> For these cases, it is recommended to use friend lunctions and not tn create methods o
within the class ‘1

> It is indicated, as much as possible, to add such functions with parameter combination‘
(class with int, int with class, class with double, double with class, etc)

> The operators can also return objects and/0r references to an object. In these cases
that object is then further used in the evaluation of the expression of which it is a part
of‘

***************Ending Page***************

***************Beginning Page***************
***************page number:43**************
Operators for classes ‘
> In case of assignment, it is recommended to return a reference to the object ‘
that gets a value assign tu. This will allow that reference to be (urtner used in
other expression.
> There IS a Special assignment operator called move assignment that can be
used with a parameter that is a temporary reference l“&&")
APPIPP
(his mew
(
m WM;
mm:
mum“! v11) = “mum 0
Integer‘ operator‘ - (m "n;
i,
mm,‘ lntexeruowritw Z (m m»
( "M - "1;
return ('1lss); ,
) H
void “an
t
lnteaer mm);
n1 . 1a;
i

***************Ending Page***************

***************Beginning Page***************
***************page number:44**************
Operators for classes
> However, it is NOT mandatory to return a reference. The code below returns
a bool value.
> After the execution oi the code, n1,value will be 30, and res will be true
APP~¢pP
ms; 1W»
l m value; x‘
Fuhllc: x
m er- m v1! = mu. v1! ) x
l1»: Xmlernowrmr e (m val)
mum (m x 1) .. a;
>
ma IaiVIO
l v .
>

***************Ending Page***************


***************Beginning Page***************
***************page number:45**************
Operators for classes ‘
> Some operators (operator:, operated], operatorl), operators>| can not be a ‘
static function (be used outside the class through friend specifier].
> This case will not compile‘ t
APPIPP 1
this mes.» t
t
m mus;
Pubhc:
‘1452’st Sims: ‘(him u, m m) t Mus . nu Mm ‘his; );
L
(
Integer mm); ,
sms m r W r 1s»,
)

***************Ending Page***************

***************Beginning Page***************
***************page number:46**************
Operators for classes
> However, the rest oi assignment operators (~:, -:, ‘I, etc) can be
implemented in this way.
> In this case the code compiles, res will have the value true and n1.value will
be 3U
APP~¢pP
:Llss 1w»
l m value; a‘
Public: E
l1»: npermr K (mew n. m val)
mum we
>
{m “no
1mm mm);
hnnl m . (M ‘- an);
>

***************Ending Page***************

***************Beginning Page***************
***************page number:47**************
Operators for classes
> Be careful when using references and when a value‘ In this case the
“operaton” is called, but with a copy of the class Integer. As a result, the
value of n1.value will NOT change twill remain 20),
APP~¢pP
:Llss 1W»
l m is»; x‘
Fuhllc: E
l1»: npermr K (1mm 1. m val)
mum (we;
>
:uid “no
1mm mm);
hnnl MS . (M t. an);
>

***************Ending Page***************

***************Beginning Page***************
***************page number:48**************
Operators for classes
> Since friend functions are allowed, the order oi the parameters can be
changed. In this case, the code compiles even if “30 &= m“ does not make
any sense.
APP~¢pP
ms; 1w»
l m value; a‘
Public: E
l1»: WWW k (m n1. [mar a)
mum (we;
>
{aid lair-O
1mm mm);
hnnl MS . (an h M);
>

***************Ending Page***************

***************Beginning Page***************
***************page number:49**************
Operators for classes
> A dilferent case relers to postﬁx/preﬁx operators (++ and >-)
APP-CPD
‘1;’, Inteler
c
m value;
uu>11<=
. l . - n
ml operator“ 0;
L101 lntlllfnllﬂlflturw o
i value“;
relum u“;
3m] mwmnw (m v.»
i value .. z;
relum mm
>
void mm ,
1
1mm mm;
) M m Z (mm

***************Ending Page***************

***************Beginning Page***************
***************page number:50**************
Operators for classes
> In this case, the postﬁx form is being executed 1n14value I 22, res I false)
APP-cw
‘1;,’ Inieler
c
m um;
uu>11<=
Inuprun! val) = mum-1) n
ml operator“ o;
two] werilw (m mm;
L201 lntlllfnllﬂlflturw o
‘ value“; a
mum u“; \
L1 Mam-WM" ‘3
mum m“; a‘
m.‘ mm
l
Integer “1 .
M‘ "s Z
>

***************Ending Page***************

***************Beginning Page***************
***************page number:51**************
Operators for classes
> In this case the prefix form is being executed (n1.value I Z1, res I true)
APP-CPD
class Intelér
c
m "m;
uu>11<=
lamprunl val) = mum-1) U
m1 operator» o;
M Wilw (m mm;
L101 lnllllf'nuuerlmrw o
i value»;
mum u“;
3m] “mm-u". .. u“. v.»
i value .- z;
mum m“;
)
vnld mm ,
1
Integer “1 .
M‘ "s Z
)

***************Ending Page***************

***************Beginning Page***************
***************page number:52**************
Operators for classes
> Prefix/postﬁx operators can be “friend” functions. Normatly the first
parameter of me friend function has to be a relerence type. After execution
n1.value I 22, res I false
APMPP
class Intlier
{
r“! Marne;
Wu“:
rrtlrlrr.r¢ "arr v VIrHQIVirr 4»
friend Dual uperatar- (luteier All;
Frﬁend Duo! nparalnr¢¢ {inlagar Ax,xn! vzlue];
( lvvalue‘~;
ralurn (rul;
>
heel ﬁnera(er~~ {InQeger airinc "=1
( lvvalu! .1 2; ,
ralurn F2151;
>
vﬁdmﬁu
r
{nteier “1(281F
haul Va; = 1r‘..;;
>

***************Ending Page***************

***************Beginning Page***************
***************page number:53**************
Operators for classes
> Postﬁx/ prefix operators have a special meaning
> PoleiX e the value is returned first and then the operaliun is executed
> Preﬁx e the operation is executed ﬁrst and then the value is returned
Apnqw _ _
m,“ mm > In the first case y takes xs value and then the
i m X _ a’ increment operation for x is being done‘ Meaning
. - ' that y will be equal with 3 and x with 4. ‘

***************Ending Page***************

***************Beginning Page***************
***************page number:54**************
Operators for classes
> Postlix/ prefix operators have a special meaning
> PoleiX V the value is returned first and then the operaliun is executed
b Prefix V the operation is executed ﬁrst and then the value is returned
Apnqw ‘ _
m, mm > In the first case y takes xs value and then the
t m X _ a’ increment operation for x is being done‘ Meaning
m y; ' that y will be equal with 3 and x with 4. ‘
y Z w; a
> In the second case, first the increment operation for
x is done and then the assignation towards z,
l \ meaning that z will be equal with 5 and x also with ‘r

***************Ending Page***************

***************Beginning Page***************
***************page number:55**************
Operators for classes
> Prefix/postﬁx operators can be modiﬁed to have the desired behavior
(pnstﬁx, preﬁx) in {he following way:
APMPP
class z“‘=.-,
(
‘n! value;
Wu“: > v
x“!!|‘» nu!»110».. '1“! vzlulli
(
value .< 1;
return 1'1n13);
in..." Inqmwmm. um)
( x“¢=.=, temvabjoc(1valu=)?
vzlue .- 1;
) return mummy;
vmdmwu
&
mug" mm);
“1.~;
>

***************Ending Page***************

***************Beginning Page***************
***************page number:56**************
Operators for classes
> Preﬁx/postﬁx operators can be modiﬁed to have the desired behavior
(puslﬁx, preﬁx) in the following way:
APMPP
<1.“ 1mm
<
1“! value;
u¢s1‘<1
IMWUM val) ; val-mm 0
mend: wentww 0;
1m," went-1r" (m mm;
n
Inugen Inugert WNW» o
( value K 1;
rlturn ('tlli};
v
Inuger nugemznpgrawr“ (m)
( 1 w wmmwmn
v u! ‘- a; ,
) V um (“I-mm‘);
ma m 0
c
. l r mm;
)

***************Ending Page***************

***************Beginning Page***************
***************page number:57**************
Operators for classes
> Preﬁx/postﬁx operators can be modiﬁed to have the desired behavior

(puslﬁx, preﬁx) in the following way:
APMPP
<1.“ 1mm
<

1“! value;
u¢s1‘<1

IMWUM val) ; val-mm 0

mend: wentww 0;

1m," went-1r" (m mm;
n
Inugen Inugert WNW» o
( v u: K 1;

V urn ('tlli};

v
Inuger nugemznpgrawr“ (m)
( 1 w wmmwmn

v u! ‘- a; ,
) V um (“I-mm‘);
ma m 0
c

. l r mm;

)

***************Ending Page***************

***************Beginning Page***************
***************page number:58**************
Operators for classes
> A special operator is new‘ new has a special format lit has to return void‘
and has a size_t first parameter).
> The new operator cannot be used as a friend function‘
> The size_t parameter represents the size of the object to be allocated.
> The new operator does not call the constructor, it is expected to allocate
memory for the current object, In this case, after execution Globaqulue =
100. The constructor (if any) will be called automatically by the compiler
after the memory has been allocated. I‘
Avpmpv ‘a
m Globalvaloe - a; l
(his 1mm t
m m“;
Mm: l
m , m m = value m )
lim- lntlﬂrnnplrltor m (mu o r
mum lemony-nun;
lam "no t
) 1mm w Z m Intmrﬂlo);

***************Ending Page***************

***************Beginning Page***************
***************page number:59**************
Operators for classes ‘
> If new operator is declared with multiple parameters, they can be ‘
called/used in the (allowing way:
APP-ﬁrm
l
< return melanin/alum,
)
vum maAHU
‘ Integer ‘n1 : new“) memo“).
b The functions/methods that overload new with multiple parameters are, also
called placement new

***************Ending Page***************

***************Beginning Page***************
***************page number:60**************
Operators for classes
> The new [] operator has a similar behavion lt is used for allocating multiple
objects. It has a similar format: it must return a void’ and the first
parameter is also a silt-Lt (that represent the amount of memory needed for
all of the elements in the vector).
> For the following example to work, a default constructor is required, After
the execution, all elements from GlobalValue have their value equal to 14
APP-CPD 1
m mum-1mm]; a
<1.” Integer a
l ‘a
1m m“; 2 ,,
mm
Integerlin! v11) = “Juan-1) 0 a
mum 1 mum; 0
—
lém- mqtmmmw nmll 451th u t mu". lilunalvaluelil; y
void mliﬂll
i 1m." m. . m. Imam-1;

***************Ending Page***************

***************Beginning Page***************
***************page number:61**************
Operators for classes
> new” operator can also have several parameters. The (allowing example
shows an example on how such construct can be used.
APP-CPD
m “Mm-rum];
m“ mum
r
m value;
whim
mum“ "n = "mum o
m-wo = vain-(l) r)
mum mm!‘ mu (we; t x
law mwmm new“ (mu u mm ‘a
l "tum mus-mm; l
l ml." m Z _m=wrm1; ‘a
) "

***************Ending Page***************

***************Beginning Page***************
***************page number:62**************
Operators for classes

> Generally speaking, the normal behavior for operators that assure the “a
allocation is the following: 1
void‘ operator new (size_t size) ‘1
void‘ operator newEl (size_t size) g
void operator delete (void' object)
void operator delete“ (void' objects)

> It is recommended for the new and delete operators to throw exceptions

***************Ending Page***************

***************Beginning Page***************
***************page number:63**************
Operators for classes
> Another special operator is the cast operator
v This operator allows the transformation of an object from one type to another
> Being a casting operator, we do not have to provide the return type {it is
considered the type we are casting to) —> in the next example: ﬂoat
APP-CPD
ch55 Image!‘
t x
m m“; ‘a
Mm: x
"mum 0 ‘a
1
in.“ MM Mr»
‘ mum Flnllﬁalue - 2); “
lat-1 "no
‘ m-w nu);
Holt r - (Flnllhil;
)

***************Ending Page***************

***************Beginning Page***************
***************page number:64**************
Operators for classes
> Cast operators are also use when such a conversion is explicitly required,
> As in the previous case, the value for f will be 4.0
> Cast operators cannot be used with friend specifier
APP-CPD
<1.” Image!‘
( x
in value; ‘x
Mm: x
mum!" v.1) = "mo-1) 0 2
Mm “mo; l
in“: mam mam
‘ mum Flulﬁalu! - 1); ‘
‘laid "no
‘ .
)—

***************Ending Page***************

***************Beginning Page***************
***************page number:65**************
Operators for classes ‘
> Make sure to pay attention to all operators. In this case : f I 442 ‘
APMPP ‘
class mm ‘
‘ m "M; ‘
Whlk:
lunged!“ m) z "mum () l
mam mam: ‘
law: WW mm) l
( Mum mumm - 1);
3.,“ "no
‘ .
’—

***************Ending Page***************

***************Beginning Page***************
***************page number:66**************
> However, in this case f I 20,2 due to the addition operator (operatoH)
APMPP
class mm
‘ m "M;
While:
mewuﬂ m) z "mum 0
“mm Fina“);
ma w-mw . (ma m
law: =Mm MO
( velum mama“ - 2);
in". mum-w...“ (PM F)
(
Mum m» - mo‘ . n
in“ “no
( _ ,
>

***************Ending Page***************


***************Beginning Page***************
***************page number:67**************
Operators for classes
> The indexing operators allow the usage oi [] for a certain object‘
> They have only one restriction and that is that they only have one parameter
e but this parameter can be anything and the return value also can be of any
kind‘ Also, the indexing operator cannot be a friend function/ outside the
current object
> In this case, retIErue because byte 1 from n1.value is set
APP-cw»
=1“; Integer I‘
l mt "M; a‘
mm: x
" l
lint lntelunatnrltar mm mu) ‘a
l return (value l o << rm» |. a; '
3m "no
r
1mm "1 z -
haul m .h
>

***************Ending Page***************

***************Beginning Page***************
***************page number:68**************
> The following example uses a different key (a const char *1 (or the index
operator [1/
APP-(PP
class lutlilr
{
in! vzlue;
wbnn
lee; ln!eger::nnerzlﬂF [11cnns1 chzr 'nlnq)
t e: ((s\rcnv(ﬂine, 'FlrsK') :: e» u: ((vilu: e 1) I: nu)
mtum tmc;
er “struwuurn, ‘sea-M’) -- m M ((value a z) l- 9))
return (rue;
reQurn falsee
amnmmU
( ,
Integer n1 »
)

***************Ending Page***************

***************Beginning Page***************
***************page number:69**************
Operators for classes
> One can also overload the index operator [] (to be used with dilferent keys).
The following example uses aperatorﬂ with both in! and canst char ~ keys.
APP-cw
class lut!i¢r
l
l“! value;
Wu“
ln\enerlln\ vi]! z viluelvil! 4)
Dual ﬂﬂeratar l]lcﬂﬂ5! char 'nam!)
boo! nﬂerztor |]ltn! xndeX);
lées ssseger seersser lllint index)
l
) 1H
heal ln!!ger::ﬂneralor |]lcnns! char “name1
l
) 1H
vow ml“) ,
l
snseger "142)‘
swsmsesnwuwrn
nwleZnHZN
>

***************Ending Page***************

***************Beginning Page***************
***************page number:70**************
Operators for classes

> The function call operator 1 operator” )works almost the same as the
indexing operator.

> Like the indexing operator, the function call operator 1) can only be a member
function within the class
APPIPP
class mew
‘ m "M; ‘
mu“ 2
3;“, mwmw-m mm Annex)
( Mum mm n u (t 1mm l- a; ‘
3.,“ -m» ‘
r

Integer M -

, w - -h

***************Ending Page***************

***************Beginning Page***************
***************page number:71**************
Operators for classes
> The main diﬂerence between index operator 1 operator” ) and function call
operator 1 operated) ) is that function call operator can have multiple
.arameters OT none t
APP-‘:PP
(1.5; Integer
r
m viluei
mm:
{it lnlmwuwlvilw on“: mm“ end)
‘ rem ("M >> nun) t ((1 << (an . nun» - 1); ‘E
) X
I Md um)
m res .
>

***************Ending Page***************

***************Beginning Page***************
***************page number:72**************
Operators for classes ‘
> In this example, the function call operator ( operated) ) is used without any ‘
parameter:
APP-(PP ‘
um m-w ‘
(
m value; \
public: ‘
. >. -v=1~=(v=1)0 \
1.11 Integennpeulﬂ‘ 00
( return ("M-z);
)
m4 mm
(
mum n -

***************Ending Page***************

***************Beginning Page***************
***************page number:73**************
Operators for classes
> The member access operator ( operatoré ) can also be overwritten.
> lh this case, even though there are he restrictvons imposed by the compiler,
this operator has to return a pointer to an object.
APMPP
class "was
r
ﬂoat mm
Dunk:
m4 Selvalueﬂlna m) t “the . “at >
2h“ me,
r
"10:1: nan;
Duhltc,
"mew WWW s u.
( mm met '
>
‘mm "emu
( ,
Mssemheumt
>

***************Ending Page***************

***************Beginning Page***************
***************page number:74**************
Operators for classes
> operatoré has to be used with an object (NOT a pointer)‘ The following
example will not compile as n2 (a pointer) does not have a data member
called SetValue‘
APMPP
<1“; Kwan
‘ Flu-t vllul;
Whlk:
ma sum-Mm“ m) 1 m.“ . m; )
2;“; Wm
l
"rm-u am;
Mu“
)_ Wli' Wit“ 4 ()i
("Jo-w llama-went” ->o
Mum ‘data; ,
an“ IalllO
(
1mg» M;
m m1 . w
,

***************Ending Page***************

***************Beginning Page***************
***************page number:75**************
Operators for classes
> However, if we convert the pointer to an object, the operator? will work‘
> The “9" uperalur can he deﬁned only in a class (it cannot be defined outside
the class as a friend function)
APMPP
class "was
r
ﬂoat m“;
mm:
m4 Selvaludﬂnzl m) 1 value . m; >
2am WW
r
mm. 4.1-;
Whlk:
) "yum- mm» s 4);
This‘ hallmwveramr ~>u
return “in; '
>
vnld mm)
r
Inleﬂer "a;
)

***************Ending Page***************

***************Beginning Page***************
***************page number:76**************
Operators for classes

> Other operators that behave in the same way as npemtoré are:
- , (A's)
- ->' ‘A->.B,
~z» r 1mm
a * (‘Ab
a 91mm) \

***************Ending Page***************

***************Beginning Page***************
***************page number:77**************
Operators for classes
> The list operator “operamr,” is used in case of lists
> For example, the following list is evaluated from left to right and without a
speciﬁc operator, it returns the last value::
> The evaluation is done as follows:
-1- First evaluated is the expression l‘1010" 9 which returns ZO
41- The following expression which i5 evaluated is "20,30" [10 returned imln the
previous expression, which returns 30
\ ~:- And ﬁnally, it is evaluated "30,40" Whizh Will return 4U /

***************Ending Page***************

***************Beginning Page***************
***************page number:78**************
Operators for classes
> In this case, the “apemtor,” is called ﬁrst, (or nl and 2.5f, which returns 75
(307.5 = 75)
> res local variable will have the value 75
APMPP
class mew
‘ m "m;
um“:
. . v 1) n
2;. “WNW.” m“. F, l
m -an
Image" mm;
) m "5 - (Ml um

***************Ending Page***************

***************Beginning Page***************
***************page number:79**************
Operators for classes
> In this case the “operator,” is called first (or n1 and 25f, which returns the
value 30“Z.5=75, then the default operator for 75 and 10 is applied that
returns 104
APMPP
class mew
‘ m “1.1-;
um!“
lunged!“ "1) 1 mum-n n
m mam l (ma m ‘x
2;. “WNW.” m“. F, ‘x
i Mm “Mm-m
vuld "no
( 1m “(any
) “it: - (ufumE):

***************Ending Page***************

***************Beginning Page***************
***************page number:80**************
> It is recommended to use friend specifier to explain several combinations
that can be found when using the list operator i operator, )
APMPP
class mew
c
m “1.1-;
Wblk:
lunged!" "1) = mum!) n
friend m wmw . mm“, ﬂan n:
m.“ m w-mw . (m "1.1-. 1mm);
>;
m Mw . (1mm 1. mu r)
l
"(um (mnuwine-m
)
m nun-w . (m "M. 1mm" m
r
Mum "m . Lvalue; '
)
wold mm
r
Integer “(30);
m res - m. 1,5‘, m;
)

***************Ending Page***************

***************Beginning Page***************
***************page number:81**************
Operators for classes
> It is recommended to use friend specifier to explain several combinations
that can be found when using the list operator i operator, )
APP~=PP
class mew
c
m “1.1-;
Whlk:
Inseam! m) = “new” 0
mm: m overaxor . (Integerl, ﬂea f7: 1
mum m mm.» . (m "M. meter‘); x
>; ‘
m Mm . mm“ 1. Flnl! r) E
l ‘l z
Mm umu ﬂue-m
m awn” . (m 1.1-. mm» u) z
Mum m“ t i .nlue;
)
wold mm
r
mew n ,
M res - m;
)

***************Ending Page***************

***************Beginning Page***************
***************page number:82**************
Operators for classes
> It is recommended to use friend specifier to explain several combinations
that can be found when using the list operator i operator, )
APP~=PP
class mew
c
m “1.1-;
Whlk:
Inseam! m) = “new” 0
mm: m overaxor . (Integerl, ﬂea f7: 1
mum m mm.» . (m "M. meter‘); x
>; ‘
m Mm . mm“ 1. Flnl! r) E
l z
Mm (‘"UUWiluQ'ﬁi a
m Mum . (m "M. 1n% 1
Mum "m t Lvalue
)
wold mm
r
In!!!" “(30);
M res - (M. 1,5;
)

***************Ending Page***************

***************Beginning Page***************
***************page number:83**************
Operators for classes
> When overloading an operator, some optimizations that compiler is doing
(such as lazy evaluation) will be lost.
APPIPP
class Baal l
boo! "we;
cons! char - name;
mm:
Bwllhwl m, coast :nar - m = vﬂllklvil)» "mum i)
m1 operatnrll (cons: um n) l
bun) res - "m || ‘(v-m;
Prlntﬂ'mllwte mm; and 7i):>7§\n', me, Lila-E, res ‘I am" = vase");
m1 wee, ‘tn-p“);
Nhlrli o;
}; ,
operator wall) l
Pantﬂ'llenlm haul m x; :> xew, this’>nar|=,value7"true":'falSe");
raturn "1-";
)
7;
Int nit-0 i
Baal n1ltrue,"n1')3
Inn! n2(fi152,"|l1"); .
m1 "wﬂswns." Once ls_evaluat_ed andltls ,me restoi
m, "S Z (menu: ll “mum |l “mum; me evaluation lSSklppéd. Lazy evaluallnnfor
mu". a; operator is applied and the cast operators (or n1
) and n3 are called an are‘

***************Ending Page***************

***************Beginning Page***************
***************page number:84**************
Operators for classes
> When overloading an operator, some optimizations that compiler is doing
(such as lazy evaluation) will be lost.
APPIPP
class Baal l
boo! "we;
cons! Chi!‘ - name;
publk:
Boallhwl m, coast :Iiar - in) = vﬂllklvil)» "mum i)
Baal operatnrll (cons: lnnl n) l
bun) res - value || Mme;
Prlntﬂ'ioliwte mm; ll xs):>xs\n'. name, Lame, res ? "true' = 'mse-i;
m1 him, 'tllp“);
Nhlrli o;
}; ,
ewim wall) l
Prkntﬂ'llenlm haul m x; e> xew, meMei-ewnllei-mle“:vim-1;
return mile;
7' Viiriiieviliieiirl if‘ is?
m nin()( r‘, H, , , V
Baal N1ltrlle,“nl-)3 ‘ “ ‘ ‘ ‘ ‘
Inn! n2(fi152.'n1')i
Baal nBUalse w- - However. in mi: case since we have used our own
m1 i=5 Z mmllﬂ operatorI | me lazy evaluation will not be applied,
) "W" °= and the entire exression will be evaluated.

***************Ending Page***************

***************Beginning Page***************
***************page number:85**************
Operations with
> objects

***************Ending Page***************

***************Beginning Page***************
***************page number:86**************
\
Ob] ect operations
> Let's analyze the following code:
— ‘Oh lb
App.cpp GlLFUHDHlH)
(1-55 Dlte
i
m “in;
mm:
Datellnt mm = xlmm. "Value . 1».
mm! . z), Kuhn!) n
mid 5.1m“ um) l x . um; l
3.31.1 5mm“ mm Wm) )
‘ 4.5mm“);
Cm mm
‘ Date .1 1 -
—’ l
> In this case, as there is no copy>constructor the compiler copies the entire
object “d” byte-by-byte similar to what memcpy function does.

***************Ending Page***************

***************Beginning Page***************
***************page number:87**************
Let's analyze the ioliowvng COGEI
— — 10h = 16 :
Eh” “m sizeoleatai
m x, v. z, v.
mm
ﬂatz<xnt VB\“(1 v X<VB\“11, V<valuz . 11,
1 value ‘ Z r value . A 1
“(m H X>X,V,V»
‘I, my
vmd ‘Ithnr um.) ( x Z m", , Constructs"
Qém scmnzc a, m mm)
‘ d suanuey. ‘all 5"
5m mm
‘
However‘ w a copy'constructor exvsls, that method wm be can w copy me
ODJCCl “dM WU] [hC stack.

***************Ending Page***************

***************Beginning Page***************
***************page number:88**************
Let's analyze [he ioliowmg code:
t
vmd “mm “tn-r t x Z “w, , Constructor
9m 5mm a, m mink)
(
1°“ "W1 errﬂr c2130; ‘DateLDatEAmnst Date m‘: attemplmg tn reference a deleted
| (unctmn
hate: wmplter m generated 'Date::Date‘ here
r note: ‘DarexDatelcousl Date tr: (uncuou was Implmﬂy deleted became ‘Date
has a user'demed move couslmctor
If the movc constructor IS proscnt, but not a copy constructor, the codc WM
favl at mmpne Lyme, Adding a copy'constmctov wru make tms code work.

***************Ending Page***************


***************Beginning Page***************
***************page number:89**************
Object operat10ns
> Let‘s analyze the (ollowing code:
APP~=PP
m5; but:
r
m x,v,Z.Y;
mm:
rut-(m m“) = mu“). mm- . 1).
mam! . 1). Kuhn!) 0
ma mm“ mm r X - value; r
)“Qid Sel(hate mm um)
‘ mm“); ‘r
3.,“ “no ‘x
‘ M. .1 . - ‘a
> If we send the object via a reference or pointer, the copy-constructor is no
longer required.

***************Ending Page***************

***************Beginning Page***************
***************page number:90**************
ObJect operations
When a parameter is given to a function we have the following cases: ‘E
> If the parameter is reference/pointer a only its address is copied on the stack
> lithe parameter is an object, all of that object is copied on the stack and it ‘r
can be accessed as any other parameter that was copied on the stack \
(relative at [EBP+xxx] is The compiler uses the copy-constructor to copy an
object into the stack‘ If no copy constructor is present, a memcpy - like code
is generated 1a code that copies byte-by-byte the entire content of the object
into the stack)‘

***************Ending Page***************

***************Beginning Page***************
***************page number:91**************
Object operations
> Let‘s analyze the following code:
APP-‘PP
(1m lute
(
m X,V,1,Y;
mm:
Dateunt value) = mam». mam . n.
1M1“! . z), Kuhn!) n
vnld mm“ um) ( x . “m; )
nae “um Wm) )
mum .1;
>
&
I)!!! am;
.1 . mum);
>
.d rd c b l
> In this case, function Get returns M “X w p r l‘ I” 1
an object {NOT a reference) of type
Date‘

***************Ending Page***************

***************Beginning Page***************
***************page number:92**************
ObJECt operatlons
> Let's analyze the (ollowing code :
App.cpp ate um;
(1.55 lute
(
> M X,v,z,n
Muzémun m“) = mam). mm: . n. “ ' “"08"”
1M1“! . 2). Kuhn!) o
vnld mm“ um) ( x . um; )
3;" mun Wm)
‘ I)!!! HUI-Ike);
mum .1; nw ecx,d||ord ptl‘ [:ax]
> . . nw dnnrd w- [d.X],!cx
1°“ “"‘0 my edx,dmr'd ptr' [mm]
k v - nov mam ptr‘ [d.V],edx ,
mv ecx,dnord ptr' [and]
> nw duord ptr [d.Z],e:x
v _ nw edX,dncrd vtr [Banach]
> In thls case, function Get returns ||gy ‘1mm Ptr [dJLedx
an object (NOT a reference) of type
Date‘

***************Ending Page***************

***************Beginning Page***************
***************page number:93**************
> Let's analyze the following code:
—pp.cpp App.pseudocode
(1.55 Due
( sh“ um
m “gm <
mm;
Mm“ mu!) : mam), mam ~ 1;, 1;
Z1vzlue . 11. Y1vzlue~21 ()
wok-1 mm“! value) ( X . value; ) \Zm‘ “mum ‘(wwblrzh 1m mm
x
nae auum mu) um “mm,
‘ mmcpyumwbjunm,silwﬂwau)i;
Due mum; "emm lmwhjeq,
return .1; ) a U
> v01 main
void MIN) (
‘ Dim an);
m, 4",; unsignm a." templsileeﬂhauﬂ
.1 . “(1159); new mwb] Z Gnﬂmmiwy,
> ) mancpy(d.mpﬁb].sneo((bat:n

***************Ending Page***************

***************Beginning Page***************
***************page number:94**************
> Let's analyze the following code:
App.cpp App.pseudocode
(1.55 Due
( sh“ um
m szm <
mm;
Mm“ mu!) : mam, um“! ‘ u, 1‘
Z1vzlue . 11. Y1vzlue~21 ()
wok-1 quMn! mm ( x - value; ) “W “"(“m ‘wwmm 1"‘ mm
Mum“ M! ‘ uni) (x Z mix‘ > <
n \ an: “mm,
0.“! ﬁelhlw mu!) mwmw-wﬂmn
( return lmwhjeu,
Dale 4mm); )
M .1‘ void mun
; (
‘mm "mu Di“ “1)?
( unsignm a." templsileeﬂhauﬂ
We 4m; new mwln Z annuwnee),
.1 Z 5114150)‘ ) mmcpy(d.mpab].snw((bat:n
) ,

***************Ending Page***************

***************Beginning Page***************
***************page number:95**************
Object operatlons
> Let's analyze the followmg code:

App.cpp App.pseudocode

(1.55 m.

( this a“.

m szm <

mm;

mm“ mu!) : mam), um“! ‘ n, 1;

Z1vzlue . 11. Y1vzlue~21 ()

wold mm“! "my ( X . value; ) wa mwm ‘wwmn, m mm

Mum“ M! ‘ m) (x Z mix‘ > <

mu WWW Z (mm nae n1) hm mum,

‘ [mejea-maumii
X , M; return mwmq,
return mm); )

> void malVlU

n (

pm Mm mu!) Dam no);

( “mom a." templsﬂeeﬂhauﬂ
m. awn-1e) ; my mwkn Z 6n((my,aee),
M d‘ d.op:ratur:(‘mrﬂb]ii

> ) '

mm "mu

(

m. 4m;

d Z hum»

>

***************Ending Page***************

***************Beginning Page***************
***************page number:96**************
Let's analyze the folwwwg code:
[1m um —
( (1m mu

m x,v,z,v, \

ﬂatzunt mm v mam, mam . n‘ W

1(valuc . 11, Y4vllucv41 ()

M 5mm‘ mm (X V mm t mu‘ ennwm WWW“, m Wm)

m. mm m. l an X Z n X ~ D t M 1 )

( m Mpﬂmtt,

X V dd‘ » d U
rem-"20012). m m"

> t
)v ' Date no),
um mm, Wm) Wm (m (smptummmn
( my my», Z Mt,mp,m>,

um 6mm,‘ d.op:rawr:l‘tmv0b]).

mm a. )
) a <1
t If present. the move constructor is used when

um d 1 . v

d Z “glam, returning an object lrom a functvon !
)

***************Ending Page***************

***************Beginning Page***************
***************page number:97**************
ObJect operations
When dealing with temgorag object the compiler will always prefer: ‘E
1 Move constructor ‘a
z Move assignment ‘E
Instead oi copy constructor or simple assignment. ‘E
These methods (move constructor l move assignment) are preferred if they ‘
exist, If they are not specified, the copy-constructor and assignment operator
will he used (if any)‘
Move construztor and Move assignment are only used for temporary object.
For a regular object (reference) copy-constructor and assignment operator
are preferred (if they exists).

***************Ending Page***************

***************Beginning Page***************
***************page number:98**************
> Let‘s consider the following class:
APP-CPP
cm; smu (
(m - (an;
Md Wumuml m» - 5mm (
text Z m mrummimm ¢ 11;
“91(0th nun. Kiri-whirl") . 1);
>
Mu“
S(Mﬂ((¢o'\5( ‘m - 5) (
(warms);
wlnfﬂtm .> m1:l9.hxt:l9\n'. mum);
>
6mm) (
v ((e'lﬂ |. nullvir‘) (
winxﬂ'nm Q M:b.hxt:b\n'. ms. mo;
1-m- lnxt;
> =11! (
prlnlﬂ'mm .> my” (mm, m deluenn', 1m);
>
, ,
)

***************Ending Page***************

***************Beginning Page***************
***************page number:99**************
> Let's consider the lollowlng class:
APP-CPP
(1.5; 5m": l
char ~ lexl;
m4 (wyitringlcmst m» - 5mm ( , >
mm;
smmmn m, ' s) l >
~5n£nall l V >
mimmm 5m“, A unj) (
(wysxnnxlwyxen);
murmw Q mwwnzmxo me 00]:X0,Y!xt=’91\ﬂ', "us, text,MJ,WJ-text);
>
5mm aerator - leans! sung mm (
if ‘(11¢ v: nullutr) l
mqum :> mjzqueanmn", \Ius, ‘m1;
n<|<¢< ‘(Xe;
(ex! - nullpu;
>
(wysmnsmjwa
urln\ﬂ"EQ((wy) :> nymvmzw mm w;:w.vm;xw-. \Ius, ‘m. m1. “new; '
yell,“ l'lnlsl;
) >
> We wlll also add a copy-constructor and an asslgnment operator m'fhis class.

***************Ending Page***************

***************Beginning Page***************
***************page number:100**************
Object operatlons
> What will be the result of the following code?
APP-CPP
cm; stun t
(m - 1m;
ma Wtrlngkwn m» - 5mm 1 , >
mm:
Strlnikumt (m ' s) l - )
.swm) t . >
Slrlnﬂcnns! 51m, l m1) l » r
5mm mum‘ - (‘out Sui“: mm l - >
gum; mtmn (m ' t-xt)
( prlnlﬂ'inudng an ﬁmcunnln');
5m" 5(0'“);
wintﬂ'ixitin‘ m mmmw);
"tum s;
>
ma um)
( wimcmm" Iain mmmw); '
5m" it");
1 - mm“ tut‘);
puma-ulna; m“ mﬂmw);
>

***************Ending Page***************

***************Beginning Page***************
***************page number:101**************
Whak WILL he [he FPSUH 0' th€ 'OUOWYHQ C0d€ 7
in)? mNWMMM-msm
W ~ M, m ab]m1s1iru~4,¥e~¢.a1295z~‘u
mm m Z @MWWJ,”.Qmm m m11.1meij
WWW W ~ §\ < .> W mmm»m.¢-mm
"5"‘“10 ‘ -' _ um =. m mmﬁmmmmm
gmwm “Mg A “m ‘ ' @an MMWMW MW m mm WWW“ 8119465
mugs aver-nur- : (mun sum»: luBH €
, my‘ Obj-WWW“ mm
5mm “mum mp ~ 2cm Em": w" “'"I'W"
‘ W an:unFmSJen-mzaeuu
Lwiuw,“ l Translated
W”: mm; w ‘WWW 1v Entry-m mam Funcnun
.' "m" 5' rm Z mm 5 (re-t mlﬂsmm
‘ m m . ‘M mum-m
"Mm Wm": "m mmmm 1, Em)“ “E! "1mm"
"W 5< JV m, Z “Wm,”mmmm] me M» “MK-mm,
57mm M), m w w.” “12'6an
1 Emmy :1 m“ ‘HF-l mtg-"w; mm MU'UJHM mum»
mm Z “Why.” MW“
W Z Ew-Mvmww

***************Ending Page***************

***************Beginning Page***************
***************page number:102**************
What WILL he‘ th remﬂ 01 1h? lnLlnwmg rode 7
— From (he Stringxkexk 90ml 01 vvew me following hagpen:
['“55 stvlng <
var: (upy5\rrng<kun>‘ L~.r - >‘rrng1 ¢
mm r
‘tr "81:0"51 (~3r ~ §\ < ;
~51’:~g<) < P
“Mum” smug A um ‘ '
Su-Jum WWW Z 4mm WM mu
< “c~ mt" 1; allocated 3 nmes ((or Gstzzs, lemp_ob]_1 and mamas]
INJHN We,“ M MUMW J, —
5M“ qwxn, Translated
qr "fl H ' "c a" "m" "M" 1' Eulerlug my‘ Funcnun
1 ‘(mun 5v (m mm‘ s (rm mNSn-w»
‘W J H no Emu 1H2 w mm“
‘ ' ' a“ M . HM mum-m
M ml PM" "E m n mun nn\n 1, mm; m mum
"Mg 5‘ 1v mm Z “Wynnwrung-“Em Hum M “MK-“1155mm
5 V newt” zest‘), pm Q an .Euw mwm
INJHN EM“: MUMW L mm mam 1m“ L'lLi'Su-w)
‘ “WW, m“ ‘Hm {HIE-WW) Mm ‘ampjbujLnnzmz'uznh
[Wm Z MUMJmM $119485;
mm; mm “mm
m: Z mm sUeznmszJa)

***************Ending Page***************

***************Beginning Page***************
***************page number:103**************
> Let's consider the muowmg class:
APP-CPP
dzss sum: K
m» ~ 1.“;
Md (minimum. (m - 5mm ( s >
Mm
Stnnﬂcwst ch57 ’ 5) K )
Msnmeu K V)
Svknﬁknﬂs! snug A m3) t 7 )
MM “mm Z ‘m. M“; M1») ( s >
snmﬂinmz m Mn) K
Mm.” Z MM;
my‘!!! . MM;
printﬂ"mli :> mi hum n1 m." ﬂhj ham Sam" this‘ um Inhj‘ avian)‘
)
snmzs Werator 1 152mm mm) K
MM.“ . MM;
Mum-mm.) .> “Mum, m myXoJemXomx ‘m M‘ M)‘ mum;
mm. Z MW
rm (mus); ,
)
)
> Now, we Wm add a move construcmr and a move assgnment m the clqis as
well.

***************Ending Page***************

***************Beginning Page***************
***************page number:104**************
Object operatlons
> What will be the result of the following code?
APP-CPP
(1.55 stun: t
(m - 1m;
Md (owsxrlnucwst m» - 5mm ¢ , >
wbm:
Strlnikumt (m ' s) l - )
.smuo t . >
Slrlnﬂcnns! 51m, l m1) l 7 l
5mm mum‘ - (‘out 5m" mm) ( , >
string(strini u W1’) c - >
stump witw Z (stun; m1) l - )
>
51m, “(can (m - (ex!)
( wimcmm" m mmmw);
stun; mm);
yum-mm, m Functinnln');
Mum s;
> ,
‘Wm “no
yum-um“, m“ mnetmmn');
51m, 50-);
5 - (‘q-w mm;
wimcmu" Iain mmmw);
)

***************Ending Page***************

***************Beginning Page***************
***************page number:105**************
What WILL he [NE 79$le 0V fh€ Iotlowmg C0d€ 7

[m 5W ( mow m‘@WFMMWMME
vmd tuwS\;-m>:(mm¢ WV ~ “Mm ¢ m" ‘7 “1“‘""‘”“"Jm"”“”“““
WWW“! W ~ U < , HM up]=Wm,TEMBMW M an]~isaAiFusc,Ye-¢.aenaeaeu
MW) < ;, W “WWW WW m Mm
WWW 5.,“ A M ‘ -v “<le Q on; mmmM WW "M on; WMM WWW
5mm BMW Z Wm‘ 5W“ W ‘ W “WWW math)": m nah-m

_ "PM WW Z MW mm < .> [mm 0b]:uaAinmJe-maeoawtm

‘ g 4 l Translated
mwmmg m ‘WWW l, aw Z mlw'mnmsam

‘ Uni 1) in .sL'Yes' uvvniunw

< ‘ Wm; ‘mehlgmn mmna, mm a»: mm HWWBHW};
‘ Z “in 0.1.“ 1 WM, Z mam-1.“.Mnmw my [WWWM-mmm,
W,” MW MW“ I‘ my Z MU“; (nmmng m my!)

' pm Z.- mam :Jnn mmwm

***************Ending Page***************

***************Beginning Page***************
***************page number:106**************
What WILL h? th VGQAJH 01 1h? lmlnwmg rode 7
From the Sm'ngxtext EMIII O1V¢€w {he followmg haggen:
Lass stung (
var: tuvySvmuuunn mar ~ JVJLH (
M ,
w "elm! W ~ U < .>
~szv1/vg4) ( I’
anMu/vm suing a m) ‘ '
"P "El‘" "E M “"11 € : “C” m!" i5 allocated one time and then (he Dointkris muved until in
_ w-m (Wm-m‘- : (wx'vz Mow < : rea(he§ the destination mm (“5" (mm main)
‘ “ 4 l Translated
WM‘ mm m ‘W, l, aw Z “Wm-4mm“
‘ ma Z) w .ww nvvnévnw
< ‘ \ my; Mwhumn quEanay mm r,“ \(Yen BNQWNFW‘;
f‘;'gj;,<03'm 1 WM, Z mam->=_m.mwmm ‘m [WWWIan-mummy
M my,‘ , "E M ; ,W, "M I‘ my Z “Away (naming m any!)
' pm Z.- ernm Mmsnnw

***************Ending Page***************

***************Beginning Page***************
***************page number:107**************
> What is the problem with the (Ollowv'ng code?

App.cpp App.pseudocode
(1.55 a."
t class um

m “gm <
mm;

namm mm = um“), mm: . u, 1;

104an . 1), Kuhn!) [) haw mum mm

voh! SelXHn! vzlue) ( x - vzlue; ) (

mvekons! m, ‘ om) 1 x - abyx‘ ) 0m Mam),

naxu wmw Z (one u) 1 mm- M,

‘ X _ M; ma mm

return mm); c

> on: an);
,1 em» mwhj - 6mm”
om; mum mm ) d-ﬂbuamrlK'mWth
(

Dale 4mm);

Pewm a;
) ,
‘mm mm
(

Dale 4m;

a - mum;
)

***************Ending Page***************

***************Beginning Page***************
***************page number:108**************
ObJECt operatlons
> What is the problem with the following code Z
APP-cw
(1.55 I)!!!
(
m X,v,z,n
mm:
men“ WM) = mam). vmm . n.
1M1“! . 2). Kuhn!) o
vnld mm“ um) ( x . um; y
. . . X-ohjvxi)
Wm mm.» 1 (nan w
& m n" M m "=[d1]
x - d.X;
>
n
mm um“ Vim)
‘ I)!!! “mm; ,
mum a;
m4 mm
&
I)!!! am;
.1 . mum);
>

***************Ending Page***************

***************Beginning Page***************
***************page number:109**************
y my

***************Ending Page***************

