[{content={parts=[{text=--FlashCardSeparator--
Single
--InteriorSeparator--
What is the primary purpose of a model in software development, according to the provided text?
--InteriorSeparator--
To make the implementation (programming) of the system easier.
--InteriorSeparator--
easy
--InteriorSeparator--
4
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following are characteristics of a good model according to Bran Selic?
--InteriorSeparator--
(right) Abstraction
(right) Understandability
(wrong) Complexity
(wrong) Length
--InteriorSeparator--
medium
--InteriorSeparator--
5
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does UML stand for?
--InteriorSeparator--
Unified Modeling Language
--InteriorSeparator--
easy
--InteriorSeparator--
6
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following are examples of Structure Diagrams in UML?
--InteriorSeparator--
(right) Class Diagram
(wrong) Activity Diagram
(right) Object Diagram
(wrong) Use Case Diagram
--InteriorSeparator--
medium
--InteriorSeparator--
8
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In UML class diagrams, what symbol precedes a private attribute or method?
--InteriorSeparator--
- (minus sign)
--InteriorSeparator--
easy
--InteriorSeparator--
10
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the primary characteristic of an abstract class in C++ as shown in the UML diagrams?
--InteriorSeparator--
It has at least one pure virtual function (virtual function with "= 0").
--InteriorSeparator--
medium
--InteriorSeparator--
13
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following represent the Generalization relationship in UML?
--InteriorSeparator--
(right) Inheritance
(right) Classification
(wrong) Aggregation
(wrong) Association
--InteriorSeparator--
easy
--InteriorSeparator--
14, 15
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
How are interfaces described in C++ according to the provided text?
--InteriorSeparator--
Using abstract classes.
--InteriorSeparator--
easy
--InteriorSeparator--
18
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What type of relationship is represented when a class contains a list of pointers to another class as its attribute?
--InteriorSeparator--
(right) Bidirectional Binary Association
(wrong) Unidirectional Binary Association
(wrong) Association Class
(wrong) Strong Aggregation
--InteriorSeparator--
medium
--InteriorSeparator--
19
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does the Single Responsibility Principle state?
--InteriorSeparator--
A class should have one and only one reason to change.
--InteriorSeparator--
easy
--InteriorSeparator--
26
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
According to the text, which of the following code examples contains too many responsibilities?
--InteriorSeparator--
(right) Statement that execute statements or expression based on a tag ShapeType.
(wrong) Expression and VarName classes.
(wrong) Statements sequences.
(wrong) If Statement.
--InteriorSeparator--
hard
--InteriorSeparator--
28
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does the Open/Closed Principle state?
--InteriorSeparator--
Software entities should be open for extension, but closed for modification.
--InteriorSeparator--
easy
--InteriorSeparator--
32
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is a consequence of violating the Open/Closed Principle in the ShapeContainer example?
--InteriorSeparator--
(right) The ShapeContainer::load() function needs to be modified every time a new shape is added.
(wrong) The ShapeContainer class needs to inherit from Shape.
(wrong) Compile time decreases.
(wrong) The memory footprint increases.
--InteriorSeparator--
medium
--InteriorSeparator--
33
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is a common solution to fix a violation of the Open/Closed principle?
--InteriorSeparator--
Object Factory Pattern
--InteriorSeparator--
easy
--InteriorSeparator--
34
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
According to the Liskov Substitution Principle, what should be true about subtypes?
--InteriorSeparator--
Any property provable about the supertype should also be true for the subtype.
--InteriorSeparator--
medium
--InteriorSeparator--
36
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
In the counter-example of the "Square is a Rectangle" relation, what property P(r) is used to demonstrate the LSP violation?
--InteriorSeparator--
(right) r.area() == getWidth() * getHeight()
(wrong) r.size() == getWidth() + getHeight()
(wrong) getHeight() == getWidth()
(wrong) r.color() == "red"
--InteriorSeparator--
hard
--InteriorSeparator--
39
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In the context of the Liskov Substitution Principle, what is the key difference between "subclass" and "subtype"?
--InteriorSeparator--
Subtype refers to behavioral compatibility, while subclass refers to inheritance.
--InteriorSeparator--
hard
--InteriorSeparator--
42
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
According to the text, what two orthogonal things does a class include?
--InteriorSeparator--
(right) Static/behavioral type
(right) Implementation
(wrong) Data Members
(wrong) Public Interface
--InteriorSeparator--
medium
--InteriorSeparator--
44
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the relationship between the exception signaled by B::m() and A::m() if B is a behavioral subtype of A?
--InteriorSeparator--
The set of exceptions signaled by B::m() is included in the set of exceptions signaled by A::m().
--InteriorSeparator--
hard
--InteriorSeparator--
58
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is contravariance in the context of type systems?
--InteriorSeparator--
(right) A rule that reverses the ordering of types <:
(wrong) A rule that preserves the ordering of types <:.
(wrong) It is not related to variance or subtype.
(wrong) A rule where no comparison is possible.
--InteriorSeparator--
hard
--InteriorSeparator--
48
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In C++, is the return type of an overriding function covariant or contravariant?
--InteriorSeparator--
Covariant.
--InteriorSeparator--
medium
--InteriorSeparator--
49
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Does C++ support argument contravariance for overridden functions?
--InteriorSeparator--
No, C++ is invariant on arguments.
--InteriorSeparator--
hard
--InteriorSeparator--
52
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What elements constitute the behavioral interface of objects?
--InteriorSeparator--
(right) Description of the value space.
(right) Class invariants.
(wrong) Memory address.
(wrong) Name of the class.
--InteriorSeparator--
medium
--InteriorSeparator--
54
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
If a child class B is a behavioral subtype of the parent class A, which invariants must be preserved?
--InteriorSeparator--
The invariants of the superclass are preserved by the subclass.
--InteriorSeparator--
hard
--InteriorSeparator--
57
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
When is the Square::setHeight() method invalid when considering the LSP?
--InteriorSeparator--
(right) When Square::setHeight() does not preserve the Square invariant getWidth() == getHeight().
(wrong) When Square::setHeight() always throws exceptions.
(wrong) Square::setHeight() is always valid.
(wrong) When Square::setHeight() returns a different value.
--InteriorSeparator--
hard
--InteriorSeparator--
61
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What are the two main points of the Dependency Inversion Principle?
--InteriorSeparator--
High-level modules should not depend on low-level modules, and abstractions should not depend on details. Both should depend on abstractions.
--InteriorSeparator--
medium
--InteriorSeparator--
63
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What does Dependency Inversion Principle mean in practice?
--InteriorSeparator--
(right) Modules should depend on abstract interfaces.
(wrong) High level module should depend on low level module directly.
(wrong) Details should depend on each other.
(wrong) Abstractions should depend on implementation details.
--InteriorSeparator--
hard
--InteriorSeparator--
63
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What should developers do with the OO Design Principles?
--InteriorSeparator--
Apply the right OO Design Principle wherever such a principle is applicable and revise applications to identify where principles are applicable.
--InteriorSeparator--
easy
--InteriorSeparator--
68
}], role=model}, finishReason=STOP, avgLogprobs=-0.22604248157747217}]