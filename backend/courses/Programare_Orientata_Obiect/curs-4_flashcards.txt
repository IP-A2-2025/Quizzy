[{content={parts=[{text=--FlashCardSeparator--
Single
--InteriorSeparator--
What is the main purpose of a destructor function?
--InteriorSeparator--
To free the memory that an object occupies.
--InteriorSeparator--
easy
--InteriorSeparator--
4
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
When is the destructor called?
--InteriorSeparator--
(right) When a program ends for every global variable.
(right) When a function ends for every local variable.
(wrong) Only when memory is dynamically allocated.
(wrong) Never for local variables.
--InteriorSeparator--
medium
--InteriorSeparator--
10
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In what order are objects destroyed?
--InteriorSeparator--
Reverse order of their creation.
--InteriorSeparator--
easy
--InteriorSeparator--
11
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What happens if a destructor is missing, but the class has data members with destructors?
--InteriorSeparator--
(right) A default destructor is created.
(wrong) The program will not compile.
(wrong) Memory leaks will always occur.
(wrong) The program will crash.
--InteriorSeparator--
medium
--InteriorSeparator--
13
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
When should you use `delete[]` instead of `delete`?
--InteriorSeparator--
When destroying an array of objects created with `new[]`.
--InteriorSeparator--
medium
--InteriorSeparator--
16
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following are types of C/C++ operators?
--InteriorSeparator--
(right) Arithmetic
(right) Logical
(wrong) Exponential
(wrong) Imaginary
--InteriorSeparator--
easy
--InteriorSeparator--
18
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Can arithmetic operators be overloaded?
--InteriorSeparator--
Yes
--InteriorSeparator--
easy
--InteriorSeparator--
19
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Can the `sizeof` operator be overloaded?
--InteriorSeparator--
No
--InteriorSeparator--
easy
--InteriorSeparator--
24
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following operators CANNOT be overloaded?
--InteriorSeparator--
(right) `::` (scope resolution)
(wrong) `*` (multiplication)
(wrong) `+` (addition)
(wrong) `==` (equality)
--InteriorSeparator--
medium
--InteriorSeparator--
18
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What keyword is used to overload operators in C++?
--InteriorSeparator--
operator
--InteriorSeparator--
easy
--InteriorSeparator--
27
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the return type of an overloaded relational operator?
--InteriorSeparator--
It can be any type, but `bool` is recommended.
--InteriorSeparator--
medium
--InteriorSeparator--
39
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
If an overloaded operator is declared private, where can it be accessed?
--InteriorSeparator--
(right) Only within the class.
(wrong) Anywhere in the program.
(wrong) Only by friend functions.
(wrong) Only in derived classes.
--InteriorSeparator--
medium
--InteriorSeparator--
27
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
If operator+ is overloaded for a class Integer, and used as `n1 + n2`, how is it internally represented?
--InteriorSeparator--
`n1.operator+(n2)`
--InteriorSeparator--
medium
--InteriorSeparator--
29
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
If you overload the addition operator to allow adding an Integer object to a float, does this automatically allow adding a float to an Integer object?
--InteriorSeparator--
No, you must explicitly define the float + Integer case.
--InteriorSeparator--
hard
--InteriorSeparator--
34
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is a "friend" function in the context of operator overloading?
--InteriorSeparator--
A function that is not a member of the class but has access to the private members of the class.
--InteriorSeparator--
medium
--InteriorSeparator--
27
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What happens if you define both a member function and a friend function for the same operator with the same parameters?
--InteriorSeparator--
The code will not compile due to ambiguity.
--InteriorSeparator--
hard
--InteriorSeparator--
37
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following operators can NOT be static functions when overloaded?
--InteriorSeparator--
(right) operator=
(right) operator[]
(wrong) operator+=
(wrong) operator-
--InteriorSeparator--
hard
--InteriorSeparator--
45
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the difference between prefix and postfix increment operators when overloaded?
--InteriorSeparator--
Prefix returns the object after incrementing, postfix returns the object's value before incrementing.
--InteriorSeparator--
medium
--InteriorSeparator--
53
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
How is the postfix increment operator differentiated from the prefix increment operator in its function signature?
--InteriorSeparator--
The postfix version takes a dummy `int` parameter.
--InteriorSeparator--
medium
--InteriorSeparator--
49
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What are the requirements for the `new` operator when overloaded?
--InteriorSeparator--
(right) It must return `void*`.
(right) The first parameter must be `size_t`.
(wrong) It must be a friend function.
(wrong) It must call the constructor.
--InteriorSeparator--
hard
--InteriorSeparator--
58
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Does the `new` operator call the constructor for the allocated memory?
--InteriorSeparator--
No, the constructor is called automatically by the compiler after memory allocation.
--InteriorSeparator--
medium
--InteriorSeparator--
58
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is "placement new"?
--InteriorSeparator--
Overloading `new` with multiple parameters.
--InteriorSeparator--
medium
--InteriorSeparator--
59
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What should `new` and `delete` operators do when they fail?
--InteriorSeparator--
Throw exceptions
--InteriorSeparator--
medium
--InteriorSeparator--
62
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
When overloading the cast operator, do you need to specify the return type?
--InteriorSeparator--
No, the return type is implicitly the type you are casting to.
--InteriorSeparator--
medium
--InteriorSeparator--
63
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Can cast operators be declared with the `friend` specifier?
--InteriorSeparator--
No.
--InteriorSeparator--
hard
--InteriorSeparator--
64
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is a restriction of the indexing operator `[]` when overloaded?
--InteriorSeparator--
(right) It can only have one parameter.
(right) It cannot be a friend function.
(wrong) It must return a boolean.
(wrong) It must be a static function.
--InteriorSeparator--
hard
--InteriorSeparator--
67
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is a key difference between the indexing operator `[]` and the function call operator `()`?
--InteriorSeparator--
The function call operator can have multiple parameters or none, while the indexing operator must have one.
--InteriorSeparator--
medium
--InteriorSeparator--
71
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What type must the return value of the member access operator (`operator->`) be?
--InteriorSeparator--
A pointer to an object.
--InteriorSeparator--
hard
--InteriorSeparator--
73
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Can the member access operator (`operator->`) be defined outside the class as a friend function?
--InteriorSeparator--
No.
--InteriorSeparator--
hard
--InteriorSeparator--
75
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
How is the list operator (`,`) evaluated?
--InteriorSeparator--
From left to right, returning the last value.
--InteriorSeparator--
medium
--InteriorSeparator--
77
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
When overloading the list operator (`,`), what is recommended?
--InteriorSeparator--
Use the `friend` specifier to explain all the different type combinations.
--InteriorSeparator--
medium
--InteriorSeparator--
80
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What optimization is lost when overloading operators such as `||` and `&&`?
--InteriorSeparator--
Lazy evaluation (short-circuiting).
--InteriorSeparator--
hard
--InteriorSeparator--
83
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
When passing an object to a function by value, how is the object copied?
--InteriorSeparator--
Using the copy constructor. If no copy constructor exists, a `memcpy`-like operation is performed.
--InteriorSeparator--
medium
--InteriorSeparator--
86
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
When is a move constructor preferred over a copy constructor?
--InteriorSeparator--
When dealing with temporary objects.
--InteriorSeparator--
medium
--InteriorSeparator--
97
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
If a move constructor is defined but a copy constructor is not, what happens when attempting to copy an object?
--InteriorSeparator--
The code will fail to compile.
--InteriorSeparator--
hard
--InteriorSeparator--
88
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
If an object is passed to a function by reference or pointer, is a copy constructor required?
--InteriorSeparator--
No.
--InteriorSeparator--
medium
--InteriorSeparator--
89
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
When dealing with temporary objects, the compiler prefers:
--InteriorSeparator--
(right) Move constructor
(right) Move assignment
(wrong) Copy constructor
(wrong) Simple assignment
--InteriorSeparator--
medium
--InteriorSeparator--
97
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the problem with returning a reference to a local variable from a function?
--InteriorSeparator--
The local variable is destroyed when the function returns, leaving a dangling reference.
--InteriorSeparator--
hard
--InteriorSeparator--
107
--FlashCardSeparator--
}], role=model}, finishReason=STOP, avgLogprobs=-0.12259573274533635}]