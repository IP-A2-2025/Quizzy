***************Beginning Page***************
***************page number:1**************
OOP (C++): OO Modeling & Design
Dorel Lucanu
Faculty of Computer Science
Alexandru loan Cuza University, Iaei, Romania
dlucanu@info.uaic.ro
Object Oriented Programming 2021/2022

***************Ending Page***************

***************Beginning Page***************
***************page number:2**************
Q Models

9 Modeling with UML
Class Diagram

Q (Some) Object Oriented Design Principles
The Single-Responsibility Principle (SRP)
The Open-Closed Principle (CPP)
The Liskov Substitution Principle
Dependency Inversion Principle

Q Conclusion

***************Ending Page***************


***************Beginning Page***************
***************page number:3**************
Plan
ﬂ Models
Class Diagram
The Single-Responsibility Principle (SRP)
The Open-Closed Principle (CPP)
The Liskov Substitution Principle
Dependency Inversion Principle
i:| 5' i E if QQG

***************Ending Page***************

***************Beginning Page***************
***************page number:4**************
A Kind of Definition
A model is an abstraction of the software system to be
developed that makes the implementation (programming) of the
system easier.
A model has three main characteristics (Herbert Stachowiak,
1973):
o Mapping: a model is always an image (mapping) of
something.
0 Reduction: a model does not capture all attributes 0f the
original.
0 Pragmatism: a model should be useful.

***************Ending Page***************


***************Beginning Page***************
***************page number:5**************
Quality of a Model

It is determined by the following characteristics (Bran Selic,
2003):

. Abstraction

. Understandability

. Accuracy

O Predictiveness

O Cost-effectiveness

***************Ending Page***************

***************Beginning Page***************
***************page number:6**************
UML

o To write a model, you need a modeling language.

o UML (Unified Modeling Language) is a language and
modeling technique suitable for object-oriented
programming UML is used to view, specify, build, and
document object-oriented systems

0 In this course we will use UML elements to explain the
concepts and laws of OOP.

0 Free soft tools: BOUML, Argouml (open source), Visual
Paradigm UML (Online Express Edition),. ..

***************Ending Page***************


***************Beginning Page***************
***************page number:7**************
Plan
9 Modeling with urvu.
Class Diagram
The Single-Responsibility Principle (SRP)
The Open-Closed Principle (CPP)
The Liskov Substitution Principle
Dependency Inversion Principle
i:| 5' i E if QQG

***************Ending Page***************

***************Beginning Page***************
***************page number:8**************
U M L D | ag ram s
A
Structure Diagram Behavior Diagram
A A
Class Package Object State Machine Use Case
Diagram Diagram Diagram Diagram Diagram
Component Profile Activity Interaction
Diagram Diagram Diagram Diagram
A
Composition Structure
Diagram
Interaction Overview
Deployment Dlagram Dlagram
Diagram
Communication Timing
Diagram Diagram

***************Ending Page***************


***************Beginning Page***************
***************page number:9**************
Plan
9 Modeling with UML
Class Diagram
The Single-Responsibility Principle (SRP)
The Open-Closed Principle (CPP)
The Liskov Substitution Principle
Dependency Inversion Principle

***************Ending Page***************

***************Beginning Page***************
***************page number:10**************
Specification of a Class in UML
class Parser {
private:
string input/- m
vector<char> sigma; _ input : string
int index; —sigma : vector<char>
public: —index : int
char sym () ; + sym () : char
void nextSym () ; + nextSym() : void
i;

***************Ending Page***************


***************Beginning Page***************
***************page number:11**************
Notation
— input : string
— sigma : vector<char>

_ + sym () : char

"TpUt + nextSym( ) : void

sigma

index

nextSym() —

—

***************Ending Page***************

***************Beginning Page***************
***************page number:12**************
Parametrized Class

template<class T>
class Stack { 7”‘
private: LTJ

T* elts; Stack

int top; elts

public:

void push(T);

DOPO

};

***************Ending Page***************


***************Beginning Page***************
***************page number:13**************
Abstract Class

class-Ast {
public:

virtual int size() = O;

virtual int chldNo() = O; 5/290

virtual Ast* child(int i) = 0,- Ch/IdNPO,

virtual void print() I O; Chi/dam’)
}. Pr/"TO
Note the use of the italic font.

***************Ending Page***************

***************Beginning Page***************
***************page number:14**************
Generalization: Inheritance

string name; name

string address; address
public:

void changeAddress(); changeAdmessO
}; ‘
class Student : public Person {

list<Course> studyProgram; m
public:

void addCourse(Course); swdmegmHI
} ; addCourse(Course)

***************Ending Page***************


***************Beginning Page***************
***************page number:15**************
Generalization: Classification
class AstEmpty : public Ast {
i;
class AstNonEmpty : public Ast {
i;
—
A
— _
— _

***************Ending Page***************

***************Beginning Page***************
***************page number:16**************
Classmcatlon: A Slmple Case Study
—
—
A
Frm C++ Grammar (simpliﬁed)
literal:
int-constant
varename
— —
primary_expression: F —
literal
( expression )
_ —
_ _

***************Ending Page***************


***************Beginning Page***************
***************page number:17**************
| nte rface
<<interface>>
Printable
—

A

l
m
— —

A

—

***************Ending Page***************

***************Beginning Page***************
***************page number:18**************
Interfaces in C++
Are described using abstract classes:
class Printable {
public: virtual void print() = O;
t ;
class Person : public Printable {
public: Virtual void print();
l
void Person::print() {
l

***************Ending Page***************


***************Beginning Page***************
***************page number:19**************
Bldlrectlonal Bmary Assomatlons

— 1.2 *-
— —

class Professor {

private: list<Course*> courses;

}

class Course {

private: Profesor* lecturers[2];
}

***************Ending Page***************

***************Beginning Page***************
***************page number:20**************
Unidirectional Binary Associations
— an expression is evaluated in a state (the expression knows the
state it is evaluated)
— the state does not know for which expression it is used for
evaluation
IIIIIIII IIIIIIIIIII
‘-
class Expression {
private: State* state;
public: int valExpr(); // uses state->valVar()
l
class State {
public : int valVar(VarName vn);
// returns the value of the variable vn
l

***************Ending Page***************


***************Beginning Page***************
***************page number:21**************
Ass00|at|on Class
followers study
lliIIHIlIejaaaae-—-TAAAAAAAAAAAT14liiiiiiiiiill
‘ u
e e e Blnary assomatlon class
enroHO
graduateO
class Enrollment {
// class invariant: study l= empty
private:
list<Student*> followers;
list<StudyProgram*> study;
Date startDate;
public:
void enroll(Student, StudyProgram);
void graduate(Student, StudyProgram);
};

***************Ending Page***************

***************Beginning Page***************
***************page number:22**************
Shared Agregatlon
curriculum courses
StudyProgram Q m

class StudyProgram {

private: vector<Course*> courses;
};
class Course {

// class invariant: includedln != empty

private: list<StudyProgram*> curriculum;
};

***************Ending Page***************


***************Beginning Page***************
***************page number:23**************
Strong Agregatlon (Composrtlon)
configuration : < program, state )
state : var1 r—> va/1, var2 e> val2,
class Configuration {
private:
Ast program;
1 prooram 1 state State state;
m m H
class State {
private:
* -. alues map<VarName, Value> varValues;
varName };
value
—

***************Ending Page***************

***************Beginning Page***************
***************page number:24**************
Plan
Class Diagram
Q (Some) Object Oriented Design Principles
The Single-Responsibility Principle (SRP)
The Open-Closed Principle (CPP)
The Liskov Substitution Principle
Dependency Inversion Principle
Cl 5' i E if QQG

***************Ending Page***************


***************Beginning Page***************
***************page number:25**************
Plan
Q (Some) Object Oriented Design Principles
The Single-Responsibility Principle (SRP)

***************Ending Page***************

***************Beginning Page***************
***************page number:26**************
Definition
Single-Responsibility Principle
A class should have one and only one reason to change,
meaning that a class should have only one job.
Robert C. Martin. Principles of Object Oriented Design,
https://drive.google.com/file/d/OBymeqahinuGNHEthSOekchMkk/view

***************Ending Page***************


***************Beginning Page***************
***************page number:27**************
'S'H'P' 1/2
From C++ grammar (modified)
statement:
var-name : expression ; //asignement
{ statement } // compound statetement
(statement)* //sequential composition
if ( expression ) statement // if
if ( expression ) statement else statement //if

***************Ending Page***************

***************Beginning Page***************
***************page number:28**************
expr : Expression lexe91;sstign(li

varName : VarName :ojlgotndg ag __

stetements : Stetement* execCompound()

tag : ShapeType else if (tag == seq)
Too many responsibilities.

***************Ending Page***************


***************Beginning Page***************
***************page number:29**************
From C++ grammar (simplified)
statement:
assign-statement
compound-statement
statementeseq
selection-statement
assignestatement:
var-name : expression ;
compoundestatement:
{ statement }
statement-seq:
statement
statement-seq statement
selectionestatement:
if ( condition ) statement
if ( condition ) statement else statement

***************Ending Page***************

***************Beginning Page***************
***************page number:30**************
SRP2/2
—
A
w-wm
————

***************Ending Page***************


***************Beginning Page***************
***************page number:31**************
Plan
Q (Some) Object Oriented Design Principles
The Open-Closed Principle (CPP)

***************Ending Page***************

***************Beginning Page***************
***************page number:32**************
Definition
Open-Closed Principle
Software entities (classes, modules, functions, etc.) should be
open for extension, but closed for modification.
Robert C. Martin. Principles of Object Oriented Design.
https://drive.google.com/file/d/
OBthYaYDn8EgN2M5MTkwM2EtNWFkZCOOZTI3LWFjZTUtNTFhZGZiYmUZODcl/view

***************Ending Page***************


***************Beginning Page***************
***************page number:33**************
* ShapeContainer
— _
A
\
\
\
x
void load(stcl: :ifstream& inp)
while (inp) (
— — int tag;
lnp >> tag;
switch (tag) {
case RECTANGLE:
eéée CIRCLE:
)
}
If we add more shapes, we have to modify ShapeContainer: :load ().

***************Ending Page***************

***************Beginning Page***************
***************page number:34**************
OCP
The previous example can be fixed to respect OCP using
Object Factory Pattern (next lecture).

***************Ending Page***************


***************Beginning Page***************
***************page number:35**************
Plan
Q (Some) Object Oriented Design Principles
The Liskov Substitution Principle

***************Ending Page***************

***************Beginning Page***************
***************page number:36**************
Definition
Liskov1 Substitution Principle
Let P(x) be a property provable about objects x of type T.
Then P(y) should be true for objects y of type S, where Sis a
subtype of T.
ln other words, Sis a subtype of T if anywhere you can use a
T, you could also use an S (a T can be substituted by an S).
NB Here the notion of "subtype" should be meant as
"behavioural subtype" (we will explain later the difference).
Barbara Liskov, Jeannette M. Wing: A Behavioral Notion of Subtyping. ACM Trans. Program. Lang.
Syst. 16(6): 1811-1841 (1994)

1Turing Award, 2008, for contributions to programming languages

development, especially OO languages.

***************Ending Page***************


***************Beginning Page***************
***************page number:37**************
A Simple Example

class Base (
public:

Base() = default;

~Base() = default;

void doBaseAction() const ( privateBaseAction(); i
private:

void privateBaseAction() const { stdzzcout << "A base action\n"; i
i;
class Derived : public Base (
public:

Derived() = default;

~Derived() = default;

void doDerivedActiOn() const i stdzzceut << "A Derived action.\n"; i;
i;
int main() {

Base b;

Derived d;

d.doBaseAction();

return O;
i
It seems that Derived is a (behavioral) subtype pf Base.

***************Ending Page***************

***************Beginning Page***************
***************page number:38**************
A Counter-Example 1/4
A rushed modeling of the relation "Any square is a rectangle"
(this is an instance of the "is a" relation):
A

***************Ending Page***************


***************Beginning Page***************
***************page number:39**************
A Counter-Example 2/4
Let’s refine it:
- i i i i P(r) E r.area() ==
getWidth()*getHeigth()
helgth
setWidth()
setHeigth()
getWidth()
getHeigthO k
area() . r .
v0|d setSlze(|nt x) {
A setWidth(x); )
int getSizeO {
w return getWidth();
— }
setSizeO i i i i int area() ( return
getSize() getSize()’getSize();
area() }

***************Ending Page***************

***************Beginning Page***************
***************page number:40**************
A Counter-Example 3/4
Consider the code:
Square s;
s.setWidth(5); // inherited
s.setHeight(10); // inherited
Assume that s plays the role of a Rectangle.
Does it satisfy the property P(s)? No.
Question
What is the right relationship between "subclass" and
"subtype"?

***************Ending Page***************


***************Beginning Page***************
***************page number:41**************
A Counter-Example 4/4
A correct hierarchy:
-

***************Ending Page***************

***************Beginning Page***************
***************page number:42**************
Question
It seems that the subclass relation, given by
(child-class, partent-class)
is not the same with that of subtype.
So,
What is the right relationship between "subclass" and
"subtype"?

***************Ending Page***************


***************Beginning Page***************
***************page number:43**************
Types, Types, Types, . . . 1/3
From (online) manuals2 (partial):
Objects, references, functions including function template specializations,
and expressions have a property called type, which both restricts the
operations that are permitted for those entities and provides semantic
meaning to the otherwise generic sequences of bits.
Type classification
The C++ type system consists of the following types:
fundamental types
void
signed integer types int, long int, ...
floating-point types float, double,. . .
compound type
reference type
pointer type
array types
function types
class types
thtps : / /en . cppreference . com/w/cpp/language/type

***************Ending Page***************

***************Beginning Page***************
***************page number:44**************
Types, Types, Types, . . . 2/3
So, a class is a type?
N0, not completely true.
A class includes two orthogonal things:
static/behavioral type
implementation

***************Ending Page***************


***************Beginning Page***************
***************page number:45**************
Types, Types, Types, . . . 3/3
Static types (abstract view):
Declaration ofX Type associated toX Remark
int X; int
struct X {
int a; .
double b; 1nt x double product type
}
int X (double a) ; double ~> int function type
class X {
in? Size; void —> X constructor X()
publlc: . .
, t etSize()- X —> lnt getSlze
1n. g _ ', X >< int e X setSize
v01d setSlze(lnt a);
}
For classes, only the types of the public members (interface) are considered.

***************Ending Page***************

***************Beginning Page***************
***************page number:46**************
Subtyping Problem 1/2

When a type S is a subtype of a type T (written S <: T)?
For instance, each int is a long int. Do we have

(int,_+_: int >< int —> int) <: (long int,_+_: long int >< long int)?
YES, if we consider _ + _ as partial functions (no over/under-flow).
NO, if _ + _ as total functions (MAX_INT + 2 on int is different from
MAX_INT + 2 on long int).
What happens if we model int and long int with classes?

***************Ending Page***************


***************Beginning Page***************
***************page number:47**************
Subtyping Problem 2/2
More general questions:
When A—> B<: A’ —> B’?
What is typeOf(A), when A is a class?
When class B : public class A implies
typeOf(B) <: typeOf(A)? (i.e., when A and B respect LP?)

***************Ending Page***************

***************Beginning Page***************
***************page number:48**************
On
Contravariance/Covariance/ Invariance
Within a type system, the variance refers how the subtype
relation is promoted to compound types.
. a rule is covariant if preserves the ordering of types <:
0 a rule is contravariant if it reverses this ordering <:
o a rule is invariant if it is not neither covariant nor
cotravariant
E.g., the rule for function types is contravariant on arguments
and covariant on result:
A’ <: A B <: B’
(A —> B) <: (A’ —> B’)

***************Ending Page***************


***************Beginning Page***************
***************page number:49**************
Contravariance/Covariance/lnvariance
in C++
C++ for overridden functions is invariant on parameters type
and covariant on result type.3
From the manual:
The return type of an overriding function shall be either identical to the return
type of the overridden function or covariant with the classes of the functions.
If a function D::f overrides a function B::f, the return types of the functions are
covariant if they satisfy the following criteria:
(8.1) — both are pointers to classes, both are Ivalue references to classes, or
both are rvalue references to classes
(8.2) — the class in the return type of B::f is the same class as the class in
the return type of D::f, or is an unambiguous and accessible direct or indirect
base class of the class in the return type of D::f
(8.3) — both pointers or references have the same cv-qualification and the
class type in the return type of D::f has the same cv-qualification as or less
cv-qualification than the class type in the return type of B::f.
38ee also Course 5. a 51 , E :5 oqo

***************Ending Page***************

***************Beginning Page***************
***************page number:50**************
C++: Return Covarlant Example 1
class Base
(
public:
Base() = default;
virtual Base* clone() const { return new Base; )
virtual ~Base(){ stdzzcout << "~Base()\n"; )
virtual void introduceYourself() const {stdzzcout << "I am a Base.";}
l;
class Derived : public Base
{
public:
Derived () = default;
Derived* clone() const override { return new Derived; }
virtual void introduceYourself() const override {stdzzcout << "I am a Derived.\n";}
~Derived() Override ( stdzzcout << "~Derived()\n"; }
l;
int main() (
Derived d;
Base* pb = d.clone();
pb’>introduce¥ourself(); // I am a Derived.
delete pb;
return O;
l

***************Ending Page***************


***************Beginning Page***************
***************page number:51**************
. - 4
C++. Return Covarlant Example 2

class Animal {
public:

virtual void makeNoise() I O;

virtual ~Animal() I default;
l;
class Dog : public Animal (
public:

void makeNoise() override ( std::cout << "ham!\n"; }
};
class AnimalBreeder {
public:

virtual Animal* produce() I O;
l;
class DogBreeder : public AnimalBreeder (
public:

Dog* produce() override ( return new Dog(); }

l;
int main()(

DogBreeder db;

Dog* dp I db.prcduce();

dpe>makeNoise(); // ham

delete dp;
l

4 .. .

The example ls Insplred from here:
https://quuxplusone.github.io/blog/2019/01/20/covarianceand-contravariance/

***************Ending Page***************

***************Beginning Page***************
***************page number:52**************
C++: Argument Contravanant
(Counter) Example

class Animal (
public:

virtual void makeNoise() = O;

virtual ~Animal() = default;
i;
class Dog : public Animal (
public:

void makeNoise() override ( std::cout << "ham!\n"; }
i;
class DogDoctor {
public:

virtual void treat(Dog *dog) { stdzzcout << "Dog treated!\n"; )
i;
class AnimalDoctor z public DogDoctor (
public:

void treat<Animal * animal) override { stdzzcout << "Animal treated!\n"; i // error
i;
Remember that C++ is invariant on arguments.

***************Ending Page***************


***************Beginning Page***************
***************page number:53**************
Behavioral Type of a Class 1/3

Consider the following simple example:
class Square {

int size;
public:

Square(int s = O);

int getSize();

int area() throw(overflow_error);

void halve();
}

***************Ending Page***************

***************Beginning Page***************
***************page number:54**************
Behavioral Type of a Class 2/3
Includes also the behavioral interface of the objects and consists of:
o a description of the value space
* class invariants
Example: getSize () Z O
>r for each constructor c
— its signature
Example: Square : int —> Square
— precondition
Example: s Z O
e postcondition
Example: getSize () Z O
— the exceptions it signals

***************Ending Page***************


***************Beginning Page***************
***************page number:55**************
Behavioral Type of a Class 3/3
. for each public method m:
>r its signature
Example: area: Square —> int
halve : Square —> Square
* precondition
Example: even(qetSize()) (for halve)
* postcondition
Example: area() :: 0.25 >l< old(area()) (for halve)
>l< the exceptions it signals
o for each public attribute a:
96 its type

***************Ending Page***************

***************Beginning Page***************
***************page number:56**************
A Possmle Specmcatlon for the
Behaworal Type
type Square {

invariant getSize() >= O

Square(int s = O)
requires s >: O
ensures true
noexcept(true);

int getSize()
requires true
ensures true
noexcept(true);

int area()
requires true
ensures result :: getSize()*getSize()
throw(overflow_error)
void halve();
requires even(getSize())
ensures area() == O.25*old(area())
noexcept(true);
}

***************Ending Page***************


***************Beginning Page***************
***************page number:57**************
The Substitution Principle Explained
using Behavioral Types 1/2
A child class (subclass) B is a behavioral subtype of the parent class
(superclass) A, B <: A, if:

. the invariants of the superclass are preserved by the subclass
(B values are A values): the conjunction of the B invariants
implies conjunction of the A invariants, i.e.,

/\ ¢ :f /\ <i>
¢€Inv(B) d>€lnv(A)
0 for each overridden method m
— B::m() and A::m() have the same number of arguments
— contravariance of arguments: if the i-th argument of B::m()
is 6,- and the i-th argument of A::m() is 04,-, then a,- <: B,-
i covariance of result: if the result type of A::m() is a and the
result type of B::m() is 5, then ﬂ <: a

***************Ending Page***************

***************Beginning Page***************
***************page number:58**************
The Substitution Principle Explained
using Behavioral Types 2/2
e exception rule: the set of exceptions signaled by B::m() is
included in the set of exceptions signaled by A::m()
— semantics of the methods is preserved:
o the precondition of A::m() implies the precondition of B::m()
o the postcondition of B::m() implies the postcondition of
A::m()
N.B. This is a simplified version of the original definition.
Exercise. Show that T <: T (<: is reflexive).

***************Ending Page***************


***************Beginning Page***************
***************page number:59**************
Contravariance/Covariance Rule with
Diagrams
— — —
A A A
s <1 T I- II II
— — —
Contravariance
Contravariance Covariance of arguments and
of arguments of result Covariance
of result

***************Ending Page***************

***************Beginning Page***************
***************page number:60**************
Semantics Rule with Diagrams
T<:T, :-
PA i PB
QB :> QA

***************Ending Page***************


***************Beginning Page***************
***************page number:61**************
Contra-Example Revisited
The example "any square is a rectangle" violates several rules:
0 the nethod Square: :setHeigth() does not preserve
the Square invariant getWidth() I getHeigthO
0 the postcondition of Square: :area (> does not imply the
postcondition Of Rectangle: :area (l

***************Ending Page***************

***************Beginning Page***************
***************page number:62**************
Plan
Q (Some) Object Oriented Design Principles
Dependency Inversion Principle

***************Ending Page***************


***************Beginning Page***************
***************page number:63**************
Definition
o High-level modules should not depend 0n low-level
modules. Both should depend on abstractions.
o Abstractions should not depend on details. Details should
depend on abstractions.
Robert C. Martin. Principles of Object Oriented Design.
https://fi.ort.edu.uy/innovaportal/file/ZOBZ/l/designiprinciples.pdf

***************Ending Page***************

***************Beginning Page***************
***************page number:64**************
Abstract View
/// ‘ \\\
/ l \
// l \\
// // l \\ \\
A A A
Note the notational difference between the dependence and
inheritance relations. Inheritance also implies dependency.

***************Ending Page***************


***************Beginning Page***************
***************page number:65**************
Example
ShapeRepository -
¢ A v

***************Ending Page***************


***************Beginning Page***************
***************page number:66**************
Example
— m
A
w w m
— — — —

***************Ending Page***************

***************Beginning Page***************
***************page number:67**************
Plan
Class Diagram
The Single-Responsibility Principle (SRP)
The Open-Closed Principle (CPP)
The Liskov Substitution Principle
Dependency Inversion Principle
0 Conclusion
i:| 5' i E if QQG

***************Ending Page***************


***************Beginning Page***************
***************page number:68**************
Conclusion
. Models first.
o Apply the right OO Design Principle wherever such a
principle is applicable
o Revise your applications from previous laboratories and
design their models and identify the places where
principles are applicable.

***************Ending Page***************

