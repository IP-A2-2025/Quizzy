***************Beginning Page***************
***************page number:1**************
0 O P Gavrilut Dragos
Course 1

***************Ending Page***************

***************Beginning Page***************
***************page number:2**************
> Administrative
b Glossary
> Compilers
> OS architecture
sum mary b C++ history and revisions
> From C to C++
> Classes
b Classes - Data Members
> Classes - Methods

***************Ending Page***************


***************Beginning Page***************
***************page number:3**************
‘\ > Administrative

***************Ending Page***************

***************Beginning Page***************
***************page number:4**************
Administrative
b Site: https://sites.google.com/view/fii-poo/
b Final grade for the OOP exam:
- First lab examination (week 8) 9 30 points
- Second lab examination (week 14 or 15) 9 3O points
- Course examination 9 30 points
- Lab activity 9 up to 1 point for each laboratory and no more than 10 points in total
> Minimum requirements to pass OOP exam:
1. capability to write C++ programs based on specifications
2. capability to correctly apply OOP principles (inheritance, polymorphism, etc)
3. ability to understand OO principles/programming-techniques written in C++
4. ability to detect simple errors in a C++ program and understand them

***************Ending Page***************


***************Beginning Page***************
***************page number:5**************
m’ Glossary

***************Ending Page***************

***************Beginning Page***************
***************page number:6**************
Glossary

b API 9 Application Erogram interface

> Library — a set o functions that can be use by multiple programs at the same
time (for example math functions like cos, sin, tan, etc)

b GUI 9 graphic Qser interface

***************Ending Page***************


***************Beginning Page***************
***************page number:7**************
G lossa ry
b Compiler - a program that translates from a source code (a readable code)
into a machine code (binary code that is understand by a specific architecture
- x86, x64, ARM, etc)
> A compiler can be:
> Native - the result is a native code application for the specific architecture
> Interpreted - the result is a code (usually called byte-code) that requires an
interpreter to be executed. Its portability depends on the portability of its
interpreter
> JIT (gust 1n ‘l_'ime Compiler) - the result is a byte-code, but during the execution '
parts of this code are converted to native code for performance
Interpreted JIT Native
Faster, Low Le '<
Portable, High Level

***************Ending Page***************

***************Beginning Page***************
***************page number:8**************
Glossary
Source 1 Object File 1
Executable
Source 2 Object File 2
i Source n Object File n Libraries

***************Ending Page***************


***************Beginning Page***************
***************page number:9**************
G lossa ry
b Linker - a program that merges the object files obtained from the compiler
phase into a single executable
> It also merges various libraries to the executable that is being create.
b Libraries can be linked in the following ways:
> Dynamically: When application is executed, the operating system links it with the
necessary libraries (if available). If not, an execution error may appear.
> Static: The resulted executable code contains the code from the libraries that it
uses as well
> Delayed: Similar with the Dynamic load, but the libraries are only loaded when the '
application needs one function (and not before that moment).
Static Delayed Dynamically 4
Smaller co. ~
Portable

***************Ending Page***************

***************Beginning Page***************
***************page number:10**************
‘\ > ()S Architecture

***************Ending Page***************


***************Beginning Page***************
***************page number:11**************
> What happens when the OS executes a native application that is obtain from a
compiler such as C++ ?
b Let’s consider the following C/C++ file that is compile into an executable
application:
APP-CPP
#include <stdio.h>
int vector[100];
bool IsNumberOdd(int n) {
return ((n % 2)==6);
}
void main(void) {
int poz,i;
for (poz=9,i=1;poz<166;i++) {
if (IsNumberOdd(i)) {
vector[poz++] = i;
}
}
printf("Found 199 odd numbers l");
}

***************Ending Page***************

***************Beginning Page***************
***************page number:12**************
OS Architecture
b Let’s assume that we compile “App.cpp” on a Windows system using Microsoft
C++ compiler (cl.exe).
> App.cpp is compiled using dynamic linkage for libraries.
App.cpp App.obj App.exe
msvcrt.lib
kernel32.lib
ntdll.lib

***************Ending Page***************


***************Beginning Page***************
***************page number:13**************
OS Architecture
b Let’s assume that we compile “App.cpp” on a Windows system using Microsoft
C++ compiler (cl.exe).
> App.cpp is compiled using dynamic linkage for libraries. -
A .c .
pp pp APP'ObJ App.exe
msvcrt.lib
“printf” function tells the '
_ linker to use the CRT library
kernel32.lib (where the code for this
function is located). msvcrt.lib
is the Windows version of CRT
ntdll.lib (Q-BunIime) library.

***************Ending Page***************

***************Beginning Page***************
***************page number:14**************
OS Architecture
b Let’s assume that we compile “App.cpp” on a Windows system using Microsoft
C++ compiler (cl.exe).
> App.cpp is compiled using dynamic linkage for libraries. -
App.cpp APP'Obj App.exe
msvcrt.lib
The implementation of printf '
_ from msvcrt.lib uses system
kernel32.lib function to write characters to
the screen. Those functions
are located into the system
ntdll.lib library kernel32.lib

***************Ending Page***************


***************Beginning Page***************
***************page number:15**************
OS Architecture
b Let’s assume that we compile “App.cpp” on a Windows system using Microsoft
C++ compiler (cl.exe).
> App.cpp is compiled using dynamic linkage for libraries. -
App.cpp APP'Obj App.exe
msvcrt.lib
_ Kernel32.lib requires access to '
kernel32.lib windows kernel / lo-level API
functions. These functions are
provided through ntdll.lib
ntdll.lib

***************Ending Page***************

***************Beginning Page***************
***************page number:16**************
OS Architecture
b What happens when a.exe is executed:

***************Ending Page***************


***************Beginning Page***************
***************page number:17**************
OS Archltectu re
b Content of “app.exe” is copied in the process memory
k

***************Ending Page***************

***************Beginning Page***************
***************page number:18**************
OS Archltectu re
b Content of the libraries that are needed by “a.exe” is copied in the process
mm” —
msvcm —
kernel32.dll
kernel32.dll
ntdll dll ntdll.dll

***************Ending Page***************


***************Beginning Page***************
***************page number:19**************
OS Architectu re
b References to different functions that are needed by the main module are
Address of “printf” function is —
imported in App.exe from the
msvcrt.dll CRT librar
‘ Y’ I'-
kernel32.dll
ntdll.dll

***************Ending Page***************

***************Beginning Page***************
***************page number:20**************
OS Architecture
b Stack memory is created. In our example, variable poz, i, and parameter n

will be stored into this memory. —
> This memory is not initialized. That is —

why local variables have undefined
b Every execution thread has its own stack —

EVERY local variable and
function parameters will be
stored into this stack

***************Ending Page***************


***************Beginning Page***************
***************page number:21**************
OS Architecture
b Heap memory is allocated. Heap memory is a large memory from where smaller
buffers are allocated. Heap is used by —
the following functions:
, Opera... new —
> malloc, calloc, etc —
> Heap memory is not initialized.
-
> The same heap can be used by multiple
threats
kernel32.dll
ntdll.dll

***************Ending Page***************

***************Beginning Page***************
***************page number:22**************
OS Architecture
b A memory for global variable is allocated. This memory is initialized by
default With O values. This is Where all —
global variables are stored. If a global
variable has a default value (different —
than 0), that value will be set into this
memorym IE-
> In our case, variable vector will
be stored into this memory.
int vectornOO]
kernel32.dll
ntdll.dll

***************Ending Page***************


***************Beginning Page***************
***************page number:23**************
OS Architecture
> A memory space for constant data is created. This memory stores data that
will never change. The operating system —
creates a special virtual page that does
not have the write flag enable —
> Any attempt to write to the memory Global Variables
that stores such a variable will produce m
an exception and a system crash.
> In our example, the string “Found 199
odd numbers !” will be stored into this pp.exe /
memory. Found m odd
kernel32.dll numbers !"); ’
ntdll.dll

***************Ending Page***************

***************Beginning Page***************
***************page number:24**************
OS Archltectu re
b Let’s consider the followin exam-1e:
void main (void)
{
char 51,52,533
char *p;
51 = ‘a’;
52 = 'b';
53 = 'c';
p = &51;
*P = '9';
P[1] = '1';
*(P+2) = '2';
}i—

***************Ending Page***************


***************Beginning Page***************
***************page number:25**************
OS Architecture
b The program has 4 variable (3 of type char -’a’,’b’ and ‘c’ and a pointer ‘p’).
b Let’s consider that the stack start at the physical address 100
App.cpp Stack Address Var
Eloid main (void) 99 (S1)
2:2: 98 ($2)
ZZZ 93-; 97 (s3)
53 = ‘c';
p = 861; 93 (P)
*p = ‘6';
p[1] = ‘1';
*(p+2) = ‘2';
}—

***************Ending Page***************

***************Beginning Page***************
***************page number:26**************
OS Architecture
b Let’s also consider the following pseudo code that mimic the behavior of the
original code
\{loid main (void) 99 (S1)

2:2: 98 ($2)
ii Z "3-; 97 ($3)
53 = ‘c';
p = 861; 93 (P)
*p = ‘6';
pll] = ‘1';
*(p+2) = ‘2';

}—

***************Ending Page***************


***************Beginning Page***************
***************page number:27**************
OS Archltectu re

b Upon execution — the following will happen:

Eloid main (void) Stack[99] = 'a' 99 ‘a:
222i iism’ 98 ?
97 ?
31155;’ 93 ?
*p = ‘6';
p[1] = ‘1';
*(p+2) = ‘2';

}—

***************Ending Page***************

***************Beginning Page***************
***************page number:28**************
OS Archltectu re

b Upon execution — the following will happen:

Eloid main (void) Stack[99] = 'a' 99 ‘a:
2:2: igfzﬁg Stack[98] = 'b' 98 ‘b’

97 ?

Z =15; 93 ?
*p = ‘6';
p[1] = ‘1';
*(p+2) = ‘2';

}—

***************Ending Page***************


***************Beginning Page***************
***************page number:29**************
OS Archltectu re
b Upon execution — the following will happen:

Eloid main (void) Stack[99] = 'a' 99 ‘a:
2:2: igfzﬁg Stack[98] = 'b' 98 ‘b’
51:1; Stack[97] = 'c' 97 ‘c’

#1153’ 93 ?
*p = ‘6';
p[1] = ‘1';
*(p+2) = ‘2';
}—

***************Ending Page***************

***************Beginning Page***************
***************page number:30**************
OS Archltectu re

b Upon execution — the following will happen:

Eloid main (void) Stack[99] = 'a' 99 v.__ ‘a:
2;: Us: Stack[97] = 'c' 97 ‘C,

mStackpB] = 99 93 "5'99
= Q;

£1] = ‘1';
*(p+2) = ‘2';

}—

***************Ending Page***************


***************Beginning Page***************
***************page number:31**************
OS Archltectu re
b Upon execution — the following will happen:
Stack[93] = 99, Stack[99] = ‘0’
Eloid main (void) Stack[99] = 'a' 99 so!
2:2: igfzﬁg Stack[98] = 'b' 98 ‘b’
ZZZ ii Stack[97] = 'c' 97 ‘c’
5.3:: c3 Stack[93] = 99 93 99
*j
5W2; = ‘5|; Stack[Stack[93]] = a
}

***************Ending Page***************

***************Beginning Page***************
***************page number:32**************
OS Archltectu re
b Upon execution — the following will happen:
Stack[93] = 99, Stack[99-1] = ‘1’
Eloid main (void) Stack[99] = 'a' 99 so!
222$ iifm’ Stack[98] = 'b' 98 ‘1’
ZZZ ii Stack[97] = 'c' 97 ‘c’
;3==&_?§€, Stack[93] = 99 93 99
mﬁackﬁtackwﬂ] = '9'
}— Stack[Stack[93]-1] = '1'

***************Ending Page***************


***************Beginning Page***************
***************page number:33**************
OS Archltectu re
b Upon execution — the following will happen:
Stack[93] = 99, Stack[99-1] = ‘1’
Eloid main (void) Stack[99] = 'a' 99 so!
2:2: igfzﬁg Stack[98] = 'b' 98 ‘1’
2;: "2: Stack[97] = 'c' 97 ‘2,
;3==&s§;, Stack[93] = 99 93 99
*p = ‘6';
Stack[Stack[93]] = 'e'
}— Stack[Stack[93]-1] = '1'
Stack[Stack[93]-2] = '2'

***************Ending Page***************

***************Beginning Page***************
***************page number:34**************
OS Architecture (memory alignment)
int x;
int y;
int z;
};
EEIEIIIIIIIIIIIIIIIIIIII '
illlllllliiillllllllllllllllllli'

***************Ending Page***************


***************Beginning Page***************
***************page number:35**************
OS Architecture (memory alignment)
char x;
char y;
int z;
};
IIIIIIIIIIIIIIIIIIIIIIII '
HIlllliIIIIIIIIIIIIIIIIIIIIIII

***************Ending Page***************

***************Beginning Page***************
***************page number:36**************
OS Architecture (memory alignment)
‘1"""‘11‘“““““““““““\ ‘lilllililgilllliillllll
char x;
char y;
char z;
int t;
};
IIE IIIIIIIIIIIIIIIIIIIIIIII '
illlllliIIllllllllllllllllllllli'

***************Ending Page***************


***************Beginning Page***************
***************page number:37**************
OS Architecture (memory alignment)
char x;
char y;
222;
}. int t;
IIE IIIIIIIIIIIIIIIIIIIIIIIIII"
illllllllHillllllllllllllllllil

***************Ending Page***************

***************Beginning Page***************
***************page number:38**************
OS Architecture (memory alignment)
itr'uct Test
222; §i
222,’;
}. int t 3
IIIIIIIIIIIIIIIIIIIIIII!"
illlllllliiilllllllllllllllllil

***************Ending Page***************


***************Beginning Page***************
***************page number:39**************
OS Architecture (memory alignment)

itPUCt TESt sizeof(Test) = 24
char x;
short y;
double z;
char s;
short t;
int u;

};

IIIIIIIIIIEEEEE IIIHEEHIIIIIII! '
iiiillllllil
0 1 2 3 4 5 6 7 8 9 0 1 2 3 ‘4A

***************Ending Page***************

***************Beginning Page***************
***************page number:40**************
OS Architecture (memory alignment)
Sﬁﬁﬁle §§
int z;
};
EEEEIIIIIIII
iiiillllllll '

***************Ending Page***************


***************Beginning Page***************
***************page number:41**************
OS Architecture (memory alignment)
IIIIIIIIIIEIIIIIIIIIIIIIIIIIIII '
illllllliiiillllllllllllllllllllll

***************Ending Page***************

***************Beginning Page***************
***************page number:42**************
OS Architecture (memory alignment)
2:25:15?“
{ char x;
short y;
int z;
char t;
};
IIIEEEEIIIIIIIIIIIIIIIIIIIIIIII '
illllllillllllllllllllllllllllli'

***************Ending Page***************


***************Beginning Page***************
***************page number:43**************
OS Architecture (memory alignment)
::::§;"%:::k<2>
{ char x;
short y;
int z;
char t;
};
IIIIIIIIEIIIIIIIIIIIIIIIIIIIIII '
illllllliiiillllllllllllllllllll

***************Ending Page***************

***************Beginning Page***************
***************page number:44**************
OS Architecture (memory alignment)
_declspec(align(16)) struct Test
{
char x;
short y;
int z;
char t;
};
\ IIIIIIIIIIIIIIEIIIIIIIIIIIIIIII '
illlllllllllliiillllllllllllllli
0 1 2 3 4 5 /

***************Ending Page***************


***************Beginning Page***************
***************page number:45**************
OS Architecture (memory alignment)
struct Test struct Test2
{ {
char x; char x;
short y; ShOPt Y3
TestZ z; int z;
int t; };
char u;
};
IIIIIIIIEEE EIIIIIIIIIIIIIII
HIIIIFEIWHIIIIIIIIIIIIIIIIIIII! '
Tes'.t22123456789 l
-—_’_—-
IIIIEEE
EIIIIIIE

***************Ending Page***************

***************Beginning Page***************
***************page number:46**************
OS Architecture (memory alignment)
b Alignment rules for cl.exe (default settings)

b Every type is aligned at the first offset that is a multiple of its size.

b Rule only applies for basic types

b To compute an offset for a type, the following formula can be used:

ALIGN(position,type) é (((position — 1)/sizeo-F(type))+1)*sizeof(type)

b The size of a structure is a multiple of the biggest basic type size used
in that structure

b Directive: pragma pack and declspecgalign) are specific to
Windows C++ compiler (cl.exe)

***************Ending Page***************


***************Beginning Page***************
***************page number:47**************
> C++ history and
revisions

***************Ending Page***************

***************Beginning Page***************
***************page number:48**************
C++ history and revisions
-—
1979 Bjarne Stroustrup starts to work at a super class of the C language.
The initial name was C with Classes
1983 The name is changed to C++
1990 Borland Turbo C++ is released
1998 First C++ standards (ISO/IEC 1488221998) 9 C++98
2003 Second review 9 C++03
2005 Third review 9 C++0x
2011 Fourth review 9 C++11
2014 Fifth review 9 C++14
2017 The sixth review is expected 9 C++17
2020 Seventh review 9 C++20
2023 Eight review 9 C++23 or C++2b
/

***************Ending Page***************


***************Beginning Page***************
***************page number:49**************
C++98

Keywords asm do if return typedef auto double inline short typeid bool
dynamic_cast int signed typename break else long sizeof union
case enum mutable static unsigned catch explicit namespace
static_cast using char export new struct virtual class extern
operator switch void const false private template volatile
const_cast float protected this wchar_t continue for public
throw while default friend register true delete goto
reinterpret_cast try

Operators { } [ ] # ## ( )
<: :> <% %> %: %:%: ; :
new delete? :: . .*
+ * / % A & | ~
l = < > += =
*= /= %=
A: &= |= << >> >>= <<= == !=
<= >= && | | ++ ,
>* >

/

***************Ending Page***************

***************Beginning Page***************
***************page number:50**************
C++ compilers
b There are many compilers that exists today for C++ language. However, the
most popular one are the following:
Compatibility
Visual C++ Microsoft 2021 (14.29.30133) C++20
(C++23 partial)
GCC/G++ GNU Compiler 11.2 C++20
(C++23 partial)
Clang (LLVM) 13.0.1 C++20
(C++23 partial)

***************Ending Page***************


***************Beginning Page***************
***************page number:51**************
M’ From C to C++

***************Ending Page***************

***************Beginning Page***************
***************page number:52**************
C to C++
b Let’s look at the following C code.
APP-CPD
struct Person
{
int Age;
int Height;
}
void main()
{
Person p;
printf(“Age = %d”,p.Age);
p.Age = —5;
p.Height = 100000;
}
I > What can we observe that does not have any sense ?

***************Ending Page***************


***************Beginning Page***************
***************page number:53**************
C to C++
b Let’s look at the following C code.
APP-CPD
struct Person
{
int Age;
int Height;
}
void main()
{
Person .'
p.Age = -5;
p.Height = 100000;
}
> The program is correct, however having these values for the field Age and
Height does not make any sense.
b There is no form of initialization for the variable p. This means that the value
for the Age field that printf function will show is undefined.

***************Ending Page***************

***************Beginning Page***************
***************page number:54**************
C to C++
b The solution is to create some functions to initialize and validate structure Person.
App.c App.c
struct Person struct Person
{ {
int Age; int Age;
int Height; int Height;
} }
void main() void Init(Person *p)
{ {
-- .. .- p->Age= 10;
printf(“Age = %d”,p.Age); p->Height= 100;
p.Age = —5; }
p.Height = 100000; void SetAge(Person *p,int value)
} {
if ((value>0) && (value<200))
p->Age= value;
}
_ void SetHeight(Person *p,int value)
{
if ((value>50) && (value<300))
p->Height= value;
}
void main()
{
Person p;
Init(&p);
SetAge(&p, —5);
SetHeight(&p, 100000);
}
— +

***************Ending Page***************


***************Beginning Page***************
***************page number:55**************
C to C++
b This approach while it provides certain advantages also comes with some drawbac
App.c
struct Person
{
int Age;
int Height;
}
void Init(Person *p)
{
p->Age= 19;
p->Height= 199;
}
void SetAge(PePson *p,int value)
{
if ((value>9) && (value<299))
p->Age= value;
}
void SetHeight(Person *p,int value)
{
if ((value>59) && (value<399))
p->Height= value;
}
void main()
{
Person p;
Init(&p);
SetAge(&p, —5);
SetHeight(&p, 199999);
}

***************Ending Page***************

***************Beginning Page***************
***************page number:56**************
C to C++
b This approach while it provides certain advantages also comes with some drawbac
APP-c a) Pointer “p” from functions SetAge and
itPUCt Person SetHeight must be validated
int Age;
int Height;
}
void Init(PePson *p) { m }
void SetAge(PePson *p,int value)
{
if ((value>0) && (value<200) && -
p->Age= value;
}
void SetHeight(PePson *p,int value) { m }
void main()
{
Person p;
Init(&p);
SetAge(&p, —5);
SetHeight(&p, 100000);
}

***************Ending Page***************


***************Beginning Page***************
***************page number:57**************
C to C++
b This approach while it provides certain advantages also comes with some drawbac
APP-c a) Pointer “p” from functions SetAge and
2mm Person SetHeight must be validated
122 ﬁght, b) We can still change the values for fields Age
} and Heights and the program will compile
void Init(Person *p) { m }
and execute.
void SetAge(Person *p,int value)
{
i-F ((value>0) && (value<290) && -
p->Age= value;
}
void SetHeight(Person *p,int value) { m }
void main()
{
Person p;
Init(&p);
SetAge(&p, -5);
- .-'-- :. 99990);
-.Hei;ht = -2'
}

***************Ending Page***************

***************Beginning Page***************
***************page number:58**************
C to C++
b This approach while it provides certain advantages also comes with some drawbac
a) Pointer “p” from functions SetAge and
itPUCt Person SetHeight must be validated
122 ﬁght; b) We can still change the values for fields Age
} and Heights and the program will compile
void Init(Person *p) { m }
and execute.
void SetAge(Person *p,int value) { m } . _ 0 . _ _

_d S tH _ WP * _ t 1 ) c) Variable p is not initialized by default (we
V01 e elg em“ Mn va “e { } have to call a special function to do this).
void main()

{ l-- -_ -
- A=e = %d",p Age);
}

***************Ending Page***************


***************Beginning Page***************
***************page number:59**************
C to C++
b This approach while it provides certain advantages also comes with some drawbac
a) Pointer “p” from functions SetAge and
itruct Person SetHeight must be validated
is: ﬂight; b) We can still change the values for fields Age
} and Heights and the program will compile
void Init(Person *p) {...}
and execute.
void SetAge-int value) {...} _ _ _ . _ _

_d S tH _ h _ t 1 ) { } c) Variable p is not initialized by default (we
V01 e elg ' em“ p 1n va “e have to call a special function to do this).
void AddYea-int value) {...} _ . _

_d AddH _ ht- _ t 1 ) { } d) Havmg a lot of functions that work With a

g p structure means that each time one of
int Ge"Ag- {...} those functions is called we need to be sure
int GetHeight- {...} that the right pointer is pass to that
— function.

***************Ending Page***************

***************Beginning Page***************
***************page number:60**************
C to C++
Basically , we need a language that can do the following:
b Restrict access to certain structure fields
> There should be an at least one initialization function that is
called whenever an instance of that structure is created.
> We should find a way to not send a pointer to the structure every
time we need to call a function that modifies different fields of
that structure
b We should not need to validate that pointer (the validation should
be done during the compiler phase).

***************Ending Page***************


***************Beginning Page***************
***************page number:61**************
C to C++ (Conversmns)
Appﬁ APP-CPD
struct Person
{
int Age;
}
void SetAge(Person *p,int value)
{
if (p==NULL)
return;
if ((value>9) && (value<299))
p->Age = value;
}
void Init(Person *p)
{
if (p==NULL)
return;
p->Age = 19;
}
void main()
{
Person p;
Init(&p);
SetAge(&p,10);
}
__________________________________________ _____________________________:7,--------

***************Ending Page***************

***************Beginning Page***************
***************page number:62**************
C to C++ (Conversmns)
Appﬁ APP-CPD
int Age;
}
void SetAge(PePson *p,int value)
{
if (p==NULL)
return;
if ((value>9) && (value<299))
p->Age = value;
}
void Init(Person *p)
{
if (p==NULL)
return;
p->Age = 19;
}
void main()
{
Person p;
Init(&p);
SetAge(&p,10);
}
— +

***************Ending Page***************


***************Beginning Page***************
***************page number:63**************
C to C++ (Conversmns)
Appﬁ APP-CPD
struct Person class Person
{ {
int Age; private: . _ . ,
} Access modlfler (spec1f1es
\{101d SetAge(Person *p,1nt value) Who can access the fields
if (p==NULL> that are declare after it)
return;
if ((value>9) && (value<299))
p->Age = value;
}
void Init(Person *p)
{
if (p==NULL)
return;
p->Age = 10;
}
void main()
{
Person p;
Init(&p);
SetAge(&p,16);
}
__________________________________________ ____________________________:;,--------

***************Ending Page***************

***************Beginning Page***************
***************page number:64**************
C t C (C ' )
Appﬁ APP-CPD
struct Person class Person
{ {
}
void SetAge(Person *p,int value)
{
if (p==NULL)
return;
if ((value>9) && (value<299))
p->Age = value;
}
void Init(Person *p)
{
if (p==NULL)
return;
p->Age = 19;
}
void main()
{
Person p;
Init(&p);
SetAge(&p,10);
}
— +

***************Ending Page***************


***************Beginning Page***************
***************page number:65**************
C to C onversions
++ (c >
struct Person class Person
{ {
int Age; private:
int Age;
if (p==NULL)
return;
if ((value>0) && (value<290))
p->Age = value;
}
void Init(Person *p)
{
if (p==NULL)
return;
p->Age = 19;
}
void main()
{
Person p;
Init(&p);
SetAge(&p,10);
}
__________________________________________ ____________________________f;7_--------

***************Ending Page***************

***************Beginning Page***************
***************page number:66**************
C to C++ (COHV€|‘SIOHS)
Appﬁ APP-CPD
struct Person class Person
{ {
int Age; private:
} int Age;
void SetAge(Person *p,int value) public:
{ nu - Are 'l _ - -
1+ <p==NULL>
, return; } Constructor
1f ((value>0) && (value<290))
p->Age = value;
if (p==NULL)
return;
p->Age = 19;
}
void main()
{
Person p;
Init(&p);
SetAge(&p,10);
}
— +

***************Ending Page***************


***************Beginning Page***************
***************page number:67**************
C to C onversions
++ (C )
APP-GDP
struct Person class Person
{ {
int Age; private:
} int Age;
v01: e Age 'erson p,1n va ue public:
{ void SetAge(int value);
if (p==NULL) Person();
return;
if ((value>0) && (value<290)) v01. PersonzzSetAge 1nt va ue
p->Age = value; {
} if ((value>0) && (value<200))
v01. n1 'erson "p this->Age = value;
{ }
if (p==NULL)
return;
p->Age = 19;
}
void main()
{
Person p;
Init(&p);
SetAge(&p,10);
}
__________________________________________ ____________________________l;7_--------

***************Ending Page***************

***************Beginning Page***************
***************page number:68**************
C to C onversions
++ (C )
APP-CW
struct Person class Person
{ {
int Age; private:
} int Age;
void SetAge(Person *p,int value) public:
{ void SetAge(int value);
if (p==NULL) Person();
return; }
if ((value>0) && (value<290)) void Person::SetAge(int value)
.ge = value; {
} if ((value>9) && (value<299))
void Init(Person *p) -ge = value;
{ }
if (p==NULL)
return;
p->Age = 19;
}
void main()
{
Person p;
Init(&p);
SetAge(&p,10);
}
__________________________________________ ____________________________f;7_--------

***************Ending Page***************


***************Beginning Page***************
***************page number:69**************
C to C onversions
++ (c >
APP'CPP
struct Person class Person
{ {
int Age; private:
} int Age;
void SetAge(Person *p,int value) public:
{ void SetAge(int value);
if (p==NULL) Person();
return; }
if ((value>0) && (value<290)) void Person::SetAge(int value)
p->Age = value; {
} if ((value>9) && (value<299))
v01. Init Person p this->Age = value;
{
if (p==NULL) Person::Person()
return; {
} }
v01. main
{
Person p;
Init(&p);
SetAge(&p,10);
}
__________________________________________ ____________________________f;7_--------

***************Ending Page***************

***************Beginning Page***************
***************page number:70**************
C to C onversions
++ (C )
App.c App.cpp
struct Person class Person
{ {
int Age; private:
} int Age;
void SetAge(Person *p,int value) public:
{ void SetAge(int value);
if (p==NULL) Person();
return; }
if ((value>0) && (value<290)) void Person::SetAge(int value)
p->Age = value; {
} if ((value>9) && (value<299))
void Init(Person *p) this->Age = value;
{ }
if (p==NULL) Person::Person()
return; {
p->Age = 19; this->Age = 19;
} }
void main() void main()
{ {
e ge rule);
}
__________________________________________ _____________________________:7_--------

***************Ending Page***************


***************Beginning Page***************
***************page number:71**************
C to C onversions
++ (C )
APP-CW
struct Person class Person
{ {
int Age; private:
} int Age;
void SetAge(Person *p,int value) public:
{ void SetAge(int value);
if (P==NULL) Person();
return; }
if ((value>0) && (value<290)) void Person::SetAge(int value)
p->Age = value; {
} if ((value>9) && (value<299))
void Init(Person *p) this->Age = value;
{ }
if (p==NULL) Person::Person()
return; {
p->Age = 19; this->Age = 19;
} }
void main() void main()
{ {
PEPSOn p; " 0| l‘
}
}
__________________________________________ ____________________________f;7_--------

***************Ending Page***************

***************Beginning Page***************
***************page number:72**************
struct Person class Person
{ {
int Age; private:
} int Age;
void SetAge(Person *p,int value) public:
{ void SetAge(int value);
if (p==NULL) Person();
return; }
if ((value>0) && (value<200)) void Person::SetAge(int value)
p->Age = value; {
} if ((value>0) && (value<200))
void Init(Person *p) this->Age = value;
{ }
if (p==NULL) Person::Person()
return; {
p->Age = 10; this->Age = 10;
} }
void main() void main()
{ {
Person p; Person p;
Init(&p); -.SetA;e 10 '
A ' 1 ' - -
p ge Compller error - fleld
} Age IS declared as
Age

***************Ending Page***************


***************Beginning Page***************
***************page number:73**************
‘\ > Classes

***************Ending Page***************

***************Beginning Page***************
***************page number:74**************
Classes (format)
b Member variables
‘z. Variable defined as member of the class
‘z. Each data member can have its own access modifier
.1. Data member can also be static
‘z. A class may have no data members
b Member functions (methods)
‘z. Functions define within the class
‘z. Each method can have its own access modifier
‘z. A method can access any data member defined or other method defined in the class regardless of its access
modifier
a. A class may have no methods
b Constructors
a. Methods without a return type that are called whenever an instance of a class is created
a. A class does not have to have constructors
‘z. A constructor may have different access modifiers
> Destructor
‘z. A function without a return type that is called whenever an instance of a class is destroyed
‘z. A class does not have to have a destructor
> Operators

***************Ending Page***************


***************Beginning Page***************
***************page number:75**************
Classes
> (Access modifiers)

***************Ending Page***************

***************Beginning Page***************
***************page number:76**************
Classes (access modifiers)
b The are 3 access modifiers defined in C++ language:
b QUbliC (allow access to that member for everyone)
> grivate (access to that member is only allowed from functions
that were defined in that class). This is the default access
modifier.
\ > grotected

***************Ending Page***************


***************Beginning Page***************
***************page number:77**************
Classes (access modifiers)

b The code compiles and runs

glass Person. correctly

} _ _ i“ Age’ b Member “Age” from class Person is

lm “1:an _ declared public and may be access
\ } JAZZ 316; from outside the class.

***************Ending Page***************

***************Beginning Page***************
***************page number:78**************
Classes (access modifiers)
b This code won’t compile (Age is
Ems PETS“ _ defined as private and can not be
access outside its class/ scope).
goid main() 0

\ }

***************Ending Page***************


***************Beginning Page***************
***************page number:79**************
Classes (access modifiers)
b The code compiles and runs
glass Penson correctly
prlvate:
publii'f Age‘ _ > From outside the class scope only
} Md SHAW“ val)’ the SetAge method is call (SetAge
void Per'son: :SetAge(int val) , _ ,
{ 1s defined as pUbllC)
‘201d maino b As SetAge is a method in class
Ziiiilgfiim); Person it can access any other
} method or data member
regardless of their access
modifiers.

***************Ending Page***************

***************Beginning Page***************
***************page number:80**************
Classes (access modifiers)

b This code won’t compile (member
Eli” PM‘ . Age from class Person is private
}O_d- and can not be access outside its
{ Person ' scope)‘

} b If no access modifier is specified,
the default access modifier will be
private.

***************Ending Page***************


***************Beginning Page***************
***************page number:81**************
Classes (access modifiers)
APP-¢PP b This code won’t compile (member
-Person { ° '

int Age; Age from class Person is private
};_ _ and can not be access outSide its
v01d ma1n()
{ scope).

Person p;

p.Age = 10;
}—
APP-CPP b This code will compile. C++
-Person {

int Age; structures support access
};'d _ o modifiers as well. However, the
V01 ma1n . .
{ default access modifier for a

P s . o

553"}... structure is public.
}

***************Ending Page***************

***************Beginning Page***************
***************page number:82**************
Classes
> (Data members)

***************Ending Page***************


***************Beginning Page***************
***************page number:83**************
Classes (member data)
> Member data are variables defined
Ems PETS” . within the class
publiZTt Agemeight’ > In this example - Age and Height
} ‘d _ Om" Name’ are private, and Name is public
{
\ }

***************Ending Page***************

***************Beginning Page***************
***************page number:84**************
Classes (member data)
APP-CPP b This code does not compile
Eh“ PM‘ because Age is a private data
rivate:

P int Age,Height; member

public:

char *Name;
}
void main()
{ -- . .

\ }

***************Ending Page***************


***************Beginning Page***************
***************page number:85**************
Classes (member data)
APP~CPP b This code compiles because Name
Ems Palm is declared as public.
PPlvagﬁé Age,Height;
public:
char *Name;
}
void main()
{ -- .l .
\ }

***************Ending Page***************

***************Beginning Page***************
***************page number:86**************
Classes (member data)
> Member data can also be static
Ems Pefscm . and have access modifiers at the
Wm't@ - same time.
\ }

***************Ending Page***************


***************Beginning Page***************
***************page number:87**************
Classes (member data)
b Member data can also be static and
glass Pm" have access modifiers at the same

prlvaZEttAgeiniil'ti timG

Publigéar *ameN ’ b Any static data member that is

Static int Y; defined within a class has to be
defined outside its class as well
(similar to a global variable).

b One can also initialize this static
variables. If you do not initialize
these variables, the result is identical
to the use of global variables (the
default value will be O)

***************Ending Page***************

***************Beginning Page***************
***************page number:88**************
App.cpp > Static data members can be access as the
class Person scope of the class or as a member from of any
{ .
private: Instance of that class.
int Age,Height; , . .
static int x; > In thlS case, after the code IS executed, Y Wlll
public: b 6
char *Name; E3 °
static int Y;
}
int Personsz;
int PersonzzY = 10;
void main()
{
Person .-
p.Y = 5;
}

***************Ending Page***************


***************Beginning Page***************
***************page number:89**************
App.cpp > The code does not compile because X is
class Person private.
{
Prime‘ _ > We need to create a method to be able to
1nt Age,He1ght; .
static int x; access thlS value.
public:
char *Name;
static int Y;
}
int Personsz;
int PersonzzY = 10;
void main()
{
Person .-
}

***************Ending Page***************

***************Beginning Page***************
***************page number:90**************
App.cpp > Now the code compiles and X value is set to 6
class Person
{
private:
int Age,Height;
static int X;
public:
char *Name;
static int Y'
}
int Personsz;
int PersonzzY = 10;
void Person::SetX(int value)
{
X = value;
}
void main()
{
Person .-
}

***************Ending Page***************


***************Beginning Page***************
***************page number:91**************
App.cpp > The code compiles and runs correctly
Elass C1 > Static data members belong to the class and
}_ int XiYi not to the instance - that’s why they don’t
ciass cz count when we compute the size of an

{ .

int X”; instance
static int Z; 0 0
}; > A class may be defined Without any data
E1355 CB member. ln this case it’s size will be 1.
static int T; _ _ .

}; > Upon execution the program Will print:

class C4

§_ sizeof(C1) = 8

int C2::Z; .

mtBuR SlZEOf<C2> = 8

void main()

{ - _
print-F(“sizeo-F(C1)=%d”,sizeo-F(C1)); Slzeo-F(C3) _ 1
printf(“sizeof(C2)=%d”,sizeof(C2));
print'F(“size0'F(C3)=%d”,size0'F(C3)); sizeo-F(C4) = 1
printf(“sizeof(C4)=%d”,sizeof(C4));

}

***************Ending Page***************

***************Beginning Page***************
***************page number:92**************
Classes (member data)

App.cpp Address Name Value

$1.355 Date 100000 Date::Z 0

31%;?“ 300000 d1 .x 3
static int Z;

1; 300004 d1.Y 3

1nt Date::Z;

fid main" 300008 d2.X ?

} Date d1’d2’d3’ 300012 d2.Y 2
300016 d3.X 3
300020 d3.Y 3

***************Ending Page***************


***************Beginning Page***************
***************page number:93**************
Classes (member data)
App.cpp Address Name Value
$1.355 Date 100000 Date::Z 5
31%;?“ 300000 d1 .x 3
static int Z;
1; 300004 d1.Y 3
int Date::Z;
fid main" 300008 d2.X 3
_’d3’ 300012 d2.Y 2
}
300016 d3.X 3
300020 d3.Y 3

***************Ending Page***************

***************Beginning Page***************
***************page number:94**************
Classes (member data)

App.cpp Address Name Value

$1355 Date 100000 Date::Z 5
static int Z;

}; 300004 d1.Y 2

int Date::Z;

fid main" 300008 d2.X ?
3f; 22%,st 300012 d2.Y ?

} 300016 d3.X 3

300020 d3.Y 2

***************Ending Page***************


***************Beginning Page***************
***************page number:95**************
Classes (member data)
App.cpp Address Name Value
$1.355 Date 100000 Date::Z 5
31%;?“ 300000 d1 .x 7
static int Z;
3; 300004 d1.Y 3
1nt Date::Z;
fid main" 300008 d2.X 3
3?; :1é332,d3; 300012 d2.Y 6
} 300016 d3.X 3
300020 d3.Y 3

***************Ending Page***************

***************Beginning Page***************
***************page number:96**************
Classes (member data)
App.cpp Address Name Value
$1.355 Date 100000 Date::Z 6
ubli :
p in‘; m 300000 d1 .x 7
static int Z;
}; 300004 d1 .Y 3
int Date::Z;
fid main" 300008 d2.X 3
a e d ,d ,d g
3J2 3532 3 300012 d2.Y 6
d1.X = 7;
d2.Y = d3.z + 1- 300016 d3.X ?
} 300020 d3.Y 3

***************Ending Page***************


***************Beginning Page***************
***************page number:97**************
Classes (member data)
App.cpp Address Name Value
$1.355 Date 100000 Date::Z 6
ubli :
p in‘; m 300000 d1 .x 7
static int Z;
3; 300004 d1 .Y 3
int Date::Z;
goid main<> 300008 d2.X 3
3?; :1§?2’d3’ 300012 d2.Y 6
d1.X = 7;
d2.Y = d3.z + 1; 300016 d3.X 11
300020 d3.Y 3
}

***************Ending Page***************

***************Beginning Page***************
***************page number:98**************
Classes
> (Methods)

***************Ending Page***************


***************Beginning Page***************
***************page number:99**************
Classes (methods)
APP-CPP b Methods are functions define within
glass PM‘ the class. Their main role is to
PPivatjgt Age; operate and change data members
public?“ CheckValid<i“t v.1); from the class (especially private
}. void SetAge(int val); ones)
[an1 PersonzzCheckValid(int val) k h
rem (mm) && (va1<2oo)); b Just l1 e data member, a met od can
} . . have an access modifier.
:01d Person::SetAge(1nt val)
1+ (Chiﬁkvalidwaml b A method can access any other
lS—> ge = va g .
} _d _ <> method declared in the same scope
{ P (that belongs to the same class)
erson p;
} P-SetAge(4@); regardless of that methods access
modifier.

***************Ending Page***************

***************Beginning Page***************
***************page number:100**************
APP-CPP b A method can be static and have
1 P ' -
Esss an access mod1f1er at the same
private: .
int Age; t1m€.
publi '
v01- e ‘ge 1n va ;
};
bool Person::Check(int val)
{
return ((va1>0) && (va1<200));
}
void Person::SetAge(int val)
{
if (Check(va1))
this->Age = val;
}
void main()
{
Person p;
if (Person::Check(40))
{
printf("40 is a valid age");
}
}

***************Ending Page***************


***************Beginning Page***************
***************page number:101**************
Classes (methods)
APP-CPP b In this case the code does not
Eh“ PM‘ compile because Check method is
rivate: .
p int Ae- declared private,
public:
void SetAge(int val);
$801 Person::Check(int val)
{ return ((va1>0) && (va1<200));
void Person::SetAge(int val)
{ if (Check(va1))
this->Age = val;
}
void main()
{
Person p;
if (Person::Check(40))
grintf("40 is a valid age");
}
}

***************Ending Page***************

***************Beginning Page***************
***************page number:102**************
Classes (methods)
APP-CPP b The code compiles - SetAge
Eh“ PM‘ method is public and can be called
private:

1225253001 Checkant val); b Any method (even if it is declared
ublic: . .
:_ void Set/Again val); private like method Check) can be
$301 PePSOHIICheck(int va1> accessed by another method
} em <<va1>@>&&<va1<2@@>>; declared in that class (in this case
\{loid Person::SetAge(int val) SetAge)

if (Check(va1))

this->Age = val;

}
void main()
{

Person .-
}

***************Ending Page***************


***************Beginning Page***************
***************page number:103**************
Classes (methods)

> A static method can access any
$1?” Date static member declared in the
pmatizéi int Y; same scope as the method
Public;tatic void Increment“ regardless of that member access
ii;:s::;zn:c€;mento mOd'f'er

{ Ya; b In this example, Increment

50m mam) function will add 1 to the static

i Dateﬂncremento; and private data member Y.

***************Ending Page***************


***************Beginning Page***************
***************page number:104**************
Classes (methods)

APP-CPP b This code does not compile

class Date

Lima b A static function can not access a
125321“ Y; non-static member

public:

h Stat“ V°1d Incmmemo’ b A static function can not access

33$.Dﬁiiéiﬁiciément the pointer this

—

{
Date::Increment();

}

***************Ending Page***************

***************Beginning Page***************
***************page number:105**************
Classes (methods)
APP-CPP b A method within a class can
EPPSS PP°" access private members /
rivate: .
P bi"? Age; methods from instances of the
P void SetAge(-nt value) same class l
{ .
} > In this case, p1 can access
};
int mam) data member Age from p2.
{ Pm p1’ p2; The cod compiles and runs
EZtﬁiEAS?‘&p2’ 1”)’ correctly.
}

***************Ending Page***************


***************Beginning Page***************
***************page number:106**************
Classes (methods)
APP-CPID b The same rule applies for
Ems Pm" static methods as well.
private:
publﬁ lg“ _ _ > In this example, the code
FEW set/fa‘ Pam“ p’ mt value) compiles and runs correctly.
p->Age = va ue; _
}_ } After the execution, p1.Age
int mam) is 20 and p2.Age is 10.
{ Person .1 .2-
Person::SetA;e(&-1, 29);
return 0;
}

***************Ending Page***************


 