[{content={parts=[{text=--FlashCardSeparator--
Single
--InteriorSeparator--
What is a key characteristic of constant expressions that allows the compiler to optimize code?
--InteriorSeparator--
They can be computed before the compilation phase.
--InteriorSeparator--
easy
--InteriorSeparator--
4
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following limitations apply to `constexpr` functions?
--InteriorSeparator--
(right) In C++11, it must have only one return statement.
(wrong) It must always be `void`.
(right) It should not have any local variables uninitialized
(wrong) It can use any global variables.
--InteriorSeparator--
medium
--InteriorSeparator--
13
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What keyword was introduced in C++11 to explicitly declare that an expression should be considered constant?
--InteriorSeparator--
constexpr
--InteriorSeparator--
easy
--InteriorSeparator--
10
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What does the `constexpr` keyword indicate to the compiler?
--InteriorSeparator--
(right) A specific expression should be considered constant
(wrong) The result of the expression can not be modified.
(wrong) The function must return void.
(wrong) The variable must be a pointer
--InteriorSeparator--
medium
--InteriorSeparator--
10
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In range-based for loops, what are the requirements for an object to be considered a `range_expression`?
--InteriorSeparator--
It must be a fixed-size array, have `begin()` and `end()` functions, or be an initialization list.
--InteriorSeparator--
medium
--InteriorSeparator--
41
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following is a valid use case for a range-based for loop?
--InteriorSeparator--
(right) Iterating through the elements of a `std::vector`.
(right) Iterating through the elements of a fixed-size array.
(wrong) Iterating through the characters of a string literal.
(wrong) Iterating through a linked list.
--InteriorSeparator--
easy
--InteriorSeparator--
41
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the main purpose of the `auto` keyword in C++11?
--InteriorSeparator--
To allow the compiler to deduce the type of a variable from its value.
--InteriorSeparator--
easy
--InteriorSeparator--
56
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
When using `auto` for type inference, which of the following scenarios would result in the variable being deduced as `double`?
--InteriorSeparator--
(right) `auto x = 5 * 1.5;`
(wrong) `auto x = 5;`
(wrong) `auto x = (float)5;`
(wrong) `auto x = 5U;`
--InteriorSeparator--
medium
--InteriorSeparator--
61
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the primary purpose of the `decltype` keyword in C++11?
--InteriorSeparator--
To obtain the type of an expression or variable.
--InteriorSeparator--
easy
--InteriorSeparator--
68
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What does the concept of structured binding (destructuring) introduced in C++17 allow?
--InteriorSeparator--
(right) Splitting a structure or array into its basic elements.
(right) Assigning each element of a structure or array to a variable.
(wrong) Automatic memory management.
(wrong) Defining custom iterators.
--InteriorSeparator--
medium
--InteriorSeparator--
75
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is a key requirement when using structured binding with a class or struct?
--InteriorSeparator--
You must bind all of the public data members.
--InteriorSeparator--
hard
--InteriorSeparator--
82
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What happens if a function returns a structure, and structured binding is used to assign the structure's members to variables?
--InteriorSeparator--
(right) The structure's members are copied to the new variables.
(wrong) References to the structure's members are created.
(wrong) The structure is moved to the new variables.
(wrong) Pointers to the structure's members are created.
--InteriorSeparator--
medium
--InteriorSeparator--
76
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the "Curiously Recurring Template Pattern" (CRTP) a form of?
--InteriorSeparator--
Static polymorphism.
--InteriorSeparator--
easy
--InteriorSeparator--
87
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is the benefit of using CRTP for static polymorphism compared to dynamic polymorphism?
--InteriorSeparator--
(right) Improved performance due to static linkage and no virtual table calls.
(wrong) Increased code reusability.
(right)  No need for virtual tables or dynamic types.
(wrong) Easier to maintain and debug
--InteriorSeparator--
medium
--InteriorSeparator--
96
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is a major limitation of CRTP compared to dynamic polymorphism regarding base class relationships?
--InteriorSeparator--
Casting to the base class is not possible, and there isn't a common root.
--InteriorSeparator--
hard
--InteriorSeparator--
96
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What are the characteristics of Plain Old Data (POD) types?
--InteriorSeparator--
(right) They have a C-like memory layout.
(wrong) They always use virtual functions.
(right) They can be easily copied using `memcpy`.
(wrong) They must have private members.
--InteriorSeparator--
medium
--InteriorSeparator--
99
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does it mean for a type to be "trivial" in the context of POD?
--InteriorSeparator--
It has a default constructor, destructor, copy-constructor, and assignment operator that are not user-provided, no virtual functions, no user provided base classes and no data members that have user provided functions.
--InteriorSeparator--
hard
--InteriorSeparator--
100
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What determines if a function qualifies as `constexpr` in C++11?
--InteriorSeparator--
(right)  It should not be void.
(wrong) It must have at least one local variable
(right)  It must have only one return statement.
(wrong) It can modify global variables
--InteriorSeparator--
hard
--InteriorSeparator--
16
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Why might a code with a `constexpr` function not compile if a C++11 standard is used?
--InteriorSeparator--
Because C++11 has a restriction that `constexpr` functions must have only one return statement.
--InteriorSeparator--
hard
--InteriorSeparator--
16
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Why would the following code produce an error "expression did not evaluate to a constant"?

int GetCount()
{
return 5;
}
void main()
{
int x[GetCount()];
}
--InteriorSeparator--
(right) The compiler doesn't know if it can replace the function call with its value
(wrong) The return type is not constant
(wrong) Arrays cannot be initialized with variables
(wrong) const is missing
--InteriorSeparator--
hard
--InteriorSeparator--
8
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
When declaring an array with a size determined by a function, what keyword is crucial to ensure successful compilation in C++ when the size is known at compile time?
--InteriorSeparator--
`constexpr`
--InteriorSeparator--
hard
--InteriorSeparator--
10
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Why does adding "const" to a function, like `const int GetCount()`, not automatically make it a constant expression suitable for array size declaration?
--InteriorSeparator--
(right) The compiler only knows that the result cannot be modified.
(wrong) const is not suitable for array initialization.
(wrong) The return type is missing.
(wrong) int is not valid in a const function.
--InteriorSeparator--
hard
--InteriorSeparator--
9
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the crucial difference in how the compiler treats a variable declared with `const` versus `constexpr` when assigning its value to another variable?
--InteriorSeparator--
`constexpr` variables have their value directly substituted by the compiler, while `const` variables might still involve a function call at runtime.
--InteriorSeparator--
hard
--InteriorSeparator--
18
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Why does a class constructor declared as `constexpr` potentially lead to a compilation error when creating an instance of that class?
--InteriorSeparator--
(right) Because a constexpr constructor implies that you do not need to call the constructor.
(wrong) Because the constructor does not allow private members.
(wrong) Because the constructor always need parameters.
(wrong) Because the constructor can only be empty.
--InteriorSeparator--
hard
--InteriorSeparator--
26
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Why would a `constexpr` function containing a loop with a potential integer overflow not compile?
--InteriorSeparator--
Because the compiler cannot pre-compute the result due to the unpredictable behavior of the overflow.
--InteriorSeparator--
hard
--InteriorSeparator--
36
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
When are local variables allowed inside `constexpr` functions, and in which C++ standard is this allowed from?
--InteriorSeparator--
(wrong) Always
(right) Starting with C++14
(wrong) In any C++ standard.
(wrong) This is never allowed.
--InteriorSeparator--
hard
--InteriorSeparator--
14
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the significance of the Barton-Nackman trick in the context of static polymorphism?
--InteriorSeparator--
It's useful to automatically overload relationship operators.
--InteriorSeparator--
hard
--InteriorSeparator--
95
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Why might a class with both public and private members not be considered to have a standard layout?
--InteriorSeparator--
(right) Because not all data members have the same access control.
(wrong) Because it needs a function
(wrong) Because there are not enough members.
(wrong) Because there are no private members.
--InteriorSeparator--
hard
--InteriorSeparator--
107
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What characteristic of a type will prevent it from being considered a standard layout type?
--InteriorSeparator--
Having data members with different access control (e.g., public and private).
--InteriorSeparator--
hard
--InteriorSeparator--
104
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What does it mean for a class/struct to have a "standard layout" in C++?
--InteriorSeparator--
(right) All data members (except static ones) have the same access control.
(right) The diamond problems is not applied for the type.
(wrong) Virtual inheritance must be used.
(wrong) There must be only private members.
--InteriorSeparator--
hard
--InteriorSeparator--
104
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Why does the compiler add a byte of size to an empty `Base` class?
--InteriorSeparator--
Because it is empty and it needs to know that the instance is created.
--InteriorSeparator--
hard
--InteriorSeparator--
105
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Why does the size of a Derived class increases from 4 to 8 if a Base class is derived, in the described example?
--InteriorSeparator--
(right) Because the first member of the class is of type Base it forces an alignment.
(wrong) Because Base member must be public.
(wrong) Because more memory needs to be allocated
(wrong) Because a default constructor is missing.
--InteriorSeparator--
hard
--InteriorSeparator--
106
--FlashCardSeparator--
}], role=model}, finishReason=STOP, avgLogprobs=-0.29339281802820427}]