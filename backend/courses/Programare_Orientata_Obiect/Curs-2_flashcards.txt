[{content={parts=[{text=```
--FlashCardSeparator--
Single
--InteriorSeparator--
What is the primary difference between using a reference and a pointer from a programmer's perspective?
--InteriorSeparator--
A reference does not require the use of the "->" operator; the "." operator can be used instead. Also, a check for NULL pointers is no longer required when using references.
--InteriorSeparator--
medium
--InteriorSeparator--
5
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following statements are true regarding references in C++?
--InteriorSeparator--
(right) A reference must be initialized when it is created.
(wrong) A reference can be reassigned to point to a different variable after initialization.
(right) A reference always points to a valid memory location.
(wrong) A reference can be NULL.
--InteriorSeparator--
medium
--InteriorSeparator--
6
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Can a reference be changed to refer to a different memory address after initialization?
--InteriorSeparator--
No, a reference cannot be changed to point to a different memory address once it is initialized.
--InteriorSeparator--
easy
--InteriorSeparator--
7
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which arithmetic operations are valid for pointers but not for references?
--InteriorSeparator--
(right) ++
(right) +
(wrong) =
(wrong) .
--InteriorSeparator--
medium
--InteriorSeparator--
8
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Can a pointer be converted (casted) to a `void*`?
--InteriorSeparator--
Yes, any pointer can be converted to a `void*`.
--InteriorSeparator--
easy
--InteriorSeparator--
9
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following statements are correct regarding pointers and references?
--InteriorSeparator--
(right) A pointer can point to another pointer.
(wrong) A reference can refer to another reference.
(wrong) A pointer must be initialized when it is created.
(wrong) A reference can be uninitialized.
--InteriorSeparator--
medium
--InteriorSeparator--
10
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Can a reference point to a temporary value? If so, what specifier is required?
--InteriorSeparator--
Yes, a reference can point to a temporary value, but the "const" specifier is required.
--InteriorSeparator--
medium
--InteriorSeparator--
11
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What constitutes a function/method's signature in C++?
--InteriorSeparator--
(right) Function name
(right) Parameters type(s)
(wrong) Return type
(wrong) Access specifier
--InteriorSeparator--
easy
--InteriorSeparator--
14
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Is method overloading possible if the methods have the same name and parameters but different return types?
--InteriorSeparator--
No, method overloading is not possible if the methods have the same name and parameters, even if the return types are different.
--InteriorSeparator--
easy
--InteriorSeparator--
14
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
When a function that was overloaded is called, how does the compiler decide the best version of the function to use? What is this process called?
--InteriorSeparator--
The compiler determines which definition to use through a process called overload resolution.
--InteriorSeparator--
medium
--InteriorSeparator--
19
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is the first step in overload resolution?
--InteriorSeparator--
(right) Check if an exact match is possible (same name and parameter types)
(wrong) Check if a numerical promotion is possible.
(wrong) Check if a numerical conversion is possible.
(wrong) Attempt casts.
--InteriorSeparator--
medium
--InteriorSeparator--
20
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which types can be promoted to 'int' during overload resolution?
--InteriorSeparator--
(right) char
(right) short
(wrong) float
(wrong) double
--InteriorSeparator--
medium
--InteriorSeparator--
21
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
If a numerical conversion is required during overload resolution and the conversion can apply to several overloaded methods, what happens?
--InteriorSeparator--
An ambiguity error will be thrown, and the program will not compile.
--InteriorSeparator--
medium
--InteriorSeparator--
22
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
After attempting exact matches, promotions, and conversions during overload resolution, what happens if none of these finds a match?
--InteriorSeparator--
Explicit casts are attempted; if none of these attempts result in a match, a fallback method/function (if any) is used. If there isn't such a method , the compiler will produce an error.
--InteriorSeparator--
medium
--InteriorSeparator--
23, 24
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
In method overloading, what happens if the compiler finds two or more methods with the same name during the promotion phase?
--InteriorSeparator--
(right) The compiler will throw an error, indicating an ambiguity case.
(wrong) The compiler will proceed to the conversion phase.
(wrong) The compiler will use the method defined first.
(wrong) The compiler will randomly choose a method.
--InteriorSeparator--
hard
--InteriorSeparator--
29
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
If during overload resolution there's only ONE method with a certain name and promotion fails, what does the compiler attempt next?
--InteriorSeparator--
The compiler attempts a conversion, even if it means losing precision/value.
--InteriorSeparator--
hard
--InteriorSeparator--
29
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What happens if, during method overloading, a double value can be converted to both `int` and `float`, and methods `Inc(int)` and `Inc(float)` exist?
--InteriorSeparator--
(right) The compiler will throw an ambiguity error.
(wrong) The compiler will choose the `Inc(int)` method.
(wrong) The compiler will choose the `Inc(float)` method.
(wrong) The compiler will randomly choose a method.
--InteriorSeparator--
hard
--InteriorSeparator--
40
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
If there are overloaded methods and a call involves a parameter type for which there is no promotion or conversion possible, what happens?
--InteriorSeparator--
The compiler must use the fallback method Inc(...) if it exists. If there is not a fallback method, then the compiler will produce an error.
--InteriorSeparator--
hard
--InteriorSeparator--
41
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
If you have `Inc(int v1)` and `Inc(int v1, ...)` overloaded methods, and call `Inc(123)`, what happens?
--InteriorSeparator--
This is an ambiguous case and the code will NOT compile.
--InteriorSeparator--
hard
--InteriorSeparator--
43
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
When overload resolution involves multiple parameters, which combination of promotion/conversions does overload resolution favor?
--InteriorSeparator--
Overload resolution chooses the combination of promotion/conversions that covers the highest number of unique parameters.
--InteriorSeparator--
hard
--InteriorSeparator--
49
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
When dealing with numerical types in method overloading and the `const` keyword, what's important to remember?
--InteriorSeparator--
(right) For types transmitted by value, `const` is ignored from the method/function signature.
(wrong) For types transmitted by reference, `const` is ignored from the method/function signature.
(wrong) For types transmitted by pointer, `const` is ignored from the method/function signature.
(wrong) The `const` keyword has no impact on the method/function signature.
--InteriorSeparator--
hard
--InteriorSeparator--
68
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the difference between `const int * ptr` and `int * const ptr`?
--InteriorSeparator--
`const int * ptr` is a non-const pointer to a const value, while `int * const ptr` is a const pointer to a non-const value.
--InteriorSeparator--
hard
--InteriorSeparator--
88, 89
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is the Clockwise/Spiral Rule for `const` in C/C++?
--InteriorSeparator--
(right) It is a rule that explains how to interpret complex `const` declarations involving pointers.
(wrong) It is a rule that dictates the order in which `const` variables should be defined.
(wrong) It is a rule for prioritizing `const` over non-`const` methods during overload resolution.
(wrong) It is a method of avoiding the use of "const" all together.
--InteriorSeparator--
hard
--InteriorSeparator--
92
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does the `mutable` keyword do in C++?
--InteriorSeparator--
The `mutable` keyword allows write access to a data member even if the `const` specifier is used for a method.
--InteriorSeparator--
hard
--InteriorSeparator--
96
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Can "const" be used with "mutable"?
--InteriorSeparator--
Yes, "const" can be used with "mutable". In this case mutable refers to the value of the pointer and does not interfere with the const qualifier.
--InteriorSeparator--
hard
--InteriorSeparator--
97
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Why can't the `const` modifier from the end of a method declaration be used for static functions?
--InteriorSeparator--
Because the `const` modifier needs an instance to apply to (access to "this" pointer), which is impossible if the method is declared as static.
--InteriorSeparator--
hard
--InteriorSeparator--
101
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is a "friend" function in C++?
--InteriorSeparator--
(right) A function that can access methods and data members with private modifier defined within a class.
(wrong) A function that must be defined outside of the class.
(wrong) A function that is only accessible from within its own class.
(wrong) A function that does not need to be declared within the class it modifies.
--InteriorSeparator--
medium
--InteriorSeparator--
107
--FlashCardSeparator--
```}], role=model}, finishReason=STOP, avgLogprobs=-0.20117564523692452}]