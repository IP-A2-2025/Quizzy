[{content={parts=[{text=--FlashCardSeparator--
Single
--InteriorSeparator--
What is the primary purpose of design patterns?
--InteriorSeparator--
To provide reusable solutions to commonly occurring problems in software design.
--InteriorSeparator--
easy
--InteriorSeparator--
4
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the core idea behind the Singleton pattern?
--InteriorSeparator--
Ensuring that a class has only one instance and providing a global point of access to it.
--InteriorSeparator--
easy
--InteriorSeparator--
9
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following are benefits of using the Singleton pattern?
--InteriorSeparator--
(right) Controlled access to the single instance.
(wrong) Increased flexibility in creating multiple instances.
(right) Namespace reduction (global variable elimination).
(wrong) Automatic support for multithreading.
--InteriorSeparator--
medium
--InteriorSeparator--
10
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In the first implementation of the Singleton pattern (version 1), how is the single instance ensured?
--InteriorSeparator--
By declaring a static member variable within the class and initializing it.
--InteriorSeparator--
medium
--InteriorSeparator--
12
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Why is it generally not recommended to declare a move constructor or move assignment operator for a Singleton class?
--InteriorSeparator--
Because it could potentially lead to multiple instances if the object is moved, violating the Singleton's core principle.
--InteriorSeparator--
hard
--InteriorSeparator--
14
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In the second implementation of the Singleton pattern (version 2), how is the single instance created?
--InteriorSeparator--
Using lazy initialization where the instance is created only when it is first requested.
--InteriorSeparator--
medium
--InteriorSeparator--
15
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is the primary purpose of the Composite pattern?
--InteriorSeparator--
(wrong) To ensure that a class has only one instance.
(right) To compose objects into a tree structure representing part-whole hierarchies.
(wrong) To define new operations without changing the classes of the elements.
(right) To allow clients to treat individual and compound objects uniformly.
--InteriorSeparator--
medium
--InteriorSeparator--
19
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is a key characteristic of a recursive definition in the context of the Composite pattern?
--InteriorSeparator--
That a composite object can be made up of other composite objects or primitive objects.
--InteriorSeparator--
medium
--InteriorSeparator--
21
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
In the Composite pattern, which of the following roles does the "Leaf" component play?
--InteriorSeparator--
(right) Represents primitive objects.
(wrong) Defines the behavior of components with children.
(right) Has no children.
(wrong) Declares the interface for all objects in the composition.
--InteriorSeparator--
medium
--InteriorSeparator--
23
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is a potential drawback of the Composite pattern regarding component restrictions?
--InteriorSeparator--
It can be difficult to restrict which components can appear in a composite object, potentially requiring runtime checks.
--InteriorSeparator--
hard
--InteriorSeparator--
27
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the main concern when deciding between "safety" and "transparency" in a Composite pattern implementation?
--InteriorSeparator--
Transparency could lead to violation of the Single Responsibility Principle (SRP).
--InteriorSeparator--
hard
--InteriorSeparator--
28
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What design pattern is used to represent arithmetic expressions in programming languages?
--InteriorSeparator--
Composite pattern
--InteriorSeparator--
easy
--InteriorSeparator--
30
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In the initial relationship between classes for arithmetic expressions, which object-oriented design principles are violated before applying the Composite pattern?
--InteriorSeparator--
Lack of adherence to the Single Responsibility Principle and Open/Closed Principle.
--InteriorSeparator--
hard
--InteriorSeparator--
35
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What role does the Visitor pattern play in relation to an object structure?
--InteriorSeparator--
It models an operation that can be applied to the elements of an object structure without modifying the structure itself.
--InteriorSeparator--
easy
--InteriorSeparator--
42
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following are benefits of using the Visitor pattern?
--InteriorSeparator--
(right) Easy addition of new operations.
(wrong) Easy addition of new element types in the object structure.
(right) Separation of related operations into a single class.
(wrong) Improved encapsulation of the object structure.
--InteriorSeparator--
medium
--InteriorSeparator--
52
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is a significant drawback of the Visitor pattern regarding changes to the element hierarchy?
--InteriorSeparator--
Adding new concrete element classes requires modifying the interfaces of all visitors.
--InteriorSeparator--
medium
--InteriorSeparator--
52
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which participant in the Visitor pattern declares a visit operation for each ConcreteElement class in the structure?
--InteriorSeparator--
(right) Visitor
(wrong) ConcreteVisitor
(wrong) Element
(wrong) ObjectStructure
--InteriorSeparator--
medium
--InteriorSeparator--
47
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Why might the Visitor pattern be considered to potentially "destroy the encapsulation" of the elements it visits?
--InteriorSeparator--
Because the concrete elements must expose a strong interface to provide all the information requested by the visitor.
--InteriorSeparator--
hard
--InteriorSeparator--
53
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is "double dispatch" in the context of the Visitor pattern?
--InteriorSeparator--
The operation depends on the type of both the component and the visitor.
--InteriorSeparator--
hard
--InteriorSeparator--
56
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
In the context of the Visitor pattern, who can traverse the object structure?
--InteriorSeparator--
(right) The object structure itself.
(right) The visitor.
(wrong) A separate manager class.
(wrong) An internal element class.
--InteriorSeparator--
medium
--InteriorSeparator--
57
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the main purpose of the Object Factory pattern?
--InteriorSeparator--
To provide an interface for creating families of related or dependent objects without specifying their concrete classes.
--InteriorSeparator--
easy
--InteriorSeparator--
65
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following are scenarios where the Object Factory pattern is applicable?
--InteriorSeparator--
(right) When a system should be independent of how its products are created.
(wrong) When a class needs to have only one instance.
(right) When a system needs to be configured with multiple product families.
(wrong) When new operations need to be added to an object structure without modifying it.
--InteriorSeparator--
medium
--InteriorSeparator--
66
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
How does the Object Factory pattern address the Open/Closed Principle (OCP) in the "ShapeContainer" counter-example?
--InteriorSeparator--
By allowing new shapes to be added without modifying the ShapeContainer::load() method.
--InteriorSeparator--
hard
--InteriorSeparator--
67
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In the example provided, what is the 'Registrar' class responsible for?
--InteriorSeparator--
Managing the types of expressions that can be created.
--InteriorSeparator--
medium
--InteriorSeparator--
73
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is a callback function used for in the context of the Object Factory pattern?
--InteriorSeparator--
(right) To create objects of a specific type.
(wrong) To manage the lifecycle of objects.
(wrong) To perform operations on existing objects.
(right) To allow the object factory to delegate object creation.
--InteriorSeparator--
hard
--InteriorSeparator--
74
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
How does the Abstract Factory respect the open/closed principle?
--InteriorSeparator--
New factories can be added without modifying the existing code, and new products can be added for these new factories without modifying existing client code.
--InteriorSeparator--
hard
--InteriorSeparator--
72
--FlashCardSeparator--
}], role=model}, finishReason=STOP, citationMetadata={citationSources=[{startIndex=7629, endIndex=7752, uri=https://www.scribd.com/document/613015109/4-1-Design-patterns-lecture-notes-R19}]}, avgLogprobs=-0.14694686371374613}]