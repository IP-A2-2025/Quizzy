***************Beginning Page***************
***************page number:1**************
‘\ Gavnlut Dragos
00p Meg

***************Ending Page***************

***************Beginning Page***************
***************page number:2**************
> Lambda expressions
b Modeling lambda expression behavior
> Implicit conversion to a pointer to a function
> Lambdas and STL
S U m m a ry b Using lambda with templates (Generic lambdas)
> Mutable capture
> lnitialized lambda capture
> New feature in C++17 and beyond

***************Ending Page***************

***************Beginning Page***************
***************page number:3**************
Lambda
> expressions

***************Ending Page***************

***************Beginning Page***************
***************page number:4**************
Lambda expressmns g
> Lets assume that We have the following structure: I
Applcpv ‘
W! SM." ‘
(
(wit (Mar ' Ila-E; I
m Wu
in! Gm»; ‘
1" W;
h
Stud-m stud-IMU - l
< WW, n, 5, ,9 L
). ( 'Qomscu'. 9. 0. 11 )-
> ‘students’ is a global list of students.

***************Ending Page***************

***************Beginning Page***************
***************page number:5**************
Lambda expresswns
> Now let's assume that we wani~ t0 Sort the entire Student list in different
ways (alphabetically, after the ‘Age’ field, based on the ‘Grade’ field, etc)‘
> The easiest way would be to create a sort algorithm that uses a pointer to a
function used to compare to Student structures‘
APP~<PP
Wu mfmm “m m ‘m — ( \
::@( swvleﬂ, l
snrud - mt; a‘
m (m n- - a; n- ‘ calm! > 1; m.) i‘
{ 1r mm'mummb 1min ~ 1m p"
( Student .“K - 11§1|1r1; ,,~"" ‘
lxsrlir] - IASIIIF ~ a];
1min ~ 11 - aux:
suited Z ri1s=;
)
)
) i mm (lsarud);

***************Ending Page***************

***************Beginning Page***************
***************page number:6**************
> The main function will look as follows:
Apvlcpp
su-uc! Slllﬂlll! { - )
Wm Mm“, . i V,
WM SurKlSKudenK ‘115m in! :wnL hwllﬁimrFMMSKudenK lsll SKudenK Isl) ) ( - )
M m"... ml...“ m, swam 152)
{
)
new] kal lsludnll Isl, Sludnll Isl)
(
1
haul IyName {Suntan lslv SKudenK Isl)
(
m. “will”, 5W.) M; ,
)
in! mAIIU (
Surllsludlnls, 3, Iyindn )7
5mm“, 1, ka! 2;
“Mum, 1, W. y;
1

***************Ending Page***************

***************Beginning Page***************
***************page number:7**************
Lambda expressmns
> Instead of creating functiuris for each Comparalion, wouldn't it be easier if
we could just wn'te the comparation whenever we call the Sort function.
APPIPP
struct student { - )
5mm ‘mums! 1 t v)
wad sunlsnm-nt 'nst, 1m (Ml, Ml'llmrrndlstul-nt m. 5mm m) u t l )
m mm) { ‘E
> The code compiles and works as expected, the list of students being sorted ‘
based on the ‘Grade’ field. ‘

***************Ending Page***************

***************Beginning Page***************
***************page number:8**************
Lambda expressmns
b A lambda expression also has the ability to capture a state (variables) via l‘
copy or reference and use it in a function‘ This behavior is also called a “
closure.
> Let's analyze the following python code (chosen for simplicity): l
APP-P)’ l
M mmpmrmom
MW M X: X - mmr
m "m0:
a . mum-\Hs)
r1 - mmpmv)
m“ mamas)
mm

***************Ending Page***************

***************Beginning Page***************
***************page number:9**************
Lambda expressmns
> A lambda expression also has the ability t0 capture a State (variables) via
copy or reference and use it in a function‘ This behavior is also called a
closure.
> Let's analyze the following python code (chosen for simplicity):
Applpy
Mum hind: X: X - mm i‘
m um): l
P1 - Immune) a
r1 - mmmm x
prim mamas)
"no

***************Ending Page***************

***************Beginning Page***************
***************page number:10**************
Lambda expressmns
> A lambda expression alsl) has the ability t0 capture a state (variables) via
copy or reference and use it in a function‘ This behavior is also called a
closure.
> Let's analyze the following python code (chosen for simplicity):
Applpy
M mupimuw):
Mum hind: X: X - mm l‘
m . - l
"no returns
e

***************Ending Page***************

***************Beginning Page***************
***************page number:11**************
Lambda expressmns
> A lambda expression alsl) has the ability t0 capture a state (variables) via
copy or reference and use it in a function‘ This behavior is also called a
closure.
> Let's analyze the following python code (chosen for simplicity):
Applpy
M mupimuw):
Mum hind: X: X - mm l‘
m -m: l
"no returns ‘
e

***************Ending Page***************

***************Beginning Page***************
***************page number:12**************
Lambda expressmns
> A lambda expression alsl) has the ability t0 capture a state (variables) via
copy or reference and use it in a function‘ This behavior is also called a
closure.
> Let's analyze the following python code (chosen for simplicity):
Applpy
M mupimuw):
Mum hind: X: X - mm l‘
m um): l
P1 - wlunlns) a
um) \ l
é/

***************Ending Page***************

***************Beginning Page***************
***************page number:13**************
Lambda expressmns

> A lambda expression is defined in the following ways:
Lambda expressions
[civtumil (WM-mars) s Mum woe < my >
[upturn] (DIM-r5) l may )
[clvtumi] ( hwy )

> Examples: l
Lambda expressions
[m] (m 1, ﬂux a) -> mu ( Mum mayo"); > a‘
[x] (Kn! '11:) ( Mum ‘unx; ) // (he Mum (ype ls dedmed (n be [at Fm the bow
[m1 l return m; ;

***************Ending Page***************

***************Beginning Page***************
***************page number:14**************
Lam bda expresswns
> The caprure component from the lambda expression (an be:
[ ] Captures nothing
[a,b] Captures variables "a" and "b" by making a (Upy of [hem
[&a,&b] Caplures variables "a" and "b" using their reierence
[this] caprures currenr bbJecr
[a] Captures all variables used iri the budy of the lambda by using their reference. If
“this” is available it as alsn captured (by reference)
[:1 caprures all variables used in me body of me lambda by making a copy of mem.
If “this” is available it as also captured (by reiererrcei.
[=,&a] Captures all variables used in the body of the lambda by making a copy of them,
except (or “a” mar is captured by references
[&,a] Captures all variables used iri the body of me lambda by using lrreir reference,
except for “a” that is capture by making a copy.

***************Ending Page***************

***************Beginning Page***************
***************page number:15**************
Lambda expressmns

> Example: ‘a
APP-CW l
2“ "no a‘
lvtnF-[](lntx,lnty){mumxey;); 2
m X - ma, 2n); 2
prM!F('X . w, x); l
Mum n: l

>—

k > This example compiles and prints value 30 on the screen.

***************Ending Page***************

***************Beginning Page***************
***************page number:16**************
Lambda expressmns
> Example : ‘a
APP-CW l
m "no l
< I
m mu. - m; l
1m F - [WM] (m X, M ,, l Mum X ‘ y ‘ “he; ); 2
punﬂ'ldm', m“, m»; l
value - m; ‘
wmﬂ'mn'. m». u»;
Mum -;
l—
> This example compiles and prints value 130 twice on the screen‘

***************Ending Page***************

***************Beginning Page***************
***************page number:17**************
Lambda expressmns
> Example :
APP~CPP
m "no
<
m "hum
“uh-(Mm y "MU." ;;
‘mm- ., , m, 1n»;
"he - m; i
prlntﬂ'ildm', m». u»; “
return .; a
> This example compiles and prints value 130 twice on the screen‘
> Local variable ‘value’ is capture by making a copy of its value, This means l
that event i1 we change its value the result from the lambda function will be "
the same.

***************Ending Page***************

***************Beginning Page***************
***************page number:18**************
Lambda expressmns
> Example :
APP~CPP
m um)
<
m mm
“uh-(Mm. , "MU." ;;
wmv 'v . . 1n»;
vilve - m; ‘
wmﬂ'imn', m», u»; \
Mum -; ‘x
—) ‘x
> Now the code runs and prints 130 and them Z30 on the screen. \

***************Ending Page***************

***************Beginning Page***************
***************page number:19**************
Lambda expressmns
> Example :
APP~CPP -
2“ "no l
wine-mm, Fun, 1n»;
"he - m; l
mmww. m». u»; “
"tum .; a
> In this case we set up the type of the lambda expression‘ If not set it is
deduced from the return type of the lambda expression, l‘
> The result will be 426 and -30 (char representation fur int values 130 and
230)

***************Ending Page***************

***************Beginning Page***************
***************page number:20**************
Lambda expressrons
> Example : I
APP-CW l
void KYFUMUMHIK m ‘1
( m -, n, <; l
1 - h - < - m; l
auloFl[l](M!X,lnly)(Mumx¢y¢:¢h¢<¢::;); l
vrmﬂ'lmn'. m». a»: l
l" "MO
r
“mm-rum);
) Mum n:
> The code compiles and prints the value 1060.
> All local variables and parameters from the function “MyFunction” are
captured‘

***************Ending Page***************

***************Beginning Page***************
***************page number:21**************
Lambda expressmns
> Example :
vol-1 KyFuncxlonﬂnl
( m -, h, {A
1 - h - - ;
pmm- n . m». 2.0)); ‘
l" m0 l
( a
Mummy“); a‘
) Mum n: l
> All local variables and parameters from the function “MyFunction” are
captured‘

***************Ending Page***************

***************Beginning Page***************
***************page number:22**************
Lambda expressmns g
> Example : I
APP-CW r
ma WNW.“ a) ‘
( Ant I, h, c; ‘
.um.m<au,my>(manqununan r
Prhwﬂ'lhﬂn'. 7(1». 10));
Lialrfaaw. Fun, a»;
Zn! IMHO
( mmncumﬂll);
NM a;
> The code compiles and prints the value 1060 and then 2330
> All local variables and parameters from the function “MyFunction'fypre'ﬂ
captured‘

***************Ending Page***************

***************Beginning Page***************
***************page number:23**************
Lambda expressmns
> Example :
vol-1 KyFuncxlenl
( m -, h, <;\
1 - h - - ;
m-m- n . m». a»; l
a Z b Z < Z 1m x‘
;:.“:Z:=W. m, m»; l
an“) l‘
‘ WWW...»
mum a; x
> The code compiles and prints the value 1060 and then 2330
> All local variables and parameters from the function “MyFunction” are
captured (by reference)‘

***************Ending Page***************

***************Beginning Page***************
***************page number:24**************
Lambda expressmns ‘
> Example : I
APP-cw ‘
void KyFuncxleu ii) ‘
( m -, n, Z; l
1 - h - < - m; l
=m¢.[i,=](mx,my>(Mumnpnhunn; l
vrmﬂ'luw. rm. a»:
a Z b Z < Z 1m
SLJZ§=W= run, 29));
l“ "no
( mmmmum);
mum a;
> The code compiles and prints the value 1060 and then 22404 All vaﬂable§,a
capture by reference except for local variable “a” that is capture byméking a
copy of itself l

***************Ending Page***************


***************Beginning Page***************
***************page number:25**************
Lambda expressmns g
> Example : I
APP-CW \
vol-1 KYFunalwﬂu ii) ‘
( m -, n. Z; i
.-h-<- - i
.u1°¢.[.,[§‘(m,my, WWW‘.‘W...;,; i
prhiiﬂ'ﬂﬂn . u. a»:
a Z b Z < Z no;
::1n:r:=xam', ma, 22));
Zn! "no
( mmmmum);
mum a;
> Depending on the compiler this code might work‘ “CLexe” does not compiie,
GCC compiles with an Warning.

***************Ending Page***************

***************Beginning Page***************
***************page number:26**************
Lambda expresswns
’ Example 5 warning: explicit by-reference capture oi ‘a’
Apptcpp redundant with by-reference capture delault
void KyFunctleu ii error C3488: ‘ﬂa' cannot be explicitly captured
‘ m I‘ h‘ K; when the default capture mode is reference &
. - h . c . - /—b;-L
“mag-w . y) (WMWWMHW
‘mm-ml . w, a»; r
a Z b Z < Z m; l‘
Z“ "no ‘a
‘ MFuncUﬂIlUm);
mum a; a
> Depending on the compiler this code might work‘ “Cltexe” does not compile,
GCC compiles with an warning.

***************Ending Page***************

***************Beginning Page***************
***************page number:27**************
Lambda expressmns ‘
> Example : I
APP-cw \
vol-1 KyFunaleu ii) ‘
( m -, n. Z; ‘
1 - h - < - m; ‘
autoF-[l,la](ln!x,lnly)(Mumx¢y¢a¢h¢c¢n;); ‘
wmﬂ'luw. m». a»:
a Z b Z < Z 1m
::1n:r:=xam', ma, 22));
Z“ "no
( mmmmum);
mum a;
> The code compiles and prints the value 1060 and then 1150‘ All vaﬂable§,a
capture by making a Copy 0f themselves except for local variable “ayfilh'at is
capture by reference,

***************Ending Page***************

***************Beginning Page***************
***************page number:28**************
Lambda expressmns g
> Example : I
APP-CW \
void KYFuncﬂwﬂu ii) ‘
( m -, n. Z; i
.-h-<- - i
"unplﬁlmnmw (mm.y...h.<...;); i
mun-mu . (u. a»:
a Z b Z < Z 1m
::1n:r:=xam', ma, 22));
Zn! "no
( mmmmum);
mum a;
> Depending on the compiler this code might work‘ “CLexe” does not compiie,
GCC compiles with an Warning.

***************Ending Page***************

***************Beginning Page***************
***************page number:29**************
Lambda expressmns ‘
> Example : I
APP-cw \
‘ V ‘
m a, b, q ‘
. - b . , . m- V ‘
auto f - h, =1 (m x, m y) (MUM X ‘ y . =; >; \
pnntﬂ'ﬂdnﬂ mm 20))‘
i Z b Z = Z m;
iiwﬁw, m9, 19));
>
m mm
(
wnmnmnuwa);
return a;
> This code wilt not compike as local variable ‘a’ can not be capture twice?”

***************Ending Page***************

***************Beginning Page***************
***************page number:30**************
Lambda expressmns ‘
> Example : I
APP-cw \
‘ V ‘
m a, b. Z; ‘
. - b . , . m- Z ‘
auto f - h, ‘=1 (m x, m y) (MUM x ‘ y . =; >; \
pnntﬂ'ﬂduﬂ Him m»
i Z b Z Z Z m;
2%in m9, 19));
>
m mm
(
Wmnnmnuwa);
return a;
> This code wilt not compike as local variable ‘a’ can not be capture twicerjn
this case We tried w capture ‘a’ making a Copy 0i itself and also by
reference.

***************Ending Page***************

***************Beginning Page***************
***************page number:31**************
Lambda expressmns 1
> Example : I
APP-CW \
m m (m X. m y) ‘
( Mum X ¢ ,; ‘
3m wruncuonuﬂz ..> ‘
( m a. b. u
- - h - t - n;
1m wj . m;
auto ¢ . [ptr_F](lM X, m y) ( MW pvju, y); >;
mun-mm. m». um
in "mo
< nymmumum);
Mum a; ,,
> This code compiles and prints “30” on the screen. In this case the capture
variable 1'5 a pointer t0 a function (Add).

***************Ending Page***************

***************Beginning Page***************
***************page number:32**************
Modeling lambda
> expression behavior

***************Ending Page***************

***************Beginning Page***************
***************page number:33**************
Lambda expressmns

> Example: ‘a
APP-CW l
2“ "no a‘
lvtnF-[](lntx,lnty){mumxey;); 2
m X - ma, 2n); 2
prM!F('X . w, x); l
Mum n: l

>—

k > This example compiles and prints value 30 on the screen.

***************Ending Page***************

***************Beginning Page***************
***************page number:34**************
Lambda expresswns
> Example:

Assembly code

1n can“!

muv eax,duoxd pm I»!

***************Ending Page***************

***************Beginning Page***************
***************page number:35**************
Example:
Assembly code

***************Ending Page***************

***************Beginning Page***************
***************page number:36**************
\
Lambda expresswns
' Example: um lundmud PC! [x]
Assembly code ldd clandword Pt! [y]
c-u
muv 9“,de pm m ’

***************Ending Page***************

***************Beginning Page***************
***************page number:37**************
> This means that this code is actually translated by the compiler as (allows:
APP-CW
m mm
x
auto r = mm x, m y) ‘ wturn x . y; n
m X - Fua, m;
mmcx . w, x)‘
MW a‘
’—
Translated code
(his mm)»,mmummy»,nuns-1m“ i
mum:
m nwmm (m mm y) mm 1 return xvy; )
maymuanmmmmsmmlm o 1 4mm ,
n
2M mm
1EMU»mmmmmsmszmum-m f,
m X Z ma, m,
pnMH'X 1 w, m
Nturn a;
)—

***************Ending Page***************

***************Beginning Page***************
***************page number:38**************
> This means that this code is actually translated by the compiler as (allows:
APP-CW
m mm
x
auto r = mm x, m y) ‘ wturn x . y; n
m X - Fua, m;
mmcx . w, x)‘
MW a‘
)
Translated code
(his mm)»,mmummy»,nuns-1m“
mum:
m nwmm (m mm y) mm 1 return xvy; )
lambdaJb1zuzanmmxsbsnxszxzamwas n Z M... ,
)
2M mm
1EMU»mmmmmsmszmum-m f,
m X Z ma, m,
pnMH'X 1 w, m
Nturn a;
)—

***************Ending Page***************

***************Beginning Page***************
***************page number:39**************
> This means that this code is actually translated by the compiler as (allows:
APP-CW
m mm
x
auto r = mm x, m y) ‘ wturn x . y; n
m X - m“, m;
mmcx . w, x
MW a‘
)
Translated code
(his landigmnmm mamnnzzzmamsa i
mum:
m nwmm (m mm y) mm 1 return xvy; )
1=m=_1mm~“umnw.mmlm o 1 4mm ,
)
2M mm
1EMU»mmmmmsmszmum-m f,
m X Z ma, m,
pnMH'X 1 w, m
Nturn a;
)—

***************Ending Page***************

***************Beginning Page***************
***************page number:40**************
Lambda expressmns
> This means that this code is actually translated by the compiler as follows:
APPIPP
2n‘ Iilllo
.m F - [1(lm X, m y) l Mum X ¢ y; n
Ant x - F09, 29);
pundﬂ'sueoﬂ‘) . m‘, sheofﬁ»;
Mum n; l
—’ a
v The results will be 1 (consistent with the fact that “1" is indeed an object of l
type lambda_1b12082d1acdf839b51735232aba4b6a l
Translated code ‘
<1,“ 1mmgmmz=mmlmsl1351mm“. ¢ ‘
Whllc:
in! werllnFO (1M x,ln! Y) cans! ( mum x01; )
lawdgmnmebﬂHSBDbaw () l delete;
>

***************Ending Page***************

***************Beginning Page***************
***************page number:41**************
Lambda expressmns
> The compiler generate lambdaixxxxxxxxxxxxxx classes fur each encountered
lambda structure,
APPIPP
2n‘ mm)
ma n -lll1nt X, m y) t mm. X ~ y; n
.nta f1 - Illinz t, 1n! y) t return x ~ y; );
m u - mu, 2n; a
m x2 - ﬁlm z»): l
"null n; a
> In the previous case, even if according to deﬁnition, both f1 and f2 are X‘
identical, two separate classes with two separate (but identical ‘
implementation) functions that overwrite operator() will be created‘

***************Ending Page***************

***************Beginning Page***************
***************page number:42**************
Lambda expresswns
> The cumpller generate lambda_xxxxxxxxxxxxxx classes fur each encountered
lambda structure.
Assembly code
lute u : mm x, Am: y) [mm X o y, p,

***************Ending Page***************

***************Beginning Page***************
***************page number:43**************
The compvler generate classes for each encountered
Lambda Structure.

Assembly code

FJJ we

i ‘s’ w

W Hens:

rm w

1| h H;

W71 Aiﬂelimuw

***************Ending Page***************

***************Beginning Page***************
***************page number:44**************
The compvler generate classes for each encountered
Lambda structure.
Assembly code
w we
i M v,"
m Hens:
Fa v yaw-Rim /Ui\|¥acJ’i"‘V" ';":/a~s1L>,>/ *Wr=‘§t~t
W‘ 1;»
,. h n;
yes e mm
w- 1mm m X) ,es‘

***************Ending Page***************

***************Beginning Page***************
***************page number:45**************
Lambda expressrons
> The compiler generate lambda_xxxxxxxxxxxxxx classes for each encountered l
lambda structure, l
> This means that:
> For every lambda construction that the programmer uses, a class will be created ‘1
(it is therefor recommended that la lambda construction to be small so that they
dd not increase the size oi the compiled program unnecessary). ‘
> The type of the class that uses lambda expressions is generated at the compile
time —> this means that whenever a lambda is used "auto" should be used as well.
> The same lambda expression can be used multiple limes ii “dedtype” is used (this
is valid for some compilers - not all oi them allow this behavior !!!)

***************Ending Page***************

***************Beginning Page***************
***************page number:46**************
Lambda expressmns
> In the following case the usage 0| decltype allows us t0 reutilize the same
construct multiple times
App.cpp (default constructor) App.cpp (copy constructor)
m mm m “no
l mu n - mm X, m y) ( "turn X ~ y; n l mo u -[](1nt x, 1m yl l mum x . y; h
nullyvelf!) n; InlWPElﬂ) a Z m
m u - um, 2|); m u - mu, 20); i
m x2 - ﬁlm m; m n - Qua, 2o); l
mm o; mm e; x
) ) l
> Now both “f1” and “'2” are of the same class/ type. ‘
> Default constructor does not work for every compiler (gcc does not support it,
cLexe (1840,)“ supports it), cl,exe [1916170304 does not), The difference
in this case is that the deleted Constructor was not added in Cl.eXe (18.0.X.x)
> Copy constructor is supported by both cl (1116170301) and gccl

***************Ending Page***************

***************Beginning Page***************
***************page number:47**************
In the vouowmg case the usage of decilype aliows us w reutlhze me same
construct mumple Umes

Assembly code

w m

i m w

m “WU

rm 1;»

1| h n;

W71 tiﬂrlrwuw

w- 1mm m X) ,AR‘

***************Ending Page***************

***************Beginning Page***************
***************page number:48**************
Lambda expressmns
> Let's analyze the following case: I
APMPP ‘
mt mini) l
t l
in! ., h~
aura f lmu“ xl m y) i mm x . y . a w: i: l
;:§n:rl~mérl2’- n1", m-mm;
return a;
)—
> The code compiles correctly and upon execution prints to the screen value Bl
> The size changed from l to 8 because of the 2 variables that were captured‘

***************Ending Page***************


***************Beginning Page***************
***************page number:49**************
Lambda expresswns
> Let's analyze the followmg case:
Assembly code
‘um E = [-,b] 1m: x, mt y) 1 mmm x o y o 1 ob, j,
lea ecx, If!
lea ecx, If!

***************Ending Page***************

***************Beginning Page***************
***************page number:50**************
Let's analyze the rouowwg (ase:
Assembly code
\ \57' =L/1
‘=1 WY W constructor
w» ﬁx
W» 1/»
wn
‘~87; 1M\:<3;:%51~ = WW“ \ \nmwiw

***************Ending Page***************

***************Beginning Page***************
***************page number:51**************
Let 5 analyze the folwwwg (ase: W, ecx,dwozd Pt: “maul,
Assembly code mov edx,dvozd Pt! [sex]
W a“ um dword pCr [eax] ,edx
‘w krmwrd mov eaxydword pt: [thls]
W === mov ecX,dwczd pt! [param_2]
mov edx,dvord Pt! [sex]
m =8va mov dvord pt! [951"]ng
W‘ M
w M
:8 v Wt“ ; swasw = L “W (owes/a,
r K» 1/»
w
‘~87, 1mm; mm = crwzanz \ \nmﬁiw

***************Ending Page***************

***************Beginning Page***************
***************page number:52**************
> This means that the same code can he translated as follows:
APMPP
,n. m.,n4> 4
mta,W
imhhmm&mwhwmwwm)
return a;
>
Translated code
(1,55 1.m“y@571cvn5125 l
1"! 1,»,
puh11r*
“Maitwmwn: mg. m “my WELD], “My, \ ,
1“! untritan, (1“! X,1n! y; (uni! 1 faint“ X ~ y . i . n; ,
11mk4a \cnﬂﬁlzﬁl) - dél-VP;
>
An! maAnA) {
,n. i, n;
1m71=nn5115 f a»),
“(urn a,
l______________________________________________

***************Ending Page***************

***************Beginning Page***************
***************page number:53**************
> Usin- the rEVerences Chan-es the code as follows:

APMPP

,rr rrrr4> (
m!a,m
mM:hnUm%mUlmmxw'pmp
return a;

>

Translated code

(1m 1 Jmms r
M! ,
An! uh;

rrrrrr,
lambdaizrrrrgzsrrn: ‘refii. ,rr nzefib). briefibr, arrrriar 4
1n! HD:ra!ur() (in! Xrln! y) (ans! l rzlurn X . y . a . n, ) ,
lambdaikbﬂﬁuﬁn r mm.

inQ mirrA: 1
mta,m
rmgmms f A“);
return a;

J.______________________________________________________

***************Ending Page***************

***************Beginning Page***************
***************page number:54**************
Lambda expresswns
> Using decltype can be used for lambdas with no capture [that have a default
constructor). In case of lambdas with capture decltype does not work.
APP-CPP
m mm t
lnta-w,h-ZB;
Mn n I [=th (m it m y) ( ~th X . , . = .l,‘ )t
"f1" lambda class has a constructor with two
Dunn-w, r10, 1)); . -
mturn at Integer parameters. However, the code w1ll
) not compile (as it is not allowed to initialize
a lambda in this way).
error C3497: you cannot construct an instance of a lambda

***************Ending Page***************

***************Beginning Page***************
***************page number:55**************
Lambda expressmns
> Using decltype can be used for lambdas with n0 capture (that have a default~
constructor)‘ In case of lambda: with capture decltype does not work.
APP~CPP
m "no r
m . . m , h . 1n;
mo a - n.1,] (m x, m y) ( Mum x t y t i m; n
“ma-w, nu, 1»; \
Mum a; a
—’ ‘a
> This code will compile r a copy constructor between “f1 ” and “f2” is called‘ X‘
> The code works and prints 33 into the screen‘

***************Ending Page***************

***************Beginning Page***************
***************page number:56**************
Lambda expressmns
> Using decltype can be used for lambdas with ril) capture (that have a default
constructor)‘ In case of lambdas with capture decltype does not work.
APP~CPP
m "no i
m . . m , h . 1n;
auto a - n.1,] (m X, m y) ( Mum x l y l a m; n
“ma-w, nu, 1»; ‘1
Mum a; a
—’ ‘a
> This code works on cl,exe (11164270301) for Windows but does not work on ‘
> Because of the initializer list “I2” in instantiated with two different values for
internal (captured) “a” and "b". On CLexe for Windows the Code works and
pn'nts 64

***************Ending Page***************

***************Beginning Page***************
***************page number:57**************
Lambda expressmns
> Copy Constructor is used whenever the capture iS done based 0n the value.
APP-cw
<1“; mm» l
wane:
m i. b;
ii‘ .mo l ‘a
mam m. a); a
m» e Z mum x. m y) l MW X - u . y - 1.»; ); E
puma-3mm‘, ma, 1a»; x
mum a; x
> In this case, when object “f” is created , the copy constructor (or MyNumber ‘1
is called and the actual object that is created within the lambda abject has "
fields “a” and “b” reversed‘
> The result 0f this cude will be: X (10) ' m.a (3) + y (20) " m4b11) = 70

***************Ending Page***************

***************Beginning Page***************
***************page number:58**************
Lambda expressmns ‘
b However, if using references the copy Constructor is not called and the result l
will be different. “
APP-CW ‘
<1“, Kym-hm i
mm: i
m -. h; i
mixer-(1n! >9an Y): .1(x), My) l )
>~ m~»<<mu W» I.) ( . . .11; h . m; )
illt “no <
Mun-r 5);
m F .EQU... 1.1... y) i mum X ' l y - .1’; );
mm- |\ , w. m»;
) Mum n:
k > The result of this code will be: x (10) " mla12)+ y (20) " mlb13) = BO

***************Ending Page***************

***************Beginning Page***************
***************page number:59**************
Lambda expressmns
> Using “=“ and/or "a" means that only values used in the body of the lambda
are actuall used (coied/reierenced) in la lambda class,
APPIPP
m mum
Illiltfgjiinfg'iél'ii l MW X . y . .l . .5; n
Dunn-3mm‘, 5mm);
Mum a; x
) ‘x
> The result is 8 (only a1 and a3 are copied)‘
m "not
m .1, =1, 1;, u, =5. .5;
mo r - 1-1 (m X, m y) ( mum X . y . n . i3 . i5; i;
wintﬂ'ﬂdm', sixevfﬁni
Mum a;
’—
> Now the result is 12 (a1, a3 and a5 are used)

***************Ending Page***************

***************Beginning Page***************
***************page number:60**************
Lambda expressmns ‘
> Lambdas can be used with classes and can capture this pointer I
prcpp ‘
(his Sum-Ml
public: ‘
m! m» We; ‘
m Grade: ‘
public ‘
sum-mums‘ (Mir 'n, In a) l Ha- - n; era-1- - a; )
ma “(mm-4.0
( T48 1; .-nl5 () ( (his-)Gradewi )i
) a .
)i
in! ulﬂ()(
Swdeﬂ s('Pooescu', I):
mmwmoi ,,
> After the call of ancrementGmde the value of 5.6mde will be 9

***************Ending Page***************

***************Beginning Page***************
***************page number:61**************
Lambda express1ons
> Lambdas can be used with Classes and can capture this pointer
APP-cw
.mtl
m5! m» ‘rule;
m mm
mm:
sum-mm“ (m m, m a) l na- - n; mn- - a; ) l
m.‘ mmmrmo ‘x
( auto la - mum ( (his-)Gradw; n ‘E
no; x
l a
m mum
Student svwmn a); 2
sJMthridQQi
’—
> Keep in mind that lambdas work similar to a friend functions Event if data
members are private they can still be accessed. This code will run and the
value of field Grade will be incremented.

***************Ending Page***************

***************Beginning Page***************
***************page number:62**************
Lambda expressmns 1
> Lambdas can be used with classes and can capture this pointer I
APMPP ‘
(his Stud-n“
private: ‘
m! m» We; ‘
m Grade: ‘
public ‘
sum-mums‘ (Mir ‘n, In a) { Ha- - n; era-1- - a; )
m “(mm-4.0
‘ T481; -|El<> ( (his-)Gradwi n
) i .
)i
in! ulﬂ()(
Swdeﬂ s('Pooescu', I):
Mumwmoi H
> The same happens if we capture this by using ‘:‘

***************Ending Page***************

***************Beginning Page***************
***************page number:63**************
Lambda expressmns ‘
> Lambdas can be used with classes and can capture this pointer I
APMPP ‘
(his Stud-n“
private: ‘
my m» ‘rule; ‘
1M Grade: ‘
mm: ‘
sum-“(mun (m m. m a) x m- - u; W. - u; )
ma mum-mo
( sum la -|E|o ( arm“; n
h()i
)
)i
1n! uln()(
Swdeﬂ s('Pooescu', I):
mummideoi ,y
> The same happens if we capture this by using ‘&‘. Also the use of “this-77’
pointer in lambda function 1's not required.

***************Ending Page***************

***************Beginning Page***************
***************page number:64**************
Lambda expressmns 1
> Lambdas can be used with classes and can capture this pointer I
chpp ‘
(his Stud-n“
private: ‘
m! m» ‘rule; ‘
m Grade: ‘
mm: ‘
sum-mums‘ (Mir 'n, In a) { Ha- - n; mn- - a; )
ma mum-1.0
‘ m 1, 4E0 ( (hls-mradewi n
h()i
)
)i
1n! ulﬂ()(
Swdeﬂ s('Pooescu', I):
mmwmoi H
> However, this code will not work as this pointer is not captured‘

***************Ending Page***************

***************Beginning Page***************
***************page number:65**************
\
Implicit conversion
to a pointer to a
> function

***************Ending Page***************

***************Beginning Page***************
***************page number:66**************
Lambda expressmns
> All lambdaS with n0 capture have an implicit Conversion t0 a function pointer.
This is normal as having no capture means that "this" pointer lor the lambda
structure is unnecessary.
> The following code works because "f" has no capture‘
APP~¢PP
vnld 5mm“ ‘ma, m m“, w<~w~><m m, m n1)) ( s ) \
m "no l
I ( m nmlri[]-(1,4> 2, s, 1,1); ‘i
1m r - nu» m. m nz) l mum m > nz; l; l
Snrﬂnumers, ww<m~> / sumFUM). m ‘a
Mum n; ,7 l

***************Ending Page***************

***************Beginning Page***************
***************page number:67**************
Lambda expressmns
> All lambdaS with n0 capture have an implicit Conversion t0 a function pointer.
This is normal as having no capture means that "this" pointer lor the lambda
structure is unnecessary.
> The following code will not work as “f” captures local variable “a”
APP~¢PP
ma 5mm“ w-w, m m“, w<~w~><m m, m n1)) ( s ) \
m "no l
I ‘ m . . m; ‘x
m an.“ - ( a, ., 2. s. a. a t; l
m ¢ ﬂu“: a. 1.“ a) l Mum m > a; n x
5mm . “mm-ms) / “mm-lo. m i
MW u; l

***************Ending Page***************

***************Beginning Page***************
***************page number:68**************
Lambda expressmns
> All lambdas with n0 capture have an implicit Conversion t0 a function pointer.
This is normal as having no capture means that "this" pointer lor the lambda
structure is unnecessary.
> The following code will work‘ “f” captures all used local variables /
parameters by making a copy of them, but as the body of the lambda does
not use any of them, the lambda is actually without capture. l‘
APP-CPD
ma sums»: Number. m: munt. mtmwmnm n1. m "an l - > 3
m “no x
m msﬁ - l a. ., z. 5. a. a h
am e - (m: n1, m m l mum n1 > n2; n
5mm“ m, sixlvﬂmmhlrii / Sixwﬂinti; m
mm a;
y

***************Ending Page***************

***************Beginning Page***************
***************page number:69**************
Lambda expressmns
> All lambdas with n0 capture have an implicit Conversion t0 a function pointer.
This is normal as having no capture means that "this" pointer lor the lambda
structure is unnecessary.
> The following code will NOT work because “f” captures all local
variables/parameters by value (making a copy oi them) and the body actually
uses one of them ("a"). l‘
APP-CPD
ma “mm “mnber. m count. muwwmnm n1. m "an l - > \
m “no x
m m r - l a. ., z. 5. a. 3 h
am e Elﬁum n1, m m l mm n1 > (n2 ‘E’; n
Svrthnm m, sixlvﬂmmhrii / Sixwflintil m
mm a;
y

***************Ending Page***************

***************Beginning Page***************
***************page number:70**************
Lambda expressmns
> How does the compiler models this behavior ‘a
APMPP
‘mm SM'ﬂXn! mum", m count, mawmu“ n1, m m) 1 7 ) 1
m mm) ‘
‘ 1m "um-“u - ( ,,.,1,§,1,1); ‘
.m f . |.| (m u, m m { mm u > n1 ; ); \
boo! rgs I ‘(1, 1); ‘
SW‘(VII|WDEI‘SV sizlvﬂnulrblri) / SiszHnKL f):
"m". n;
I )

***************Ending Page***************

***************Beginning Page***************
***************page number:71**************
Lambda expresswns
> How does the compiler mudels this behavmr
Assembly code
xu ncxv [i]
sorunumxaxs, lelonu-hlrl) / unatlinn, l):

***************Ending Page***************

***************Beginning Page***************
***************page number:72**************
How does the compﬂer models thvs behavior
Assembly code
p. v \
1-1 my; [P x/HMM -
W A” V
—
Lu H
w» v;
1U M, meﬂyJ
p. v Aw
f, 12mm
VJ‘, NW: \

***************Ending Page***************


***************Beginning Page***************
***************page number:73**************
Lambda expresswns
b Howdoe
Assemb
m eu,292320h
lea ‘ H ecx \

***************Ending Page***************

***************Beginning Page***************
***************page number:74**************
How doe
y mov eax 25252011

***************Ending Page***************

***************Beginning Page***************
***************page number:75**************
> This means that this code translates as follows:
App_cpp Translated code
m mm hnnl hm:_mcm1_mxlm(hu ALIM n1) (
1 Mum mmz:
m numcrsll 1 ( a, ~, z, s, 1, 1 )1 )
mm: f - [-1 lm In, 1m n1) ( "m". mm n
m1 m - m, 1;; class ‘me-Juan": (
surnmmmrsl snmﬂmmmrs) / manna‘ m Mm: l
mum m boo] weriioﬂ) (m nIJIW n2) ( 3
) mum "ma; z
— , \
Mm” m1 ('>(m,|m> l \
Wm hm:_ar1<m<1_mdm; x
m “mo
(
m mrsl]-(1.4.1.6.1. a )i
1mnjmmcz ﬁ
m1 m . m, z);
Snrtﬂujlr-s, slmﬂmlbgri) I sumﬂlnt). F);
Wm a;
)

***************Ending Page***************

***************Beginning Page***************
***************page number:76**************
b This means that this code translates as follows:
Appvcpp Translated code
m mm) hm! Jn'LJn was“ ‘W (m “MM n1) (
i Mum Inna;
m num:r5[1:(l,ﬁ,2,6,l,3)l )
mu f : H (m "a, 1m n1) ( "m". ma; >;
m1 ru - m, 1;; (his 1mas7au1=sab¢2 (
Sarﬂnumum mmnmm: / snufnnrh m mm:
mm m m1 owiwo (m Imim n2) ( ‘
r Mum "ma;
aperitnr- m1 cumin) x ‘
Wm Jn'LJn Aroma ‘WM;
> 4
m "mo
(
m mril]:(1. A. 1. s. 1. a )i
5173mm“; n
gamma, immuws) / nwnm). r);
> '

***************Ending Page***************

***************Beginning Page***************
***************page number:77**************
b This means that this code translates as follows:
Appvcpp Translated code
m mm) hm! Jn'LJn was“ ‘W (m “MM n1) (
i Mum Inna;
m num:r5[1:(l,ﬁ,2»5»l»3)l )
mu f Z H (1m In, 1m n1) ( mm. I. . >;
m1 ru - m, 1;; (his lmatwmw (
Sarﬂnumum mmnmm: / “mum m mm:
mm m m1 owiwo (m Imim n2) ( ‘
r Mum "ma;
)
mm» m1 ('>(m,m> x ‘
Wm Jn'LJn Aroma ‘WM;
> 4
_
m "mo
(
m mril]:(1. A. 1. s. 1. a )i
5173mm“; n
gamma, immuws) / nwnm). r);
> '

***************Ending Page***************

***************Beginning Page***************
***************page number:78**************
> Lambdas and STL

***************Ending Page***************

***************Beginning Page***************
***************page number:79**************
Lambda expresswns
> A lambda expression can be used with STL (algorithm templates]. The
following code prints all elements from the vector “v”
APP-CPD
Olnclude <vecwr>
"mm @lzwnrv»
m rum()(
venordn!) v -¢1,1, a, 5,5,1);
) std::for_e:(h Memo‘ Hum‘ mw "MM pnntﬂ'xdf‘ ml.» y)‘
> The following code doubles the value of all values from vector “v”
App-cup
mum (venom ,
“mm (algorhhm
m “no
‘ vectorunb v =(1. 2. a. s. s. 1);
“mum “memo. mm). mm mum um '- 1; n;
) Mmuxh (memo. v.9nd()| mm “mu prlnzﬂ'Xm'. Hm), n.

***************Ending Page***************

***************Beginning Page***************
***************page number:80**************
Lambda expresswns
> A lambda Expression can be used with STL (algorithm templates). The
following code prints all elements from the vector “v”
APP-CPD
nun-1Q (New
mum (inwnm
m nunOl
veanrdnn v . ( 1, 1, a, 5, s, 1); l
‘m m m» (mhqlno, men“), [10“ v=1u<)(pmm-u,-, value); m l
, x
> The following code doubles the value of all values from vector “v”
APP-CPD
mum Guam»)
m “no
l "(mum v : l 1, z, s, s, s, 1);
m NLWW (v.5!lln0’ mm). nun lulu!“ value -. 1; n;
) ,lJ m tn?‘ (v.hqlr\(), “~10. [Mm VilMe)( prhuF('!ld,', value); ));

***************Ending Page***************

***************Beginning Page***************
***************page number:81**************
Lambda expresswns
b Compute the number of odd numbers from a list:
APMPP
int ruiMH
Vtiiﬂrank) v :(1, 2, 3, 5, 6. 1 )-
1M outnumber; : sm::<wm_1€1v.l>ezm). mendl). HUM value) ( NWM value X 2 :: 0: )):
)
b The following cude removes all odd numbers from a list:
APP-CPD
inﬂame)‘ (umegan. V.end()| HUM value) l return value x 1 .. a; )),
v,!nd()
l;
)

***************Ending Page***************

***************Beginning Page***************
***************page number:82**************
Lambda express1ons
> A lambda expression can be used with STL (std::funcﬁon] Component t0
describe a function
APP-cw
mum (Funniwal)
m "mm
szdnfuunuandnlﬂnl, m» m - [1am -, m h)->1|\t ( mtum 1 ‘ h; 1;
punzﬂ'mw', mun, m»; l
) x
> Usually this type of code is meant to replace a pointer to a function:
APP-CPD
mum (manic-uh
we“ m (“manager-sun) (in! ,1,“ >;
2m "no
5m mmuandWﬂnugu-Sum m - nu» 1, int m-“m ( 71mm 1 ‘ h; 2;
“ma-mm, mun, m»;
>

***************Ending Page***************

***************Beginning Page***************
***************page number:83**************
Lambda expressmns
> Instead of using pointers t0 a functiun, one can replace them with:
APP-cw
mum (Funniwal)
up.“ m (Wm) um .m n
m4 5mm“ ‘my-5, 1M cm, 51¢==MIM<WN> kmreﬁmﬂjm)
(
> x
m "mm \
Mull-(1.1.:.->; ‘a
mmuuwvymw cwﬂnulon: x
zwhmniw e mm a. m hymn < Mum a > b1] = (a < alum); )i E
5mm, ¢, (qr-Mum); ‘
> In this case we replace the standard mt (*Hintnnt! function with
std::function

***************Ending Page***************

***************Beginning Page***************
***************page number:84**************
Lambda expressmns
> Instead of using pointers t0 a functiun, One can replace them with:
APP-cw
mum (Funniwah
typ-n-f m (Wm) um .lm n
m 5mm" ‘nuns-s, m email, std::ﬁmtlm<WN> lawlmFumtlm) i - )
m "not
m X . 4;
m y : n x
mnn-n.z,s,u; x
mmmm r!) chuxtlm; x
wm, ., m un: w); x
’ ‘x
> The main advantage in this case is that you can pass lambdas that have a
caption (while in case of a cast to a function pointer you can not)‘ "
> The disadvantage is that using std::function is slower than using the pointer
t0 a function directly‘

***************Ending Page***************

***************Beginning Page***************
***************page number:85**************
Lambda expressmns ‘
> A lambda function and stdnfunction can also he used with classes: I
APP-CPD l
meme (ﬁmcilouih
(lass 5&udln‘ l l
mum l
m“ mr wu; l
m m“; l
mm:
mummmmnm mmwmmmo
l
auw n - mo ( Grade»; l;
s!d::Func(lm<vnM()> m - m
MW w;
);
m uan ( ,
5M“ i('PW<scu'. a);
am m Z LMIIKr'I-VRFWKUMQ;
mo;
Mum a;
> After the execution 0| this code, s.Grade will be 9

***************Ending Page***************

***************Beginning Page***************
***************page number:86**************
Lambda expressmns ‘
b Be careful when using std::funcﬁon with lambda: that capture local variables I
by reference l ‘
APP-cop ‘
( 1m a - 1w; ‘
primf(‘mr=ss of a 1 lav-‘)3
std::funnian<vui¢(int)> (n: - [lallint valul) l
h
I
int "WM
‘(1W
'—

***************Ending Page***************

***************Beginning Page***************
***************page number:87**************
Lambda expressmns
> Be careful when using Std:.‘funcﬁ0n with lambdas that capture local variables

by reference l

APP-CPD

Iincludl mmm.»

m: :funninmvniduntb annmzunnl)

l 1m a - 1w; i
Frintfl'Addr-ess w i Z 1m‘); a
mnmmmmmm), m - [hum mm l \

mum-mm; of - mm 1mm) - mm, u); a
a .- “m; a
n l
return he a

1 mums a; a : i‘

’"‘ ‘h Addxass of a (from lambda) = ‘
mun

1’—
> In this case a value on the stack ("om the GetFunctian stack) is modified
outside GetFunclion !

***************Ending Page***************

***************Beginning Page***************
***************page number:88**************
\
Lambda expresswns
b Be careful when using Stdtifunclion with lambdas that capture local variables
b referencel
APP-cw
“mm (funnlnnah
m: mmmmmm» ﬁnrunctiunﬂl
mnmmwmmm» m Z [blunt mm l i .1 “m; 1; l7 l l Ml .l l l u Hr v w A v A» ‘
"mum; V wuul l mu UM” MU l
m b Z 10;
mnmmwwmmb mu": 1 [mum “my l 2;
mm;
"mm . xa', h»;
2 .
1mm;
mm a;
>—
b What will be printed on the screen upon the execution o‘ this code?
> Tested with cllexe [19l16.27030.1), VS 2017

***************Ending Page***************

***************Beginning Page***************
***************page number:89**************
Lam bda express1ons
> Be careful when using std::function with lambdas that capture local variables by
reference !
APP-CPD
“mum ("union-b
s=¢11m=mn<wm<sm> Getflmtﬂulqﬂ
m i e m;
smmmhmwmm» m - [lilUVR mm t i .. mu; 2;
mm m; x
) x
ma “scum: 1m=mn<wm<4m> mm 1
m h e 10; ‘a
smmmhmwmm» mu": - [mum mm t 1; x
mm; \
mmn . w. >1;
m “mm \
inn f - GnnmnimlO; '
1mm;
return a;
’—
> The code campiles and prints 15 0n the screen [even if b i5 10). Similar results are
highly dependent on the stack alignment,

***************Ending Page***************

***************Beginning Page***************
***************page number:90**************
Lambda expresswns
> Be careful when using std::functi0n with lambdas that capture lucal variables by
reference !
APP-cw
lindud- tfunnianib
stdiiiunniamwid m > in: e u m m“ = .1 m“; ;
t
stduiunniamvaid m > cm in: e u m m“ ; ‘
Jim-h e w. a);
am e e mmmmu; "
mm);
return a;
’—
> The code compiles and prints 15 On the screen [even if b i5 10). Similar results are
highly dependent 0n the stack alignment,

***************Ending Page***************

***************Beginning Page***************
***************page number:91**************
Lambda expresswns
> Be careful wnen using std::functi0n with lambdas that capture lucal variables by
reference !
APP-cw
mum dilution-b
“a: :ﬂmnlamvoldﬂnt» ﬁetrlmctialqﬂ
m s e m;
std::fun=tiuntvvi¢(int)> in‘ Z [lilUVR vilul)
) i
void Yesqszd: :ﬂmniamvaidlint» um“ ‘
“
p::m't'n . w. h); L’
m near-m r
inn f 1 infunrtiBVIUS "
use“);
mm a;
’—
> The code compiles and prints 15 on the screen [even if b is 10). Similar results are
highly dependent 0n the stack alignment,

***************Ending Page***************

***************Beginning Page***************
***************page number:92**************
Lambda expresswns
> Be careful when U iables by
reference ! b T95‘
a GetFunctlon
APP-cw
22:22::;§::f:§:3; fnc
m . - m;
m1 :ﬂmctwmva.
rm”. m; x
in“ “mm: “mm "(M E
m h - 1a; x
.~ :2 v . mp tmpjni - [mum mm ( n ‘a
r‘
m "Ar-()4 \
am e - Getnmntmﬂ; "
mm);
“my. a;
’—
> The code campiles and prints 15 0n the screen [even if b i5 1D). Similar results are
highly dependent on the stack alignment,

***************Ending Page***************

***************Beginning Page***************
***************page number:93**************
Using lambda with
templates
> (Generic lambdas)

***************Ending Page***************

***************Beginning Page***************
***************page number:94**************
Lambda expressrons
P Starting from C++14, lambda expressions can be used with auto parameters
creating a template lambda‘
APP-CPD
m "no
( am e : mam X. am y) r return x ¢ y; n
prim-mnqem, m); r
pr1m('xlf\n',f(n.5, 20.1)); a
mum a; ‘a
r a
> The code compiles and prints: 3O and 31 ‘Z into the screen‘ lt only works for
the standard C++14 and above, , l‘
b In this case the auto parameters work as a template (this is not however a a
template I)

***************Ending Page***************

***************Beginning Page***************
***************page number:95**************
Lambda expressmns
> Starting from C++20, lambda expressions can be used with a template
parameten
APP-CPD
m mm
l am e Z [1079:an v> n v1, v v2) t mm n . m n
mm (-m new, em, m, ‘(11.4.3); i
return a; x
) l
> The code is no different than using auto, the main difference being that we l‘
can force a specific type , or a template of a specific type to the lambda “
expression‘ ‘
> This code works with g++, but will not compile for cl.exe (VS 2017)
> The code will print 30 and 5.5

***************Ending Page***************

***************Beginning Page***************
***************page number:96**************
Lambda expressmns
> Starting from (“20, lambda expressions can be used with a template ‘a
parameten l‘
APPlPP ‘1
m "no z
‘ am e e [1<¢Yﬂ=nwi= n (r v1, r m t "tum v1 . m n I
mm (-n w, ma, m.5)); ‘
return a;
l—
> The code will not compile, The compiler fails to deduce type T (it can either
be int or double) for the call ﬂlO, 20.5)

***************Ending Page***************


***************Beginning Page***************
***************page number:97**************
Lambda expressmns
> Starting from one, lambda expressions can be used with a template I
parameter “
APPXPP l
m "no l
(elm: e e [1(typeninle v> (v n. v m ( ‘
r e»;
new . v1 e v2;
return “we”;
:iiml-mn'l m.» 1.1)):
return a;
)—
> In this case, we can force the lambda expression to return an int value
(regardless of the type T)‘ '
> The result will be 3 (3.7 converted to int).

***************Ending Page***************

***************Beginning Page***************
***************page number:98**************
Lambda expressmns
> Starting from C++ZO, lambda expressions can be used with a template
parameten
APP-CPD
m "no
‘ i Z [1< v. l) (v n, v mg‘
r mp; i
m, - n l n; l‘
‘ < 1w; l‘
liimvmna m.» 1.1)): l
a; x
> In this case, the cude will nut compile, as type R can not be deduced. The
problem is located in the fact that we specify that the result type is R but the
Compiler can not deduce it !
> Currently, using an explicit template for i lex: f<double,|'nt>) is not
supported !

***************Ending Page***************

***************Beginning Page***************
***************page number:99**************
> Mutable capture

***************Ending Page***************

***************Beginning Page***************
***************page number:100**************
Lambda expressmns
> Let's assume the iollowing code: ‘a
APMPP
m mm 1
1 ‘
m a - a; I
autuf-[hlllntx,1nly)(I-x*yi)i ‘
ma. m; ‘
mum". - Inn", .y; ‘
return m
)—
> The code compiles and prints “a = 30” on the screen‘
> The capture “a” is done via a reference and it can be modiﬁed‘

***************Ending Page***************

***************Beginning Page***************
***************page number:101**************
Lambda expressmns ‘
> Let's assume the following code: I
APMPP l
1h! malhl) r
l
m i Z a: ‘
ﬂu, m, ‘
Prin!fl“i . :¢\h“, a);
return a‘
>—
> The code however, will NOT work‘
> But, as “a” is copied In the capture of the lambda expression, it should work
like a class member and therefor we should be able to modvfy It {even vf this
will NOT affect the local variable “a” from the main functionls
> What happens?

***************Ending Page***************

***************Beginning Page***************
***************page number:102**************
> Let's look at the translated code:
APPZCPP
1“! mijn4> {
m a Z a;
Hutu ¢ Z Ii](xnt X‘ x“! y) 4 a Z x ‘ yl >
ﬂw,wm
Dvlnlf(“z Z ld\n“, 1),
l______________________________________________
Translated code
(JZSS \amﬂxdailcnﬂﬁlli ,
1"! a,
Puhllz
‘.mpqﬂisZou§51§‘,vZ AZZk7.,; “(ZZtVZy t
V016 Overzluv() <1"! 1,1"! y) (uni! { 1 Z x , y, )
M
‘"1 mi‘n<> l
m1-,m
\Zmbd.73cow§1:6 ¢ (av,
ﬂu,wn ,
,rxnx¢<“i Z ld\n“, a); ,~
)

***************Ending Page***************

***************Beginning Page***************
***************page number:103**************
Lambda expresswns
b Let's look at the translated code:
APP-CPD
1n! m.‘n(: {
m a - l1
27;:f2:)!a]11m Xv 1m y) ( = Z X t y: )1
mnémb 14w", m Because of the “canst” operator from the
) end of the definition, operated) can not
Translated code modify any of Its data members. ‘
<1.” ,mjwmu i r
in‘ i; 2
mm:
“Mtscnmmm ﬁrst)»; . m
mm: gnu-mu u“ m“: y) . - x . y; y ‘
int milnlx (
in! -. n;
“me-imam‘ r m;
fill 2071
Wm“ Z mm", a;
)

***************Ending Page***************

***************Beginning Page***************
***************page number:104**************
Lambda expresswns
> The solution is [u use “Mutable” keywurd when defining the lambda:
APP-CPD
in! maul) {
a“ f Z [alum Xv m y) mmm = Z X t y; )1
ﬁllY 2n)?
)
Translated code
>
mm mnnU (
hmgmms f m;
((107 2071
prinm": : inn", I);
)

***************Ending Page***************

***************Beginning Page***************
***************page number:105**************
Lambda expressmns
> The Solution i5 t0 use “Mutable” keyword when defining the lambda:
APP-CPD
m mm t
m a - n
am f - [alunt XV m y)mtab1e(a - X t y; )1
m», m;
prunfl": - mm", n;
ruurll a; l
> The cod compiles and prints “a = 0" into the screen. l
> Even if the “mutable” keyword is used, as “a” was captured by making a copy \
of it and only the copy is modified when calling (110,20) i

***************Ending Page***************

***************Beginning Page***************
***************page number:106**************
Lambda expressmns
b The Solution i5 t0 use “Mutable” keyword when defining the lambda: i‘
APMPP 3
m mm I
i
m mu - n; 1
mu (aunt-r - [1mm] u uun- ( mu". 1mm; n
m (m u- - a; u- < 1a; 1M: 1
{ prAan(‘”,",¢wllKerU)1
3m" 1;
)—
> The code compiles and prints 0,1,Z,3,4,5,6,7,8,9 into the screen.

***************Ending Page***************

***************Beginning Page***************
***************page number:107**************
Lambda expressmns
> The Solution i5 t0 use “Mutable” keywurd when defining the lambda:
APP-CPD
m mm
i
m index - n;
am (aunt-r - hnle] u_( mm "In-m; n
m (m u- . a; u- < 1a; M
{ ,mmwvt-V cwnnrﬁh ‘r
—) ‘x
> If we want to describe the type of la lambda, then the mutable keyword ‘a
should he added before the type (alter the lambdas parameters) "

***************Ending Page***************

***************Beginning Page***************
***************page number:108**************
lnitialized lambda
> capture

***************Ending Page***************

***************Beginning Page***************
***************page number:109**************
Lambda expressmns
p C¢+14 standards allows [u initialize the lambda capture
APP-CPD
m mm
l
m = - m n - 2»;
.m n —(m X, m y, { Mm X . y . m. . m1; h
“WNW mm 277; i
mu". o; \
> In this case lambda “f1 " has two variable captured (var1 and varZ). “var1 "
equals 10~20 I 30, and “varZ” equals 10-20 I -10; X‘
> The code compiles under C++14 standards and prints 1+Z+30-1O = 23

***************Ending Page***************

***************Beginning Page***************
***************page number:110**************
Lambda expressmns
D C+*‘i4 standards allows tn initialize the lambda capture ‘i
APMPP i
in! iiinlu i
i autn ‘1 Z [taunklr Z Bi A) mutihl: ( rlsur“ ‘ﬂuﬂilr"1 >1 1
fur (1n! lr:H,!r<lﬂ,!r")
{ Prlnlfl“ld\n“,fll))i
J______________________________________________
> This type of initialization can be used to create lambdas with their own
parameters‘ In this example, “f1” has one member (counter) that is
initialized with 0 and incremented each timef11)i$ called.
> The code prints the numbers from 0 to 9

***************Ending Page***************

***************Beginning Page***************
***************page number:111**************
Lambda expressmns
b C*+14 Standards allows [u initialize the lambda capture l‘
APMPP l
m mm i
‘ 1
er n r-.; r< .; ,,,
( i
nrxn!f("m\n",ﬂ());
1mm n;
)—
> In this case the type of counter is deduced to be int‘
> The code compiles and prints 2,4,8,16,32,64,128,256,512,1024

***************Ending Page***************

***************Beginning Page***************
***************page number:112**************
Lambda expressmns
b C*+14 Standards allows [u initialize the lambda capture l‘
APMPP l
m mm i
fur link r-l; r .; vie
l urnnlf("m\n",ﬂ(m
lam n;
)—
> This code will not work —) it is not allowed to set the type of capture. Type of
capture is deduced (rom the assignment.

***************Ending Page***************

***************Beginning Page***************
***************page number:113**************
Lambda expressmns
p (‘+14 standards allows l0 initialize the lambda capture
APP-CPD
m mm
‘ .m f1 - [mum . 111) mm ( ‘mm mm mm )1
m um "-mm»; m
l nrxn!f("m\n",ﬂ()); \
y ‘x
> However, you can force the type of such assignments by forcing the type oi
the evaluated value {usually using a cast]. ‘
> The code will cumpile and will print: Z,4,8,16,32,64,128,U,0,0
> The last 3 zeros are because counter is of type unsigned char and once it
reaches value 256 it overflows and becomes 0.

***************Ending Page***************

***************Beginning Page***************
***************page number:114**************
Lambda expressmns
p (‘+14 standards allows t0 initialize the lambda capture
APP-CPI:
m mm
l "mm - [seed - m WWW, w mxliumgr) Mans (
m4 - zzssswvu - m4 l 1;
wimv sud x mllemﬂll‘;
); ‘x
m 1m tr:l;trdn;tr») ‘a
mmms-m "Mum mun-r mm" n m 9;: n w, mmum): E
return n; x
> This example generates a pseudo random function based on the
Linear congruential generator algorithm‘ "
> The function uses the seed internal variable to generate the next random
number.

***************Ending Page***************

***************Beginning Page***************
***************page number:115**************
New feature in
> C++17 and beyond

***************Ending Page***************

***************Beginning Page***************
***************page number:116**************
Lambda expressmns
> C¢+17 Standards allows l0 capture ('this) 9 by using its Copy Constructor
APP-CPD
M1355
i
a;
‘mam "my t 1 - "m; y
Mm“ "ytlass l m: { 51¢“th << "Copy 1m" << imam; . - m." y
autumn“) { | m { smncm! << . << imam; );) t‘
1;‘ mm, x
‘ ‘x
Hytlass c - an; x
f - (Autumn); a
m: I»
2.: K n; a
a; '
)—
> This code creates a lambda (unctions that captures this (as a pointer)‘ The
execution will print 10 and 20 on the screen (as lambda captures a reference
to object c )t

***************Ending Page***************

***************Beginning Page***************
***************page number:117**************
Lambda express1ons
> C¢+17 Standards allows t0 capture ('this) 9 by using its Copy Constructor
APP-CPI:
Mytlass
1
=1
mgml mug: 9.- ;sm; y __ t "c W m“ a b _
1;‘ mm, ‘a
( ‘a
Myths; < - 1»; x
f - “Hum-u; x
m;
2.: K n; x
a; '
l—
> This code only works on C++17 standard. In this case, lambda captures a copy
of c object, and the results printed on the screen will he: “Copy ctor", then
“10" and then “10" again (only the local c object is modiﬁed, not its copy)‘

***************Ending Page***************

***************Beginning Page***************
***************page number:118**************
Lambda expressrons
> cvw standards also arrows creating a constexpr lambda expression
APMPP
in! malnk)
t
mt a e In;
(unquDr aulu r e mm n, m W; (unsuxpr t return ~v . ),
Pr1n1'\ , rr1, 2)),
return e;
*—
> This code only works an C++17 standard. However, the generated cod does not ShDW
that the constexpr optimization is Indeed applied‘ Code was tested with cl.exe,
VEI'SIOH19416170251 and 19.16.270301 for X86 architecture
Generated assembly code for “printf(“%d\n", mg)"
ZZZ: i
lea ear-[Fl
tan <1mmnjgrecWM3F35|1<94<4M§555F5743L1>::ﬂueratnrii ,
SEC ZZZ“ “an, 'an
(i1) yum‘
add esp-H

***************Ending Page***************

***************Beginning Page***************
***************page number:119**************
Lambda expressmns
> C¢+17 standards also allows creating a zonstexpr lambda expression
APP-CPD
Milli} {
= . 1n;
t - [11 v17 m ( n l m )1
"rm, 2)];
nib] . a;
9; i
—» i
> It however works for the previous case, and “aa” local variable is instantiated. l
> It also works with static_asserl like in the next example‘
APP~=PP x
( mm
r . [1r n, m r v1 . v2; );
(m, 2) .. 3);
u;
>—

***************Ending Page***************

***************Beginning Page***************
***************page number:120**************
y my

***************Ending Page***************

