[{content={parts=[{text=```
--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following is a valid way to define a tuple?
--InteriorSeparator--
(right) (1, 2, 3.5)
(right) (1, 'A')
(wrong) [1, 2, 3]
(wrong) {1, 2, 3}
--InteriorSeparator--
easy
--InteriorSeparator--
4
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In Rust, are tuples named structures?
--InteriorSeparator--
no
--InteriorSeparator--
easy
--InteriorSeparator--
4
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What feature allows assigning values from a tuple to a set of variables?
--InteriorSeparator--
destructuring
--InteriorSeparator--
medium
--InteriorSeparator--
7
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What happens when destructuring a tuple containing objects without the `Copy` trait?
--InteriorSeparator--
(right) A partial move occurs, potentially causing borrow errors
(wrong) The tuple is automatically cloned
(wrong) The program crashes
(wrong) The objects are copied implicitly
--InteriorSeparator--
hard
--InteriorSeparator--
8
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is a common use case for small tuples in Rust?
--InteriorSeparator--
returning multiple values from a function
--InteriorSeparator--
medium
--InteriorSeparator--
10
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What must be known about an array at compile time?
--InteriorSeparator--
its size
--InteriorSeparator--
easy
--InteriorSeparator--
12
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following is the correct syntax for initializing an array with 5 elements of value 9?
--InteriorSeparator--
(right) [9; 5]
(wrong) [9] * 5
(wrong) [9, 9, 9, 9, 9]
(wrong) {9; 5}
--InteriorSeparator--
easy
--InteriorSeparator--
13
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following array initializations will result in a compile-time error?
--InteriorSeparator--
(right) `let a = [1, 2.5, 3];`
(right) `let a1:[i32;5] = [9; 4];`
(wrong) `let a5 = [199u8, 2, 3];`
(wrong) `let a6 = ["abc", "cde", "efg"];`
--InteriorSeparator--
medium
--InteriorSeparator--
14, 15
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Does Rust perform boundary checks on array access at compile time if the index is a constant?
--InteriorSeparator--
yes
--InteriorSeparator--
medium
--InteriorSeparator--
18
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What happens if you try to access an array element with a constant index that is out of bounds?
--InteriorSeparator--
a compile-time error
--InteriorSeparator--
hard
--InteriorSeparator--
19
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
When does Rust check array boundaries if the index is not a constant?
--InteriorSeparator--
during execution time
--InteriorSeparator--
medium
--InteriorSeparator--
20
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In the context of array manipulation, what is a key difference between Rust and C++?
--InteriorSeparator--
Rust performs boundary checks even when the index is known to be within bounds (in debug mode), while C++ might not
--InteriorSeparator--
hard
--InteriorSeparator--
24
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
From version 1.63, which function is used to intialize array where the element doesn't have a Copy trait?
--InteriorSeparator--
std::array::from_fn
--InteriorSeparator--
medium
--InteriorSeparator--
31
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following is true about constants in Rust related to array initialization?
--InteriorSeparator--
(right) Constants must be fully computable at compile time
(right) Heap allocation is not possible for constants
(wrong) Constants can only be primitive types
(wrong) Constants are not allowed in array initialization
--InteriorSeparator--
hard
--InteriorSeparator--
35
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What happens when assigning one array to another where the elements don't implement the `Copy` trait?
--InteriorSeparator--
a move occurs, invalidating the source array
--InteriorSeparator--
hard
--InteriorSeparator--
46
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What trait can be used to copy individual array elements that would otherwise be moved?
--InteriorSeparator--
Clone
--InteriorSeparator--
medium
--InteriorSeparator--
40
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
When is assignment between arrays with different sizes possible?
--InteriorSeparator--
never
--InteriorSeparator--
easy
--InteriorSeparator--
43
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
How are arrays passed to functions by default in Rust?
--InteriorSeparator--
by copying the entire array onto the stack
--InteriorSeparator--
hard
--InteriorSeparator--
57
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
How can you pass an array to a function without copying it?
--InteriorSeparator--
by passing a reference to the array
--InteriorSeparator--
medium
--InteriorSeparator--
64
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the type of a slice from an array?
--InteriorSeparator--
&[type]
--InteriorSeparator--
medium
--InteriorSeparator--
67
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What happens when a reference to an array is passed to a function that expects a reference to a slice of the array?
--InteriorSeparator--
the array reference is automatically coerced into a slice
--InteriorSeparator--
hard
--InteriorSeparator--
78
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What are structures in Rust similar to in C++?
--InteriorSeparator--
classes
--InteriorSeparator--
easy
--InteriorSeparator--
84
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
If a struct does not implement the Copy trait, what happens when it is assigned to another variable?
--InteriorSeparator--
it is moved
--InteriorSeparator--
medium
--InteriorSeparator--
86
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What happens when you move a data member out of a struct?
--InteriorSeparator--
the struct remains valid, but that specific data member is no longer accessible
--InteriorSeparator--
hard
--InteriorSeparator--
89
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What attribute can be used to enable copying a struct?
--InteriorSeparator--
(right) #[derive(Copy, Clone)]
(wrong) #[derive(Move)]
(wrong) #[enable_copy]
(wrong) #[copyable]
--InteriorSeparator--
medium
--InteriorSeparator--
91
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the purpose of the `#[repr(...)]` attribute?
--InteriorSeparator--
specify how the structure should be aligned in memory
--InteriorSeparator--
medium
--InteriorSeparator--
91
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is a ZST?
--InteriorSeparator--
Zero Sized Type
--InteriorSeparator--
medium
--InteriorSeparator--
101
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the size of an empty struct in Rust?
--InteriorSeparator--
0
--InteriorSeparator--
easy
--InteriorSeparator--
101
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the new type idiom useful for?
--InteriorSeparator--
creating more meaningful names for basic types
--InteriorSeparator--
medium
--InteriorSeparator--
104
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the main benefit of using the New Type idiom in terms of performance?
--InteriorSeparator--
it comes with zero cost due to compiler optimizations
--InteriorSeparator--
hard
--InteriorSeparator--
107
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What are type aliases similar to in C/C++?
--InteriorSeparator--
typedef or using
--InteriorSeparator--
easy
--InteriorSeparator--
110
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the purpose of Box<T>?
--InteriorSeparator--
to allocate data on the heap
--InteriorSeparator--
easy
--InteriorSeparator--
115
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What happens to a boxed value when the Box goes out of scope?
--InteriorSeparator--
the memory on the heap is automatically deallocated
--InteriorSeparator--
medium
--InteriorSeparator--
115
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Why are Boxes useful for recursive types?
--InteriorSeparator--
they allow Rust to know the size of the type at compile time
--InteriorSeparator--
hard
--InteriorSeparator--
119
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In Rust, when using Box::new(), how is memory allocation and object instantiation ordered?
--InteriorSeparator--
first the object is created, then the memory is allocated, and ownership is transfered
--InteriorSeparator--
hard
--InteriorSeparator--
126
--FlashCardSeparator--
```}], role=model}, finishReason=STOP, avgLogprobs=-0.13595309648357454}]