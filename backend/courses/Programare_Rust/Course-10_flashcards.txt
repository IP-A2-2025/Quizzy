[{content={parts=[{text=--FlashCardSeparator--
Single
--InteriorSeparator--
What keyword is used in Rust to declare a block or function where safety rules don't apply?
--InteriorSeparator--
unsafe
--InteriorSeparator--
easy
--InteriorSeparator--
4
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
In which of the following cases can the `unsafe` keyword be used in Rust?
--InteriorSeparator--
(right) To work with regular pointers.
(right) To modify mutable global variables.
(wrong) To declare constant variables.
(wrong) To define data structures.
--InteriorSeparator--
medium
--InteriorSeparator--
4
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What are the two types of pointers in Rust?
--InteriorSeparator--
`*const <type>` and `*mut <type>`
--InteriorSeparator--
easy
--InteriorSeparator--
5
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is the primary danger when converting a `const` pointer to a mutable pointer?
--InteriorSeparator--
(right) The memory might be read-only, causing a crash when writing.
(wrong) It could cause a compiler error.
(right) Data races.
(wrong)It increases the program's execution speed.
--InteriorSeparator--
hard
--InteriorSeparator--
7
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What can happen when accessing memory allocated to a type with a pointer of another type?
--InteriorSeparator--
You can write data outside allocated memory space/breaking invariants.
--InteriorSeparator--
hard
--InteriorSeparator--
8
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is the main risk when using pointer arithmetic in Rust?
--InteriorSeparator--
(right) Moving a pointer to an unallocated memory space.
(wrong) Causing a compiler error.
(wrong) Corrupting the CPU.
(right) Undefined behavior.
--InteriorSeparator--
hard
--InteriorSeparator--
9
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is a potential outcome of creating a variable that points to a hardcoded memory location?
--InteriorSeparator--
A runtime error (crash) due to accessing an invalid memory address.
--InteriorSeparator--
hard
--InteriorSeparator--
10
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What can happen when casting between different structures/types in Rust using unsafe code?
--InteriorSeparator--
(right) Incorrect memory interpretation
(wrong) Automatic data conversion
(right) Potential data corruption
(wrong) Improved code security
--InteriorSeparator--
hard
--InteriorSeparator--
11
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is a potential outcome when evading ownership rules in Rust using raw pointers?
--InteriorSeparator--
Double deallocation of memory, leading to a runtime error.
--InteriorSeparator--
hard
--InteriorSeparator--
17
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What problems can occur when using generic functions to create mutable references?
--InteriorSeparator--
(wrong) Preventing proper memory management
(right) Data Races
(wrong) Elimination of the need for unsafe blocks.
(right) Undefined behavior due to aliasing
--InteriorSeparator--
hard
--InteriorSeparator--
21
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Why are unsafe methods/functions required to access external APIs or ABIs?
--InteriorSeparator--
Rust cannot guarantee the safeness of external APIs, especially those of the operating system.
--InteriorSeparator--
medium
--InteriorSeparator--
33
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Why is accessing union fields considered unsafe in Rust?
--InteriorSeparator--
(right) Because one field might be a heap-allocated object and another a value, leading to memory corruption.
(wrong) Unions are deprecated in Rust.
(wrong) Because the Rust compiler cannot determine the type of data stored in the union.
(right) Potential memory safety issues
--InteriorSeparator--
hard
--InteriorSeparator--
34
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is one key recommendation when using `unsafe` in Rust?
--InteriorSeparator--
Consider all scenarios where the memory a pointer points to might be moved, changed, or deallocated.
--InteriorSeparator--
medium
--InteriorSeparator--
35
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What does the NonNull pointer guarantee?
--InteriorSeparator--
(right) The inner pointer will never be null
(wrong) It doesn't have memory safety implications.
(wrong) It can always be dereferenced without an unsafe block.
(right) The pointer is valid for reads and writes
--InteriorSeparator--
medium
--InteriorSeparator--
37
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the primary benefit of using `Option<NonNull<...>>` over `Option<*const ...>`?
--InteriorSeparator--
`Option<NonNull<...>>` can use the null value as a discriminant, resulting in a smaller memory footprint.
--InteriorSeparator--
medium
--InteriorSeparator--
38
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following traits does NonNull implement?
--InteriorSeparator--
(right) Copy
(right) Clone
(wrong) Send
(wrong) Sync
--InteriorSeparator--
medium
--InteriorSeparator--
39
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Which NonNull method should you use only when you are sure that the pointer is not null?
--InteriorSeparator--
NonNull::new_unchecked(ptr)
--InteriorSeparator--
medium
--InteriorSeparator--
40
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Why is `NonNull::dangling()` NOT unsafe?
--InteriorSeparator--
(right) You cannot access the inner raw pointer without an unsafe block.
(wrong) It automatically initializes the pointer to a safe memory address.
(wrong) It eliminates the need for memory management.
(right) It will never create an inner pointer equal to Null.
--InteriorSeparator--
medium
--InteriorSeparator--
41
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What are the names of two unsafe methods available on the NonNull wrapper?
--InteriorSeparator--
as_ref(&self) and as_mut(&self)
--InteriorSeparator--
easy
--InteriorSeparator--
42
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What keyword is required when reading and/or modifying the data where an `NonNull` pointer points to?
--InteriorSeparator--
(right) unsafe
(wrong) safe
(wrong) const
(wrong) mut
--InteriorSeparator--
medium
--InteriorSeparator--
43
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the use case for the following data type: `struct MyData { ptr: Option<NonNull<i32>> }`?
--InteriorSeparator--
When a data member of a structure can be either NULL or a valid pointer.
--InteriorSeparator--
medium
--InteriorSeparator--
46
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is interior mutability in Rust?
--InteriorSeparator--
(right) The ability to change a state/data member of an object internally even if it is immutable from the outside.
(wrong) The ability to bypass all ownership and borrowing rules.
(wrong) Mutating a function parameter passed by value
(right) Changing members of immutable objects.
--InteriorSeparator--
easy
--InteriorSeparator--
49
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is a common use case of interior mutability in Rust?
--InteriorSeparator--
Graphs or double linked lists.
--InteriorSeparator--
medium
--InteriorSeparator--
49
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following are evaluation criteria when determining scenarios for interior mutability?
--InteriorSeparator--
(right) Multi-thread Protection
(right) Global variable protections
(wrong) Performance optimization
(wrong) Eliminating all unsafe blocks
--InteriorSeparator--
medium
--InteriorSeparator--
51
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does multi-thread protection mean in the context of interior mutability?
--InteriorSeparator--
There is no scenario where accessing a resource from multiple threads can lead to undefined behavior.
--InteriorSeparator--
medium
--InteriorSeparator--
51
--FlashCardSeparator--
}], role=model}, finishReason=STOP, avgLogprobs=-0.24849533199800128}]