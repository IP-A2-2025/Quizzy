[{content={parts=[{text=--FlashCardSeparator--
Single
--InteriorSeparator--
What is the primary purpose of macros in Rust programming?
--InteriorSeparator--
To extend the capabilities of a program, addressing issues like DRY, DSLs, and variadic parameters.
--InteriorSeparator--
easy
--InteriorSeparator--
4
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following are valid delimiters for macro usage in Rust?
--InteriorSeparator--
(right) ()
(right) []
(wrong) ;;
(wrong) ==
--InteriorSeparator--
easy
--InteriorSeparator--
6
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
If you don't use brackets, parenthesis, or curly braces with a macro call in Rust, what will happen?
--InteriorSeparator--
A compiler error will occur.
--InteriorSeparator--
medium
--InteriorSeparator--
7
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the significance of the `$` symbol in Rust macros?
--InteriorSeparator--
It signifies a macro parameter, followed by a name and a type.
--InteriorSeparator--
easy
--InteriorSeparator--
10
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
In Rust macros, what can the `type` following a `$` represent?
--InteriorSeparator--
(right) An expression in the AST
(right) An identifier
(wrong) A floating point number
(wrong) A boolean value
--InteriorSeparator--
medium
--InteriorSeparator--
10
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does `tt` stand for in the context of macro parameter types?
--InteriorSeparator--
Token tree
--InteriorSeparator--
easy
--InteriorSeparator--
10
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following limitations apply to `ident` types within macros?
--InteriorSeparator--
(right) No restrictions
(wrong) Can only be followed by `=>`
(wrong) Can only be followed by `;`
(wrong) Must be followed by `=`
--InteriorSeparator--
hard
--InteriorSeparator--
11
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the purpose of the `compile_error!` macro in Rust?
--InteriorSeparator--
To trigger a compiler error with a specified message.
--InteriorSeparator--
medium
--InteriorSeparator--
25
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What type of parameters does the `stringify!` macro accept?
--InteriorSeparator--
(right) Singular tokens
(wrong) Literals only
(wrong) Expressions only
(wrong) Blocks only
--InteriorSeparator--
hard
--InteriorSeparator--
26
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the key difference between simple macros and procedural macros?
--InteriorSeparator--
Procedural macros allow for more complex logic and transformations before compiling, such as converting code from another language.
--InteriorSeparator--
medium
--InteriorSeparator--
32
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which attributes are valid for using a procedural macro?
--InteriorSeparator--
(right) #[(attribute)]
(right) #[attribute]
(wrong) @(attribute)
(wrong) $(attribute)
--InteriorSeparator--
easy
--InteriorSeparator--
32
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the first step in creating a procedural macro?
--InteriorSeparator--
Create a separate library where the procedural macro will be defined.
--InteriorSeparator--
easy
--InteriorSeparator--
33
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
When the Rust compiler encounters a procedural macro call, what happens?
--InteriorSeparator--
(right) It executes the exported function in the macro library.
(wrong) It performs a simple text replacement.
(wrong) It ignores the macro and continues compilation.
(wrong) It throws a compilation error.
--InteriorSeparator--
medium
--InteriorSeparator--
33
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In the context of procedural macros, what does `TokenStream` represent?
--InteriorSeparator--
A sequence of tokens from the code that needs to be translated into Rust.
--InteriorSeparator--
medium
--InteriorSeparator--
33
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What are the essential components for a function to be called when a procedural macro is used?
--InteriorSeparator--
(right) The `proc_macro` attribute
(right) `pub` visibility
(wrong) Must return an integer
(wrong) No arguments allowed
--InteriorSeparator--
hard
--InteriorSeparator--
38
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
If an error occurs during the processing of a token stream in a procedural macro, what should happen?
--InteriorSeparator--
A panic should be triggered, which the compiler will then use to display the error.
--InteriorSeparator--
medium
--InteriorSeparator--
42
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is a derive procedural macro primarily used for?
--InteriorSeparator--
(right) Implementing a trait for a structure or enum
(wrong) Replacing code with new code
(wrong) Defining a constant value
(wrong) Hiding implementation details
--InteriorSeparator--
medium
--InteriorSeparator--
50
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the key difference in the entry point function signature between standard proc-macros and derive proc-macros?
--InteriorSeparator--
Derive proc-macros do not require arguments.
--InteriorSeparator--
hard
--InteriorSeparator--
51
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
How do derive procedural macros use helper attributes?
--InteriorSeparator--
(right) By adding #[Attri] or #[Attri=value]
(wrong) By using inline comments
(wrong) By requiring specific traits
(wrong) Through environment variables
--InteriorSeparator--
hard
--InteriorSeparator--
53
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What distinguishes function-like procedural macros from other types of procedural macros?
--InteriorSeparator--
They are called like normal macros but function just like a procedural macro.
--InteriorSeparator--
medium
--InteriorSeparator--
56
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What can file operations be used for in Rust?
--InteriorSeparator--
(right) Creating new files
(right) Opening existing files
(wrong) Creating new folders only
(wrong) Using memory outside the File scope
--InteriorSeparator--
easy
--InteriorSeparator--
60
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
If a file already exists, what happens when you open the file using `File::create()`?
--InteriorSeparator--
The file will be truncated.
--InteriorSeparator--
easy
--InteriorSeparator--
60
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
If you want to open a file and add data to the end of the file (append), what should you do?
--InteriorSeparator--
(right) Use OpenOptions::new()
(right) Then .append(true)
(wrong) Open file with `File::create()`
(wrong) Open file with `File::open()`
--InteriorSeparator--
hard
--InteriorSeparator--
69
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
When a `File` object goes out of scope, what happens to the associated file handle?
--InteriorSeparator--
It will be closed.
--InteriorSeparator--
medium
--InteriorSeparator--
67
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What information is provided by `std::fs::metadata()`?
--InteriorSeparator--
(right) Permissions of file
(right) Creation time of file
(wrong) Number of open connections to file
(wrong) Size of free disk space
--InteriorSeparator--
medium
--InteriorSeparator--
75
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is a primary benefit of using `BufReader` and `BufWriter` compared to directly using `File` for read/write operations?
--InteriorSeparator--
Buffering improves performance through caching.
--InteriorSeparator--
medium
--InteriorSeparator--
79
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What should happen if the .read_line() method returns Ok(0)?
--InteriorSeparator--
(right) The end of the reader has been reached
(wrong) An error has occurred
(wrong) Memory has been allocated
(wrong) File has been corrupted
--InteriorSeparator--
hard
--InteriorSeparator--
82
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What traits are the Rust file operations based on?
--InteriorSeparator--
Write, Read and Seek
--InteriorSeparator--
easy
--InteriorSeparator--
85
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following implement the Write trait?
--InteriorSeparator--
(right) TcpStream
(right) Stdout/Stderr
(wrong) FileMetadata
(wrong) Directories
--InteriorSeparator--
hard
--InteriorSeparator--
87
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What happens when using `std::fs::copy()` if the destination file already exists?
--InteriorSeparator--
It will be overwritten.
--InteriorSeparator--
easy
--InteriorSeparator--
89
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is the return type of the std::fs::read_dir() function?
--InteriorSeparator--
(right) An iterator that yields DirEntry structures
(wrong) DirEntry structure
(wrong) A string with all file names
(wrong) A vector of DirEntry structures
--InteriorSeparator--
medium
--InteriorSeparator--
91
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the main purpose of FFI?
--InteriorSeparator--
Interoperability between different programming languages and interfacing with system-level APIs.
--InteriorSeparator--
easy
--InteriorSeparator--
104
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What attribute provides information on the library that needs to be linked when accessing a function from an external library?
--InteriorSeparator--
(right) #[link(...)]
(wrong) extern
(wrong) unsafe
(wrong) #[derive]
--InteriorSeparator--
easy
--InteriorSeparator--
106
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the default type of linkage if the `kind` parameter is not specified in the `#[link(...)]` attribute?
--InteriorSeparator--
dylib
--InteriorSeparator--
easy
--InteriorSeparator--
107
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following parameters is required for the #[link(...)] attribute?
--InteriorSeparator--
(right) Name
(wrong) Kind
(wrong) Modifiers
(wrong) Version
--InteriorSeparator--
hard
--InteriorSeparator--
107
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What ABI type is used as the default calling conversion for C/C++ compilers?
--InteriorSeparator--
C
--InteriorSeparator--
easy
--InteriorSeparator--
108
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is required when calling functions imported from external libraries in Rust?
--InteriorSeparator--
(right) Use an unsafe block
(wrong) The `extern` keyword is optional
(wrong) Automatic memory management
(wrong) Implicit type conversions
--InteriorSeparator--
medium
--InteriorSeparator--
111
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In dynamic linkage, what functions are used to load a library and get the address of a function respectively on Windows?
--InteriorSeparator--
LoadLibraryA and GetProcAddress
--InteriorSeparator--
easy
--InteriorSeparator--
157
--FlashCardSeparator--
}], role=model}, finishReason=STOP, avgLogprobs=-0.24994626410775128}]