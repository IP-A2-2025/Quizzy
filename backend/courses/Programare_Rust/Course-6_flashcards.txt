[{content={parts=[{text=```
--FlashCardSeparator--
Single
--InteriorSeparator--
In Rust, how are methods added to a class/struct?
--InteriorSeparator--
Using the `impl` keyword.
--InteriorSeparator--
easy
--InteriorSeparator--
4
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following visibility keywords are applicable to method definitions in Rust?
--InteriorSeparator--
(wrong) public
(right) No keyword (for private)
(wrong) protected
(wrong) internal
--InteriorSeparator--
medium
--InteriorSeparator--
5
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In Rust, how do you call a static method from within a regular method of the same struct?
--InteriorSeparator--
Using `Self::method_name()` or `TypeName::method_name()`.
--InteriorSeparator--
medium
--InteriorSeparator--
11
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
How can static data members be simulated in Rust?
--InteriorSeparator--
(right) Using global variables
(wrong) Using const variables within impl block
(wrong) Using the `static` keyword within a struct
(wrong) Using trait associated constants
--InteriorSeparator--
hard
--InteriorSeparator--
13
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Why is the `unsafe` keyword sometimes required when using global mutable variables in Rust?
--InteriorSeparator--
Because mutable statics can be mutated by multiple threads leading to data races, requiring manual memory safety considerations.
--InteriorSeparator--
hard
--InteriorSeparator--
15
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What are the two ways a method can be called in Rust?
--InteriorSeparator--
(right) `object.method(param1, param2, ...)`
(right) `ObjectType::method([reference]object, param1, param2, ...)`
(wrong) `method(object, param1, param2, ...)`
(wrong) `object->method(param1, param2, ...)`
--InteriorSeparator--
medium
--InteriorSeparator--
16
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Does Rust have constructors similar to those in C++?
--InteriorSeparator--
No, Rust does not have constructor-like methods. Initialization must be done explicitly.
--InteriorSeparator--
medium
--InteriorSeparator--
19
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What names are commonly used in Rust to describe constructor-like functions?
--InteriorSeparator--
(right) `new(...)`
(right) `from(...)`
(right) `with_...(...)`
(wrong) `construct(...)`
--InteriorSeparator--
medium
--InteriorSeparator--
28
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is a key advantage of using constructor-like functions that return `Option` or `Result` in Rust?
--InteriorSeparator--
They allow for error handling during object construction, returning an error if the object cannot be validly created.
--InteriorSeparator--
medium
--InteriorSeparator--
30
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is functional update syntax in Rust?
--InteriorSeparator--
(right) A way to initialize a struct by specifying some fields and inheriting the rest from another struct or default.
(wrong) A way to update immutable struct fields.
(wrong) A specific kind of lambda function in Rust.
(wrong) A method for destructing structs.
--InteriorSeparator--
medium
--InteriorSeparator--
34
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the requirement for the `..` operator in functional update syntax?
--InteriorSeparator--
It must be the last element in the struct declaration.
--InteriorSeparator--
hard
--InteriorSeparator--
37
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What happens to the ownership of fields when using functional update syntax with another object as the base, and some fields are overridden?
--InteriorSeparator--
(right) Fields that are explicitly initialized are moved or copied as usual.
(right) Uninitialized fields that were present in the base are moved, if they aren't `Copy`.
(wrong) The whole base object is copied into the new object.
(wrong) Fields are borrowed from the base object.
--InteriorSeparator--
hard
--InteriorSeparator--
41
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Does Rust support method overloading in the same `impl` block?
--InteriorSeparator--
No, Rust does not support method overloading within the same `impl` block.
--InteriorSeparator--
easy
--InteriorSeparator--
43
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
How can the functionality of destructors be achieved in Rust?
--InteriorSeparator--
(right) Implementing the `Drop` trait.
(right) Using methods that receive `self` as an argument to control object lifetime.
(wrong) Implementing a method with the same name as the struct.
(wrong) Overriding `drop()` function of the struct
--InteriorSeparator--
medium
--InteriorSeparator--
46
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does it mean to "consume" an object in Rust?
--InteriorSeparator--
It refers to transferring ownership of an object's fields, often to create a new object, rendering the original object unusable.
--InteriorSeparator--
medium
--InteriorSeparator--
49
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What are the common conventions for method names that consume/convert an object in Rust?
--InteriorSeparator--
(right) `into_<type>`
(right) `to_<type>`
(right) `as_<type>`
(wrong) `convert_<type>`
--InteriorSeparator--
medium
--InteriorSeparator--
51
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
How can static methods be implemented for enums in Rust?
--InteriorSeparator--
Using the `impl` keyword for the enum.
--InteriorSeparator--
easy
--InteriorSeparator--
56
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is a trait in Rust most similar to in other languages?
--InteriorSeparator--
(right) An interface
(right) A C++ abstract class
(wrong) A concrete class
(wrong) A function pointer
--InteriorSeparator--
medium
--InteriorSeparator--
58
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
When implementing a trait, what keyword can be used to refer to the type for which the trait is being implemented?
--InteriorSeparator--
`Self`
--InteriorSeparator--
easy
--InteriorSeparator--
62
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
How can polymorphism be achieved in Rust using traits?
--InteriorSeparator--
(right) Using `dyn TraitName` to represent a trait object.
(wrong) Using inheritance
(wrong) Using method overloading
(wrong) Using trait combos
--InteriorSeparator--
hard
--InteriorSeparator--
63
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Does the size of a struct increase when it implements a trait with a virtual method (trait object)?
--InteriorSeparator--
No, the size of the struct itself does not increase. It contains a pointer to the data and a pointer to the vtable.
--InteriorSeparator--
hard
--InteriorSeparator--
67
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Why is it necessary to use `Box<dyn Trait>` when creating a collection of trait objects?
--InteriorSeparator--
(right) Because the size of `dyn Trait` is not known at compile time.
(wrong) Because traits cannot be directly instantiated.
(wrong) Because Rust does not support polymorphism without boxing.
(wrong) Because the compiler requires Box for all heap allocations.
--InteriorSeparator--
hard
--InteriorSeparator--
76
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Is it possible to return different concrete types from a function while promising to return a specific trait?
--InteriorSeparator--
Yes, but you will have to use Box<dyn Trait>. If you return impl Trait all branches have to return the same type.
--InteriorSeparator--
hard
--InteriorSeparator--
81
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What must be true about the types if the same type needs to be returned from all branches of the `get_a_figure` function, and the return type is defined as `impl Figure`?
--InteriorSeparator--
(right) All return branches must return the same type.
(wrong) All types must implement trait Figure
(wrong) All types must use a Box for heap allocation
(wrong) all types must have the same size
--InteriorSeparator--
hard
--InteriorSeparator--
81
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the requirement for types in order to implement the `Copy` trait?
--InteriorSeparator--
All fields within the type must also implement the `Copy` trait.
--InteriorSeparator--
hard
--InteriorSeparator--
123
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is the difference between the `Display` and `Debug` traits in Rust?
--InteriorSeparator--
(right) `Debug` can be automatically derived, while `Display` requires manual implementation.
(right) `Display` is intended for user-facing output, while `Debug` is for developer information.
(wrong) `Display` methods have default implementations.
(wrong) `Debug` always requires the "#" character in formatting strings.
--InteriorSeparator--
medium
--InteriorSeparator--
124
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
When deriving the Default trait for an enum, what is required?
--InteriorSeparator--
One variant must be annotated with the #[default] attribute.
--InteriorSeparator--
hard
--InteriorSeparator--
132
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What traits are super traits of PartialOrd?
--InteriorSeparator--
(right) PartialEq
(wrong) Display
(wrong) Debug
(wrong) Default
--InteriorSeparator--
hard
--InteriorSeparator--
138
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Why can't `Copy` be implemented for a type that also implements `Drop`?
--InteriorSeparator--
Because `Copy` implies a byte-wise copy, and the `Drop` trait's destructor would be called twice, leading to memory unsafety.
--InteriorSeparator--
hard
--InteriorSeparator--
147
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is the difference between AsRef and Borrow?
--InteriorSeparator--
(right) Borrow has several blanket implementations that allows one to use them directly in a generic (e.g. in a where clause)
(wrong) AsRef guarantees zero-cost conversion
(wrong) Borrow is only for converting references
(wrong) AsRef is only for converting references
--InteriorSeparator--
hard
--InteriorSeparator--
165
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Which traits are used to enable operator overloading in Rust?
--InteriorSeparator--
Traits from the `std::ops` module, such as `Add`, `Sub`, `Mul`, `Div`, etc.
--InteriorSeparator--
easy
--InteriorSeparator--
170
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What happens when `Add` is implemented for `self` instead of `&self`?
--InteriorSeparator--
(right) Ownership of the object is transferred.
(right) Object will no longer be available after the addition.
(wrong) Object will be copied
(wrong) Object will be borrowed
--InteriorSeparator--
medium
--InteriorSeparator--
174
--FlashCardSeparator--

```}], role=model}, finishReason=STOP, avgLogprobs=-0.24723546645220587}]