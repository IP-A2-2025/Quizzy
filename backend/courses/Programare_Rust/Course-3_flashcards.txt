[{content={parts=[{text=--FlashCardSeparator--
Single
--InteriorSeparator--
What are the three main mechanisms for error management in Rust?
--InteriorSeparator--
Panic, Option, and Result
--InteriorSeparator--
easy
--InteriorSeparator--
74
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following are valid uses of attributes in Rust?
--InteriorSeparator--
(right) Various declarations (structures, enums, etc)
(right) Methods or functions
(wrong) Local variables
(wrong) Individual loops
--InteriorSeparator--
medium
--InteriorSeparator--
14
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does the `derive` attribute do in Rust?
--InteriorSeparator--
Automatically implements a trait for a struct, enum, etc.
--InteriorSeparator--
easy
--InteriorSeparator--
15
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following are true about `PartialEq` in Rust?
--InteriorSeparator--
(right) It implements the `eq` and `ne` functions.
(wrong) It requires a total order relation.
(right) It uses operator overloading in C++ to achieve a similar thing.
(wrong) It only works for primitive types.
--InteriorSeparator--
medium
--InteriorSeparator--
15
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the key difference between Rust enums and C/C++ enums?
--InteriorSeparator--
Rust enums are more similar to C++ classes than C/C++ enums.
--InteriorSeparator--
easy
--InteriorSeparator--
7
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What properties define an equivalence relation?
--InteriorSeparator--
(right) Reflexive
(right) Symmetric
(right) Transitive
(wrong) Irreflexive
--InteriorSeparator--
medium
--InteriorSeparator--
17
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is a potential issue when comparing NaN (Not a Number) values?
--InteriorSeparator--
Bit-by-bit comparison might not be reflexive.
--InteriorSeparator--
hard
--InteriorSeparator--
18
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What numerical representations can be used for an enum discriminant?
--InteriorSeparator--
(right) Integer
(wrong) Float
(wrong) String
(wrong) Boolean
--InteriorSeparator--
medium
--InteriorSeparator--
31
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Why are bitflags not directly supported by standard Rust enums?
--InteriorSeparator--
Rust enums are designed for flexibility and rich data association, not simple bit manipulation.
--InteriorSeparator--
hard
--InteriorSeparator--
33
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What are the advantages of Rust enums allowing multiple data member types?
--InteriorSeparator--
(right) It offers increased flexibility in data representation.
(right) It makes Rust enums behave more like classes than C-style enums.
(wrong) It simplifies memory management.
(wrong) It eliminates the need for traits.
--InteriorSeparator--
hard
--InteriorSeparator--
34
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is a discriminant in the context of Rust enums with multiple types?
--InteriorSeparator--
A numerical value specifying the type of a variant within the enum.
--InteriorSeparator--
medium
--InteriorSeparator--
38
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
When comparing two enum variants in Rust, what aspects are considered?
--InteriorSeparator--
(right) Their types
(right) Their values (if present)
(wrong) Their memory addresses
(wrong) The order of definition
--InteriorSeparator--
medium
--InteriorSeparator--
44
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
If an enum `Values` has variants `Integer(i32)`, `Bool(bool)`, and `Real(f64)`, why might `size_of::<Values>()` be 16 bytes?
--InteriorSeparator--
Due to alignment and the size of the largest variant (f64), plus space for a discriminant.
--InteriorSeparator--
hard
--InteriorSeparator--
48
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What does a 'panic' represent in Rust?
--InteriorSeparator--
(right) A critical runtime error.
(right) A situation from which the program cannot recover.
(wrong) A recoverable error that can be handled gracefully.
(wrong) A warning message that does not halt execution.
--InteriorSeparator--
easy
--InteriorSeparator--
76
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What happens when a Rust program encounters a 'panic'?
--InteriorSeparator--
The current thread stops execution.
--InteriorSeparator--
medium
--InteriorSeparator--
76
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What are potential problems with the following C/C++ function `div(n1, n2)` that returns `atoi(n1) / atoi(n2)`?
--InteriorSeparator--
(right) `n1` or `n2` can be null pointers.
(right) `n1` or `n2` can be invalid numbers.
(wrong) Division by any number is not possible.
(wrong) The result may always be a floating point number.
--InteriorSeparator--
medium
--InteriorSeparator--
58
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Why is returning a bool from a function to indicate success or failure not always ideal?
--InteriorSeparator--
The bool type is not necessarily associated with errors and some results might be misleading; you also don't know the specific error.
--InteriorSeparator--
medium
--InteriorSeparator--
61
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What are potential drawbacks of using exceptions for error handling?
--InteriorSeparator--
(right) Not really linear in terms of code execution
(right) Memory allocation might not be cleared.
(wrong) Very easy to write and to read.
(wrong) We do not know the error that occurred.
--InteriorSeparator--
medium
--InteriorSeparator--
67
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is a key advantage of using an error-specific type (like `std::expected`) to handle errors?
--InteriorSeparator--
It enforces that the result cannot be obtained without knowing the error as well.
--InteriorSeparator--
medium
--InteriorSeparator--
70
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is a key advantage of Rust's approach to error management compared to languages that support exceptions?
--InteriorSeparator--
(right) Rust does not implement exceptions, enforcing specific ways to handle errors.
(wrong) Exceptions in Rust are enforced by the compiler, thus no runtime errors.
(wrong) Rust can handle different error types in the same catch block.
(wrong) Exception handling is done via the operating system instead of the application.
--InteriorSeparator--
hard
--InteriorSeparator--
73
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does the `panic!` macro do in Rust?
--InteriorSeparator--
It aborts the program immediately.
--InteriorSeparator--
easy
--InteriorSeparator--
77
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What does the `Option<T>` type represent in Rust?
--InteriorSeparator--
(right) A value that may or may not be present.
(right) A way to handle the possibility of a missing value without exceptions.
(wrong) A value that is always present and valid.
(wrong) A way to handle division by zero errors.
--InteriorSeparator--
easy
--InteriorSeparator--
89
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What happens when you call `unwrap()` on an `Option` that contains `None`?
--InteriorSeparator--
It panics.
--InteriorSeparator--
medium
--InteriorSeparator--
91
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following are methods of the `Option` type?
--InteriorSeparator--
(right) `unwrap_or(default)`
(right) `unwrap_or_else(f)`
(wrong) `panic_if_none()`
(wrong) `get_or_throw()`
--InteriorSeparator--
medium
--InteriorSeparator--
91
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does the `take()` method do on an `Option<String>`?
--InteriorSeparator--
It moves the `String` out of the `Option`, leaving `None` in its place.
--InteriorSeparator--
medium
--InteriorSeparator--
102
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What optimization does Rust perform with `Option<&T>` where `&T` is a reference?
--InteriorSeparator--
(right) It doesn't need an extra boolean flag, as a null reference can represent `None`.
(wrong) It automatically clones the referenced value.
(wrong) It stores the value directly within the `Option` without allocation.
(wrong) It enforces that the value pointed to by the reference must always be valid.
--InteriorSeparator--
hard
--InteriorSeparator--
104
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
If a struct contains an `Option<String>`, how does it impact the layout?
--InteriorSeparator--
It includes space for a boolean flag and the `String` data, even if the `String` is `None`.
--InteriorSeparator--
hard
--InteriorSeparator--
104
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is the purpose of `NonNull` and `NonZero` types in the context of `Option`?
--InteriorSeparator--
(right) They allow for size optimization of `Option` by using invalid values (null or zero) to represent `None`.
(wrong) They automatically prevent null pointer dereferences.
(right) To keep the same size in memory.
(wrong) They provide compile-time guarantees that the value is valid.
--InteriorSeparator--
hard
--InteriorSeparator--
115
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does the `Result<T, E>` type represent in Rust?
--InteriorSeparator--
A value that is either successful (Ok) or an error (Err).
--InteriorSeparator--
easy
--InteriorSeparator--
123
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which methods checks if a Result contains success value?
--InteriorSeparator--
(right) is_ok()
(wrong) has_success()
(right) ok()
(wrong) is_valid()
--InteriorSeparator--
medium
--InteriorSeparator--
126
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Why do `.err()` and `.ok()` methods return an `Option` rather than the actual value?
--InteriorSeparator--
Because the `Result` might not contain a value or an error, hence the potential absence is represented with `Option`.
--InteriorSeparator--
hard
--InteriorSeparator--
128
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What trait is used to implement a `Result` as a return type for the main function?
--InteriorSeparator--
(right) Termination
(wrong) Display
(wrong) Debug
(wrong) MainReturn
--InteriorSeparator--
medium
--InteriorSeparator--
140
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the purpose of `if let` and `while let` in Rust?
--InteriorSeparator--
To destructure enums and copy the value in one of its parameters into a variable for use in the next expression block.
--InteriorSeparator--
medium
--InteriorSeparator--
144
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is the function of `let else` in Rust?
--InteriorSeparator--
(right) Allows direct initialization of a variable from an enum and perform operations if it isn't possible.
(wrong) It is similar to a else-if statement.
(wrong) It is similar to a default value.
(wrong) It does something that matches multiple values in the enum at once.
--InteriorSeparator--
medium
--InteriorSeparator--
155
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the role of the question mark operator (`?`) in Rust?
--InteriorSeparator--
It simplifies error propagation in functions that return `Option` or `Result`.
--InteriorSeparator--
easy
--InteriorSeparator--
160
--FlashCardSeparator--
}], role=model}, finishReason=STOP, avgLogprobs=-0.2659813256282966}]