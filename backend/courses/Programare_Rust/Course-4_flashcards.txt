[{content={parts=[{text=--FlashCardSeparator--
Single
--InteriorSeparator--
What are the three main types of strings in Rust?
--InteriorSeparator--
Dynamic strings, string literals, and string slices.
--InteriorSeparator--
easy
--InteriorSeparator--
4
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following is true about Rust strings compared to C/C++ strings?
--InteriorSeparator--
(right) Rust strings are not ASCII-Z format.
(wrong) Rust strings always end with a null terminator (\0).
(right) Rust strings are UTF-8 encoded by default.
(wrong) Rust does not provide support for UTF-8 strings.
--InteriorSeparator--
medium
--InteriorSeparator--
5,8
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What are the three components of a String object in memory?
--InteriorSeparator--
chars (pointer to u8 array), capacity (usize), and len (usize).
--InteriorSeparator--
medium
--InteriorSeparator--
6
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following are valid ways to create a String object?
--InteriorSeparator--
(right) `String::new()`
(wrong) `String::from_ascii("text")`
(right) `"text".to_string()`
(wrong) `String::from_raw([1,2,3])`
--InteriorSeparator--
medium
--InteriorSeparator--
12,13
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is a `&str` in Rust?
--InteriorSeparator--
A string slice (a substring of an existing string).
--InteriorSeparator--
easy
--InteriorSeparator--
4
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
How can you create a `&str` object?
--InteriorSeparator--
(right) Via direct assignment (e.g., `let s = "text";`)
(right) Via the `String::as_str()` method
(wrong) Via the `String::to_slice()` method
(wrong) Via the `String::from()` method
--InteriorSeparator--
medium
--InteriorSeparator--
16
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Why can't you create an object of type `str`?
--InteriorSeparator--
`str` is a Dynamically Sized Type (DST) and its size isn't known at compile time.
--InteriorSeparator--
hard
--InteriorSeparator--
23,24
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What are the implications of `str` being a DST (Dynamically Sized Type)?
--InteriorSeparator--
(right) You cannot create an object of type `str`.
(right) You cannot take ownership over a string in memory with type `str`.
(wrong) `str` objects are allocated on the stack.
(wrong) `str` has a fixed size.
--InteriorSeparator--
hard
--InteriorSeparator--
24
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the purpose of the `String::reserve()` method?
--InteriorSeparator--
To increase the capacity of a String object, potentially avoiding future reallocations.
--InteriorSeparator--
medium
--InteriorSeparator--
61
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which types implement the `std::str::pattern::Pattern` trait?
--InteriorSeparator--
(right) `char`
(right) `&str`
(wrong) `Vec<char>`
(wrong) `i32`
--InteriorSeparator--
medium
--InteriorSeparator--
42
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Why don't the `find` or `rfind` methods on strings accept a starting index?
--InteriorSeparator--
You can create a slice of the string starting from the desired index and call `find` or `rfind` on the slice.
--InteriorSeparator--
medium
--InteriorSeparator--
39
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following `String` methods modify the `String` object in place?
--InteriorSeparator--
(right) `push_str()`
(right) `insert()`
(wrong) `replace()`
(wrong) `to_lowercase()`
--InteriorSeparator--
medium
--InteriorSeparator--
61
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Why is `String + String` not possible in Rust?
--InteriorSeparator--
Because the `Add` trait is implemented for `String` such that it consumes the left-hand side operand.
--InteriorSeparator--
hard
--InteriorSeparator--
66
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What does the `.chars()` method do on a String?
--InteriorSeparator--
(right) Iterates through all characters in the string.
(wrong) Returns a vector of all characters in the string.
(wrong) Returns a `&str` slice of the string.
(right) Allows access to each character in the string.
--InteriorSeparator--
easy
--InteriorSeparator--
74
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the type of 'c' in the loop `for c in s.chars() { ... }`?
--InteriorSeparator--
`char`
--InteriorSeparator--
easy
--InteriorSeparator--
75
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is the type of 'c' in the loop `for c in s.char_indices() { ... }`?
--InteriorSeparator--
(right) `(usize, char)`
(wrong) `char`
(wrong) `usize`
(wrong) `(char, usize)`
--InteriorSeparator--
medium
--InteriorSeparator--
77
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does the `.into_bytes()` method do on a String?
--InteriorSeparator--
Transfers ownership of the bytes from the string to a `Vec<u8>`.
--InteriorSeparator--
medium
--InteriorSeparator--
74
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is string coercion in Rust, and what traits enable it for Strings?
--InteriorSeparator--
(right) Implicit conversion from `&String` to `&str`.
(right) Enabled by the `Deref` and `DerefMut` traits.
(wrong) Explicit conversion from `String` to `&str`.
(wrong) Enabled by the `ToString` trait.
--InteriorSeparator--
hard
--InteriorSeparator--
87
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Why is direct indexing (e.g., `s[i]`) not allowed on Rust Strings?
--InteriorSeparator--
Because Rust strings are UTF-8 encoded, and accessing a character by index requires iterating through the string to determine the character's byte offset, resulting in O(n) complexity.
--InteriorSeparator--
hard
--InteriorSeparator--
93,96
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What does `String::is_char_boundary(index)` method do?
--InteriorSeparator--
(right) Returns true if the given index is a valid UTF-8 character boundary.
(wrong) Always returns true, as Rust strings are always valid UTF-8.
(wrong) Truncates the String to the given index if it is a valid UTF-8 character boundary.
(right) Checks if the byte at the specified index is the start of a UTF-8 character.
--InteriorSeparator--
medium
--InteriorSeparator--
102
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the purpose of the `format!` macro in Rust?
--InteriorSeparator--
To build a String based on a provided format string and parameters.
--InteriorSeparator--
easy
--InteriorSeparator--
104
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What are some differences between `println!` and `eprintln!`?
--InteriorSeparator--
(right) `println!` prints to standard output.
(right) `eprintln!` prints to standard error.
(wrong) `println!` returns a `Result`, `eprintln!` does not.
(wrong) `eprintln!` takes an output object as a parameter, `println!` does not.
--InteriorSeparator--
easy
--InteriorSeparator--
104
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What happens if you provide fewer arguments to `println!` than there are format specifiers in the format string?
--InteriorSeparator--
A compile-time error occurs, because not all placeholders are supplied.
--InteriorSeparator--
medium
--InteriorSeparator--
111
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
In string formatting, what is the meaning of "{:width$}"?
--InteriorSeparator--
(right) The width of the formatted text can be specified by a number after character ':'
(wrong) Refers to the parameter with a specific index in the parameter list.
(right) A named parameter which serves as the width of the formatted text.
(wrong) The width will be adjusted accordingly if the formatted text is smaller than the specified width.
--InteriorSeparator--
medium
--InteriorSeparator--
120
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In string formatting, what does the `<` character do when specifying width and alignment?
--InteriorSeparator--
Specifies left alignment.
--InteriorSeparator--
medium
--InteriorSeparator--
126
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What does adding `0` in front of the with of an integer, do?
--InteriorSeparator--
(right) Pads with zeros instead of spaces.
(wrong) Outputs the number in octal format.
(wrong) Adds padding and aligns the number to the center.
(right) Can be used only in conjunction with numbers.
--InteriorSeparator--
medium
--InteriorSeparator--
128
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In string formatting, what does the `#` character do?
--InteriorSeparator--
Enforces alternate representation.
--InteriorSeparator--
medium
--InteriorSeparator--
132
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What are some traits that influence string formatting behavior?
--InteriorSeparator--
(right) `Display`
(right) `Debug`
(wrong) `Clone`
(wrong) `Drop`
--InteriorSeparator--
medium
--InteriorSeparator--
152
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Why is using the `write!` macro preferred over `format!` when updating a string in place?
--InteriorSeparator--
`write!` formats directly within an already existing object, potentially avoiding unnecessary memory allocations.
--InteriorSeparator--
hard
--InteriorSeparator--
149
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following are valid ways to create a String object with the text "hello"?
--InteriorSeparator--
(right) `"hello".to_string()`
(right) `String::from("hello")`
(wrong) `String::new("hello")`
(wrong) `&"hello".to_owned()`
--InteriorSeparator--
easy
--InteriorSeparator--
147
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does the `std::fmt::Write` trait enable?
--InteriorSeparator--
Formatting directly within an already existing object.
--InteriorSeparator--
hard
--InteriorSeparator--
149
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
When using the `{:.*}` formatting specifier for floats, what does the asterisk represent?
--InteriorSeparator--
(right) The precision is determined by the next argument.
(wrong) The fill character is determined by the next argument.
(wrong) Alignment is set as center.
(right) Precision value.
--InteriorSeparator--
hard
--InteriorSeparator--
140
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the default alignment for numeric types in Rust string formatting?
--InteriorSeparator--
Right alignment.
--InteriorSeparator--
easy
--InteriorSeparator--
125
--FlashCardSeparator--
}], role=model}, finishReason=STOP, avgLogprobs=-0.19214197273497857}]