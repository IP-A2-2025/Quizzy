[{content={parts=[{text=--FlashCardSeparator--
Single
--InteriorSeparator--
What is the primary purpose of understanding the String type in this course?
--InteriorSeparator--
To prepare for understanding ownership management.
--InteriorSeparator--
easy
--InteriorSeparator--
4
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does it mean for a Rust String to be 'Dynamic'?
--InteriorSeparator--
Its size can increase.
--InteriorSeparator--
easy
--InteriorSeparator--
4
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
How do you get the length of a String in Rust?
--InteriorSeparator--
Using the `.len()` method.
--InteriorSeparator--
easy
--InteriorSeparator--
5
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
How can you concatenate strings in Rust?
--InteriorSeparator--
Using the `+=` operator or the `.push_str(...)` method.
--InteriorSeparator--
easy
--InteriorSeparator--
6
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the rule about the number of owners for each memory zone in Rust?
--InteriorSeparator--
Every memory zone has ONE and ONLY ONE owner at a time.
--InteriorSeparator--
medium
--InteriorSeparator--
9
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What happens when an owner goes out of scope?
--InteriorSeparator--
The memory zone is freed.
--InteriorSeparator--
medium
--InteriorSeparator--
9
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What can be generally considered as an owner for a memory zone?
--InteriorSeparator--
Every variable (local / global) or a parameter.
--InteriorSeparator--
medium
--InteriorSeparator--
10
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
In the context of ownership, what memory types are mentioned?
--InteriorSeparator--
(right) Stack
(right) Heap
(wrong) Disk
(wrong) ROM
--InteriorSeparator--
medium
--InteriorSeparator--
9
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In C/C++, what can happen if heap memory is not manually freed after its use?
--InteriorSeparator--
A memory leak.
--InteriorSeparator--
medium
--InteriorSeparator--
21
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which traits are relevant to understand how assignments are handled in Rust, concerning ownership?
--InteriorSeparator--
(right) Copy
(right) Move
(wrong) Clone
(wrong) Drop
--InteriorSeparator--
hard
--InteriorSeparator--
31
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
If a type has the `Copy` trait, what happens during assignment?
--InteriorSeparator--
A bitwise copy of the value is made.
--InteriorSeparator--
hard
--InteriorSeparator--
34
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
If a type has the `Move` trait, what happens during assignment?
--InteriorSeparator--
The value is moved, and the original owner is invalidated.
--InteriorSeparator--
hard
--InteriorSeparator--
39
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which basic types have the `Copy` trait by default in Rust?
--InteriorSeparator--
(right) i32
(right) bool
(wrong) String
(wrong) Vec
--InteriorSeparator--
hard
--InteriorSeparator--
45
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
When do ownership rules apply in Rust?
--InteriorSeparator--
(right) Whenever there is an assignment
(right) Whenever a parameter is passed to a function
(wrong) Only for global variables
(wrong) Only at compile time
--InteriorSeparator--
medium
--InteriorSeparator--
46
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is a common solution to ownership problems when passing a variable to a function?
--InteriorSeparator--
Return the value from the function and assign it back to the original variable.
--InteriorSeparator--
medium
--InteriorSeparator--
50
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is 'borrowing' in Rust?
--InteriorSeparator--
Creating a reference without taking ownership.
--InteriorSeparator--
medium
--InteriorSeparator--
54
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
How is a reference denoted in Rust?
--InteriorSeparator--
Using the `&` symbol.
--InteriorSeparator--
easy
--InteriorSeparator--
54
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the default mutability of a reference in Rust?
--InteriorSeparator--
Immutable.
--InteriorSeparator--
medium
--InteriorSeparator--
56
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
How can a reference be mutable in Rust?
--InteriorSeparator--
(right) Using `&mut`
(wrong) Using `mut &`
(wrong) It cannot be mutable
(wrong) Using `ref` keyword
--InteriorSeparator--
medium
--InteriorSeparator--
57
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Why does Rust have ownership rules even with the presence of references?
--InteriorSeparator--
To prevent dangling pointers and ensure memory safety.
--InteriorSeparator--
hard
--InteriorSeparator--
57
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What are the two fundamental rules related to references in Rust?
--InteriorSeparator--
(right) Only one mutable reference to an object at a time
(right) Multiple immutable references to an object at a time
(wrong) Any number of mutable references is allowed
(wrong) No references are allowed if the object is mutable
--InteriorSeparator--
hard
--InteriorSeparator--
69
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is a "slice" in Rust in the context of borrowing?
--InteriorSeparator--
A reference to a portion of a data structure.
--InteriorSeparator--
hard
--InteriorSeparator--
103
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Why does Rust prevent having both mutable and immutable references at the same time?
--InteriorSeparator--
To avoid creating dangling pointers, especially when using slices.
--InteriorSeparator--
hard
--InteriorSeparator--
112
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What are potential benefits of Rust's ownership and borrowing system?
--InteriorSeparator--
(right) No dangling pointers
(right) Memory safety
(wrong) Faster compilation times
(wrong) Automatic garbage collection
--InteriorSeparator--
medium
--InteriorSeparator--
45
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Why can Rust perform certain optimizations on mutable references that C/C++ cannot?
--InteriorSeparator--
Because Rust guarantees that there is only one mutable reference at a time, eliminating data race concerns.
--InteriorSeparator--
hard
--InteriorSeparator--
114
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the key difference in how Rust handles mutable references compared to C/C++ concerning potential data races?
--InteriorSeparator--
Rust's compiler can guarantee that a mutable reference is unique, preventing data races.
--InteriorSeparator--
hard
--InteriorSeparator--
117
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What concept is similar to Rust slices in C++?
--InteriorSeparator--
std::string_view / std::u8string_view
--InteriorSeparator--
medium
--InteriorSeparator--
103
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is the result of attempting to borrow a variable as mutable when it's not declared mutable?
--InteriorSeparator--
(right) Compile-time error
(wrong) Runtime error
(wrong) The compiler automatically makes it mutable
(wrong) It is treated as an immutable borrow
--InteriorSeparator--
medium
--InteriorSeparator--
71
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What will happen if you try to create both mutable and immutable references to the same mutable variable in Rust within overlapping scopes?
--InteriorSeparator--
(right) Compile-time error
(wrong) Runtime error
(wrong) The mutable reference takes precedence
(wrong) The immutable references take precedence
--InteriorSeparator--
hard
--InteriorSeparator--
77
--FlashCardSeparator--
}], role=model}, finishReason=STOP, avgLogprobs=-0.16125274747175655}]