[{content={parts=[{text=--FlashCardSeparator--
Single
--InteriorSeparator--
What is the primary function of generics in Rust?
--InteriorSeparator--
To describe how methods, structs, enums, and traits can be built based on a template with unknown types.
--InteriorSeparator--
easy
--InteriorSeparator--
4
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Generics can be applied to which of the following?
--InteriorSeparator--
(right) Methods/functions
(right) Structures/enums
(wrong) Modules
(wrong) Crates
--InteriorSeparator--
easy
--InteriorSeparator--
5
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Using multiple generics will affect the final binary how?
--InteriorSeparator--
Increase the size of your final binary.
--InteriorSeparator--
easy
--InteriorSeparator--
4
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does `T: Debug` signify in a generic function definition?
--InteriorSeparator--
The type `T` must implement the `Debug` trait.
--InteriorSeparator--
medium
--InteriorSeparator--
8
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is the purpose of specifying `<Output=T>` when using the `Add` trait in generics?
--InteriorSeparator--
(right) It specifies that the result of the addition will be of type `T`.
(wrong) It automatically derives the Debug trait.
(wrong) It defines a new trait called Output.
--InteriorSeparator--
medium
--InteriorSeparator--
17
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does the underscore `_` represent as a template parameter?
--InteriorSeparator--
It asks Rust to infer the type.
--InteriorSeparator--
medium
--InteriorSeparator--
36
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is the correct format for implementing a method for a generic struct?
--InteriorSeparator--
(right) `impl<T> StructureName<T> { }`
(wrong) `impl StructureName<T> { }`
(wrong) `impl<T> StructureName { }`
(wrong) `impl StructureName<T> where T { }`
--InteriorSeparator--
medium
--InteriorSeparator--
33
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Does Rust support specialized templates like C++?
--InteriorSeparator--
No.
--InteriorSeparator--
medium
--InteriorSeparator--
37
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the turbofish notation used for?
--InteriorSeparator--
To refer to a specific implementation of a generic.
--InteriorSeparator--
medium
--InteriorSeparator--
52
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
When is it preferred to avoid using turbofish notation?
--InteriorSeparator--
Except for cases where there is no other way around, it's generally preferred not to use turbofish notation.
--InteriorSeparator--
medium
--InteriorSeparator--
52
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What are the valid types for a constant generic parameter?
--InteriorSeparator--
(right) `usize`
(right) `bool`
(wrong) `String`
(wrong) `f32`
--InteriorSeparator--
hard
--InteriorSeparator--
61
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Why does Rust require the `Sized` trait bound when overwriting a default trait implementation?
--InteriorSeparator--
The compiler needs to know the size of a type for operations that might involve copying, and `From<Self>` implies ownership transfer, so `Self` must have a known size.
--InteriorSeparator--
hard
--InteriorSeparator--
50
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What are some constraints that need to be followed for a `match` to be correct?
--InteriorSeparator--
(right) At least one rule must be provided.
(right) All possible values must be covered.
(wrong) Rules must be sorted alphabetically.
(wrong) Rules can have overlapping conditions
--InteriorSeparator--
medium
--InteriorSeparator--
73
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the purpose of the character underline (`_`) when used as a pattern in a `match` construct?
--InteriorSeparator--
It represents "everything else".
--InteriorSeparator--
easy
--InteriorSeparator--
73
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What happens if not all possible cases are covered in a match construct?
--InteriorSeparator--
A compile error is thrown.
--InteriorSeparator--
medium
--InteriorSeparator--
76
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What data types are allowed to have intervals used for patterns?
--InteriorSeparator--
Numerical and char types
--InteriorSeparator--
medium
--InteriorSeparator--
90
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In case of arrays, when using the match keyword, what must happen in terms of element count?
--InteriorSeparator--
The number of elements described in each rule must match the number of elements in the array
--InteriorSeparator--
medium
--InteriorSeparator--
116
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What will happen if library "A" decides to add a new value in the error list in a match case where crate "B" depends on it?
--InteriorSeparator--
(right) Application "B" will not compile anymore
(wrong) Application "B" will continue to run as normal
(wrong) A warning will be given, but execution will occur as normal
--InteriorSeparator--
medium
--InteriorSeparator--
94
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What will the `non_exhaustive` attribute for an enum do?
--InteriorSeparator--
(right) Force the compiler to explicitly request that application "A" adds the default case (I) on every match even if all cases are already treated.
(wrong) Tell the compiler to ignore any non-matching cases.
--InteriorSeparator--
hard
--InteriorSeparator--
95
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
When matching enums with specific values, what does the underscore character `_` mean?
--InteriorSeparator--
It means to match any value as long as the variant type is the one specified.
--InteriorSeparator--
medium
--InteriorSeparator--
98
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the general format to get the actual value associated with an enum variant in a `match` construct?
--InteriorSeparator--
`enum::variant(variable_name) => {code}`
--InteriorSeparator--
medium
--InteriorSeparator--
99
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
In the context of structure matching, what is the implication of the underline character `_`?
--InteriorSeparator--
(right) It implies that a specific field from a structure can have whatever value we want.
(right) We don't need to know the value of the specific field.
(wrong) We cannot reference that field.
--InteriorSeparator--
medium
--InteriorSeparator--
102
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does the `..` syntax signify when matching structures in a `match` construct?
--InteriorSeparator--
It specifies that the rest of the fields in the structure should be ignored.
--InteriorSeparator--
medium
--InteriorSeparator--
108
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does the at symbol (@) do in a match construct?
--InteriorSeparator--
Binds a value with a sigil character (@) is useful for cases where that
value is not stored in a local variable (but it is the result of an expression).
--InteriorSeparator--
hard
--InteriorSeparator--
120
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the purpose of a match guard in Rust's `match` construct?
--InteriorSeparator--
It allows using more complex checks than the ones allowed by the pattern rule/matching arm.
--InteriorSeparator--
hard
--InteriorSeparator--
124
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following data structures can be matched on using `match` in Rust?
--InteriorSeparator--
(right) Enums
(right) Arrays
(wrong) Vectors
(wrong) HashMaps
--InteriorSeparator--
easy
--InteriorSeparator--
74
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following can not be matched on using `match` in Rust?
--InteriorSeparator--
(right) String constants (literals) with cases
(wrong) Enums (classical)
(wrong) Numerical values (e.g. integers)
--InteriorSeparator--
hard
--InteriorSeparator--
126
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Can you continue to the next rule/match arm in Rust with match
--InteriorSeparator--
No
--InteriorSeparator--
hard
--InteriorSeparator--
126
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What data type is more efficient in the event the user uses a `match` statement in Rust?
--InteriorSeparator--
An automata
--InteriorSeparator--
hard
--InteriorSeparator--
127
--FlashCardSeparator--
}], role=model}, finishReason=STOP, avgLogprobs=-0.22229422592535253}]