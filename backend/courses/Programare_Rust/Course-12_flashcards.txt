[{content={parts=[{text=--FlashCardSeparator--
Single
--InteriorSeparator--
What module provides threads in Rust?
--InteriorSeparator--
std::thread
--InteriorSeparator--
easy
--InteriorSeparator--
4
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What are the two ways to create a thread in Rust?
--InteriorSeparator--
thread::spawn and thread::Builder
--InteriorSeparator--
medium
--InteriorSeparator--
4
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which method(s) can be used to wait for a thread to finish in Rust?
--InteriorSeparator--
(right) join()
(wrong) sleep()
(wrong) wait()
(right) scope()
--InteriorSeparator--
medium
--InteriorSeparator--
5, 6, 18
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does the `.join()` method return?
--InteriorSeparator--
The value returned by the thread.
--InteriorSeparator--
easy
--InteriorSeparator--
8
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does the `thread::Builder` allow you to set when creating a thread?
--InteriorSeparator--
Name and stack size
--InteriorSeparator--
medium
--InteriorSeparator--
4, 9
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What keyword is used to force a closure to take ownership of variables it references?
--InteriorSeparator--
move
--InteriorSeparator--
easy
--InteriorSeparator--
13, 15
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What does a `Scope` in Rust threads ensure?
--InteriorSeparator--
(right) Threads complete execution before the scope exits.
(wrong) Guarantees specific thread execution order.
(right) Prevents data races.
(wrong) Automatically joins all threads.
--InteriorSeparator--
medium
--InteriorSeparator--
18
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What are the two traits related to data types being moved/referenced between threads?
--InteriorSeparator--
Send and Sync
--InteriorSeparator--
easy
--InteriorSeparator--
24
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following types implement the `Send` trait?
--InteriorSeparator--
(right) Basic types (i8, bool, char)
(right) Smart pointers (Box<T>, if T is Send)
(wrong) Raw pointers
(wrong) Rc<T>
--InteriorSeparator--
medium
--InteriorSeparator--
25
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following types do NOT implement the `Sync` trait?
--InteriorSeparator--
(wrong) Basic types
(wrong) References if "T" implements Sync
(right) UnsafeCell<T>
(right) Rc<T>
--InteriorSeparator--
medium
--InteriorSeparator--
25
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is a marker trait?
--InteriorSeparator--
A trait that doesn't add new methods but provides compile-time information.
--InteriorSeparator--
medium
--InteriorSeparator--
24
--FlashCardSeparator--

--FlashCardSeparator--
Hard
--InteriorSeparator--
How can you prevent a data type from being moved to another thread?
--InteriorSeparator--
Implement the Drop trait
--InteriorSeparator--
hard
--InteriorSeparator--
32, 33
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is a thread-local variable?
--InteriorSeparator--
A variable with a unique instance per thread.
--InteriorSeparator--
medium
--InteriorSeparator--
35
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What macro is used to create thread-local variables?
--InteriorSeparator--
thread_local!
--InteriorSeparator--
easy
--InteriorSeparator--
36
--FlashCardSeparator--

--FlashCardSeparator--
Hard
--InteriorSeparator--
What does TLS stand for?
--InteriorSeparator--
Thread Local Storage
--InteriorSeparator--
hard
--InteriorSeparator--
37
--FlashCardSeparator--

--FlashCardSeparator--
Hard
--InteriorSeparator--
When is TLS data initialized?
--InteriorSeparator--
Lazily, when first needed by a thread.
--InteriorSeparator--
hard
--InteriorSeparator--
38
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is a LocalKey<T>?
--InteriorSeparator--
A wrapper that allows access to a thread-local variable.
--InteriorSeparator--
medium
--InteriorSeparator--
39
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is a mutex used for?
--InteriorSeparator--
Exclusive access to a resource for a single thread.
--InteriorSeparator--
easy
--InteriorSeparator--
52
--FlashCardSeparator--

--FlashCardSeparator--
Hard
--InteriorSeparator--
What is a `PoisonError` in the context of mutexes?
--InteriorSeparator--
An error indicating a thread panicked while holding the lock.
--InteriorSeparator--
hard
--InteriorSeparator--
57, 58
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What can you do when you encounter a `PoisonError`?
--InteriorSeparator--
(right) Force access to the data.
(wrong) Ignore the error and continue.
(right) Use `into_inner()` to get the guard.
(wrong) Clear the poison flag directly (unstable feature).
--InteriorSeparator--
medium
--InteriorSeparator--
58, 59
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is an atomic operation?
--InteriorSeparator--
An indivisible unit of execution.
--InteriorSeparator--
easy
--InteriorSeparator--
64
--FlashCardSeparator--

--FlashCardSeparator--
Hard
--InteriorSeparator--
What are the limitations of atomic operations?
--InteriorSeparator--
Limited to basic types, hardware-supported, simple operations.
--InteriorSeparator--
hard
--InteriorSeparator--
64
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Where are atomic types located?
--InteriorSeparator--
std::sync::atomic
--InteriorSeparator--
easy
--InteriorSeparator--
65
--FlashCardSeparator--

--FlashCardSeparator--
Hard
--InteriorSeparator--
What is the purpose of the `Ordering` enum in atomic operations?
--InteriorSeparator--
Specifies memory ordering constraints.
--InteriorSeparator--
hard
--InteriorSeparator--
78
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following are valid `Ordering` options for atomic operations?
--InteriorSeparator--
(right) Relaxed
(right) Acquire
(right) SeqCst
(wrong) Strict
--InteriorSeparator--
medium
--InteriorSeparator--
78, 81
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does Arc stand for?
--InteriorSeparator--
Atomic Reference Count
--InteriorSeparator--
easy
--InteriorSeparator--
89
--FlashCardSeparator--

--FlashCardSeparator--
Hard
--InteriorSeparator--
When should you use Arc over Rc?
--InteriorSeparator--
When concurrent programming is required.
--InteriorSeparator--
hard
--InteriorSeparator--
89
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the purpose of RwLock?
--InteriorSeparator--
Allows concurrent read access or exclusive write access.
--InteriorSeparator--
easy
--InteriorSeparator--
99
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
When is RwLock more efficient than Mutex?
--InteriorSeparator--
(right) When most threads require read access.
(wrong) When all threads require write access.
(right) When data is read frequently but written infrequently.
(wrong) Always
--InteriorSeparator--
medium
--InteriorSeparator--
98
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the purpose of the `Once` struct?
--InteriorSeparator--
To perform initialization code only once.
--InteriorSeparator--
easy
--InteriorSeparator--
110
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the key difference between `Once` and `OnceLock`?
--InteriorSeparator--
OnceLock couples the data with the initialization process.
--InteriorSeparator--
medium
--InteriorSeparator--
113
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is a Barrier used for?
--InteriorSeparator--
Synchronizing multiple threads to start at the same time.
--InteriorSeparator--
easy
--InteriorSeparator--
116
--FlashCardSeparator--

--FlashCardSeparator--
Hard
--InteriorSeparator--
What happens when a thread calls `wait` on a `Barrier`?
--InteriorSeparator--
It waits until all other threads have also called `wait`, then all threads are released.
--InteriorSeparator--
hard
--InteriorSeparator--
116
--FlashCardSeparator--}], role=model}, finishReason=STOP, avgLogprobs=-0.10854859435306545}]