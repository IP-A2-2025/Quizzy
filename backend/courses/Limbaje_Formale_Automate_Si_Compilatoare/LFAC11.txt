***************Beginning Page***************
***************page number:1**************
Limbaje formalﬁ, automate $i
compilatQarer
G

***************Ending Page***************

***************Beginning Page***************
***************page number:2**************
Unitati Arbore
Caractere . . .
IeXIcaIe smtactlc
Cod Analizor Analizor Analizor
sursa lexical sintactic semantic
Arbore
sintactic
decorat
Generator
Cod ma ina de COd COd
S intermediar
Asamblare lnterpretare

***************Ending Page***************


***************Beginning Page***************
***************page number:3**************
Recapitulam

¢ Analiza lexicalé
¢ Valideazé tokeni

¢ Analiza sintacticé
¢ Valideazé arborela sintactic

¢ Analiza sﬁmanticé
' Detecteazé toate celelalte erori
' Ultimul pas d6 analizé

9

***************Ending Page***************

***************Beginning Page***************
***************page number:4**************
Tipuri d6 date
¢ Veriﬁcéri 5i traduceri
¢ Veriﬁcarea am in vedara compatibilitatea de tipuri
¢ Traducerea are in vedere spatiul necesar pentru
memorarea unei variabile
¢ Expresii pentru tipuri.
Q

***************Ending Page***************


***************Beginning Page***************
***************page number:5**************
Variﬁcarsa d6 tipuri de dats
. Compilatorul asignaaza expresii de tip
¢ Compatibiliatea esta calculaté pe baza sistemului d6
tipuri
¢ Veriﬁcarea poate ﬁ feicuté:
dinamic, 1a runtime, sau
static, la compilare
0 Un sistsm 6ste consistent dacé nu 6ste necesaréi
veriﬁcarea dinaniicé d6 tipuri
' O implementare a unui limbaj este stmngly typed dacé
accepté doar programe care nu au arori de tipuri
9

***************Ending Page***************

***************Beginning Page***************
***************page number:6**************
Rerguh p6ntru V6r1ﬁcarea tipunlor
¢ Sintezé de tipuri
¢ Tipul exprasiei este construit din tipurile exprasiilor
componente
¢ Identiﬁcatorii trebuie declaragi inainta d6: folosire
dacﬁ f are tipul X—>y §i a are tipul X
atunci expresiaﬂa) are tipul y
int f(ﬂoat a);
ﬂoat pi I 3.14;
int rezultat I f(pi);

***************Ending Page***************


***************Beginning Page***************
***************page number:7**************
R6gu11 p6ntru V6r1ﬁcarea tlpunlor
¢ Inferen§51 de tipuri
¢ Detarminé tipul unei componemte de limbaj p6 baza
utilizérii acestaia
dacﬁﬂa) este 0 expresie
atunci existé (x, B ai fare tipul (1—>B §i a are tipul 01
pi = 3.14; //pi are tipul ﬂoat
rezultat I f(pi); //f intoarce int, deci rezultat are tipul int

***************Ending Page***************

***************Beginning Page***************
***************page number:8**************
Rerguh p6ntru V6r1ﬁcarea tlpunlor
. Veriﬁcarea de tipuri pentru instrucgiuni 6st6 similaré cu
veriﬁcarea pentru expresii
¢ if (C) S - apelul funcgiei if pentru parametrii C, S
Tipul lui C este boolean, tipul lui S este void
Tipul intors de if?
9

***************Ending Page***************


***************Beginning Page***************
***************page number:9**************
ConV6rs1a d6 tlpun
¢ Fie expresia a + i
¢ Ca expresia s51 ﬁe validé, tipul lui a trabuie s51 ﬁe
compatibil cu cel a1 lui i
Fie a de tip ﬂoat §i i de tip int
Mai e posibilé operagia?
0 E necesar ca unul dintre: operanzi sé ﬁﬁ: convertit la
tipul celuilalt

***************Ending Page***************

***************Beginning Page***************
***************page number:10**************
Convarsia d6 tipuri

. Conversii de cr6§tere
¢ Cons6rv5 informagia
¢ EX. char —> int

' Conversii de ingustare
' Cu posibile pierderi de informagie
¢ ﬂoat —> int

Q

***************Ending Page***************


***************Beginning Page***************
***************page number:11**************
Convarsia d6 tipuri - Exemplu
¢ (Aho et a1., 2007)
¢ Raguli pantru cre§tereatipuri10r sunt date in ﬁgura a)
¢ Orice tip poate ﬁ crescut catre un tip cam este mai sus in
arbore
¢ Raguli pentru ingustarea tipurilor sunt date in ﬁgura b)
' Un tip s poate ﬁ ingustat catre alt tip tdaca axista un
drum in graf d6 la s la t

***************Ending Page***************

***************Beginning Page***************
***************page number:12**************
Conwrsia d6 tipuri de bazéi in Java
double double
i +
ﬂoat ﬂoat
| +
Icing Jung
I +
int int
/ \ / + \
Sh-Q'Pﬁ char chm" H short H byte
I V
byte

***************Ending Page***************


***************Beginning Page***************
***************page number:13**************
G6n6rar6 d6: 00d
¢ Transformé analiza semanticé in cod ﬁxecutabil
¢ Limbajul trebuie transformat diferit pentru orice sistem
¢ Genarare de cod intarmadiar — deta§6azé partea de
analizé §i interpretare de genararea de cod maginé

***************Ending Page***************

***************Beginning Page***************
***************page number:14**************
G6n6rar6 de cod
Arbore . Repr§zevntarei . Reprémintare. Cod
. . 1nterrned1ara de nlvel 1ntermed1ara de nlvel . V
s1ntact10 A . tlnta
malt 10s ’
Compilatoarele pot folosi multiple straturi de
rﬁpramntéri intarmediare.

***************Ending Page***************


***************Beginning Page***************
***************page number:15**************
Cod 1nt€rm6d1ar
¢ Arbori sintactici decoragi
¢ Cod cu trei adrese
¢ X I y 0p Z
¢ Cod intermadiar
¢ De nivel inalt
apropiagi de limbajul surs§1(arb0ri sintactici)
Potrivigi pentru sarcini de nivel inalt (ex. veriﬁcare de tip)
¢ De nivel j 0s
alocarea de memorie §i regigtri
selecgia de instrucgiuni

***************Ending Page***************

***************Beginning Page***************
***************page number:16**************
Grafun 216161166 (mentate
' Gramatica d6 mai jos poate construi arbori sintactici sau arbori
aciclici orientagi
~ Funcgiile Leaf §i Node vor crea noduri noi dacé nu existé deja
noduri egale
' Dacé nodul existéi dej a, va ﬁ returnat in locul unui nod nou
1) E —> E1 + T E.n0de == new Node('+', E1.n0de,T.n0de)
2) E —> E1 — T E.n0de = new N0de(’—', E1.node,T.n0de)
3) E —+ T E.n0de = T.n0de
4) T —§ ( E) T.n0de = E.n0de
5) T —+ id T. node = new Leaf (id, identry)
6) T —+ num T. node = new Leaf (num, num.val)

***************Ending Page***************


***************Beginning Page***************
***************page number:17**************
Arbori sintactici abstracti
¢ Grafuri aciclica orientate
-a+a*(b-c)+(b-c)*d
/ + \
+ a:
/ \ / \
* - d
a / \ / \
a / - \ b c
b c
Q

***************Ending Page***************

***************Beginning Page***************
***************page number:18**************
Arbori sintactici abstracti
¢ Grafuri aciclica orientate
.a+a*(b-c)+(b-c)*d
/ + \
P *
a b/ \‘c d
Q

***************Ending Page***************


***************Beginning Page***************
***************page number:19**************
Grafun aC1c11c6 onentate
1) p1 : Leaﬂicl, entry-:1)
2) P2 = Lﬁﬂﬂid, Entry-£1} I P1
3) p3 = Leaﬂid, entry-b)
4) p4 = Lenﬂid, entry-c)
5) P5 I Nﬂd€(l_r1pﬂ:p4]
5) P6 = Nﬁdﬁﬁﬂmjpa)
7) P’? I NﬁdEF-F'mhm)
B} p5 I Leufﬁd, entry-b] _-: p3
9) p9 = Leufﬁd, entry-c) = p4
10) P10 = NMBF-Hmm) 1"" P5
11) p11 = Lenﬂid, entry-d}
12) P12 = Nﬂdﬁ('*'=|PE-=P11)
13) p13 = Nﬂde(l+r1p7:p12]

***************Ending Page***************

***************Beginning Page***************
***************page number:20**************
Grafuri aciclic6 orientate — rﬁprezentam
tabﬁlaré
¢ Nodurila arboralui sunt reprezentate intr-un tablou
¢ Fiecare rand reprezinté un nod
¢ Prima celulé reprezinté operatorul
' Fiecare nod are 0 valoare asociatéi (pointer sau constantéi)
DI‘ l
\ 2-
+ 3-
/ \ 4
i 10 5 ~-

***************Ending Page***************


***************Beginning Page***************
***************page number:21**************
Grafuri aeieliee orientate — reprezentare
eu tablouri
¢ Nodurile sunt referite prin indieele réndului
¢ Indieii nodului sau expresiei sunt numiti value number
¢ in practieé sunt folositi pointeri
' Valorile numeriee pot ﬁ folosite pentru a construi grafuri
aeieliee orientate

***************Ending Page***************

***************Beginning Page***************
***************page number:22**************
Metoda value number de construcgie de
arbori orientagi
¢ Intrare: eticheta operatorului §i membrii operagiei
¢ Ie§irez Valoarea numericéi pentru nodul cu signatura
<0p, 1, r>
¢ Algoritm
¢ Cauté in tablou nodul M cu etieheta 0p, §i ﬁii stﬁnga —
dreapta l §i r
¢ Dacé existé, return M
' Altfel, creeazé un nou nod N, cu eticheta 0p §i ﬁii 1 §i r;
return N
Q

***************Ending Page***************


***************Beginning Page***************
***************page number:23**************
Coduri cu trai adr6s6
. Reprezentat ca 0 sﬁcvengé de maxim trei elemente
¢ Operator
¢ Operand sténga
' Operand dreapta
¢ EX: a + b * c
t1 = b * c
t2 I a + t1
0 Poate ﬁ folosit p6ntru descompunerea d6 operayii
aritmetice, instrucyiuni d6 control etc.
¢ Util pentru generate de cod §i optimizare
Q

***************Ending Page***************

***************Beginning Page***************
***************page number:24**************
Codun cu tf6l adr6s6
¢ Este 0 dﬁscriere liniaré a unui arbom sintactic sau a unui
arbore orientat
0 Pentru graful discutat anterior, traducerw in cod cu trei
adrese este daté mai j os
/ + \ t1 : b _ C
t I a * t
+ 9< 2 1
\* / t3 I a + t2
\ t4 I t1 * d
/ '\ t5 I t3 + t4
a b c d

***************Ending Page***************


***************Beginning Page***************
***************page number:25**************
Adrese §i instruegiuni

. Codul eu trei adrese este construit pe baza a doué
concepte: adrese §i instruegiuni

¢ O adresé poate ﬁ:
¢ Nume (va ﬁ inloeuit cu 0 adresé de memorie la generare)
¢ Constante (sunt neeesare conversii de tip)
¢ Variabile temporare generate de eompilat0r(f010sitein

general pentru optimizéri)
Q

***************Ending Page***************

***************Beginning Page***************
***************page number:26**************
Instrucgiuni p6ntru 00d cu trei adr€s6

¢ Atribuiri de forma c I a 0p b

¢ Atribuiri de forma a I 0p b

¢ Copiere: a I b

¢ Salt: g0t0 L; instrucgiunea cu adresa L va ﬁ urmétoarea
executaté

0 Salturi condigionale: if a goto L sau if false a goto L

0 Salturi condigionale: if a relop b goto L; dacé a este in
relagia relop cu b, exécuté instructiunea L, dacé nu
executé unnétoarea adreséi dupé instrucgiunea curentii

¢

***************Ending Page***************


***************Beginning Page***************
***************page number:27**************
Instrucgiuni pantru 00d cu trei adr€s6
¢ Apeluri de funcgii:
¢ param X1
¢ param X2
¢ param xn
¢ call p, n
¢ Copiere indexaté: a = b[i] sau a[i] = b
' a I bﬁ] modiﬁcéi valoarea adresei care vine 1a i pozigii
dupa adresa lui b
¢ Asignare de adrese sau pointeri: a:&b, a=*b, *a=b
Q

***************Ending Page***************

***************Beginning Page***************
***************page number:28**************
EX€IIlplll
¢ Fie instrucgiunea
' doi:i+1;Whi16(a[i]<v);
L1131=i+1 1002131=i+1
i = t1 10111 = 131
t2=i*8 1021132=i*8
‘153:5[132] 1031t3=&[tg]
if t3 < v goto L 104: if t3 < v goto 100

***************Ending Page***************


***************Beginning Page***************
***************page number:29**************
Bibliograﬁe
¢ 1. A. V. Aho, M. S. Lam, R. Sethi, and J. D. Ullman,
Compilers: Principles, Techniques, and Tools, Second
Edition. Addison-Wesley, 2007

***************Ending Page***************

