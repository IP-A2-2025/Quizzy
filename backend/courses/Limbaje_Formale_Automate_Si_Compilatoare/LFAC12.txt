***************Beginning Page***************
***************page number:1**************
Limbaje formalﬁ, automate $i
compilatQarer
G

***************Ending Page***************

***************Beginning Page***************
***************page number:2**************
Recapltulam - Gen6rar6 d6 cod
Arbore: . Repr§zevntarei . Reprémintare. Cod
. . 1nterrned1ara de nlvel 1ntermed1ara de nlvel . V
s1ntact10 A . tlnta
malt 10s ’
Compilatoarele pot folosi multiple straturi de
r6prez6ntéri intarmediare.

***************Ending Page***************


***************Beginning Page***************
***************page number:3**************
Recapltulam - Cod 1ntermed1ar
¢ Arbori sintactici decoragi
¢ Cod cu trei adrese
¢ X I y 0p Z
¢ Cod intermediar
¢ De nivel inalt
apropiagi de limbajul surs§1(arb0ri sintactici)
Potrivigi pentru sarcini de nivel inalt (ex. veriﬁcare de tip)
¢ De nivel j 0s
alocarea de memorie §i regi§tri
selecgia de instrucgiuni

***************Ending Page***************

***************Beginning Page***************
***************page number:4**************
Cod intﬁrmadiar d6 niverl jos

. Compilatorul trebuie $51 implementeteze conceptele
abstracte deﬁnite de limbaj pentru magina ginté
¢ Nume
¢ Domenii d6 vizibilitate
' Asocieri
¢ Tipuri de date
' Operatori
~ Instrucgiuni de control
¢ Procaduri/ funcgii
¢ Parametri

Q

***************Ending Page***************


***************Beginning Page***************
***************page number:5**************
M6d1u1 d6 rulam
. Compilatorul creeazé §i f010se§te un mediu de rulare
pentru programele in execugie, care are in vedere:
Gestiunea dispozijtiei §i alocérii de memorie pentru elementele
programului
Mecanismele de acces la variabile
Legéturile dintre: funcgii
Modul de transmitere de parametri
Interfajta cu sistemul de operate
Input/ Output
Alte programe
9

***************Ending Page***************

***************Beginning Page***************
***************page number:6**************
G6st1un€a mﬁmonm
¢ Un program ruleazé in propriul spagiu logic de
memorie
¢ Referinlzek c'thre componentele programului sunt in
raport cu spagiul logic folosit
¢ Controlul spagiului ﬁzic d6: memorie:
Magina gintéi
Sistemul de operate
Compilator
G

***************Ending Page***************


***************Beginning Page***************
***************page number:7**************
G6st1un6a mﬁmonm
¢ Memoria este accesaté in octegi
¢ Un cuvént are 4 octegi
¢ Tipurile de date mai mari primasc numérul necesar de
octegi
Sunt rafnritn prin adrasa primului octﬁt
¢ Alocarna dn mnmorie depindn de constréngerile
sistemului
Aliniere — ﬁecare secvengé de memorie alocaté trebuie $21 ﬁe
multiplu de 4
~ Padding — octegi suplimentari la ﬁnalul secvengei de memorie
Packing — datele nu sunt stocate in secvﬁnye de lungime multiplu
de 4
Q

***************Ending Page***************

***************Beginning Page***************
***************page number:8**************
Gestiunﬁa mﬁmoriﬁi

***************Ending Page***************


***************Beginning Page***************
***************page number:9**************
G6stiun6a mﬁmormi

¢ Dimensiunea codului ﬁste ﬁxé, calculaté la compilare
¢ Codul 6ste stocat la adresela de memorie mici

¢ Memoria staticé
¢ Variabile statica globale
' Constante
¢ informagii genezrata de compilator (€X. p€ntru curégarea

memoriei) etc.
¢ La compilare sunt inlocuita in cod cu adresa
9

***************Ending Page***************

***************Beginning Page***************
***************page number:10**************
H6ap $1 Stlva

¢ Mamoria haap gi stiva incep de 1a marginile opuse ale
spagiului rémas
¢ Memoria heap aste alocaté crascétor
¢ Stiva este: alocaté descrascétor

***************Ending Page***************


***************Beginning Page***************
***************page number:11**************
Alocam staticé vs. dinamicéi

. Alocare staticé — la momentul compilérii
¢ depinde doar de taxtul programului
¢ Cod §i mamoria staticé

¢ Alocam dinamicé — la rulam
' Depinde d6 starea curentéi a rulérii
' Stivé — pentru g€stiun€a apalurilor de funcgii
¢ Heap — pentru date care pot exista §i dupé incheiarea

apdului care le-a creat
¢

***************Ending Page***************

***************Beginning Page***************
***************page number:12**************
Stlva
¢ Memoreazé
¢ Date de activate
Generate la apeluri de funegii
Starea curenté a programului inaintea apelului
¢ Date care nu persisté dupé ineheierea apelului
Q

***************Ending Page***************


***************Beginning Page***************
***************page number:13**************
G6stiun€a stivﬁi
. La ﬁecare apel de func§i6

¢ Variabilela locala sunt pusa in stivé

¢ La incheiere sunt scoase din stivé

' P6rmite folosirea ac6luia§i spagiu pentru apeluri

neconcurente
Adresele relative pentru variabilele nelocale sunt aceleagi
G

***************Ending Page***************

***************Beginning Page***************
***************page number:14**************
Arbori d6 activam

¢ Apelurile de funcgii sunt imbricate in timp
¢ Gestiunea stivei nu este posibilé altfel

¢ O singuré funcgie deﬁne controlul axecugiei 1a un
moment dat

0 Exemplu: quicksort

***************Ending Page***************


***************Beginning Page***************
***************page number:15**************
int array 13 j int partitian int mJI int n
int pivot = array[n], i = {m — 1), aux;
yaid raadﬂrray int size
far (int j = m; j < n; j++) {
int i; if (array j i: pivot} {
Far(i = E; i < size; i++} { i++j
5can¥( %d J &array i )j aux = array i j
} array i = array j j
awﬂyj =amq
}
"L
_f
yaid quickaart int n, int m . ,
__ aux = array[1 + l];
1+[n q m} { . ,
_ _ _ _ array[1 + 1] = array[n];
int plyot = part1t1an(n, m);
. _ _ array[n] = aux;
qu1ck5urt(n, p1y0t—l};
r 'r' {IL “T I " ' .
1 iu1_¥~1r {p1y0t+l, m}, return (1 + 1};
J-
int main
raadﬁrray(1ﬁ};
quickaart{ﬁj 9);
return H;

***************Ending Page***************

***************Beginning Page***************
***************page number:16**************
enter main
enter readArrav(1@}
' ' leave readArrav(1@}
Arbon d6 act1vara < 1
enter partition{BJ 9)
_ leave partition(i-3Jr 9]
P6nt1'll $11111 2 5 1 O 8 7 9 6 4 3, enter IquicksanrtizﬁJr 2)
. enter partitianqﬂi-HJr 2)
secvanta de act1vare ar putaa ﬁ 1m partitionw, 2;,
enter quicl-Eaznrtufi-HIJr —1)
leave quicksartﬁI-HJ —1)
enter quicksartnflJr 2]
leave quicksartﬂJr 2)
leave quicksartﬁi-HJ 2)
enter quicksart(d, 9)
enter |:=artiti-::un|‘:i-3IJr 2)
leave partitianﬁi-HJ 2)
enter quicksart{4,4)
leave quicksart(d,d)
enter quicksartﬁ5,9}
leave quicksartﬁ5,9)
leave quicksart(i, 9)
leave quicksartlﬁi-HJ 9)
leave main

***************Ending Page***************


***************Beginning Page***************
***************page number:17**************
Arbon de aetlvare
¢ Apelurile de funegii pot ﬁ reprezentate arboreseent
¢ Pareurgerea in preordine —> seevenga de apeluri
¢ Parcurgerea in postordine —> secvenga de return
' Fie 0 funeyie F, care de11ine controlul execugiei §i care
eorespunde nodului N din arborele de activare. Atunci
apelurile active sunt cele care corespund nodului N §i
antecedengilor séi;
ordinea de apel este reprezentaté de drumul de 1a rédﬁciné la
nodul N;
ordinea de return este drumul invers
G

***************Ending Page***************

***************Beginning Page***************
***************page number:18**************
Arbori d6 activam

/main\
r<10)/ (“(1,9) \

P(0,9) q(0,2) q(4,9)

0,2 0,-1 1,2 4,9 1,1 6,9

P( )q( 2/(1(+)\ P( )q( ng )\

P(1,2)q(1,1) q(3,2) P(6,9)q(6,6) q(8,9)
/ 4 \
P(8,9) q(8,8) q(10,9)

***************Ending Page***************


***************Beginning Page***************
***************page number:19**************
A . v . .
lnre g1 strarl de act1vare
¢ Apelurile de functii sunt gestionate de stiva de control
¢ Fiecare apel are o inregistrare pe stiva de control
Radacina arborelui de activare este baza stivei
Secventa de inregistrari de activare corespunde drumului de la
radacina arborelui de activare
Apelul cel rnai recent are inregistrarea in varful stivei
¢ lnregistrarile de activare pot contine
Parametri
Valori de return
Legatura de control
Legatura de acces
Starea salvata a sisternului
Date locale
Date temporare

***************Ending Page***************

***************Beginning Page***************
***************page number:20**************
G6st1un6a Sth€l arrayHO]
ammo] / mam in??5?ii§.i29-
main read
A ' 1 '
1. Inceputul programului [(10) m egerl
2. readArray(10) activat
-
. arrayum , maln .Y[ 1
, maln I \
r(10) q(0 9) i??1§g?r..1.¥.1.>.11--.-.- r00) ,1’ (“03) qui91§§9ﬁ(.Q.».2).-.-.
’ q9i9k§9.rt(.9.»-2). ’ * integer pivot
integer Pi“)t P(0,9)/ (101,2) i??.??g?.'f.H?.’.¥!....-....-.
I’ l q2i9l$§9.11t.(912).-.-.
V ' z ' t
3. readArray scos din stivé, P(0,2) 0 1) m eger prO
quicksort(0,9) introdus q( ’-
8. Controlul execugiei revine la
a quicksort(0,2)

***************Ending Page***************


***************Beginning Page***************
***************page number:21**************
Sﬁcvﬁnga d6 aperl

1. Apelantul evalueazé parametrii

2. Apelantul pune in vérful stivei adresa de return §i
adresa vérfului vechi a1 stivei

3. Apelatul salveazé datelﬁ: din regigtri §i informagiile de
stam

4. Apelatul inigializwzéi datde locale §i incepe 6xecu§ia

¢

***************Ending Page***************

***************Beginning Page***************
***************page number:22**************
Sﬁcvﬁnra d6 raturn
1. Apelatul pune valoarea de rﬁturn léngé parametri
2. Apelatul decremﬁnteazé vérful stivei §i reface
regi§trii conform datelor de stare stocate pe stivé
3. De§iv€1rfu1 stivai este decrementat, apelantul
cun0a§te poziria relativé a valorii de return
¢

***************Ending Page***************


***************Beginning Page***************
***************page number:23**************
Sﬁcvernra d6 aperl §i r6turn
. Sécvenrele descris6 anterior permit numér variabil de
parametri de la apel 1a apel (ca pentru funcria printj)
¢ apelantul cun0a§te numérul §i tipul de parametri (daci
dimensiunea ceimpului)
¢ Apelatul variﬁcé dimensiunea parametrilor 1a execurie
Informagia care: descrie parametrii trebuie a§ezatél§1ngé starea
salvaté
Q

***************Ending Page***************

***************Beginning Page***************
***************page number:24**************
Seeventa de apel $1 return
Parametri §i valoarea de return A
Inregistrarea de
Control link activare pentru
Link-uri 5i starea salvaté apelant
Date temporare s1 locale esposabr 121.63

’ apelantulul —

Parametri §i valoarea de return
Control link Inregrstrarea de

, _ _ v actlvare pentru

to P191299-§1_§_t9¥e2§§1yeta____________---.-.--. Rﬁsposabiliatea apelat

Date temporare §i locale apelatulul

***************Ending Page***************


***************Beginning Page***************
***************page number:25**************
Heap
¢ Spagiul de memorie unde variabilele pot exista p6 toaté
durata execugiei
¢ Funcgiile pot declara date a céror existengé nu este legaté
de activarea care le-a creat
¢ Gestionat de Memory Managar
Q

***************Ending Page***************

***************Beginning Page***************
***************page number:26**************
Memory Manager
¢ Gestioneaza spariul disponibil in memoria heap, prin
aloeare §i dealoeare
¢ Aloearea — un program solicita rnemorie pentru un obieet
livreaza 0 seevenga contigua de memorie
daea nu exista spagiu, ineearea sa adauge memorie virtuala la heap
daea nu mai exista spagiu, notiﬁea programul
¢ Dealoearea
rnernoria eliberata este mareata ea disponibila pentru noi aloeari
in general, dealoearea nu elibereaza memoria virtuala
a

***************Ending Page***************


***************Beginning Page***************
***************page number:27**************
G6stiun€a m6m0ri6i
¢ in mod ideal:
¢ Toate cererile de alocare solicité aceea§i cantitate de
memone
¢ Eliberarea memoriei este previzibilé (primul alocat este:
primul dealocat)
Q

***************Ending Page***************

***************Beginning Page***************
***************page number:28**************
Ge stlunea memonel
¢ Atributele unui sistem de gestiune a memoriei
¢ Eﬁeienga folosirii spagiului
Minimizarea memoriei heap neeesare
Reducerea fragmentérii
¢ Eﬁeienga programului
Folosirea de subsisteme de memorie
in general, programele acceseazé memoria nealeator, grupat
' Overhead scézut
Alocarea §i dealoearea de memorie sunt freevente
Costul operagiilor trebuie séi ﬁe eét mai mic
Q

***************Ending Page***************


***************Beginning Page***************
***************page number:29**************
Localitatﬁa in programn
¢ Programele petrec mare parte din timp 6xecut€1nd 0
porjtiune micé de cod
¢ Instrucgiuni cam nu sunt folosite deloc (6X. includerea de
biblioteci mari, dapracated code ate.)
¢ in mod 0bi§nuit, doar 0 micé parte din cod esta executaté
(€X. cazuri limité, excepgii etc.)
' in general programele executé bucle §i recursii de mici
dimensiuni
0 Iﬁrarhia memoriﬁi (nivele de caching) reduce timpul de
acces
Q

***************Ending Page***************

***************Beginning Page***************
***************page number:30**************
R6ducﬁrea fragmﬁntéirn
¢ Inigial, memoria heap liberé este contigué
¢ Dup'Zl alocéri §i daalocéri repetate apar géuri
Spagii de memorie libere intre segmente ocupate
' La ﬁecare nouéi solicitare, spagiul trebuie alocat intr-un
segment suﬁcient de mam
Dacé spagiul liber gésit e mai mare deceit este necesar, va ﬁ creaté
O gaura Inal mlca
¢ La limité, memoria davine fragmentaté (multe spagii
libere prea mici pantru alocérile necesare)
¢

***************Ending Page***************


***************Beginning Page***************
***************page number:31**************
Reducﬁma fragmwtarn
¢ First-ﬁt
¢ Primul spagiu suﬁciant este folosit
¢ Eﬁciengé redusé
¢ Bﬁst-ﬁt
' Cauté cel mai mic spagiu suﬁcient de mare p6ntru
solicitarea curenté
Binning
Mai multe bin-uri mici cresc eﬁcienga
' N6Xt-ﬁt
~ A1005 spagiul in eel mai recant spagiu utilizat

***************Ending Page***************


***************Beginning Page***************
***************page number:32**************
Reducerea fragmentérii

. Compunerea spagiului liber
¢ Uneori e mai eﬁeient ea segmentele libere adiaeente $51

nu ﬁe unite

¢ Daeéi memoria heap este gestionaté ea un intreg
¢ Boundary tags
' Double linked, ebedded free list

¢

***************Ending Page***************



***************Beginning Page***************
***************page number:33**************
Bibliograﬁe
¢ 1. A. V. Aho, M. S. Lam, R. Sethi, and J. D. Ullman,
Compilers: Principles, Techniques, and Tools, Second
Edition. Addison-Wesley, 2007

***************Ending Page***************


