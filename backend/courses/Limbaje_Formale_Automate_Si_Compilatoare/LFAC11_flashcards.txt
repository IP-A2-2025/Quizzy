[{content={parts=[{text=--FlashCardSeparator--
Single
--InteriorSeparator--
Which phase of compilation validates tokens?
--InteriorSeparator--
Lexical analysis
--InteriorSeparator--
easy
--InteriorSeparator--
3
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Which phase of compilation detects all other errors besides token and syntax?
--InteriorSeparator--
Semantic analysis
--InteriorSeparator--
medium
--InteriorSeparator--
3
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does type checking verify?
--InteriorSeparator--
Compatibility of types
--InteriorSeparator--
easy
--InteriorSeparator--
4
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does type translation determine?
--InteriorSeparator--
The necessary space for storing a variable
--InteriorSeparator--
medium
--InteriorSeparator--
4
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Where can type checking be performed?
--InteriorSeparator--
(right) Dynamically, at runtime
(right) Statically, at compile time
(wrong) During linking
(wrong) After program execution
--InteriorSeparator--
medium
--InteriorSeparator--
5
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is a strongly typed language implementation?
--InteriorSeparator--
One that only accepts programs with no type errors.
--InteriorSeparator--
hard
--InteriorSeparator--
5
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Describe type synthesis.
--InteriorSeparator--
The type of an expression is constructed from the types of its components
--InteriorSeparator--
medium
--InteriorSeparator--
6
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Describe type inference.
--InteriorSeparator--
Determines the type of a language component based on its usage
--InteriorSeparator--
medium
--InteriorSeparator--
7
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In the expression `a + i`, where `a` is float and `i` is int, what is necessary for the expression to be valid?
--InteriorSeparator--
One of the operands needs to be converted to the type of the other.
--InteriorSeparator--
medium
--InteriorSeparator--
9
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following is true about widening conversions?
--InteriorSeparator--
(right) Conserves information
(wrong) May cause loss of information
(wrong) Converts int to char
(right) Example: char -> int
--InteriorSeparator--
medium
--InteriorSeparator--
10
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following is true about narrowing conversions?
--InteriorSeparator--
(wrong) Conserves information
(right) May cause loss of information
(right) Example: float -> int
(wrong) Converts int to char
--InteriorSeparator--
medium
--InteriorSeparator--
10
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In Java, what type will the expression return with a `double` + `float` operation?
--InteriorSeparator--
double
--InteriorSeparator--
easy
--InteriorSeparator--
12
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does code generation transform?
--InteriorSeparator--
Semantic analysis into executable code.
--InteriorSeparator--
easy
--InteriorSeparator--
13
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the advantage of generating intermediate code?
--InteriorSeparator--
It separates the analysis and interpretation phase from machine code generation
--InteriorSeparator--
medium
--InteriorSeparator--
13
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What are the levels of Intermediate code generation?
--InteriorSeparator--
(right) High level
(right) Low level
(wrong) Token level
(wrong) Character level
--InteriorSeparator--
medium
--InteriorSeparator--
15
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What data structure can the grammar construct?
--InteriorSeparator--
Syntax Trees and Directed Acyclic Graphs (DAGs)
--InteriorSeparator--
medium
--InteriorSeparator--
16
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is a key characteristic of abstract syntax trees?
--InteriorSeparator--
They are Directed Acyclic Graphs (DAGs).
--InteriorSeparator--
hard
--InteriorSeparator--
17
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does the value number method do?
--InteriorSeparator--
It generates the numeric value for the signature <op, l, r>
--InteriorSeparator--
medium
--InteriorSeparator--
22
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the output of the Value Number Algorithm?
--InteriorSeparator--
The numeric value for the signature <op, l, r>
--InteriorSeparator--
hard
--InteriorSeparator--
22
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the purpose of three-address code?
--InteriorSeparator--
To represent a sequence of maximum three elements.
--InteriorSeparator--
easy
--InteriorSeparator--
23
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What are some uses for three address code?
--InteriorSeparator--
(right) Code generation
(right) Optimization
(wrong) Lexical analysis
(wrong) Syntax analysis
--InteriorSeparator--
medium
--InteriorSeparator--
23
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Three address code is a linear description of what?
--InteriorSeparator--
Syntax tree
--InteriorSeparator--
hard
--InteriorSeparator--
24
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What are the two key concepts upon which three-address code is built?
--InteriorSeparator--
(right) Addresses
(right) Instructions
(wrong) Tokens
(wrong) Grammars
--InteriorSeparator--
easy
--InteriorSeparator--
25
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is a typical use for temporary variables generated by the compiler in three-address code?
--InteriorSeparator--
Optimizations
--InteriorSeparator--
medium
--InteriorSeparator--
25
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In three-address code, what will `name` be replaced with?
--InteriorSeparator--
A memory address
--InteriorSeparator--
hard
--InteriorSeparator--
25
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What are some examples of instructions for three-address code?
--InteriorSeparator--
(right) Assignment: `x = y op z`
(right) Unconditional jump: `goto L`
(wrong) Token validation: `validate(x)`
(wrong) Type verification: `verify(x, type)`
--InteriorSeparator--
medium
--InteriorSeparator--
26
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What type of assignments are part of the instruction set for three-address code?
--InteriorSeparator--
(right) a = b[i]
(right) a[i] = b
(wrong) a = function(b)
(wrong) a = new Object()
--InteriorSeparator--
medium
--InteriorSeparator--
27
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does the instruction a = *b modify?
--InteriorSeparator--
The value of the address pointed by b
--InteriorSeparator--
hard
--InteriorSeparator--
27
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the purpose of the instruction `param x` in three-address code?
--InteriorSeparator--
Function arguments declaration
--InteriorSeparator--
hard
--InteriorSeparator--
27
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In the indexed copy operation `a = b[i]`, what is being modified?
--InteriorSeparator--
The value of 'a' is being assigned the value stored at the memory location 'b[i]'
--InteriorSeparator--
hard
--InteriorSeparator--
27
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the purpose of the address assignment `a = &b`?
--InteriorSeparator--
Assigns the address of 'b' to 'a'.
--InteriorSeparator--
hard
--InteriorSeparator--
27
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the purpose of the pointer assignment `*a = b`?
--InteriorSeparator--
Assigns the value of 'b' to the memory location pointed to by 'a'.
--InteriorSeparator--
hard
--InteriorSeparator--
27
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
For the C-like statement `do i=i+1; while(a[i] < v);` how many lines are shown in the example code for the three-address code?
--InteriorSeparator--
4
--InteriorSeparator--
easy
--InteriorSeparator--
28
--FlashCardSeparator--
}], role=model}, finishReason=STOP, avgLogprobs=-0.17221892343926753}]