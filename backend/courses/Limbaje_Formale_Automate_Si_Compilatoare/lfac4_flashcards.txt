[{content={parts=[{text=--FlashCardSeparator--
Single
--InteriorSeparator--
What is the result of the intersection of two type 3 languages (L1 and L2)?
--InteriorSeparator--
L1 ∩ L2 ∈ L3
--InteriorSeparator--
easy
--InteriorSeparator--
4
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
If L is a type 3 language, what is the complement of L (Σ* \ L)?
--InteriorSeparator--
Σ* \ L ∈ L3
--InteriorSeparator--
easy
--InteriorSeparator--
6
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What type of transitions are allowed when constructing an automaton for the concatenation of two languages (L1 and L2), where L1 and L2 are described by automata A1 and A2 respectively, with single final states?
--InteriorSeparator--
ε-transitions
--InteriorSeparator--
medium
--InteriorSeparator--
7
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
If A is an automaton recognizing language L, what automaton recognizes L* (L iterated)?
--InteriorSeparator--
An automaton A with ε-transitions from the final state to the initial state and a new initial state with an ε-transition to the old initial state and to the new final state.
--InteriorSeparator--
medium
--InteriorSeparator--
9
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Define a regular expression over an alphabet Σ.
--InteriorSeparator--
φ, ε, a (where a ∈ Σ) are regular expressions. If E, E1, and E2 are regular expressions, then (E1|E2), (E1 · E2), and (E*) are regular expressions.
--InteriorSeparator--
medium
--InteriorSeparator--
11
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the order of precedence of operators in regular expressions?
--InteriorSeparator--
*, ·, |
--InteriorSeparator--
easy
--InteriorSeparator--
12
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following are properties of regular expressions?
--InteriorSeparator--
(p|q)|r ≡ p|(q|r)
(right)
p · ε ≡ ε · p ≡ p
(right)
p|p ≡ p*
(wrong)
ε|p* ≡ p
(wrong)
--InteriorSeparator--
medium
--InteriorSeparator--
14
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
According to Theorem 1, for any regular expression E over Σ, what exists?
--InteriorSeparator--
There exists a finite automaton (with ε-transitions) A, such that L(A) = L(E).
--InteriorSeparator--
medium
--InteriorSeparator--
15
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What data structures are used to represent regular expressions as a tree?
--InteriorSeparator--
Two stacks: STIVA1 for operators and STIVA2 for trees.
--InteriorSeparator--
medium
--InteriorSeparator--
17
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In the algorithm for building a tree from a regular expression, what does the `tree(r, tS, tD)` method do?
--InteriorSeparator--
Creates a new tree node with root `r`, left subtree `tS`, and right subtree `tD`.
--InteriorSeparator--
hard
--InteriorSeparator--
17
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In the provided algorithm for building a tree from a regular expression, what is done when a closing parenthesis is encountered?
--InteriorSeparator--
Build trees until an opening parenthesis is found, then pop the opening parenthesis.
--InteriorSeparator--
hard
--InteriorSeparator--
18
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What happens in the `build_tree()` function when the operator popped from the operator stack (STIVA1) is '*'?
--InteriorSeparator--
A new tree is created with the operator as the root and the single tree from the tree stack (STIVA2) as its left child.
--InteriorSeparator--
hard
--InteriorSeparator--
19
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
When converting a regular expression to an equivalent automaton with ε-transitions, what generally introduces new states?
--InteriorSeparator--
Each appearance of a symbol from the alphabet Σ.
(right)
Each occurence of the | operator
(right)
Each appearance of the . operator
(wrong)
Each occurence of -
(wrong)
--InteriorSeparator--
hard
--InteriorSeparator--
23
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
If 'n' is the number of symbols in a regular expression E, and 'm' is the number of parentheses plus the number of product operator occurrences, what is the approximate number of states in the equivalent automaton with ε-transitions?
--InteriorSeparator--
p = 2(n - m)
--InteriorSeparator--
hard
--InteriorSeparator--
23
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In the algorithm for creating an automaton from a regular expression, how is the tree traversed?
--InteriorSeparator--
In postorder.
--InteriorSeparator--
medium
--InteriorSeparator--
24
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
During the postorder traversal in the automaton creation algorithm, what happens when a node N labeled with a (a symbol from the alphabet) is encountered?
--InteriorSeparator--
Two new states N.i and N.f are generated, and a transition 6(N.i, a) = N.f is defined.
--InteriorSeparator--
hard
--InteriorSeparator--
27
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
During postorder traversal, if a node N is labelled with '|', how are transitions defined between the states N.i, N.f, S.i, S.f, D.i, and D.f (where S and D are the children)?
--InteriorSeparator--
δ(N.i, ε) = {S.i, D.i}, δ(S.f, ε) = N.f, δ(D.f, ε) = N.f
--InteriorSeparator--
hard
--InteriorSeparator--
28
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
During postorder traversal, if a node N is labeled with '-', how are the start and end states of the node N and the left and right children nodes S and D related?
--InteriorSeparator--
N.i = S.i, N.f = D.f, and δ(S.f, ε) = D.i.
--InteriorSeparator--
hard
--InteriorSeparator--
29
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
During postorder traversal, if a node N is labeled with '*', what transitions are created?
--InteriorSeparator--
δ(N.i, ε) = {S.i, N.f}, δ(S.f, ε) = {S.i, N.f}
--InteriorSeparator--
hard
--InteriorSeparator--
30
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the last step (step 3) of the algorithm for converting a regular expression to an equivalent automaton with ε - transitions?
--InteriorSeparator--
The initial state of the automaton is N.i, and the final state is N.f, where N is the root node.
--InteriorSeparator--
hard
--InteriorSeparator--
31
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does Theorem 2 state about the automaton obtained by the described algorithm?
--InteriorSeparator--
The automaton with ε-transitions obtained is equivalent to the regular expression E.
--InteriorSeparator--
medium
--InteriorSeparator--
34
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What defines a context-free grammar (Type 2)?
--InteriorSeparator--
G = (N, T, S, P), where N is the set of non-terminals, T is the set of terminals, S ∈ N is the start symbol, and P is the set of production rules of the form x -> u, where x ∈ N and u ∈ (N ∪ T)*.
--InteriorSeparator--
medium
--InteriorSeparator--
36
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
In a context-free grammar G = (N, T, S, P), what do N and T represent?
--InteriorSeparator--
N is a finite set of non-terminals
(right)
T is a finite set of terminals
(right)
N is a infinite set of non-terminals
(wrong)
T is an infinite set of terminals
(wrong)
--InteriorSeparator--
easy
--InteriorSeparator--
36
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
In a context-free grammar, what condition must hold for the production rules in P?
--InteriorSeparator--
Each rule must be of the form x -> u, where x is a non-terminal and u is a string of terminals and/or non-terminals.
--InteriorSeparator--
medium
--InteriorSeparator--
36
--FlashCardSeparator--
}], role=model}, finishReason=STOP, avgLogprobs=-0.15862667700570235}]