[{content={parts=[{text=--FlashCardSeparator--
Single
--InteriorSeparator--
Who introduced the SOLID principles?
--InteriorSeparator--
Robert C. Martin
--InteriorSeparator--
easy
--InteriorSeparator--
5
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following are SOLID principles?
--InteriorSeparator--
(right) Single Responsibility Principle
(right) Open/Closed Principle
(wrong) Don't Repeat Yourself
(wrong) Keep It Simple, Stupid
--InteriorSeparator--
medium
--InteriorSeparator--
4
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does SRP stand for?
--InteriorSeparator--
Single Responsibility Principle
--InteriorSeparator--
easy
--InteriorSeparator--
4
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
According to the Single Responsibility Principle, what should a class encapsulate?
--InteriorSeparator--
(right) A single responsibility
(wrong) Multiple related responsibilities
(wrong) All responsibilities related to the application
(wrong) No responsibilities
--InteriorSeparator--
medium
--InteriorSeparator--
6
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
According to Robert Martin, how many reasons should there be for a class to change?
--InteriorSeparator--
One
--InteriorSeparator--
easy
--InteriorSeparator--
6
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What are the results of applying the Single Responsibility Principle correctly?
--InteriorSeparator--
Flexible design, lower coupling, and higher cohesion
--InteriorSeparator--
hard
--InteriorSeparator--
7
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does OCP stand for?
--InteriorSeparator--
Open/Closed Principle
--InteriorSeparator--
easy
--InteriorSeparator--
4
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What does the Open/Closed Principle state?
--InteriorSeparator--
(right) Software entities should be open for extension
(right) Software entities should be closed for modification
(wrong) Software entities should be open for modification
(wrong) Software entities should be closed for extension
--InteriorSeparator--
medium
--InteriorSeparator--
10
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What are some approaches to achieve the Open/Closed Principle?
--InteriorSeparator--
Parameters, Inheritance/Template Method pattern, Composition/Strategy pattern
--InteriorSeparator--
hard
--InteriorSeparator--
11
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Why does OCP add complexity to the design?
--InteriorSeparator--
No design can be closed against all changes (TANSTAAFL).
--InteriorSeparator--
hard
--InteriorSeparator--
12
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does LSP stand for?
--InteriorSeparator--
Liskov Substitution Principle
--InteriorSeparator--
easy
--InteriorSeparator--
4
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the main idea behind the Liskov Substitution Principle?
--InteriorSeparator--
Subtypes must be substitutable for their base types.
--InteriorSeparator--
hard
--InteriorSeparator--
15
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What does substitutability, according to the Liskov Substitution Principle, imply?
--InteriorSeparator--
(right) Child classes must not remove base class behavior.
(right) Child classes must not violate base class invariants.
(wrong) Child classes should always add new behavior.
(wrong) Child classes must always override base class methods.
--InteriorSeparator--
medium
--InteriorSeparator--
15
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
How can you fix a violation of LSP?
--InteriorSeparator--
"Tell, Donâ€™t Ask" and refactoring to base class or introducing a third class
--InteriorSeparator--
hard
--InteriorSeparator--
16
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does ISP stand for?
--InteriorSeparator--
Interface Segregation Principle
--InteriorSeparator--
easy
--InteriorSeparator--
4
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does the Interface Segregation Principle state?
--InteriorSeparator--
Clients should not be forced to depend on methods they do not use.
--InteriorSeparator--
hard
--InteriorSeparator--
20
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What does a "fat" interface imply?
--InteriorSeparator--
(right) Classes with useless methods
(right) Increased coupling
(wrong) Reduced complexity
(wrong) Increased cohesion
--InteriorSeparator--
medium
--InteriorSeparator--
20
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
How can you address the problem of a "fat" interface if you cannot modify it?
--InteriorSeparator--
Use the "Adapter" pattern.
--InteriorSeparator--
hard
--InteriorSeparator--
21
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does DIP stand for?
--InteriorSeparator--
Dependency Inversion Principle
--InteriorSeparator--
easy
--InteriorSeparator--
4
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What does the Dependency Inversion Principle state?
--InteriorSeparator--
(right) High-level modules should not depend on low-level modules.
(right) Abstractions should not depend on details. Details should depend on abstractions.
(wrong) High-level modules should depend on low-level modules.
(wrong) Details should depend on abstractions, and abstractions should depend on details.
--InteriorSeparator--
medium
--InteriorSeparator--
24
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
How should classes declare what they need, according to DIP?
--InteriorSeparator--
Constructors should require dependencies, and dependencies should be abstractions and be shown.
--InteriorSeparator--
hard
--InteriorSeparator--
26
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What are some common examples of dependencies that should be avoided?
--InteriorSeparator--
The new keyword, static methods/properties.
--InteriorSeparator--
hard
--InteriorSeparator--
26
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does DRY stand for?
--InteriorSeparator--
Don't Repeat Yourself
--InteriorSeparator--
easy
--InteriorSeparator--
4
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What can lead to repeating yourself in code?
--InteriorSeparator--
(right) Magic strings/values
(right) Duplicate logic in multiple locations
(wrong) Single logic in multiple locations
(wrong) Unique strings/values
--InteriorSeparator--
medium
--InteriorSeparator--
31
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does YAGNI stand for?
--InteriorSeparator--
You Ain't Gonna Need It
--InteriorSeparator--
easy
--InteriorSeparator--
4
--FlashCardSeparator--
}], role=model}, finishReason=STOP, avgLogprobs=-0.09238544369754859}]