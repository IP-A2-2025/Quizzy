***************Beginning Page***************
***************page number:1**************
lngineria Programérii
Curs 1 i 21,22 Februarie 2023

***************Ending Page***************

***************Beginning Page***************
***************page number:2**************
Cuprins
> Context
> Motivayie
> Erori celebre
> Statistici
> Definiﬂi
> Etapele dezvoltérii programelor
> Modele de dezvoltare
~ Cascadé
~ Spirali

***************Ending Page***************

***************Beginning Page***************
***************page number:3**************
Context

> Aplica§ii de dimensiuni mari (milioane de linii
de cod) scrise pe durata a céteva luni, ani,...

> Echipe de lucru: Project manageri, Ana|i$ti,
Arhiteqi, Programatori, Testeri, lngineri de
suport (de ordinul 10, 100,1.000 de
persoane,...)

> So|u§ia acestor probleme este o solugie scrisé
intr-un limbaj de programare orientat-obiect

***************Ending Page***************

***************Beginning Page***************
***************page number:4**************
Care e contextul vostru?

> Ce este un program mare pentru voi?
a Cite linii de cod ayi scris?
Q Cite persoane ari lucrat la acela§i proiect?

> Ce se intimplé cénd lucreazi din ce Tn ce mai
multe persoane la un proiect? Cum cregte
eficienta?
a 3 persoane termini proiectul Tn doui siptiméni :>

6 persoane termini proiectul Tntrio séptéméné?

***************Ending Page***************

***************Beginning Page***************
***************page number:5**************
Motivatie 1

> Din ce in ce mai multe sisteme sunt controlate
de software: controlul traficului (aerian, feroviar,
auto, naval, etc.), bincile, telefonia mobilé,
Internet, supermarket, case inteligente

> Economiile tuturor statelor depind de software

> lngineria programarii propune teorii,
metodologii si instrumente pentru dezvoltarea
de software profesional

***************Ending Page***************

***************Beginning Page***************
***************page number:6**************
Motlvape 2

> 1946 Goldstine 5i von Neumann: “1.000 de
instrucyiuni reprezinti o limité superioaré
rezonabilé pentru complexitatea problemelor ce
pot fi concepute ca rezolvabile cu ajutorul
calculatorului"

> Sistemul de rezervare a biletelor pentru
compania aerian a KLM continea, Tn anul 1992,
doua'l milioane de linii de cod Tn limbaj de
asamblare

***************Ending Page***************

***************Beginning Page***************
***************page number:7**************
Motivayie 3

> Sistemul de operare System V versiunea 4.0
(UNIX) a fost obyinut prin compilarea a
3.700.000 linii de cod

> Programele scrise pentru naveta spatialé NASA
au circa 40 de milioane de linii de cod obiect

> Pentru realizarea sistemului de operare IBM
05360 au fost necesari 5.000 de ani-om

***************Ending Page***************

***************Beginning Page***************
***************page number:8**************
Motivagie — Erori celebre 1
> Facturi imense la energia electrici pentru
pensionari, recalcularea pensiilor
> IBM 05360 conﬁnea la fiecare relansare 1.000
l de gre$eli. Resemnare...

***************Ending Page***************

***************Beginning Page***************
***************page number:9**************
Motivayie — Erori celebre 2

> Programaroru/ ghinionisr de la 0 banca“: Banca
dorea sa trimité la cliengi prin po§t5 o scrisoare
care $5 le semnaleze diverse servicii

> Programatorul a scris un program ce selecta 2.000
de clienyi $i le scria o scrisoare personalizati

> in procesul de testare acesta a folosit un nume
fictiv de client Rich Bastard

> Din picate 2.000 de cliengi au primit o scrisoare

.“icepea "Dear Rich Bastard,

***************Ending Page***************

***************Beginning Page***************
***************page number:10**************
Motivatie — Erori celebre 3
> Sacramento: un dentist primeste Tn césuga
postalé intrio séptéméné 16.000 de formulare
pentru plata taxelor — “it was a computer
prob/em" a declarat un oficial
> “Failure t0 convert English measures to metric
values was the root cause 0f the loss of the Mars
Climate Orbite..."
a Catamwmm Q m “mm ‘mama New“,
(X V OK

***************Ending Page***************


***************Beginning Page***************
***************page number:11**************
Motivayie — Erori celebre 4

> Pierdere vehicul explorare Venus. Ah, era de fapt
.,. in FORI...

> Sistem de avertizare anti-racheté activat.
Atacém sau nu?

> Ariane 5 explodeaza. Cost artiﬁci/Z'
500.000.0005?

***************Ending Page***************

***************Beginning Page***************
***************page number:12**************
Motlvatle — StatlstICI 1
> Acestea nu sunt doar “erori amuzante"
. -,
_. f ' qr ‘ .,.
' ' ‘l. " Y5"
a / -
t ~ ‘q ﬂ
V , 1 V.‘ t
,§' ‘Z “ ”\\-,;_V
> Proiectele mari software pot fi cele mai complicate
produse realizate de cineva
> Si ne uitém pe statistici
a Vom considera c5 un proiect software are succes, daci este
realizat intr-un timp rezonabil 5i cu un buget rezonabil
al unui produs software are loc atunci cénd
ealizat sau cénd nu poate fi folosit .1

***************Ending Page***************

***************Beginning Page***************
***************page number:13**************
Motlvagle — StatlstICI 2
> Studii de succes: USA’82 — Gibson & Singer
> 18 proiecte
a Succes: 17%
= Partial Tn folosinyi: 28%
a Satisfacéitoare 1 1%
a Egec: 22%
~ Neevaluate: 11%
> Motivele e$ecuri|or
~ Problems de organizare
~ Noile metode de lucru 5i politicile salariale
l ~ Modificérile neprevézute in afacere

***************Ending Page***************

***************Beginning Page***************
***************page number:14**************
Motlvatle — StatlSthl 3
> Studii de succes — ONNI’88 (Finland)
> Din peste 100 proiecte
a Succes: 33%
a Cu probleme: 42%
a E$ec2 25%
> Motivele e$ecuri|or
~ Slaba pregétire a inginerilor software
~ Resurse insuficiente
~ Problems de management

***************Ending Page***************

***************Beginning Page***************
***************page number:15**************
Motivatle — StatlSthl 4

> The Robbins-Gioia Survey (200]), Alexandria —
Virginia, made a study over the perception by
enterprises of their implementation of an E.R.P.
(Enterprise Resource Planning) package.

> 232 survey respondents (36 % had, or were in the
process of, implementing an ERP system)

> 51 % viewed their ERP implementation as
unsuccessful,

> 46 % did not understood how to use the system

> 56 % of survey respondents noted their organization
has a program management office (PMO) in place, and
of these respondents, only 36 % felt their ERP

***************Ending Page***************

***************Beginning Page***************
***************page number:16**************
Motivatie — Statistici 5

> The Conference Board Survey (2001)

> At i i 7 companies that attempted ERP implementations

> 34 % were very “satisfied”

> 58 % were “somewhat satisfied"

> 8 % were unhappy with what they got.

> 40 % of the projects failed to achieve their business

case within one year of going live

> The companies that did achieve benefits said that

achievement took six months longer than expected.

> Implementation costs were found to average 25 % over
net

***************Ending Page***************

***************Beginning Page***************
***************page number:17**************
lP — Definigie 1

> Prima definitlie a ingineriei programérii
(NATO,1968): Ingineria programirii este
stab/lirea ,Si uti/izarea de principii ingineregti
so/ide penrru a obfine in mod economic
programe care sunt sigure ,si funcfioneaza'
eficienr pe magini de calcu/ concrete

> O definiyie mai recenté (/EEESranc/ard Glossary
of Software Engineering Tehno/ogy, I 983):
Ingineria programérii reprezinta“ abordarea
sistematica“ a dezvo/tirii, funcfionirii,
intrefinerii, §i retragerii din funcfiune a

He/or

***************Ending Page***************

***************Beginning Page***************
***************page number:18**************
lP — Defmlple 2

> Se referi la doué lucruri:
a "software engineer" care a inlocuit termenul de
"programmer"
~ "Software Engineering" care este folosit pentru a
descrie "building of software systems which are so
large or so complex that they are built by a team or
teams of engineers“ i Fundamentals ofSoftware
Engineering (Ghezzi,jazayeri, and Mandrioli)

‘ ‘E

***************Ending Page***************

***************Beginning Page***************
***************page number:19**************
lP — Definitii 3

> FreeDictionary: “The process of manufacturing
software systems. A software system consists of
executable computer code and the supporting
documents needed to manufacture, use, and
maintain the code."

> Webopedia.com: “The computer science
discipline concerned with developing large
applications. Software engineering covers not
only the technical aspects of building software
systems, but also management issues, such as

I directing programming teams, scheduling, and

***************Ending Page***************

***************Beginning Page***************
***************page number:20**************
lP — Definitii 3

> Wikipedia: “Software engineering is the application of
a systematic, disciplined, quantifiable approach to the
development, operation, and maintenance of software,
and the study of these approaches“

> Answers.com: “The systematic application of scientific
and technological knowledge, through the medium of
sound engineering principles, to the production of
computer programs, and to the requirements
definition, functional specification, design description,
program implementation, and test methods that lead

I up to this code"

***************Ending Page***************


***************Beginning Page***************
***************page number:21**************
lP — Pe scu rt
> Este o discipliné inginereascé care 5e ocupé de
toate aspectele dezvoltérii unui program de
dimensiuni mari, de citre 0 echipé de dezvoltatori
> Propune adoptarea unei abordiri sistematice 5i
organizate a procesului de dezvoltare software
> Propune folosirea tehnicilor §i instrumentelor
adecvate avénd Tn vedere
Q problema care trebuie rezolvaté
n restriqiile impuse
, resursele disponibile
2‘

***************Ending Page***************

***************Beginning Page***************
***************page number:22**************
Costurlle produselor software
100%
90%
80%
70%
60%
50% I HW
40% Isw
30%
20%
10%
0%
I 1955 1975 1985

***************Ending Page***************

***************Beginning Page***************
***************page number:23**************
Software build (black) vs. buy (red)

***************Ending Page***************

***************Beginning Page***************
***************page number:24**************
Costurile produselor software

> in prezent costurile acestora sunt mai mari
decit costurile rezervate componentelor
hardware

> Costul Tntreginerii unui program este de regulé
mai mare decét costul realizérii unui program

> Software — reprezinti programele 5i
documentayia aferenté acestora

***************Ending Page***************

***************Beginning Page***************
***************page number:25**************
Atributele unui program bun

> $5 ofere funqionalitiﬁle cerute

> $5 fie u§or de modificat, completat, schimbat
> 55 fie sigur

> Si nu iroseascé resurse hardware

> Si fie u$or de folosit

***************Ending Page***************

***************Beginning Page***************
***************page number:26**************
A
lncad rarea lP
> lP vs informaticé
u lnformalica se ocupa de aspectele teoretlce ale dezvollarii software
~ IP se ocupa de aspectele practice ale dezvoltarii software
> lP vs ingineria sistemelor
u lngineria sislemelor se ocupa de toate aspectele dezvcrltarll
sistemelor de calcul (hardware, software, ingineria proceselor)
~ IP este o parte din ingineria sistemelor 5i se ocupa de:
- Specificarea cerinyelor
- Proiectarea arhitecturala'l
- lmplementare
- Testare
- lntegrare
o ment
25

***************Ending Page***************

***************Beginning Page***************
***************page number:27**************
Repartizarea costurilor pe etape
Etapele dezvoltarii
IScriere cod IAnalizé 5i proiectare ITeslare

***************Ending Page***************

***************Beginning Page***************
***************page number:28**************
Repartizarea erorilor pe etape
Erori pe etape
I Programare I Simaxé I Proiectare

***************Ending Page***************

***************Beginning Page***************
***************page number:29**************
Costurile fixérii erorilog
ZZ|— |
|—I I
21-, | |
l-‘ﬂ I I I
MIL mum. Test-Sist Client 25

***************Ending Page***************


***************Beginning Page***************
***************page number:30**************
Dificultapi m lP
> Sistemele mai vechi care trebuie intreginute $i
actualizate
> Eterogenitatea sistemelor software/hardware
> Presiunea pentru a livra programul repede, cu
l un cost mic 5i cu o calitate buné

***************Ending Page***************

***************Beginning Page***************
***************page number:31**************
Modele de dezvoltare

> Pentru a dezvolta un program este nevoie de:
Q O Tngelegere claré a ceea ce se cere
Q Un set de metode 5i instruments de lucru
Q Un plan de acﬁune

v Plan de acyiune I $ab|on I model de
dezvoltare

***************Ending Page***************

***************Beginning Page***************
***************page number:32**************
Etapele dezvoltﬁrii programelor
> lngineria cerintelor (Requirements engineering)
> Proiectarea arhitecturala (Arhitectural design)

> Proiectarea detaliatzi (Detailed design)

> Scrierea codului (Implementation)

> lntegrarea componentelor (Integration)

> Validare (Validation)

> Verificare (Verification)

> lntretinere (Maintenance)

***************Ending Page***************

***************Beginning Page***************
***************page number:33**************
lngineria cerinyelor

> Se stabi|e$te ce anume I/rea c/ientu/ ca
pragramu/ 5a“ faca“

> Scopul este inregistrarea ceringelor intr-o
manieré cit mai claré 5i mai fidelé

> Probleme
Q Comunicare
n Negociere
u Sfituirea clientului

***************Ending Page***************

***************Beginning Page***************
***************page number:34**************
Pr0|ectarea

> Arhitecturalé
Q Din motive de complexitate, programele mari nu
pot fi concepute §i implementate ca o singuré
bucaté
Q Programul este impérgit in module sau componente
mai simple, care pot fi abordate individual

> Detaliaté
Q Se proiecteaza'i fiecare modul al aplicaxiei, in cele
mai mici detalii

‘ 3'

***************Ending Page***************

***************Beginning Page***************
***************page number:35**************
lmplementare + mtegrare

> lmplementare
Q Proiectul detaliat este transpus Tntr-un Iimbaj de
programare
n Acesta se realizeazé modular, pe structura rezultaté
la proiectarea arhitecturali

> lntegrare
Q Modelul big-bang
n Modelul incremental

‘ “

***************Ending Page***************

***************Beginning Page***************
***************page number:36**************
Valldare 5| verlflcare

> Validare: ne asigurém c5 programul indepline§te
cerinyele utilizatorului
~ Constru/m produsu/ corect?

> Verificare: ne asigurém c5 programul este stabil
$i c5 functioneazé corect din punctul de vedere
al dezvoltatorilor.
~ Constru/m corect produsul?

***************Ending Page***************

***************Beginning Page***************
***************page number:37**************
lntrepnere

> Dupé livrare
Q Sunt descoperite gre§e|i ce trebuie reparate
Q Pot apérea schimbéri in specificagii
Q Pot apérea noi ceringe
Q lnstruirea celor ce vor folosi produsul

> intreginere = gestionarea acestor tipuri de
probleme

‘ 3,

***************Ending Page***************

***************Beginning Page***************
***************page number:38**************
Modele de dezvoltare

> Cum efectuim activitagile indicate de etapele
dezvoltirii programelor

> Exemple de modele de dezvoltare:
~ Adihoc: descurcéite cum poyi
~ Modelul in cascadé (cu feedback)
~ Prototipizare
~ Modelul in spirali
~ RUP (Rational Unified Process)
a ViModel
= XP (Extreme Programming)
= Agile, Lean, Scrum

H0, AMDD

***************Ending Page***************

***************Beginning Page***************
***************page number:39**************
Modelul in Cascadé (Waterfall)

***************Ending Page***************


***************Beginning Page***************
***************page number:40**************
Modelul m Cascadi +-

> +: imparte o sarciné complexé Tn pa§i mai mici

> +: U§or de administrat §i controlat

> +: Fiecare pas are ca rezultat un produs bine
definit

> +: Tot timpul $tim unde ce am ficut péné Tn
acel moment §i §tim ce mai avem de fécut

> —: Erorile se propagé Tntre pa§i

> —: Nu exista mecanisme de reparare a erorilor

***************Ending Page***************

***************Beginning Page***************
***************page number:41**************
wcélscadi cu Tntoarcere
H?
‘_ H1 4,

***************Ending Page***************

***************Beginning Page***************
***************page number:42**************
Modelul Tn cascadé cu intoarcere +-

> +: Oferé cadrul pentru remedierea erorilor
din pasul precedent

> —: Erorile la pasul i care sunt descoperite la
pasul i + 2 nu sunt remediate

> —: Clientul vede produsul final abia la
sfir$itul dezvoltirii

***************Ending Page***************

***************Beginning Page***************
***************page number:43**************
Modelul m Splrala (Splral)
> Studiul de fezabilitate
> Analiza ceringelor
> Proiectarea arhitecturii
> lmplementarea
Pentru ﬁecare pas, se fac urmétoarele activitigi:
1 : prcgz'itirca 2 : gestiunea riscului
[take stock] [dealing with risk]
4 I planiﬁcarea 3 : dczvoltarca
urmétonllui stagiu [development]
lanning]
4,

***************Ending Page***************

***************Beginning Page***************
***************page number:44**************
Modelul Tn Spiralé +—
> +: Pistreazé avantajele modelului in
cascadé
> +: Ia Tn calcul nogiunea de risc
> Exemple de riscuri:
D O firmi concurenti lanseazi un produs
similar
D Un arhitect pérése$te echipa
D Clientul schimbi ceringele
ithipé nu respecti termenele de livrare

***************Ending Page***************

***************Beginning Page***************
***************page number:45**************
Concluzii

> Statisticile ne demonstreazi importanga folosirii
unor tehnici inginere$ti Tn dezvoltarea de
software

> Definitliile lP-ului folosesc cuvinte cheie precum:
metode ingineregti, praiecte de dimensiuni man‘
care sum‘ imp/ementate in echipa“, pragrame
sigure care funcfianeaza“ eficient, dezvo/tare,
fnrreﬂnere, p/aniﬁcare, buyer

> Etapele necesare dezvoltirii proiectelor de
dimensiuni mari

Hodele de dezvoltare: Ad-Hoc, Cascadi, Spirali

***************Ending Page***************

***************Beginning Page***************
***************page number:46**************
lntrebari

> De ce e util $5 Tnvégagi aceasti materie.7

> V-aﬂ Tntélnit cu o parte din elementele ce
compun lngineria Programérii? Unde?

***************Ending Page***************

***************Beginning Page***************
***************page number:47**************
Bibliografie

> Ovidiu Cheorghie$z
http:[[www.infoiasi.ro[~ogh[filesliplcurs-
01.pdf

> Andy Kramek, New Software — Build 0r Buy? A
Personal View: httg:[[weblogsfoxitacoml
andykramek [archivej2009[07[25[8674.aspx

***************Ending Page***************

***************Beginning Page***************
***************page number:48**************
Links

> Internet

> Wikipedia

> Failure rate: httg:[[www.it—
cortex.com[Stat_Failure_Rate.htm

> RUP in the dialogue with Scrum:
httg:1[www.ibm.com[developerworks[rationalZli
braryifebOSZkrebsi

***************Ending Page***************

