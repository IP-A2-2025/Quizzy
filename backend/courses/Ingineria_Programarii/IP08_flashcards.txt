[{content={parts=[{text=--FlashCardSeparator--
Single
--InteriorSeparator--
What is the main intent of Creational Patterns?
--InteriorSeparator--
To abstract the instantiation process.
--InteriorSeparator--
easy
--InteriorSeparator--
4
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following are Creational Patterns?
--InteriorSeparator--
(right) Abstract Factory
(right) Singleton
(wrong) Adapter
(wrong) Decorator
--InteriorSeparator--
medium
--InteriorSeparator--
3
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the intent of the Abstract Factory pattern?
--InteriorSeparator--
Provide an interface for creating families of related or dependent objects without specifying their concrete classes.
--InteriorSeparator--
medium
--InteriorSeparator--
5
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
When should you use the Abstract Factory pattern?
--InteriorSeparator--
(right) When a system should be independent of how its products are created, composed, and represented.
(wrong) When you want to define an interface for creating an object, but let subclasses decide which class to instantiate.
(right) When a system should be configured with one of multiple families of products.
(wrong) When you want to ensure a class only has one instance.
--InteriorSeparator--
medium
--InteriorSeparator--
7
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What are the potential drawbacks of using the Abstract Factory pattern?
--InteriorSeparator--
Code becomes complicated because of lots of extra classes.
--InteriorSeparator--
medium
--InteriorSeparator--
9
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the intent of the Builder pattern?
--InteriorSeparator--
Separate the construction of a complex object from its representation so that the same construction process can create different representations.
--InteriorSeparator--
medium
--InteriorSeparator--
10
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What are the advantages of using the Builder pattern?
--InteriorSeparator--
(right) Allows for step-by-step construction of objects.
(right) Preserves the Single Responsibility Principle (SRP).
(wrong) Guarantees a single instance of a class.
(wrong) Simplifies code by reducing the number of classes needed.
--InteriorSeparator--
medium
--InteriorSeparator--
15
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is a key disadvantage of the Builder Pattern?
--InteriorSeparator--
Code becomes complicated because of many new classes
--InteriorSeparator--
medium
--InteriorSeparator--
15
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the intent of the Factory Method pattern?
--InteriorSeparator--
Define an interface for creating an object, but let subclasses decide which class to instantiate.
--InteriorSeparator--
medium
--InteriorSeparator--
16
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
When is the Factory Method pattern applicable?
--InteriorSeparator--
(right) When a class can't anticipate the class of objects it must create.
(wrong) When you need to decouple an abstraction from its implementation.
(right) When a class wants its subclasses to specify the objects it creates.
(wrong) When you want to provide a global point of access to a single instance.
--InteriorSeparator--
medium
--InteriorSeparator--
19
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is a consequence of using the Factory Method pattern?
--InteriorSeparator--
Provides interconnections for subclasses.
--InteriorSeparator--
medium
--InteriorSeparator--
20
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the intent of the Prototype pattern?
--InteriorSeparator--
Specify the kinds of objects to create using a prototypical instance, and create new objects by copying this prototype.
--InteriorSeparator--
medium
--InteriorSeparator--
23
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
When should the Prototype pattern be used?
--InteriorSeparator--
(right) When a system should be independent of how its products are created, composed, and represented.
(wrong) When you want to convert the interface of a class into another interface clients expect.
(right) When instances of a class can have one of only a few different combinations of state.
(wrong) When you want to reuse and share objects that are expensive to create.
--InteriorSeparator--
medium
--InteriorSeparator--
26
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is a key disadvantage of using the Prototype pattern?
--InteriorSeparator--
It is very hard to clone complex classes with many references.
--InteriorSeparator--
hard
--InteriorSeparator--
28
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the intent of the Singleton pattern?
--InteriorSeparator--
Ensure a class only has one instance, and provide a global point of access to it.
--InteriorSeparator--
easy
--InteriorSeparator--
29
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What are the benefits of using the Singleton pattern?
--InteriorSeparator--
(right) Guarantees a single instance.
(right) Provides a global access point to an instance.
(wrong) Decouples complex building processes from the business logic.
(wrong) Allows for platform-independent systems.
--InteriorSeparator--
medium
--InteriorSeparator--
32
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What are the drawbacks of using the Singleton pattern?
--InteriorSeparator--
Breaks the Single Responsibility Principle (SRP), can mask high coupling, and is difficult to use in multi-thread systems.
--InteriorSeparator--
hard
--InteriorSeparator--
32
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the purpose of Lazy Initialization?
--InteriorSeparator--
Delaying the creation of an object, the calculation of a value, or some other expensive process until the first time it is needed.
--InteriorSeparator--
medium
--InteriorSeparator--
33
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What are the benefits and drawbacks of using Lazy Initialization?
--InteriorSeparator--
(right) Saves on memory.
(wrong) Simplifies multi-threaded applications.
(right) Can be more time-consuming when many new instances are needed.
(wrong) Reduces code complexity.
--InteriorSeparator--
medium
--InteriorSeparator--
35
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the intent of the Object Pool pattern?
--InteriorSeparator--
Reuse and share objects that are expensive to create.
--InteriorSeparator--
medium
--InteriorSeparator--
36
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
When is the Object Pool pattern most applicable?
--InteriorSeparator--
When there are several clients who need the same stateless resource which is expensive to create.
--InteriorSeparator--
hard
--InteriorSeparator--
36
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What happens when a client requests a Reusable object from the Object Pool, and no objects are available?
--InteriorSeparator--
(right) The pool tries to create a new one.
(wrong) The pool returns null.
(right) The pool will wait until a reusable object is released.
(wrong) The pool immediately throws an exception.
--InteriorSeparator--
hard
--InteriorSeparator--
38
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is a key drawback of the Object Pool pattern?
--InteriorSeparator--
Increased overhead in terms of managing the pool, and can be slow for objects in the waiting queue.
--InteriorSeparator--
hard
--InteriorSeparator--
41
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the general focus of structural design patterns?
--InteriorSeparator--
How classes and objects are composed to form larger structures.
--InteriorSeparator--
easy
--InteriorSeparator--
42
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following are Structural Patterns?
--InteriorSeparator--
(right) Adapter
(wrong) Singleton
(right) Bridge
(wrong) Factory Method
--InteriorSeparator--
medium
--InteriorSeparator--
44
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the intent of the Adapter pattern?
--InteriorSeparator--
Convert the interface of a class into another interface clients expect.
--InteriorSeparator--
medium
--InteriorSeparator--
45
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
When is the Adapter pattern applicable?
--InteriorSeparator--
When you want to use an existing class, and its interface does not match the one you need.
--InteriorSeparator--
hard
--InteriorSeparator--
49
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the intent of the Bridge pattern?
--InteriorSeparator--
Decouple an abstraction from its implementation so that the two can vary independently.
--InteriorSeparator--
medium
--InteriorSeparator--
55
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What are the benefits of using the Bridge pattern?
--InteriorSeparator--
(right) Preserves the Single Responsibility Principle and Open/Closed Principle.
(right) Allows for platform-independent systems.
(wrong) Guarantees a single instance.
(wrong) Simplifies complex class structures.
--InteriorSeparator--
hard
--InteriorSeparator--
62
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is a drawback of the Bridge pattern?
--InteriorSeparator--
Code becomes complicated and splits cohesive classes.
--InteriorSeparator--
hard
--InteriorSeparator--
62
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
According to the material provided, what is the author of Design Patterns: Elements of Reusable Object-Oriented Software?
--InteriorSeparator--
Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides
--InteriorSeparator--
easy
--InteriorSeparator--
63
--FlashCardSeparator--}], role=model}, finishReason=STOP, citationMetadata={citationSources=[{startIndex=640, endIndex=763, uri=https://www.scribd.com/document/613015109/4-1-Design-patterns-lecture-notes-R19}, {startIndex=1813, endIndex=1946, uri=http://en.wikipedia.org/wiki/Creational_pattern}, {startIndex=3913, endIndex=4037, uri=https://sites.google.com/site/sureshdevang/scea-mock-exam-questions}, {startIndex=6097, endIndex=6219, uri=https://en.wikipedia.org/wiki/Software_design_pattern}]}, avgLogprobs=-0.07596121507066908}]