***************Beginning Page***************
***************page number:1**************
I I V I I
lngmerla programaru
Curs 10 — 26-27 Aprilie

***************Ending Page***************

***************Beginning Page***************
***************page number:2**************
C u pri n s
> Recapitulare...
O Design Patterns (Creational Patterns, Structural
Patterns, Behavioral Patterns)
> Behavioral Patterns
O Interpreter
o Iterator
o Mediator
o Memento
O Observer
O State
<> Strategy
o Template Method
O Visitor
2

***************Ending Page***************


***************Beginning Page***************
***************page number:3**************
Recapitulare
> GOF: Creational Patterns, Structural Patterns,
Behavioral Patterns
> Creational Patterns
> Structural Patterns
> Behavioral Patterns
x 3

***************Ending Page***************

***************Beginning Page***************
***************page number:4**************
Recapitulare — CP

> Abstract Factory — computer components
> Builder — children meal

> Factory Method — Hello <Mr/Ms>

> Prototype — Cell division

> Singleton — server log files

***************Ending Page***************


***************Beginning Page***************
***************page number:5**************
SP

> Adapter — socket-plug

> Bridge — drawing API

> Composite — employee hierarchy
> Decorator — Christmas tree

> Facade — store keeper

> Flyweight — FontData

> Proxy — ATM access

***************Ending Page***************

***************Beginning Page***************
***************page number:6**************
BP
> Command
> Chain of Responsability

***************Ending Page***************


***************Beginning Page***************
***************page number:7**************
Behavioral Patterns
> Chain of Responsibility
> Command
> Interpreter
> Iterator
> Mediator
> Memento
> Observer
> State
> Strategy
> Template Method
.I Visitor

***************Ending Page***************

***************Beginning Page***************
***************page number:8**************
Interpreter

> Intent — Given a language, define a
representation for its grammar along with an
interpreter

> Motivation — If a particular kind of problem
occurs often enough, then it might be
worthwhile to express instances of the problem
as sentences in a simple language. Then you can
build an interpreter that solves the problem by
interpreting these sentences.

> For example, searching for strings that match a
pattern 1'5 a common prob/em. Regular
expressions are a standard language for

H‘ ing patterns of strings

***************Ending Page***************


***************Beginning Page***************
***************page number:9**************
Interpreter — Grammar
> Suppose the following grammar defines the
regular expressions:
O expression ::= literal | alternation | sequence |
repetition | '(' expression ')'
O alternation ::: expression '|' expression
O sequence ::= expression '&' expression
o repetition ::: expression
o literal ::= 'a' | 'b' | 'c' | { 'a' | 'b' | 'c' | }“"~'
x 9

***************Ending Page***************

***************Beginning Page***************
***************page number:10**************
Interpreter — Regular expressmns
‘q
w —*
altematwe2
-
‘ w

***************Ending Page***************


***************Beginning Page***************
***************page number:11**************
lnte rprete r — Exam ple
“MR-
> The “musical notes" is an “Interpreted Language". The
musicians read the notes, interpret them according to
“Sa, Re, Ga, Ma..." or “Do, Re, Mi... " etc. and play the
instruments, what we get in output is musical sound
waves. Think of a program which can take the Sa, Re,
Ga, Ma etc. and produce the sounds for the
frequencies.
> For Sa, the frequency is 256 Hz, similarly, for Re, it is
288Hz and for Ga, it is 320 Hz etc...
> We can have it at one of the two places, one is a
nts file, “token:value" and the other one being
“I file

***************Ending Page***************

***************Beginning Page***************
***************page number:12**************
interpreter — Java i
> Mus/ca/Notes. properties
Sa=256
Re=288
Ga=320
public class Noteslnterpreter{
private Note note;
public void getNoteFromKeys(Note note) {
Frequency freq = getFrequency(n0te);
} sendNote(freq);
private Frequency getFrequency(Note note){
// Get the requency from properties file using ResourceBundle
// and return it.
} return freq;
private void sendNote(Frequency freq) {
NotesProducer producer = new NotesProducer();
ducer.playSound(freq);
12

***************Ending Page***************


***************Beginning Page***************
***************page number:13**************
Interpreter — Java 2
public class NotesProducer{
private Frequency freq;
public NotesProducer(){
this.freq I freq;
}
public void playSound(Frequency freq) {
}

***************Ending Page***************

***************Beginning Page***************
***************page number:14**************
Interpreter - The Good, The Bad

> Detaches user classes from model classes

> Preserves S and O (from SOLID)

> Code becomes complicated because of lots of
extra classes

***************Ending Page***************


***************Beginning Page***************
***************page number:15**************
Iterator

> Intent — Provide a way to access the elements of
an aggregate object sequentially

> Also Known As — Cursor

> Motivation — An aggregate object such as a list
should give you a way to access its elements
Without exposing its internal structure.
Moreover, you might want to traverse the list in
different ways, depending on what you want to

l accomplish

***************Ending Page***************

***************Beginning Page***************
***************page number:16**************
Iterator — Structure
m
Createllemtod) HIS“)
Comm) NMO
APPQMUW") IsDone!)
Removedtem) Currentllemﬂ
A A
‘ 16

***************Ending Page***************


***************Beginning Page***************
***************page number:17**************
lterator — Applicability

> to access an aggregate object’s contents
Without exposing its internal representation

> to support multiple traversals of aggregate
objects

> to provide a uniform interface for traversing
different aggregate structures (that is, to
support polymorphic iteration)

***************Ending Page***************

***************Beginning Page***************
***************page number:18**************
iterator — Example

> For example, remote control of TV. Any
remote control we use, either at home/hotel
or at a friend’s place, we just pick up the TV
remote control and start pressing Up and
Down or Forward and Back keys to iterate
through the channels
z“ H: 3552 \”' <;: ~ f“ i
:1 w ,
‘Div; \ qt \"Q @1 £1!‘ny

\ 18

***************Ending Page***************


***************Beginning Page***************
***************page number:19**************
Iterator — Java i
public interface lterator{
public Channel nextChannel(int currentChannel);
public Channel prevChannel(int currentChannel);
l
public ChannelSurfer implements lterator{
public Channel nextChannel (int currentChannel){
Channel channel = new Channel(currentChannel+l);
return channel;
}
public Channel prevChannel (int currentChannel){
Channel channel = new Channel(currentChannel-l);
I return channel;

***************Ending Page***************

***************Beginning Page***************
***************page number:20**************
Iterator —Java 2
public class RemoteControl {
private ChannelSurfer surfer;
private Settings settings;
public RemoteContr0|(){
surfer : new ChannelSurferO;
settings I new Settings();
}
public getProgram(Channe|Surfer surfer) {
return new Program(surfer.nextChanne|());
g

***************Ending Page***************


***************Beginning Page***************
***************page number:21**************
Iterator - The Good, The Bad

> Allows the use of multiple iterators at the
same time on the same collections

> Iteration can be stopped and resumed at will,
as each iterator conserves its state

> Preserves S and O (from SOLID)

> May lead to unnecessary complexity for
simple collections

> Slows iteration over particular types of
collections

***************Ending Page***************

***************Beginning Page***************
***************page number:22**************
Mediator

> Intent — Define an object that encapsulates how
a set of objects interact

> Motivation — Object-oriented design encourages
the distribution of behavior among objects.
Such distribution can result in an object
structure with many connections between
objects; in the worst case, every object ends up
knowing about every other

***************Ending Page***************


***************Beginning Page***************
***************page number:23**************
Medlator — Structure
l l l
23

***************Ending Page***************

***************Beginning Page***************
***************page number:24**************
Mediator — Applicability
> According to (Gamma et al), the Mediator
pattern should be used when:

O a set of objects communicate in well-defined but
complex ways. The resulting interdependencies are
unstructured and difficult to understand.

O reusing an object is difficult because it refers to and
communicates with many other objects.

O a behavior that's distributed between several classes
should be customizable without a lot of subclassing.

***************Ending Page***************


***************Beginning Page***************
***************page number:25**************
Medlator — Examples
> A very common example can be 1.‘ W a
airplanes interacting with the control . W
tower ancl not among themselves “WW ‘- w-l
> Another popular example IS Stock '~" '4; t ,,',‘f§ilii
140.18% W-
exchange _-.~J :gll 1.59% 9021.7
> The chat application is another W§
example of the mediator pattern Q3; ‘J
amples?

***************Ending Page***************

***************Beginning Page***************
***************page number:26**************
Mediator - The Good, The Bad

> Reduces coupling

> Allows for easy reuse of classes

> Preserves S and O (from SOLID)

> The Mediator may become a God Object
(knows too much, does too many things)

***************Ending Page***************


***************Beginning Page***************
***************page number:27**************
Memento

> Intent — Without violating encapsulation, capture
and externalize an object’s internal state so that
the object can be restored to this state later

> Also Known As — Token

> Motivation — Sometimes it’s necessary to record
the internal state of an object. This is required
when implementing checkpoints and undo
mechanisms that let users back out of tentative
operations or recover from errors. You must save

ate information somewhere so that you can
' cts to their previous states

***************Ending Page***************

***************Beginning Page***************
***************page number:28**************
Memento — Structure
*
getstaten; State setl'ulementoﬁmemnto ; Memento) ; 1mm
> Memento
O Stores internal state of the Originator object
o Allows the originator to restore previous state
> Originator
O Creates a memento object capturing it’s internal state
O Use the memento object to restore its previous state.
> Caretaker
o Responsible for keeping the memento.
mque to the caretaker, and the
ot operate on it. 28

***************Ending Page***************


***************Beginning Page***************
***************page number:29**************
Simple Calculator with Undo Operation
{ﬁinterfaceF-b
‘=1’=1||'| e ace};-
F' ' l3 l | t' T III' ' t
F"retriI:usCalculatiunTuCareTalter retrluus a cu a ||:|r| D "Elma or backupLastCalculati-Jnlj : P‘retriI:usCalculatiunTuCareTalter
getFirF-lllurnberi): int restoreF'retriuusEalculatiunﬁmement-zl : PretriuusCalculatiunTuCareTalter) : truid
— getBecundHI-lmberij]: int 9Etca'¢“|ati°"HE5“'t31 int
l l setFirstHumt-erﬁfirstllumber:int):tr|:|i|:l
| setSe-mndHumt-enjsecundllumber:int):tr|:|i|:l
Pretriuusllalculatipnlmp-F- PreviousllalculatiunTuEareTalter : l
ﬁ-irealizeF-F- I Previousllalculatiunlmp-F- F'retriuusﬁalculatiunTuElriginatur l
l----------'=C"=tre'a'l'iza>> l | Calculaturlmp-> Calculator
i------------! : {ﬁrealizebb
l
_ _ Calculaturlmp
Pretrluusllalculatmnlmp
_ _ firstllurnberﬂnt
flrstHurnber: Int .
. secundhlumber: Int
secundhlumber: Int
_ _ _ _ _ backupLastEalculatiuni'j:PreviousllalcuIatiunTuEareTalter
ﬁﬁcreater'} F‘retrluuslIalculatlunlmpﬁflrstﬂumher: |nt,sec|:|n|:lhluml:|er: Int) . _.
tF'rF-lhl l:| ._ t getEalculatlnnHesulle. Int
gEtSI “ng arc‘: |r| _- t rash:reF'retriuusEalculatiunﬁmernent-n : F'retriI:-uslIalculatiunTuCareTalter) :1r|:|i|:l
9E EDD" “m HE" '" setFirstHumberﬁfirstHurnber:intjnruid
setSecundHumberﬁse-aundllumber : int) : truid
g 29

***************Ending Page***************

***************Beginning Page***************
***************page number:30**************
Memento — Database Transactions

> Transactions are operations on the database
that occur in an atomic, consistent, durable, and
isolated fashion

> If all operations succeed, the transaction would
commit and would be final

> And if any operation fails, then the transaction
would fail and all operations would rollback and
leave the database as if nothing has happened

> This mechanism of rolling back uses the
memento design pattern ﬂ

x

***************Ending Page***************


***************Beginning Page***************
***************page number:31**************
Memento - The Good, The Bad

> Can produce saves of object states without
breaking encapsulation

> Decreases responsibilities of the originator by
managing mementos in the caretaker

> Numerous mementos use a lot of memory

> Overhead for the caretakers as they need to
manage which mementos are obsolete and
destroy them

> Some dynamic programming languages
(lavaScript, Python, etc.) cannot guarantee an
unchangeable state for the memento

***************Ending Page***************

***************Beginning Page***************
***************page number:32**************
0bserver

> lntent — Define a one-to-many dependency
between objects so that when one object
changes state, all its dependents are notified
and updated automatically

> Also Known As — Dependents, Publish-Subscribe

> Motivation — A common side-effect of
partitioning a system into a collection of
cooperating classes is the need to maintain

I consistency between related objects

***************Ending Page***************


***************Beginning Page***************
***************page number:33**************
Observer — Example
observers
l_-~=.!!l lag!!! 1mm
BEBE!!!
"@5518! 4v
BE'III'III'I '
a C
\\\ : /,
\ | 4/’
\\ | //
\\ //
\ /
—~ change notiﬁcation
b = 30%
c = 20% ———-> requests. modiﬁcation
subject
‘ 33

***************Ending Page***************

***************Beginning Page***************
***************page number:34**************
Observer — Applicability

> When an abstraction has two aspects, one
dependent on the other

> When a change to one object requires changing
others, and you don’t know how many objects
need to be changed

> When an object should be able to notify other
objects without making assumptions about who
these objects are

***************Ending Page***************


***************Beginning Page***************
***************page number:35**************
Attach(0bserver) \ .
DetacmObserver) to: all o in observers l k‘
NOMYU O--—-- -- ] o->Update() A
W We“ - “Wm =
subject->Ge18tale0
GelStaIeO °"' ' - ‘
‘ 35

***************Ending Page***************

***************Beginning Page***************
***************page number:36**************
Observer — Example

> Below is an example that takes keyboard input
and treats each input line as an event. The
example is built upon the library classes
java.util.0bserver and java.util.0bservable

> When a string is supplied from System.in, the
method notifyObservers is then called, in order
to notify all observers of the event's occurrence,
in the form of an invocation of their 'update'
methods — in our example,
ResponseHandler.update(...).

> The ja va Swing library makes extensive use 0f

I the observer pattern for event management

***************Ending Page***************


***************Beginning Page***************
***************page number:37**************
Observer — Java l
public class EventSource extends Observable
implements Runnable{
public void run(){
trv{
final lnputStreamReader isr : new
lnputStreamReader( System.in );
final BufferedReader br : new BufferedReader( isr );
while( true ){
final String response I br.readLine();
setChanged();
notifyObservers( response ); }
}
l catch (lOException e) { e.printStackTrace(); }}

***************Ending Page***************

***************Beginning Page***************
***************page number:38**************
Observer — Java 2
public class ResponseHandler implements Observer{
private String resp;
public void update (Observable obj, Object arg){
if (arg instanceof String) {
resp I (String) arg;
System.out.println("\nReceived Response: "+ resp );
}
l
l‘

***************Ending Page***************


***************Beginning Page***************
***************page number:39**************
Observer - Java 3
public class MyApp{
public static void main(String args[]){
System.out.println("Enter Text >");
// create an event source — reads from stdin
final EventSource evSrc = new EventSource();
// create an observer
final ResponseHandler respHandler I new
ResponseHandler();
// subscribe the observer to the event source
evSrc.addObserver( respHandler );
// starts the event thread
Thread thread I new Thread(evSrc);
I thread.start();

***************Ending Page***************

***************Beginning Page***************
***************page number:40**************
Observer - The Good, The Bad

> Can establish relations between objects (not
classes) at runtime

> Preserves S and O (from SOLID)

> The order of notification of observers is
random

***************Ending Page***************


***************Beginning Page***************
***************page number:41**************
State

> lntent — Allow an object to alter its behavior
when its internal state changes

> Also Known As — Objects for States

> Motivation — Consider a class TCPConnection
that represents a network connection. A
TCPConnection object can be in one of several
different states: Established, Listening, Closed.
When a TCPConnection object receives requests
from other objects, it responds differently
depending on its current state

***************Ending Page***************

***************Beginning Page***************
***************page number:42**************
State — Idea
> The key idea in this pattern is to introduce an
abstract class called TCPState to represent the
states of the network connection.
Openl) O------. Open”
(llosm ) l CloseO
Acknowledgeﬂ E Acknowledge”
A
Openn 000m‘) 00000
Closel) CloseO ClOSGl)
Acknowledgel) AcknowledgeU Acknowledgel]

***************Ending Page***************


***************Beginning Page***************
***************page number:43**************
State — Applicability
> Use the State pattern in either of the following
cases:
o An object’s behavior depends on its state
O Operations have large, multipart conditional
statements that depend on the object’s state

***************Ending Page***************

***************Beginning Page***************
***************page number:44**************
State — The Good, The Bad

> Simplifies the code of the objects by
removing lots of if statements

> Preserves S and O (from SOLID)

> Leads to large and unnecessary overhead for
objects with few states or Whose states rarely
change

***************Ending Page***************


***************Beginning Page***************
***************page number:45**************
Strategy
l w l

> lntent — Define a family of algorithms,
encapsulate each one, and make them inter
changeable

> Also Known As — Policy

> Motivation — Many algorithms exist for breaking
a stream of text into lines. Hard-wiring all such
algorithms into the classes that require them
isn’t desirable for several reasons

***************Ending Page***************

***************Beginning Page***************
***************page number:46**************
Strategy — Structure
> With Strategy pattern, we can define classes that
encapsulate different line breaking algorithms
A
‘ 46

***************Ending Page***************


***************Beginning Page***************
***************page number:47**************
Strategy — Example
> In the strategy pattern algorithms can be
selected at runtime.
> A standard calculator that implements basic
Operatlons: +, —’ A I. If] Calculator m
__ _ i i
9i
\ ifllfiiflfl] i
llllill;i\;l\;i i.
lYll i ll ‘all/Ml '
ll i’ ii Ll ‘ml
llllleili;l=i
l O il+l .. 47

***************Ending Page***************

***************Beginning Page***************
***************page number:48**************
Strategy — Java i
interface Strategy{
int execute(int a, int b);
}
class ConcreteStrategyAdd implements Strategy{
public int execute(int a, int b) {
System.out.println("Called ConcreteStrategyA's execute()");
return (a + b);
l}
class ConcreteStrategySub implements Strategy {
public int execute(int a, int b) {
System.out.println("Called ConcreteStrategyB's execute()");
return (a — b);
}}
class ConcreteStrategyMul implements Strategy{
public int execute(int a, int b) {
System.out.println("Called ConcreteStrategyC's execute()");
eturn a * b;
4s

***************Ending Page***************


***************Beginning Page***************
***************page number:49**************
Strategy — Java 2
class Context {
Strategy strategy;
public Context(Strategy strategy) {
this.strategy = strategy;
}
public int execute(int a, int b) {
return this.strategy.execute(a, b);
}
}

***************Ending Page***************

***************Beginning Page***************
***************page number:50**************
Strategy — Java 3

class StrategyExample {
public static void main(String[] args){
Context context;
context I new Context(new ConcreteStrategyAdd());
int resuItA I context.execute(3,4);
context I new Context(new ConcreteStrategySub());
int resuItB I context.execute(3,4);
context I new Context(new ConcreteStrategyMu|());
int resuItC I context.execute(3,4);
}

***************Ending Page***************


***************Beginning Page***************
***************page number:51**************
Strategy - The Good, The Bad

> Can swap algorithms at runtime

> Replaces inheritance with composition

> Isolates the implementation of algorithm from
the classes using those algorithm

> If you only need few algorithms, the extra
complication of code is not useful

> Some functional languages can achieve the same
effect by using anonymous functions, and require
less code

> Users need to understand the differences
between implementations to use them properly

***************Ending Page***************

***************Beginning Page***************
***************page number:52**************
Template Method ‘I I
I

> Intent — Define the skeleton of an algorithm in
an operation, deferring some steps to
subclasses

> Motivation — Consider an application framework
that provides Application and Document classes.

> The Application class is responsible for opening
existing documents stored in an external
format, such as a file. A Document object
represents the information in a document once
it’s read from the file

***************Ending Page***************


***************Beginning Page***************
***************page number:53**************
Template Method — Example

> The template pattern is often referred to as the
Hollywood Principle: "Don't ca/l us, we '// ca/l
you." Using this principle, the template method
in a parent class controls the overall process by
calling subclass methods as required

> This is shown in several games in which players
play against the others, but only one is playing
at a given time

***************Ending Page***************

***************Beginning Page***************
***************page number:54**************
Template Method — Java i
abstract class Game{
protected int playersCount;
abstract void initializeGame();
abstract void makePIay(int player);
abstract boolean endOfGameO;
abstract void printWinner();
final void playOneGame(int playersCount){
this.p|ayersCount I playersCount;
initializeGame(); intj I O;
while (!endOfGame()){
makePIay(j);j I (j + l)% playersCount; }
I printWinner();

***************Ending Page***************


***************Beginning Page***************
***************page number:55**************
Template Method — Java 2

class Monopoly extends Game {
// Implementation of necessary concrete methods
void initializeGame(){ // }
void makePlay(int player){ // }
boolean endOfGame(){ // }
void printWinner(){ // ...}
// Specific declarations for the Monopoly game.

}

‘is Chess extends Game{

***************Ending Page***************

***************Beginning Page***************
***************page number:56**************
Template Method - The Good, The

Bad

> Clients can choose to override only some
parts of the algorithm, and are less affected
by changes to other segments

> Duplicate code can be sent to a superclass

> lf you override some part of the algorithm, it
can lead to breaking Liskov substitution

> The skeleton of the algorithm may not suit
some clients

> The more elements in the template, the more
difficult it is to manage

***************Ending Page***************


***************Beginning Page***************
***************page number:57**************
V|s ltor . 11°“ (Q,
> lntent — Represent an operation to be performed
on the elements of an object structure. Visitor

lets you define a new operation without
changing the classes of the elements on which it
operates.
> Motivation — Collections are data types widely
used in object oriented programming. Often
collections contain objects of different types and
in those cases some operations have to be
performed on all the collection elements without
I knowing the type

***************Ending Page***************

***************Beginning Page***************
***************page number:58**************
> We want to create a
reporting module in our
application t0 make —
statistics about a group
of customers l.

’ The Statisiics Shou'd be
very detailed 50 all the — —
customer must e
parsed

> All the entitiES involved -—+ m
m thls hlerarchy must 1
accept a visitor so the
CUStomerGrouD’ — —

‘Order and

'ects

***************Ending Page***************


***************Beginning Page***************
***************page number:59**************
Vlsltor— Appllcablllty
> The visitor pattern is used when:
o Similar operations have to be performed on
objects of different types grouped in a structure
O There are many distinct and unrelated operations
needed to be performed
O The object structure is not likely to be changed
but is very probable to have new operations
which have to be added

***************Ending Page***************

***************Beginning Page***************
***************page number:60**************
V|5|tor Pattern usmg Reflection

> Reflection can be used to overcome the main
drawback of the visitor pattern

> When the standard implementation of visitor
pattern is used the method to invoke is
determined at runtime

> Reflection is the mechanism used to
determine the method to be called at
compile-time

***************Ending Page***************


***************Beginning Page***************
***************page number:61**************
Visitor - The Good, The Bad

> A visitor can accumulate information about
visited objects as it passes through the
collection, allowing for more informed
decisions for later visitations

> Preserves S and O (from SOLID)

> A visitor may not be able to access private or
protected fields of visited objects

> Every time you add an extra class to the
collection, all visitors must be updated

***************Ending Page***************

***************Beginning Page***************
***************page number:62**************
Other Types of DP l

> Concurrency Patterns — deal with multi-threaded
programming paradigm
O Single Threaded Execution — Prevent concurrent calls
to the method from resulting in concurrent
executions of the method
O Scheduler — Control the order in which threads are
scheduled to execute single threaded code using an
object that explicitly sequences waiting threads
o Producer-Consumer — Coordinate the asynchronous

- iroduction and consumption of information or

***************Ending Page***************


***************Beginning Page***************
***************page number:63**************
Other Types of DP 2
> Testing Patterns i
O Black Box Testing — Ensure that software satisfies
requirements
O White Box Testing — Design a suite of test cases to
exhaustively test software by testing it in all
meaningful situations
O Unit Testing — Test individual classes
o Integration Testing — Test individually developed
classes together for the first time
O System Testing — Test a program as a whole entity

***************Ending Page***************

***************Beginning Page***************
***************page number:64**************
Other Types of DP 3
> Testing Patterns 2
O Regression Testing — Keep track of the outcomes of
testing software with a suite of tests over time
O Acceptance Testing — ls done to ensure that
delivered software meets the needs of the customer
or organization that the software was developed for
O Clean Room Testing — Pe0p|e designing software
should not discuss specifications or their
implementation with people designing tests for the
software

***************Ending Page***************


***************Beginning Page***************
***************page number:65**************
Other Types of DP 4
> Distributed Architecture Patterns
O Mobile Agent — An object needs to access very large
volume of remote data :> move the object to the
data
O Demilitarized Zone — You don’t want hackers to be
able to gain access to servers
O Object Replication — You need to improve the
throughput or availability of a distributed
computation

***************Ending Page***************


***************Beginning Page***************
***************page number:66**************
Other Classes of DP

> Transaction patterns — Ensure that a
transaction will never have any unexpected or
inconsistent outcome. Design and implement
transactions correctly and with a minimum of effort

> Distributed computing patterns

> Temporal patterns — for distributed applications
to function correctly, the clocks on the computers
they run on must be synchronized. You may need
to access pervious or future states of an object.
The values of an object’s attributes may change
over time

> Database patterns

***************Ending Page***************

***************Beginning Page***************
***************page number:67**************
Bibliography

> Erich Gamma, Richard Helm, Ralph Johnson,
and John Vlissides: Design Patterns.‘ Elements
0f Reusable Object-Oriented Software
(GangOfFour)

***************Ending Page***************


***************Beginning Page***************
***************page number:68**************
Llnks

> Structural Patterns: httg:[[www.oodesign.com[structural-
|:_>atterns[

> Gang-Of-Four: httg:[[c2.com[cgiZwiki?GangOfFour,
httg:[[www.um|.org.cn[c%ZB%ZB[|QdeDesignPatterns.|gdf

> Design Patterns Book:
htt|:_>:[[c2.com[cgi[Wiki?DesignPatternsBook

> About Design Patterns:
httg:[[www.iavacamgorg[designPatternZ

> Design Patterns —Java companion:
httg: Z [www.patterndegot.com Z outZ8 Z IavaPatterns.htm

> Java Design patterns:
httg:[[www.allagplabs.com['|ava_design_|gatterns['|ava_design_
Qatterns.htm
verview of Design Patterns:

w.minds rin .com ~m rand attern_s no ses.htm
' . uru desi n— atterns 68

***************Ending Page***************

