***************Beginning Page***************
***************page number:1**************
lngineria Programérii
Cursul 07 — 29 martie

***************Ending Page***************

***************Beginning Page***************
***************page number:2**************
i 9 3 6
> Alan Turing
5 ‘On computable numbers, with an application to the
Entscheidungsproblem‘
> First code we could recognize
= Binary
Q Ran on electronic machines
a Uses variables, macros, subroutines
‘ I

***************Ending Page***************

***************Beginning Page***************
***************page number:3**************
1 939
> Bletchley Park —The ' ,1 L7 _ 7 _
Bombe W
> Used to crack ~ mm \
Enigma Code igmﬂim
> Created using 1 095W“
electro-mechanical éWqu,
relays ' ‘ C ,N “I;
> Clock rate ~ 100 ' _ pg???
' ~ A;

***************Ending Page***************

***************Beginning Page***************
***************page number:4**************
1942

Colossus- first programmable computer
‘m i- I ,r= .rI I ‘II,
11?, .. *- 1! W ‘

***************Ending Page***************

***************Beginning Page***************
***************page number:5**************
1945 — Design of ACE
Designed by Alan Turing
Worked in base 32
Used Cathode Ray Tubes for memory

***************Ending Page***************

***************Beginning Page***************
***************page number:6**************
w . . .

v ~1- L’ ‘ ,1},v\!;:I~::::-‘i"§v ‘ "'5' "o'."

V t y ‘ ~ J
‘ 6

***************Ending Page***************

***************Beginning Page***************
***************page number:7**************
i 945 — What we have so far
> Turing writes code
5 Uses binary base 32
Q Uses add and not
= Floating point
=' Subroutines
Q Stack (for data and subroutine return addresses)
5 and many more

***************Ending Page***************


***************Beginning Page***************
***************page number:8**************
i 945 — What we have so far

> “We shall need a great number of
mathematicians of ability", “there will
probably be a good deal of this work to be
done" — Turing, Lecture 0n the ACE

> “One of our difficulties will be the
maintenance of an appropriate discipline, so
that we do not lose track of what we a re
doing" — Turing, Lecture 0n the ACE

***************Ending Page***************

***************Beginning Page***************
***************page number:9**************
1945 — What We Have so Far
> Computers in the world: 0(1)
> Programmers in the world: 0(1)

***************Ending Page***************

***************Beginning Page***************
***************page number:10**************
i 9 5 0 — AC E
> One of the first working computers
5 Vacuum tubes for processing
u 12 Mercury Delay Lines for memory (audio)
= 32 instructions/words of 32 bits per line
=' Frequency ~ iMhz

***************Ending Page***************

***************Beginning Page***************
***************page number:11**************
19505-The Memory Problem
> Memon/ is expensive
a 1*10$ perBlT
> Cheaper versions: Magnetic-core memory
1 Y v | v v s
a = gag-mmamm

***************Ending Page***************

***************Beginning Page***************
***************page number:12**************
z W m A WW W A swim-an 54M Rom Wm»,

( 1W WE Mm W" 5. mm 1W - --- r

( MW V M Wm M 5. M WW , '

t 1W Em WW mm; ourw/T (m 1 1N ms (Wm mm _
mu mm m 5, 5m, 1A. m. n

Km would (215)

t WWW, M 5W a; M m6 I]; A mm;

z My as mm M m Mun swL so M [W run W, mu

,u. n (m m 777, m

1v: 1F no 717. 177, 7v!

1M 1F (WWW 777. 771, W;

m n ("dour 777, 777, 799

‘7* 510v . r

z usma mm mm M (mm; w

( W M ms WW;

5 L PM; “A . m ¢ K) ,r 1 n
AREA - 5mm s ~ <5 flOAYFUIU)'(5'FLDIYF1IBUa _
. <54mmm>> WT“. 1,13
In!“ WW WE 5v 501, n. n. K. Am ~.__ﬁ1u.,_h...q._,.‘ ‘ “LL

"1 FM‘ (4" A: .1294 a: ,3,“ I: JEAN AREA: ,HH 2, ' 'l'““‘"' w-H \ ‘Hm-u!
. mm“ W5» -. :::11:.:t1‘1.; ‘ 111.11,:221112
w- " -..!1:-'.1.':. ‘ ‘ 1‘ ;.::11:.I.1211:|

‘ v;

***************Ending Page***************

***************Beginning Page***************
***************page number:13**************
i 958 — Functional Programming
> John McCarthy — LISP

r (defun factorial (n)

“ (if (: n O) l

= (* n (factorial (— n i)))))

***************Ending Page***************

***************Beginning Page***************
***************page number:14**************
19505
In this decade, IBM sold 140 computers
Fortran
LISP
'Er-E£¢£I IrgmiLcTe ‘idiié?

***************Ending Page***************


***************Beginning Page***************
***************page number:15**************
i 960 — What We Have so Far
> Computers in the world: 0(1e2)
> Programmers in the world: 0(1 e3)
> Programmers were:
Q Mathematicians
a Engineers
Q Scientists
Q Etc.

***************Ending Page***************

***************Beginning Page***************
***************page number:16**************
The Great Invention —

The Transistor
More than 10000 IBM 1401 cornputers sbld in’
the1960$

***************Ending Page***************

***************Beginning Page***************
***************page number:17**************
l 965

> Computers in the world: O(le4)

> Programmers in the world: O(l e5)

> In less than 20 years, the number of
programmers increased by a factor of
100000

> Though most were not mathematicians, they
were experienced, disciplined professionals

***************Ending Page***************

***************Beginning Page***************
***************page number:18**************
1 966
> IBM produces IOOO IBM 360 each month
¥
_ »~ 4
4

***************Ending Page***************

***************Beginning Page***************
***************page number:19**************
1966 — S|mula 67
> First object oriented programming language
> Created by Ole-Johan Dahl, Kristen Nygard
t Objects
= Classes
Q Inheritance
= Virtual procedures
Q Garbage collection
* etc.

***************Ending Page***************

***************Beginning Page***************
***************page number:20**************
i 968 — GOTO

> Edsger Dijkstra {73-5
(physicist) - (301'0 ‘#11 f -,
Considered Harmful i _ w

v Beginning of r “3-‘7 {,1 '
structured_ V k WE
programming \ ' ‘g;

***************Ending Page***************

***************Beginning Page***************
***************page number:21**************
i 968 — C
Ken Thompson, Dennis Ritchie, mathematicians
_ i / if i
i ‘ ,

***************Ending Page***************


***************Beginning Page***************
***************page number:22**************
l 970

> Computers in the world: 0(1e5)

> Programmers in the world: 0(1 e6)

> Tens of thousands of CS and EE graduates
(among the first series)
Q All were young
= Almost all male

***************Ending Page***************

***************Beginning Page***************
***************page number:23**************
19705
> Until now
6 Programmers were disciplined
u Didn't need much management
= Could manage their own time, work in groups and
communicate
a They understood deadlines
> They used a form of Agile development
u Agile is the process used by disciplined
professionals in the wild
‘ 1,

***************Ending Page***************

***************Beginning Page***************
***************page number:24**************
i 970 — The Waterfall

> Young, inexperienced programmers, need top
down supervision

> Average age of programmers drops by iO
years

> Winston Royce describes the waterfall
development model
= an example of a flawed, non-working model

***************Ending Page***************

***************Beginning Page***************
***************page number:25**************
l 970-1 995

> Number of programmers increases
exponentially (roughly doubles every 5 years)

> Tens of millions of programmers

> Half of them have less than 5 years
experience

***************Ending Page***************

***************Beginning Page***************
***************page number:26**************
What Changed
> Hardware
> Demographichs

***************Ending Page***************

***************Beginning Page***************
***************page number:27**************
What Hasn't Changed
> Software

***************Ending Page***************

***************Beginning Page***************
***************page number:28**************
i 99 5

> Original programmers start retiring

> First generation of career programmers are
now about 40 years old

> These career programmers foresee the need
for change
Q Scrum — Schwaber, Beedle, DeVos, et al.
a XP — Beck, Cunningham
Q FDD a Coad
= Crystal — Cockburn

‘ I“

***************Ending Page***************


***************Beginning Page***************
***************page number:29**************
Mmmm M Agilk smwm Dev elupment
w: me \mcovenng Mu ways nfdzvrlnymg
soﬁWum by domg n ma hclpmg 0mm do 1r

Through um “m w: hm came m mm
Individuals and inleractions our precesscs and K0015
Working suﬂwarc ovcrtm'npnicmiw: documentation
Customer cullsboration W Mm “gunman
Responding m change over mun“ mg a pm.
ml ,5‘ ml! \herz ,5 val“! m n“ {\Emsnn
the nghl, We vulva the “ms mum lcﬁ mow.

Kem Mk ram (wrennmg Rnhm c \lamn
MM mm Jun lhghsmuh Sm E lvlelldr
Am u“ Bennekum Andmw Hum Ken Srlw an"
Alulmr Cockbunu Run “mm my smkmd
Wad ( munughaln m‘ Kain Dave Thomas
Mmm | 1m M Bnml Mum)‘

***************Ending Page***************

***************Beginning Page***************
***************page number:30**************
Agile Requires Discipline
> Working with fixed time spans

> Customer communication

> Collaboration

> Estimating in relative units

> Continuous integration

> etc.

> Agile is NOT a process

> It is a set of promises

***************Ending Page***************

***************Beginning Page***************
***************page number:31**************
Extreme Prog ramming
> The most technical

ﬂ TDD

Q Acceptance tests

= Simple design

=' Refactoring

***************Ending Page***************

***************Beginning Page***************
***************page number:32**************
Agile

> Turing mentioned discipline

> Agile is about
~ Discipline
= Craftsmanship
= Professionalism

> Business understands discipline but does not
understand computer programmers or our
disciplines

‘ n

***************Ending Page***************

***************Beginning Page***************
***************page number:33**************
Software craftsmanship

> Software craftsmanship is an approach to
software development that emphasizes the
coding skills of the software developers
themselves.

> A response to the problems of the
mainstream software industry, including
financial concerns over developer
accountability.

> A previously rigorous approach becomes
increasingly engineering in nature

***************Ending Page***************

***************Beginning Page***************
***************page number:34**************
Bibliography

> All images and examples courtesy of Robert
Cecil Martin and Wikimedia Commons

> Robert C. Martin, Engineering Notebook
columns for The C++ Report

> Robert C. Martin, The Future of Programming

***************Ending Page***************

