***************Beginning Page***************
***************page number:1**************
lngineria programérii
Curs 9 — 19-20 Aprilie

***************Ending Page***************

***************Beginning Page***************
***************page number:2**************
Recapitulare
> GOF: Creational Patterns, Structural Patterns,
Behavioral Patterns
> Creational Patterns
> Structural Patterns
‘ I

***************Ending Page***************

***************Beginning Page***************
***************page number:3**************
Recapitulare — CP

> Abstract Factory e computer components
> Builder — children meal

> Factory Method — Hello <Mr/Ms>

> Prototype — Cell division

> Singleton — server log files

***************Ending Page***************

***************Beginning Page***************
***************page number:4**************
Recapitulare — SP
> Adapter — socket-plug
> Bridge — drawing APl

***************Ending Page***************

***************Beginning Page***************
***************page number:5**************
Structural Patterns

> Composite — employee hierarchy
> Decorator — Christmas tree

> Facade — store keeper

> Flyweight — FontData

> Proxy — ATM access

***************Ending Page***************

***************Beginning Page***************
***************page number:6**************
Structural Patterns — Composite

> Intent — Compose objects into tree structures to
represent part-whole hierarchies. Composite
lets clients treat individual objects and
compositions of objects uniformly

> Motivation — Code that uses these classes must
treat primitive and container objects differently,
even if most of the time the user treats them
identically.

***************Ending Page***************

***************Beginning Page***************
***************page number:7**************
~\ w: Wu "21mm 12.3}; m“ 4' ,

***************Ending Page***************

***************Beginning Page***************
***************page number:8**************
Com p05|te l
v Graphics applications like drawing editors and schematic
capture systems let users build complex diagrams out of
simple components
Drawn
AddiGraDﬁlC!
NemevﬁlG/mml
GatChildlmll
__. A
m-
mcvmwvi W ““““: q “My
FlemovelGlan‘) | ‘1i
B

***************Ending Page***************

***************Beginning Page***************
***************page number:9**************
Com pos ite 2

> Applicability — Use this pattern when
5 you want to represent partiwhole hierarchies of
objects
=' you want clients to be able to ignore the difference
between compositions of objects and individual
objects
a Clients will treat all objects in the composite structure
uniformly

‘ g

***************Ending Page***************

***************Beginning Page***************
***************page number:10**************
Composne 3
> Structure
m M
Onumnmn
AMCompomn!)
HomovMCampot-wnll
GalCnl/dnnu
A
mlldren
l:- _-
Wm »----- Paws?) E
Anatcomwmn“
Ramwatmnwwnl)
GBICMGQHI)
‘ w

***************Ending Page***************

***************Beginning Page***************
***************page number:11**************
Composite — Example

> The most common example in this pattern is of
a company's employee hierarchy

> The employees of a company are at various
positions. Now, say in a hierarchy, the manager
has subordinates; also the Project Leader has
subordinates, i.e. employees reporting to
him/her. The developer has no subordinates

***************Ending Page***************

***************Beginning Page***************
***************page number:12**************
Com p05|te — Java l
public class Employeel
private String name; private double salary;
private Vector subordinates;
public Vector getSubordinatesO {return subordinates)
public void setSubordinates<Vector subordinates)(
this.subordinates I subordinates)
public Employee(String name, double sal){
setName(name);setSalarylsal);
subordinates I new VectorO;
l
public void addlEmployee e) (subordinates.addElement(e);}
- iublic void remove(Empl0yee E) {subordinates.rernove(e);l

***************Ending Page***************

***************Beginning Page***************
***************page number:13**************
Com p05|te — Java 2

private void addEmployeesToTreeO {
Employee CFO I new EmployeeC'CFO", 3000);
Employee headFinancel I new Employee("HF. North", 2000);
Employee headFinanceZ I new Employee("HF. West", 2200);
Employee accountant] I new Employee("Accountantl", 1000);
Employee accountantZ I new Employee("Accountant2", 900);
Employee accountant3 I new Employee("Accountant3", l 100);
Employee accountant4 I new Employee("Accountant4", 1200);
CFO.add(headFinancel); CFOladd(headFinanceZ);
headFinancel .add(accoun\antl );headFinancel .add(accountant4);
headFinanceZ.add(accountant2);headFinance2.add(accountant3);

l

i I chief ﬁnancial officer
13

***************Ending Page***************

***************Beginning Page***************
***************page number:14**************
Com p05|te — Java 3
> Once we have filled the tree up, now we can get
the tree for any employee and find out whether
that employee has subordinates with the
following condition.
Vector subOrdinates = emp.getSubordinates();
if (subOrdinates.size() !: O)
getTree(sub0rdinates);
else
System.out.print|n("No Subordinates for the
I Employee: "+emp.getName());

***************Ending Page***************

***************Beginning Page***************
***************page number:15**************
Composite - The Good, The Bad

> Preserves O (from SOLID), because new
classes can easily be added to the hierarchy

> Using polymorphism and inheritance works
well for complex tree structures

> Prone to overgeneralization

> Difficult to provide a common interface

***************Ending Page***************


***************Beginning Page***************
***************page number:16**************
Structural Patterns — Decorator

> Intent — Attach additional responsibilities to an
object dynamically. Decorators provide a flexible
alternative to subclassing for extending
functionality

> Also Known As — Wrapper (similarAdapter)

> Motivation — Sometimes we want to add
responsibilities to individual objects, not to an
entire class. A graphical user interface toolkit,
for example, should let you add properties like
borders or behaviors like scrolling to any user

I interface component

***************Ending Page***************

***************Beginning Page***************
***************page number:17**************
\/
Decorators
@
MFvawm

***************Ending Page***************

***************Beginning Page***************
***************page number:18**************
D e c 0 rat o r 1
v A more flexible approach is to enclose the component
in another object that adds the border. The enclosing
object is called a decorator
£91; , / 5minwtmwtgw
mnku 6;???“ ¢'§§°y:'/ 73.“.ﬁ1'L-13213121”;
h ‘B

***************Ending Page***************

***************Beginning Page***************
***************page number:19**************
Decorator 2
>Structure
A
MW“
A
MMBaﬂavioﬂ)
,9

***************Ending Page***************

***************Beginning Page***************
***************page number:20**************
Decorator 3
> Applicability — Use Decorator
a to add responsibilities to individual objects
dynamically and transparently
= for responsibilities that can be withdrawn
= when extension by subclassing is impractical
‘ "

***************Ending Page***************

***************Beginning Page***************
***************page number:21**************
Decorator — Example

> Suppose we have some 6 objects and 2 of them
need a special behavior, we can do this with the
help of a decorator

> Let's take an example of a Christmas tree. There
is a need to decorate a Christmas tree. Now we
have many branches which need to be decorated
in different ways

***************Ending Page***************

***************Beginning Page***************
***************page number:22**************
Decorator — Java l
public abstract class Decorator{
/** The method places each decorative item on
the tree. */
public abstract void place(Branch branch);
l
public class ChristmasTree{
private Branch branch;
public Branch getBranch(){
return branch;
l

***************Ending Page***************

***************Beginning Page***************
***************page number:23**************
Decorator —Java 2
public class BallDecorator extends Decorator{
public BallDecorator(ChristmasTree tree) {
Branch branch = tree.getBranch();
place(branch);
l
public void place(Branch branch){
branch.put("ball");
l
}‘

***************Ending Page***************

***************Beginning Page***************
***************page number:24**************
Decorator — Java 3

> Similarly, we can make StarDecorator and
RufflesDecorator

StarDecorator decorator = new StarDecorator(new
ChristmasTree());

> This way the decorator will be instantiated and a
branch of the Christmas tree will be decorated.

***************Ending Page***************

***************Beginning Page***************
***************page number:25**************
Decorator — The Good, The Bad

> Change object behavior without inheritance

> Preserves S (from SOLID) — a large class can
be split in smaller ones

> Can add multiple behaviors by adding
multiple decorations

> Change an object's responsibilities at runtime

> The sequence of applying decorators matters

> Difficult to remove a decorator from the
middle of the pile

> The code is hard to manage

***************Ending Page***************

***************Beginning Page***************
***************page number:26**************
Structural Patterns — Facade

> Intent — Provide a unified interface to a set of
interfaces in a subsystem

> Motivation — Consider for example a
programming environment that gives
applications access to its compiler subsystem.
This subsystem contains classes such as
Scanner, Parser, ProgramNode, BytecodeStream,
and ProgramNodeBui/derthat implement the
compiler. Some specialized applications might
need to access these classes directly. But most

I clients of a compiler want to compile some code

***************Ending Page***************

***************Beginning Page***************
***************page number:27**************
Facade i
> A common design goal is to minimize the communication and
dependencies between subsyslems
ulmlmun -
- I
Q
.1 I
sublysmvdasse: .I "-
I
‘ v

***************Ending Page***************

***************Beginning Page***************
***************page number:28**************
> The compiler facade makes life easier for most programmers without
hiding the lower-level functionality from the few that need it
i A ____
m

***************Ending Page***************

***************Beginning Page***************
***************page number:29**************
Facade 3

> Applicability — Use the Facade pattern when
= you want to provide a simple interface to a complex
subsystem
= there are many dependencies between clients and the
implementation classes of an abstraction
Q you want to layer your subsystems

‘ 1*

***************Ending Page***************

***************Beginning Page***************
***************page number:30**************
Facade — Example i

> Facade as the name suggests means the face of
the building. The people walking past the road
can only see this glass face of the building. The
face hides all the complexities of the building
and displays a friendly face.

> Facade hides the complexities of the system and
provides an interface to the client from where
the client can access the system. In Java, the
interfaceJDBC can be called a facade

> Other examples?

***************Ending Page***************


***************Beginning Page***************
***************page number:31**************
Facade — Example 2

> Let's consider a store. This store has a store
keeper. In the storage, there are a lot of
things stored e.g. packing material, raw
material and ﬁnished goods.

> You, as client want access to different goods.
You do not know where the different
materials are stored. You just have access to
store keeper who knows his store well. Here,
the store keeper acts as the facade, as he
hides the complexities of the system Store.

***************Ending Page***************

***************Beginning Page***************
***************page number:32**************
Facade — Java i
public interface Store{
public Goods getGoodsO;
l
public class FinishedGoodsStore implements Store
l
public Goods getGoods(){
FinishedGoods finishedGoods = new FinishedGoodsO;
return finishedGoods;
}‘

***************Ending Page***************

***************Beginning Page***************
***************page number:33**************
Facade — Java 2
public class StoreKeeper{
public RawMaterialGoods getRawMaterialGoodsOl
RawMaterialStore store : new RawMaterialStoreO;
RawMaterialGoods rawMaterialCoods :
(RawMaterialGoods)5t0re.getGoods();
return rawMaterialGoods;
l
l

***************Ending Page***************

***************Beginning Page***************
***************page number:34**************
Facade — Java 3
public class Client{
public static void main(String[] args){
StoreKeeper keeper = new StoreKeeperO;
RawMaterialGoods rawMaterialGoods :
keeper.getRawMaterialCoods();
l
l

***************Ending Page***************

***************Beginning Page***************
***************page number:35**************
Facade - The Good, The Bad

> Isolates and mask system complexity from
the user

> The facade class runs the risk of being
coupled to everything

***************Ending Page***************

***************Beginning Page***************
***************page number:36**************
Structural Patterns — Flyweig ht

> Intent — Use sharing to support large numbers of
fine-grained objects efficiently

> Motivation — Some applications could benefit from
using objects throughout their design, but a naive
implementation would be prohibitively expensive.

> For example, most document editor
implementations have text formatting and editing
facilities that are modularized to some extent.

***************Ending Page***************

***************Beginning Page***************
***************page number:37**************
Flyweight 1
v The following diagram shows how a document editor
can use objects to represent characters
Elli‘:
I§=IZ \\\
lE\I\E_T \\
—-\—\ \\\
\\ \\ cal-raga!
0 QC
\
‘\ n!
\ Minimum} 2mm
\ —’
\
\ column
- oblm

***************Ending Page***************

***************Beginning Page***************
***************page number:38**************
Flyweight 2
w w a»
‘Sféjmcy'aﬂaoooo
@e'o'e‘a_¢._':jg75‘o'dofe‘aj
v vflywolgl'nt pool

***************Ending Page***************

***************Beginning Page***************
***************page number:39**************
DIIWICMMX"

A
“MD m:- mm."
‘ w

***************Ending Page***************

***************Beginning Page***************
***************page number:40**************
Flyweig ht 4
> Applicability — Use the Flyweight pattern
when
a Supporting a large number of objects that:
- Are similar
- Share at least some attributes
- Are loo numerous to easily store whole in memory
‘ ‘“

***************Ending Page***************

***************Beginning Page***************
***************page number:41**************
Flyweight — Example

> A Flyweight is an object that minimizes memory
use by sharing as much data as possible with other
similar objects

> A classic example usage of the flyweight pattern
are the data structures for graphical representation
of characters in a word processor. lt would be nice
to have, for each character in a document, a glyph
object containing its font outline, font metrics, and
other formatting data, but it would amount to
hundreds or thousands of bytes for each character.

mflyweights called FontData

***************Ending Page***************

***************Beginning Page***************
***************page number:42**************
Flyweight — Java l
public enum FontEffch
BOLD, ITALIC, SUPERSCRIPT, SUBSCRIPT, STRIKETHROUCH
l
public final class FontDatal
private static final WeakHashMap<FontData,
WeakReference<FontData>> FLY_WE|GHT_DATA : new
WeakHashMap<FontData. WeakReference<FontData>>();
private final int pointSize;
private final String fontFace;
private ﬁnal Color color;
private final Set<FontEffect> effects;
Erivate FontData(int pointSiZe, String fontFace, Color color,
numSet<FontEffect> effectsH
this,pointSize : pointSize;
thisfontFace = fontFace;
this.co|or I color;
' fects I Collections.unmodifiableSet(effects);
42

***************Ending Page***************

***************Beginning Page***************
***************page number:43**************
Flywelght — Java 2
public static FontData create(int pointSize, String
fontFace, Color color, FontEffect... effects){
EnumSet<F0ntEffect> effectsSet :
EnumSet.noneOf(FontEffect.c|ass);
for (FontEffect fontEffect : effects) {
effectsSet.add(fontEffect); }
FontData data : new FontData(pointSize, fontFace,
color, effectsSet);
if (!FLY_WE|GHT_DATA.c0ntainsKey(data)) {
FLY_WEIGHT_DATA.put(data, new
WeakReference<FontData> (data));
}
‘urn FLY_WE|GHT_DATA.get(data).get();

***************Ending Page***************

***************Beginning Page***************
***************page number:44**************
Flyweight — The Good, The Bad

> Saves on memory in the case of large
numbers of objects

> Becomes costly in processing time

> The code is complicated and not intuitive

***************Ending Page***************


***************Beginning Page***************
***************page number:45**************
Structural Patterns — Proxy

> Intent — Provide a surrogate or placeholder for
another object to control access to it.

> Also Known As — Surrogate

> Motivation — Consider a document editor that can
embed graphical objects in a document. Some
graphical objects, like large raster images, can be
expensive to create. But opening a document
should be fast, so we should avoid creating all the
expensive objects at once when the document is
opened. This isn't necessary anyway, because not

of these objects will be visible in the document
h iime

***************Ending Page***************

***************Beginning Page***************
***************page number:46**************
Proxy i
> The solution is to use another object, an image
proxy, that acts as a stand-in for the real image.
The proxy actsjust like the image and takes
care of instantiating it when it's required.
lToxtDocumm

***************Ending Page***************

***************Beginning Page***************
***************page number:47**************
Proxy 2
> The following class diagram illustrates this example in
more detail
w
mel)
GelEllsnlil
5W!
L084”
’ mg‘ = mamgunumm
mm) mm) a- --_________
GeiExleMl] GelExlenlO cw ----~, 'mw')u'“"
SIUIEO smell : “(m o I
‘mi m“) swig-ell
elltﬂi ﬁll?“ l
— '7

***************Ending Page***************

***************Beginning Page***************
***************page number:48**************
Proxy 3

> Applicability — Use the Proxy pattern when
, You need to provide some interposed service
between the application logic and the client
= Provide some lightweight version ofa service or
resource
a Screen or restrict user access to a resource or
service

‘ ‘B

***************Ending Page***************

***************Beginning Page***************
***************page number:49**************
Proxy — Example

> Let’ say we need to withdraw money to make some
purchase. The way we will do it is, go to an ATM
and get the money, or purchase straight with a
cheque.

> In old days when ATMs and cheques were not
available, what used to be the way??? Well, get your
passbook, go to bank, get withdrawal form there,
stand in a queue and withdraw money. Then go to
the shop where you want to make the purchase.

> In this way, we can say that ATM or cheque in

‘idem times act as proxies to the Bank.

***************Ending Page***************

***************Beginning Page***************
***************page number:50**************
Proxy — Java l
public class Bankl
private int numberanueue;
public double getMuneyForPurchase<double amountNeeded)l
You you I new You("Prashant");
Account account I new AccountO;
String accountNumber I you.getAccountNumber();
boolean gotPassbook I you.getPassbook();
int number I getNumberanueueO;
while (number !I 0) {numberII;}
boolean isBalanceSufficient I
account.checkBalance<accountNumben amountNeeded);
iﬂisBalanceSufficient)
return amountNeeded;
else
return 0,
l
' etNumberanueue<>l
ranueueil
50

***************Ending Page***************

***************Beginning Page***************
***************page number:51**************
Proxy — Java 2
public class ATMProxy{
public double getMoneyForPurchase(clouble amountNeeded){
You you : new You("Prashant");
Account account I new AccountO;
boolean isBalanceAvailable : false;
if(you.getCard()) {
isBalanceAvailable I
account.checkBalance(you.getAccountNumber(),
amountNeeded);
l
if(isBalanceAvailable)
return amountNeeded;
else
0;
51

***************Ending Page***************

***************Beginning Page***************
***************page number:52**************
Proxy — The Good, The Bad

> The provided service can be changed without
affecting the client

> The proxy is available even if the base service
or resource may be unavailable

> Preserves O (from SOLID) — you can add new
proxies without changing the service or client

> It usually delays the response to the client

> The code is complicated because of increased
number of classes

***************Ending Page***************

***************Beginning Page***************
***************page number:53**************
Behavioral Patterns l

> Behavioral patterns are concerned with
algorithms and the assignment of
responsibilities between objects

> These patterns characterize complex control
flow that's difficult to follow at runetime

> They shift your focus away from flow of control
to let you concentratejust on the way objects
are interconnected

***************Ending Page***************

***************Beginning Page***************
***************page number:54**************
Behavioral Patterns 2

> Encapsulating variation is a theme of many
behavioral patterns

> When an aspect of a program changes
frequently, these patterns define an object that
encapsulates that aspect

> Then other parts of the program can collaborate
with the object whenever they depend on that
aspect

***************Ending Page***************

***************Beginning Page***************
***************page number:55**************
Behavioral Patterns 3

> These patterns describe aspects of a program
that are likely to change

> Most patterns have two kinds of objects:
the new object(s) that encapsulate the aspect,
a and the existing object(s) that use the new ones

> Usually the functionality of new objects would
be an integral part of the existing objects were
it not for the pattern

***************Ending Page***************

***************Beginning Page***************
***************page number:56**************
Patte rn s
> Behavioral Patterns
5 Chain of Responsibility
u Command
= Interpreter
=' Iterator
a Mediator
5 Memento
Q Observer
a State
~ Strategy
= Template Method
Visitor
55

***************Ending Page***************

***************Beginning Page***************
***************page number:57**************
Chain of Responsibility

> Intent — Chain the receiving objects and pass the
request along the chain until an object handles it

> Motivation — Consider a contextisensitive help
facility for a graphical user interface. The help
that’s provided depends on the part of the
interface that's selected and its context. If no
specific help information exists for that part of
the interface, then the help system should
display a more general help message about the

.‘mmediate context

***************Ending Page***************

***************Beginning Page***************
***************page number:58**************
Chain of Responsibility — Idea
> lt’s natural to organize help information from
the most specific to the most general

ISIVIDilng

IPrinIBunon IIADMicIn'on
lPIimDi-log
W

anKBimon ‘

I specmc general

***************Ending Page***************

***************Beginning Page***************
***************page number:59**************
Chain of Responsibility — Structure
hander
_-
A
m
__._ A ._.
ﬁmnhandle g
m Ei- smwwi
)elsei
HandeHebi) 0' ““ Hamlet HandlaHean
| »

***************Ending Page***************


***************Beginning Page***************
***************page number:60**************
Chain of Responsibility
> Applicability — Use this pattern when
o more than one object may handle a request,
and the handler isn't known a prion’
<> you want to issue a request to one of several
objects without specifying the receiver
explicitly
Q the set of objects that can handle a request
should be specified dynamically

***************Ending Page***************

***************Beginning Page***************
***************page number:61**************
Chain of Responsibility — Example

> Suppose, we have a multi level filter and gravel of
different sizes and shapes. We need to filter this
gravel of different sizes to approx size categories

> We will put the gravel on the multielevel filtration
unit, with the filter of maximum size at the top and
then the sizes descending. The gravel with the
maximum sizes will stay on the first one and rest
will pass, again this cycle will repeat until, the finest
of the gravel is filtered and is collected in the sill
below the filters

> Each of the filters will have the sizes of gravel which

nnot pass through it. And hence, we will have
' ilar sizes of gravels grouped

***************Ending Page***************

***************Beginning Page***************
***************page number:62**************
Chain of Responsibility — Java i
public class Matter{

private int size;

private int quantity;

public int getSize() {return size;}

public void setSize(int size) {this.size : size;}

public int getQuantity() {return quantity;}

public void setQuantity(int quantity) {

this.quantity : quantity;

***************Ending Page***************

***************Beginning Page***************
***************page number:63**************
Chain of Responsibility — Java 2
public class Sill i
public void collect(Matter gravel) {l
l
public class Filter] extends Si||{
private int size;
public Filterl (int size) (this.size = size;)
Public void collect(Matter gravel) i
or(int i I 0; i < gravel.getQuantity(); i++){
if(gravel.getSize() < size) i
super.collect(9rave|);l
else {
//col|ect here. that means, only matter with less size will
I iass

***************Ending Page***************

***************Beginning Page***************
***************page number:64**************
Chain of Responsability- The

Good, The Bad

> Control the sequence of handler calls

> Preserves S and O (from SOLID)

> Some requests may not be handled by any
class

***************Ending Page***************

***************Beginning Page***************
***************page number:65**************
Com m and
> lntent — Encapsulate a request as an obé'ect, thereby
letting you parameterize clients with di ferent
requests, queue or log requests, and support
undoable operations
> Also Known As — Action, Transaction
> Motivation — Sometimes it's necessary to issue
requests to obgects without knowing anything about
the operation eing requested or the receiver of the
request
> For example, user interface toolkits include objects
like buttons and menus that carry out a request in
response to user input. But the toolkit can't
implement the request explicitly in the button or
menu, because only) applications that use the toolkit
w what should e done on which object
K 55

***************Ending Page***************

***************Beginning Page***************
***************page number:66**************
Command 2
> The key to this pattern is an abstract Command
class, which declares an interface for executing
operations
- Bu‘ Mm m
—~
002'"?
CW“
Cum
C-wvn
PISIBU
‘ is

***************Ending Page***************

***************Beginning Page***************
***************page number:67**************
Command — Structure
v OpenCommand prompts the user for a document
name, creates a corresponding Document object, adds
the document to the receiving
application, and opens the
document
A _._
W =
WM
Exacuiel) q
Askuwu i
I
I
00c e new DocumeHKMmB?
WimiiclloAddmm)
doc->096“) w

***************Ending Page***************

***************Beginning Page***************
***************page number:68**************
/;‘ Ii #7,; 4,

Command — Example v a; m
> A classic example of this pattern is a restaurant:

, A customer goes to restaurant and orders the food

according to his/her choice

= The waiter/ waitress takes the order (command, in this

case) and hands it to the cookin the kitchen

a The cook can make several types of food and so,

he/she prepares the ordered item and hands it over to

the waiter/waitress who in turn serves to the customer
‘ 5"

***************Ending Page***************

***************Beginning Page***************
***************page number:69**************
Command — Java l
public class 0rder{
private String command;
public 0rder(String command) {
this.command = command;
l}
public class Waiter{
public Food takeOrder(Customer cust, Order
order){
Cook cook = new Cook();
Food food = cook.prepareOrder(0rder, this);
return food;
I ll

***************Ending Page***************

***************Beginning Page***************
***************page number:70**************
Command — Java 2
public class Cook{
public Food prepareOrder(Order order, Waiter
waiter) {
Food food : getCookedFood(order);
return food;
l
public Food getCookedFood(Order order){
Food food = new Food(order);
return food;
l

***************Ending Page***************

***************Beginning Page***************
***************page number:71**************
Command- The Good, The Bad

> Supports undo/redo types of operations

> Preserves S and O (from SOLID)

> Combine simple commands into a single
complex one

> Allows delaying execution

> Code becomes complicated because of an
extra layer of code between caller and service

***************Ending Page***************

***************Beginning Page***************
***************page number:72**************
Bibliography

> Erich Gamma, Richard Helm, Ralph Johnson,
and John Vlissides: Design Patterns: Elements
of Reusable Object-Oriented Software
(GangOfFour)

***************Ending Page***************

***************Beginning Page***************
***************page number:73**************
L| n ks

v Structural Patterns: httg:[[www.oodesign.com[structurali
QQIIEFHSZ

v Gang-Of-Four: http:[[c2.com[cgiiwikiYGangOfFoun
httg:[[www.urnl.org.cni(9628962BlgdeDesignPatterns.gdf

> Design Patterns Book:
http:[[c2.com[cgi[wiki?DesignPatternsBook

v About Design Patterns:
httQIZ[www.'avacamg.org[designPatterni

> Design Patterns -Java companion:
http:i[www.gatterndepot.com[gutlSl avaPatterns.htm

v java Design patterns:
http:[[www.allapplabs.comi'ava_design_patterns[ava_design_
patternshtm

verview of Design Patterns:
w.minds rin .com ~m rand attern s no ses.htm
' uru desi n- atterns 73

***************Ending Page***************

