***************Beginning Page***************
***************page number:1**************
lngineria Programérii
Cursu|12 - 17-18 mai

***************Ending Page***************

***************Beginning Page***************
***************page number:2**************
Outl | ne
> Recap — Software testing
> Non-functional software testing
t Security
= Performance
t. Usability
= Internationalization
> SOLID Refactoring
= Degradation of code
Q Designing with classes
t Designing with packages
‘ I

***************Ending Page***************

***************Beginning Page***************
***************page number:3**************
Recap
> Software quality assurance
> Functional software testing
t Automatic testing
= Manual testing
‘ ’

***************Ending Page***************

***************Beginning Page***************
***************page number:4**************
Non Functional Software Testing

> Verifies that the software functions properly even
when it receives invalid or unexpected inputs

> Methods:

c Performance testing or Load Testing checks to see if the
software can handle large quantities of data or users
(software scalability).

= Usability testing checks if the user interface is easy to use
and understand.

t Security testing is essential for software which processes
confidential data and to prevent system intrusion by
hackers.

t Internationalization and localization is needed to test these
aspects of software, for which a pseudo localization method

I can be used.

***************Ending Page***************

***************Beginning Page***************
***************page number:5**************
Software Performance Testi ng
> Types

O load testing i can be the expected concurrent number
of users on the application (database is monitored)

= stress testing — is used to break the application (2 ><
users, extreme load) (application's robustness)

a endurance testing - ifthe application can sustain the
continuous expected load (for memory leaks)

Q spike testing — spiking the number of users and
understanding the behavior of the application whether
it will go down or will it be able to handle dramatic
changes in load

‘ ‘

***************Ending Page***************

***************Beginning Page***************
***************page number:6**************
Performance Testing Analysis
X e ‘f ,
v QA Analyst /
k Performance
g Testing i

***************Ending Page***************

***************Beginning Page***************
***************page number:7**************
UsabIlIty testIng
> A technique used to evaluate a product by testing it
on users
> Usability testing focuses on measuring a human-
made product's capaCIty to meet Its Intended
purpose.
> Examples of products that. commonly benefit from
usabI Ity IQSIIH? are web s|tes or web aplpllcatlons,
computer Inter aces, documents, or deVIces
> Goals
Z Performance e How much time, steps?
c Accuracy e How many mistakes did people make?
t Recall e How much does the person remember afterwards
or after periods of noneuse?
» Emotiona/respanse — How does theéaerson feel about the
tasks completed? ls the person confi ent, stressed? Would
er recommend this system to a friend?

***************Ending Page***************

***************Beginning Page***************
***************page number:8**************
Usability testing steps
Site l a
Build
w Prototype

***************Ending Page***************

***************Beginning Page***************
***************page number:9**************
Security testi ng
r The Process to determine that an Information

System protects data and maintains functionality as

intended.

r The six basic security concepts that need to be
covered by security testing are:

= Conﬁdentiality,

s Integrity e information which it receives has not been
altered in transit or by other than the originator of the
information

s Authentication — validity of a transmission, message, or
originator,

= Authorization e determining that a requester is allowed to
receive a service or perform an operation,

t Availability e Assuring information and communications
services will be ready for use when expected,

c Non-repudiation — prevent the later denial that an action

ed, or a communication that took place
g

***************Ending Page***************

***************Beginning Page***************
***************page number:10**************
Security logo
cagCURyyy ‘ﬁg/ab I
‘ t ii ‘7p, _
m ‘g i ,0

***************Ending Page***************

***************Beginning Page***************
***************page number:11**************
Internationalization and

localization

> Means of adapting computer software to
different languages and regional differences

> Internationalization is the process of designing
a software application so that it can be adapted
to various languages and regions without
engineering changes.

> Localization is the process of adapting software
for a specific region or language by adding
locale-specific components and translating text.

***************Ending Page***************

***************Beginning Page***************
***************page number:12**************
Measurlng software testlng

> Usually, quality is constrained to such topics as
correctness, completeness, security

> Can also include capability, reliability, efficiency,
portability, maintainability, compatibility, and
usability

> There are a number of common software
measures, often called "metrics", which are used
to measure the state of the software or the
adequacy of the testing.

***************Ending Page***************


***************Beginning Page***************
***************page number:13**************
Degradation of code

> Initial code is clean and well structured

> As it is developed, it degrades because of
incremental changes

> Eventually, it becomes difficult to maintain,
extend or debug
u Rigid, Fragile, lmmobile, Viscous

- Design Principles and Design Patterns. Robert C.
Martin

***************Ending Page***************

***************Beginning Page***************
***************page number:14**************
Degradation of code

> Rigidity — the tendency for software to be difficult
to change, even in simple ways

> Fragility — the tendency of the software to break
in many places every time it is changed

> lmmobility — the inability to reuse software from
other projects or from parts of the same project

> Viscosity — it is easy to do the wrong thing, but
hard to do the right thing

***************Ending Page***************

***************Beginning Page***************
***************page number:15**************
Refacto r| ng

> the process of changing a software
system in such a way that it does not alter the
external behavior of the code yet improves its
internal structure." — Martin Fowler in
Refactoring Improving The Design 0f Existing
Code

> Making code cleaner, simpler and more
elegant

> The refactored program must be functionally
equivalent to the initial program

***************Ending Page***************

***************Beginning Page***************
***************page number:16**************
Refacto ring

> Refactoring doesn't prevent changing
functionality, itjust says that it's a different
activity from rearranging code

> It is easier to improve code quality if you
don't also change its functionality

> Refactoring is not rewriting
= refactoring does not change functionality
Q rewriting does change it

***************Ending Page***************

***************Beginning Page***************
***************page number:17**************
Why to Refactor?
> Increase cohesion and decrease coupling
> Refactored code is easier to maintain and
extend
> Simpler to use design patterns
> Improves performance and usability of code
‘ ,7

***************Ending Page***************

***************Beginning Page***************
***************page number:18**************
When is Refactoring Necessary?
> Duplicate Code

> Long Methods

> Large classes

> Long lists of parameters

> Instructions switch

> Speculative generality

> Intense communication between objects

> Chaining Message

***************Ending Page***************

***************Beginning Page***************
***************page number:19**************
How to Refactor
> Prepare a set of automatic tests for the
program to be refactored
> Change the code in small iterations
~ Test for each iteration to ensure semantic
equivalence
= If any test fails, undo the change and try a different
one
> After numerous iterations the cumulated
changes will be large

***************Ending Page***************

***************Beginning Page***************
***************page number:20**************
Refactormg Techniques

> lncrease abstraction
=' Encapsulate Field i force code to access the field
with getter and setter methods
Q Generalize Type - create more general types to
allow for more code sharing
= Replace type a checking code with State/Strategy
Q Replace conditional with polymorphism

> Split code into more logical pieces
Q Extract Method, to turn part of a larger method into
a new method.
Q Extract Class moves part of the code from an
existing class into a new class.

‘ I“

***************Ending Page***************

***************Beginning Page***************
***************page number:21**************
Refactormg Technlques
> Improving names and location of code
6 Move Method or Move Field e move to a more
appropriate Class or source file
= Rename Method or Rename Field — changing the
name into a more representative new one
a Pull Up — in OOP, move to a superclass
5 Push Down e in OOP, move to a subclass

***************Ending Page***************

***************Beginning Page***************
***************page number:22**************
OOD principles for classes
> The Single Responsibility Principle

> The Open Closed Principle

> The Liskov Substitution Principle

> The Interface Segregation Principle

> The Dependency Inversion Principle

> SOLID

***************Ending Page***************

***************Beginning Page***************
***************page number:23**************
The Single Responsibility Principle
> A class shou/d have one, and an/y one, reason to
change.
> A responsibility to is “a reason for change."
> Each responsibility is an axis of change.
interface Modem
{
public void dial(String pno);
public void hangupO;
public void send(char c);
public char recv();
l

***************Ending Page***************

***************Beginning Page***************
***************page number:24**************
The Single Responsibility Principle
> Should these responsibilities be separated?

O If the implementations for the communication and
connection management change independently,
separately

Q If the implementations only change together, do not
separate

> Corollary: An axis of change is only an axis of
change if the changes actually occur.

***************Ending Page***************


***************Beginning Page***************
***************page number:25**************
The Open Closed Principle

> You should be able to extend a class ’
behavior Without modifying it.

> Software entities (classes, modules, functions,
etc.) should be open for extension, but closed
for modification.

> The primary mechanisms behind the Open’
Closed principle are abstraction and
polymorphism.

***************Ending Page***************

***************Beginning Page***************
***************page number:26**************
The Liskov Substitution Principle

> Derived classes must be substitutable for
the/‘r base classes.

> Makes applications more maintainable,
reusable and robust

> If there is a function which does not conform
to the LSP, then that function uses a reference
to a base class, but must know about all the
derivatives of that base class.

> Such a function violates the Open-Closed
principle

***************Ending Page***************

***************Beginning Page***************
***************page number:27**************
The Llskov Substltutlon PrinCIple
public class Rectangle
l
public void SetWidth(double W) {itsWidth:w;}
public void SetHeight(double h) lilsHeight:wI}
public double GetHelghtO consr {return iisHeight;}
public double GetWidthO cons! (return itsWidrh1}
protected double itsWidth;
protected double itsHeight;
}’ public class Square extends Rectangle
l
public void SefWidth(double w) lsuper.SelWidrh(w);
super.5etHeighK(W)i)
public void SetHelght(double l1) {superuSelWidchX
super.SetHeight(h)l}
‘ n

***************Ending Page***************

***************Beginning Page***************
***************page number:28**************
The Llskov Substltutlon PrinCIple
public class Test
l
public static vuid “Rectangle r, float a)
l
r.SetWidth(a);
l
l
public class Main
l
public static void maintStrlng argsll)
l
Square square = new Square(),
square.SetWidth(10);
Test test : new Testl);
testﬂsquare);
//a( this point the square is not a mathematical square
//because its height is different from its length
‘ m

***************Ending Page***************

***************Beginning Page***************
***************page number:29**************
The Interface Segregation Principle

> C/l'ents snou/d not be forced to depend upon
interfaces that they do not use.

> Make fine grained interfaces that are client
speciﬁc.

***************Ending Page***************

***************Beginning Page***************
***************page number:30**************
The Dependency Inversion
Principle
> What is it that makes a design bad?

, most software eventually degrades to the point
where someone will declare the design to be
unsound

= Because of the lack of a good working definition
of “bad” design.

***************Ending Page***************

***************Beginning Page***************
***************page number:31**************
The Dependency Inversion
Principle
> The Definition of a “Bad Design"
, lt is hard to change because every change affects
too many other parts of the system. (Rigidity)
a When you make a change, unexpected parts of
the system break. (Fragility)
It is hard to reuse in another application because
it cannot be separated from the current
application. (lmmobility)

***************Ending Page***************

***************Beginning Page***************
***************page number:32**************
The Dependency Inversion

Principle

> A. High level modules should not depend
upon low level modules. Both should depend
upon abstractions.

> B. Abstractions should not depend upon
details. Details should depend upon
abstractions.

***************Ending Page***************

***************Beginning Page***************
***************page number:33**************
Object-Oriented De5|gn

> The most common types of programming are
Structured Programming and Object Oriented
Programming

> It has become difficult to write a program that
does not have the external appearance of both
structured programming and object oriented
programming
= Do not have goto
» class based and do not support functions or variables
that are not within a class

> Programs may look structured and object
oriented, but looks can be deceiving

‘ B

***************Ending Page***************

***************Beginning Page***************
***************page number:34**************
Organization of Classes

> As software applications grow in size and
complexity they require some kind of high
level organization.

> The class is too finely grained to be used as
an organizational unit for large applications.

> Something “larger” than a class is needed =>
packages.

***************Ending Page***************

***************Beginning Page***************
***************page number:35**************
00D principles for deliverables
> Cohesion
O The Release Reuse Equivalency Principle
Q The Common Closure Principle
= The Common Reuse Principle
> Coupling
~ Acyclic Dependencies Principle
a The Stable Dependencies Principle
a The Stable Abstractions Principle
‘ “

***************Ending Page***************


***************Beginning Page***************
***************page number:36**************
Designing With Packages

> What are the best partitioning criteria?

> What are the relationships that exist between
packages, and what design principles govern
their use?

> Should packages be designed before classes (Top
down)? Or should classes be designed before
packages (Bottom up)?

> How are packages physically represented? ln the
programming language? In the development
environment?

v Once created, how will we use these packages?

***************Ending Page***************

***************Beginning Page***************
***************page number:37**************
The Reuse/Release Equivalence
PrinCIple
> Code copying vs. code reuse
> l reuse code if, and only if, l never need to
look at the source code. The author is
responsible for maintenance
= lam the customer
O When the libraries that I am reusing are changed by
the author, l need to be notified
t. l may decide to use the old version of the library for
a time
= l will need the author to make regular releases of
the library
a l can reuse nothing that is not also released

***************Ending Page***************

***************Beginning Page***************
***************page number:38**************
The Reuse/Release Equivalence

Principle

> The granule of reuse is the granule of release.
Only components that are released through a
tracking system can be effectively reused.
This granule is the package.

***************Ending Page***************

***************Beginning Page***************
***************page number:39**************
The Common Reuse Principle

> The classes lh a package are reused together.
lf you reuse one of the classes lh a package,
you reuse them all.

> Which classes should be placed into a
package?
a Classes that tend to be reused together belong in

the same package.

> Packages to have physical representations

that need to be distributed.

***************Ending Page***************

***************Beginning Page***************
***************page number:40**************
The Common Reuse Principle

> l want to make sure that when l depend upon
a package, l depend upon every class in that
package or l am wasting effort.

***************Ending Page***************

***************Beginning Page***************
***************page number:41**************
The Common Closure Principle

> The classes in a package should be closed
together against the same kinds of changes.
A change that affects a package affects all the
classes in that package.

> lf two classes are so tightly bound, either
physically or conceptually, such that they
almost always change together; then they
belong in the same package.

***************Ending Page***************

***************Beginning Page***************
***************page number:42**************
The Acyclic Dependencies Principle
> The morning after syndrome: you make stuff
work and then gone home; next morning it

longer works? Why? Because somebody
stayed later than you!

> Many developers are modifying the same
source files.

> Partition the development environment into
releasable packages

> You must manage the dependency structure
of the packages

***************Ending Page***************

***************Beginning Page***************
***************page number:43**************
The Acyclic Dependencies Principle

> The dependency structure between packages
must be a directed acyclic graph (DAG). That
is, there must be no cycles in the dependency
structure.

***************Ending Page***************

***************Beginning Page***************
***************page number:44**************
The Acvclic Dependencies Principle
-
MA 1mm»-

***************Ending Page***************

***************Beginning Page***************
***************page number:45**************
The Acyclic Dependencies Principle
I >-

***************Ending Page***************

***************Beginning Page***************
***************page number:46**************
The Acyclic Dependencies Principle
> Breaking the Cycle
e Apply the Dependency Inversion Principle (DIP).
Create an abstract base class
= Create a new package that both MyDialogs and
MyAppIication depend upon. Move the class(es) that
they both depend upon into that new package.
> The package structure cannot be designed
from the top down.

***************Ending Page***************

***************Beginning Page***************
***************page number:47**************
Stability

> Not easily moved

> A measure of the difficulty in changing a
module

> Stability can be achieved through
a Independence
~ Responsibility

> The most stable classes are Independent and
Responsible. They have no reason to change,
and lots of reasons not to change.

***************Ending Page***************


***************Beginning Page***************
***************page number:48**************
The Stable Dependencies Principle

> The dependencies between packages in a
design should be in the direction of the
stability of the packages. A package should
only depend upon packages that are more
stable that it is.

> We ensure that modules that are designed to
be unstable are not depended upon by
modules that are more stable

***************Ending Page***************

***************Beginning Page***************
***************page number:49**************
Stability Metrics

> Ca: Afferent Couplings : The number of
classes outside this package that depend
upon classes within this package.

> Ce: Efferent Couplings : The number of
classes inside this package that depend upon
classes outside this package.

> l : Instability: (Ce/(Ca+Ce)) |:O maximally
stable package. l=l maximally instable
package.

***************Ending Page***************

***************Beginning Page***************
***************page number:50**************
Stability Metrics
- - -
E
I

***************Ending Page***************

***************Beginning Page***************
***************page number:51**************
The Stable Dependencies Principle

> Not all packages should be stable

> The software the encapsulates the high level
design model of the system should be placed
into stable packages

> How can a package which is maximally stable
(l=0) be flexible enough to withstand change?
Q classes that are flexible enough to be extended

without requiring modification :> abstract classes

***************Ending Page***************

***************Beginning Page***************
***************page number:52**************
The Stable Abstractions Principle

> Packages that are maximally stable should be
maximally abstract. Instable packages should
be concrete. The abstraction of a package
should be in proportion to its stability.

> Abstraction (A) is the measure of abstractness
in a package. A = AC/TC

***************Ending Page***************

***************Beginning Page***************
***************page number:53**************
Mam Sequence

1 0-1l-----------;---~.
o K '
Qifeo i
@.,.% z
0,’ v
Abstraction w . I
"91, i

0
o‘, I
p .
fag v
6/ '

IO” 0'" I (1.0)
Instability 1
5,

***************Ending Page***************

***************Beginning Page***************
***************page number:54**************
Design Patterns — Why?

> lf a problem occurs over and over again, a
solution to that problem has been used
effectively (solution = pattern)

> When you make a design, you should know the
names of some common solutions. Learning
design patterns is good for people to
communicate each other effectively

***************Ending Page***************

***************Beginning Page***************
***************page number:55**************
Design Patterns — Definitions

> “Design patterns capture solutions that have
developed and evolved over time" (GOF — Gang-0f-
Four (because of the four authors who wrote it),
Design Patterns.‘ Elements ofReusab/e Object-
On'ented Software)

> In software engineering (or computer science), a
design pattern is a general repeatable solution to a
commonly occurring problem in software design

> The design patterns are languageeindependent

trategies for solving common objecteoriented
blems

***************Ending Page***************

***************Beginning Page***************
***************page number:56**************
How to Select a Design Pattern?
> With more than 20 design patterns to choose from,
it might be hard to find the one that addresses a
particular design problem
> Approaches to finding the design pattern that's
right for your problem:
l. Consider how design patterns solve design problems
2. Scan lntent sections
3. Study relationships between patterns
4. Study patterns of like purpose (comparison)
5. Examine a cause of redesign
‘isider What should be variable in your design

***************Ending Page***************

***************Beginning Page***************
***************page number:57**************
How to Use a Design Pattern?
1. Read the pattern once through for an overview
2v Go back and study the Structure, Participants,
and Collaborations sections
s‘ Look at the Sample Code section to see a
concrete example
4. Choose names for pattern participants that are
meaningful in the application context
s. Define the classes
6, Define application-speciﬁc names for operations
in the pattern
Hient the operations to carry out the
' ' and collaborations in the patter/27

***************Ending Page***************

***************Beginning Page***************
***************page number:58**************
Bibliography

> Robert C. Martin, Engineering Notebook
columns for The C++ Report

> Design Principles and Design Patterns. Robert
C. Martin.

> Erich Gamma, Richard Helm, Ralph Johnson,
and John Vlissides: Design Patterns: Elements
0f Reusable Object-Oriented Software
(GangOfFour)

> Adrian lftene, Advanced Software Engineering
Techniques

***************Ending Page***************

