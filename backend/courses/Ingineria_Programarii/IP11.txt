***************Beginning Page***************
***************page number:1**************
lngineria programérii
Curs 11 - 1O Mai

***************Ending Page***************

***************Beginning Page***************
***************page number:2**************
Cu pri n s
> Recap — Design Patterns
- Creational Patterns
- Structural Patterns
' Behavioral Patterns
~ Other Design Patterns
> Quality Assurance
a Software Testing
~ Testing Methodologies
t Testing process
= Manual Testing vs. Automatic Testing
‘ I

***************Ending Page***************

***************Beginning Page***************
***************page number:3**************
Recapitulare
> GOF = .7
> Creational Patterns
> Structural Patterns
> Behavioral Patterns
‘ ’

***************Ending Page***************

***************Beginning Page***************
***************page number:4**************
Recapitulare — CP
> Abstract Factory

> Builder

> Factory Method

> Prototype

> Singleton

***************Ending Page***************

***************Beginning Page***************
***************page number:5**************
Recapitulare — SP
> Adapter
> Bridge
> Composite
> Decorator
> Fagade
> Flyweight
II Proxy

***************Ending Page***************

***************Beginning Page***************
***************page number:6**************
Recapitulare — BP

> Chain of Responsibility

> Command

> Interpreter

> Iterator

> Mediator

> Memento

> Observer

> State

> Strategy

Template Method

‘ 6

***************Ending Page***************

***************Beginning Page***************
***************page number:7**************
Hierarchy of an lT Company — Compartments
Hum
[will
tall-m ‘
—_
MM m1 w m
-~ -
‘ 7

***************Ending Page***************

***************Beginning Page***************
***************page number:8**************
Hierarchy of an lT Company — Projects
Q;
a

***************Ending Page***************

***************Beginning Page***************
***************page number:9**************
Quality Assurance

> Planned and systematic production processes
that provide confidence in a product's suitability
for its intended purpose.

> A set of activities intended to ensure that
products satisfy customer requirements

> QA cannot absolute/y guarantee the product/0n
0f quality products but makes this more like/y

> Two key principles of QA:
~ "fit for purpose" , the product should be suitable for
the intended purpose, and

I = "right first time" e mistakes should be eliminated

***************Ending Page***************

***************Beginning Page***************
***************page number:10**************
Quality Assurance Dilemma
wQuamy
=// _ \ \
l £2 /
ime Price

***************Ending Page***************

***************Beginning Page***************
***************page number:11**************
Quality Assurance — Definition
-—
“The process of exercising or evaluating
a system by manual or automated

means to verify that it satisfies speciﬁed

requirements or to identify differences

between expected and actual results. ”

(IEEE Standard Glossary, 1983)
G V

***************Ending Page***************

***************Beginning Page***************
***************page number:12**************
Software Quality Assurance

> (SQA) consists of a means of monitoring the
software engineering processes and methods
used to ensure quality

> May include ensuring conformance to one or
more standards, such as ISO 9000 or CMMI

***************Ending Page***************

***************Beginning Page***************
***************page number:13**************
Software Quallty Assurance

> SQA encompasses the entire software
development process, which includes processes
such as
=' software design,
Q coding,
e source code control,
Q code reviews,
a resting,
~ change management,
t conﬁguration management, and
‘ release management

‘ "

***************Ending Page***************

***************Beginning Page***************
***************page number:14**************
ISO 9000
> ISO 9000 is a family of standards for quality
management systems
> Some of the requirements in ISO 9001 (from ISO
9000 family) include
= a set of procedures;
u monitoring processes;
a keeping adequate records;
a checking output for defects;
a regularly reviewing individual processes;
= facilitating continual improvement

***************Ending Page***************


***************Beginning Page***************
***************page number:15**************
Software Quality Assurance
Mew“
> Quality assurance is concerned with prevention
a Defect Prevention
a Processes
Q Continuous improvement of this processes
> Quality control is concerned with correcting
a Software testing is a subset of Quality control
Image credit testeinstituteorg
~ is

***************Ending Page***************

***************Beginning Page***************
***************page number:16**************
Software Testing — introduction

> An empirical investigation conducted to provide
information about the quality aft/1e product or
service under test, With respect to the context in
which it is intended t0 operate.

> Allow the business to appreciate and understand
the risks at implementation of the software

> Test techniques include the process of
executing a program or application with the
intent of finding software bugs

> The process of validating and verifying that a
software program/application/product meets
the business and technical requirements that

***************Ending Page***************

***************Beginning Page***************
***************page number:17**************
Software Testing — When?

> Can be implemented at any time in the
development process

> However the most test effort is employed after
the requirements have been defined and coding
process has been completed

***************Ending Page***************

***************Beginning Page***************
***************page number:18**************
Software Testing
> Software Testing is NOT a phase
> It is integrated in all phases of software
development
> Each development step has an attached
testing documentation

***************Ending Page***************

***************Beginning Page***************
***************page number:19**************
What is the purpose of testing?

> We need not only to find bugs but also to
prevent them (which is better)

> To know when to stop because effectiveness
and economics of the process is essential.

> To know that not all system requires the same
level of quality (mission critical against IT).

> Testing is not only for the SOFTWARE it is for
all DELIVERABLES

***************Ending Page***************

***************Beginning Page***************
***************page number:20**************
Why are there bugs in software?
> Miscommunication
> Misunderstanding
> Low professional manpower
>Time pressures i

***************Ending Page***************

***************Beginning Page***************
***************page number:21**************
Miscommunication
Ah
~ - ﬂ a l
ak°~0\
"Didn't you get my a-mail?" n

***************Ending Page***************

***************Beginning Page***************
***************page number:22**************
Misunderstandings
é‘.  E'o ""0!

***************Ending Page***************

***************Beginning Page***************
***************page number:23**************
What genenerates most errors?
v Incorrect or incomplete requirements 50%
v Ambiguous or incomplete modeling 30%
> Programming errors 20%

***************Ending Page***************

***************Beginning Page***************
***************page number:24**************
COSt Of correcting err S
100 ' \

ao

so

4o

zo
0 Req Modeling Impl lrll.Tesl. 5m Clienl

‘ Test. 1.

***************Ending Page***************

***************Beginning Page***************
***************page number:25**************
Note
Late error detection: greater
repair cost

***************Ending Page***************

***************Beginning Page***************
***************page number:26**************
Error must be repaired as soon
as possible
i. MODELING IMPLEM. CLIENTTESI'ING

***************Ending Page***************

***************Beginning Page***************
***************page number:27**************
Professional Testing
Professional testing means finding
the least amount of test cases which
will check the most amount of system
features.

if]

n-

\\ j

***************Ending Page***************

***************Beginning Page***************
***************page number:28**************
When does testing stop?
> Never
>When the number of errors found in a
test cycle is lower than a set amount
> When no more critical faults are found
> When we run out of time
2/ T

***************Ending Page***************


***************Beginning Page***************
***************page number:29**************
Schema of a Testlng System
Dliigns
Dot-1min. the Mum,“
""“‘ °' may? Pruvide! a
3mm Plalform
forthe
operatlon of
Dnlqn:
"2:32; / \ Acquiros
mm, Conﬁgures
“AISLE. “PM
n

***************Ending Page***************

***************Beginning Page***************
***************page number:30**************
Testing Methodology

> Differences between testing and
debugging

> Layers of testing

> Testing methods

>Testing content

> Manual vs Automatic Testing

***************Ending Page***************

***************Beginning Page***************
***************page number:31**************
Testing vs. Debugging
Testing Debugging
° Check compliance to ° Check validity of
requirements program sections
‘Normally carried out
by an external and ‘Run by the developer
neutral party
'Is planned and ' Is a random process
controlled

***************Ending Page***************

***************Beginning Page***************
***************page number:32**************
Layers of testing
> Unit testing or debugging
> Module/Sub-System
> Integration
> System
>Acceptance
‘ n

***************Ending Page***************

***************Beginning Page***************
***************page number:33**************
Unit Testing

> Testing a function, program screen, feature
> Run by programmers

> Predefined

> Results must be documented

> Input and Output simulators are used

***************Ending Page***************

***************Beginning Page***************
***************page number:34**************
Integration testing

> Testing of several modules at the same time
> Testing coexistence

> Run by programmers or testers

> Pre-planned testing

> Results must be documented

***************Ending Page***************

***************Beginning Page***************
***************page number:35**************
System Testing

> System testing of software or hardware is
testing conducted on a complete, integrated
system to evaluate the system's compliance with
its specified requirements.

> System testing falls within the scope of black
box testing

> System testing is a more limiting type of testing;
it seeks to detect defects both within the "inter-
assemblages" and also within the system as a
whole.

***************Ending Page***************

***************Beginning Page***************
***************page number:36**************
Testing methods

> White Box

> Black Box

> Gray Box

> Graphical user Interface Testing
> Acceptance Testing

> Regression Testing

***************Ending Page***************

***************Beginning Page***************
***************page number:37**************
White Box
Q
m5,

***************Ending Page***************

***************Beginning Page***************
***************page number:38**************
Whlte Box (2)
> The tester has access to the internal data
structures and algorithms
> Types of white box testing
a api testing — Testing of the application using Public
and Private APIs
= code coverage — creating tests to satisfy some criteria
of code coverage
t. fault injection methods
= mutation testing methods
~ static testing i White box testing includes all static
sting
KB

***************Ending Page***************

***************Beginning Page***************
***************page number:39**************
Black Box
L-ﬂ
I "like a walk in a dark labyrinth without a flashlight,"

***************Ending Page***************

***************Beginning Page***************
***************page number:40**************
Black Box (2)

> Specificationebased testing

> Black box testing methods include: equivalence
partitioning, boundary value analysis, allepairs
testing, fuzzy testing, model-based testing,
traceability matrix, exploratory testing and
specification-based testing.

***************Ending Page***************

***************Beginning Page***************
***************page number:41**************
Grey Box

> This involves having access to internal data
structures and algorithms for purposes of
designing the test cases, but testing at the user,
or black-box level

> Manipulating input data and formatting output
do not qualify as "greyibox," because the input
and output are clearly outside of the "black-
box" that we are calling "the software under
test"

***************Ending Page***************

***************Beginning Page***************
***************page number:42**************
GUI Testing
> In computer science, GUI software testing is the
process of testing a product that uses a
graphical user interface, to ensure it meets its
written specifications.
> The variety of errors found in GUI applications:
a Data validation, Incorrect field defaults, Mandatory
fields, not mandatory, Wrong fields retrieved by
queries, Incorrect search criteria
, Field order, Multiple database rows returned, single
row expected
a Currency of data on screens, Correct window modality?
-0ntrol state alignment with state of data in window?

***************Ending Page***************


***************Beginning Page***************
***************page number:43**************
Acceptance Testing

> A black-box testing performed on a system
prior to its delivery

> In software development, acceptance testing by
the system provider is often distinguished from
acceptance testing by the customer (the user or
client) prior to accepting transfer of ownership.

> In such environments, acceptance testing
performed by the customer is known as user
acceptance testing (UAT).

> This is also known as end-user testing, site

licceptance) testing, or field (acceptance)

***************Ending Page***************

***************Beginning Page***************
***************page number:44**************
Reg ressmn Testing

> Regression testing is any type of software
testing which seeks to uncover software
regressions.

> Such regressions occur whenever software
functionality that was previously working
correctly, stops working as intended.

> Typically regressions occur as an unintended
consequence of program changes.

> Common methods of regression testing include
re-running previously run tests and checking

‘hether previously ﬁxed faults have re-emerged

***************Ending Page***************

***************Beginning Page***************
***************page number:45**************
Automatic vs Manual Testing
> Prob/ems are found o Solves interface issues:
quickly correctness of teivt,
messages, page ayout,
> Cheap to repeat _ _ element order, visibility
> The process of writing etc.
code is more ﬂexible . . .
. o Wr/tlng test scenarios
> Less manual testing can be difficult and
> Software development implies technical
becomes predictable know/edge of the entire
and can be planned system

***************Ending Page***************

***************Beginning Page***************
***************page number:46**************
Manual Testing

> Manual testing is the process ofmanua/ly
testing software for defects

> It requires a tester to play the role of an end
user, and use most of all features of the
application to ensure correct behavior

> To ensure completeness of testing, the tester
often follows a written test plan that leads them
through a set of important test cases

***************Ending Page***************

***************Beginning Page***************
***************page number:47**************
Definitions

> Test Strategy is developed by the "Project
manager" which contains what type of technique
to follow and which module to test

> Test Plan is developed by the Test Lead, which
contains "what to test", "how to test", "when to
test", "who to test"

> Test Scenario is a name given to test case. It is
dealt with by the Test Engineer

> Test Case specifies a testable condition to
validate functionality. The test cases are dealt

'ith by the Test Engineer

***************Ending Page***************

***************Beginning Page***************
***************page number:48**************
Test Strategy vs. Test Plan
‘My a
Q
" w
.8

***************Ending Page***************

***************Beginning Page***************
***************page number:49**************
Test Plan

> A systematic approach to testing a system

> Contains a detailed understanding of what the
eventual workflow will be

> Documents the strategy that will be used to
verify and ensure that a product or system
meets its design specifications and other
requirements

> ls usually prepared by or with significant input
from Test Engineers

***************Ending Page***************

***************Beginning Page***************
***************page number:50**************
Test Plan Components

> May include one or more of the following:
= Design Veriﬁcation 0r Compliance test
Q Manufacturing or Production test
= Acceptance 0r Commissioning test
u Service and Repair test
Q Regression test

‘ S“

***************Ending Page***************

***************Beginning Page***************
***************page number:51**************
Test Plan Structure (IEEE 829-1998)
> Test plan identifier > Testing tasks
> Introduction > Environmental needs
> Test items > Responsibilities
> Features to be tested > Staffing and training
> Features not to be needs
tested > Schedule
> Approach > Risks and
> Item pass/fail criteria contingencies
> Suspension criteria > Approvals
I > Test deliverables

***************Ending Page***************

***************Beginning Page***************
***************page number:52**************
Test Plan — Life Cycle

BubllshTestPiln lupmvoa

_‘_
Damn Yul Cu. JADIIWIG

f
7 V

f

f

***************Ending Page***************

***************Beginning Page***************
***************page number:53**************
Test Case

> A set of conditions or variables under which a
tester will determine whether an application or
software system meets specifications

> A sequence of steps to test the correct
behavior/functionalities, features of an
application

> In order to fully test that all the requirements of
an application are met, there must be at least
one test case for each requiremenﬂtwo
recommended)

***************Ending Page***************

***************Beginning Page***************
***************page number:54**************
Test Case Format
> Test case ID > Test category
> Test case Description > Author
> Expected Output > Check boxes for
> Actual Output whether the test is
, Pass/Fa“ automatable and has
> Remarks been automated.
> Test step or order of
execution number
> Related requirement(s)
I > Depth

***************Ending Page***************

***************Beginning Page***************
***************page number:55**************
Large Scale Engineering Projects
> Need a systematic approach:
1. Choose a high level test plan
2. Write detailed test cases
a. Assign the test cases to testers, who manually
follow the steps and record the results.
4. Author a test report, detailing the findings of
the testers.
>The report is used by managers to determine
whether the software can be released

***************Ending Page***************

***************Beginning Page***************
***************page number:56**************
Test Automation

> A process of writing a computer program to do
testing that would otherwise need to be done
manually

> The use of software to control the execution of
tests, the comparison of actual outcomes to
predicted outcomes, the setting up of test
preconditions, and other test control and test
reporting functions

> Commonly, test automation involves automating
a manual process already in place that uses a

I formalized testing process

***************Ending Page***************


***************Beginning Page***************
***************page number:57**************
Test Automation — Approaches

> Graphical user interface testing. A testing
framework generates user interface events such
as keystrokes and mouse clicks, and observes
the changes that result in the user interface, to
validate that the observable behavior of the
program is correct

> Code-driven testing. The public (usually)
interface to classes, modules, or libraries are
tested with a variety of input arguments to
validate that the results that are returned are

I correct

***************Ending Page***************

***************Beginning Page***************
***************page number:58**************
TA — What t0 test
> Testing tools can help automate tasks such as
product installation, test data creation, GUI
interact/0n, prob/em detect/‘on, defect lagging, etc.
> Important points when thinking about TA:
c Platform and OS independence
Z Data driven capability (Input Data, Output Data, Meta Data)
c Customizable Reporting (DB Access, crystal reports)
c Email Notifications
» Easy debugging and logging
v Version control friendly
= Extensible & Customizable
c Support distributed execution environment
' ibuted application support
K SB

***************Ending Page***************

***************Beginning Page***************
***************page number:59**************
‘m g.“ w m, 2w. m M.“ M g“, MW m,
‘EIMIEIQ l\ix\s!~l a . > I!“ -\na¢, =_ HAM unsasa DD}
l“ . = 4m
Cw W __ m_— WW :m'
Wm“ ‘MM u a M." m v
i Uvm 5mm I v mewﬂ
‘3 '"‘“'"""""" WW. p _ anwn r
' ‘f !"‘“"L"’“ Mun-Elm rm m1 - annﬂ
1 I 5m - \le “mm - Wmunh what v0
I Smlm u “mum WWW“ Wm“
I “1w n *W wmmm v mewn
I “w i Mum-w Isa-“mm _ vawwﬂ
i Wm; n WW. p _ anwn
i “Mm - Umkmmm - Bnhku - Wmunh
a Mzmwm,
a nammwm Mum-Hm-
V a mm“ Han:
a um "m
. m “mm |i
n VNSWD
V ,, wamm W" Mm
z n 5m
I hum 4 _.| ,___“,
E 3 “*‘MEWWM —
e u-mww p meaa
3 mm“ LM v.“
m Mm m
.- NhHM/ “mm/WNW" v Mm
4| | > A \ ,. 4|

***************Ending Page***************

***************Beginning Page***************
***************page number:60**************
Test Automatlon WIth Scrlptmg
> Manual Test Case Steps:
, Launch Calculator
Q Press 2
Q Press +
Q Press 3
Q Press =
, The screen should display 5.
Q Close Calculator.
- Example credit softwareteslinghelp.com

***************Ending Page***************

***************Beginning Page***************
***************page number:61**************
r Hm exampﬂa ‘5 wnnen m MS Coded m uslng or language,
> [TeslMe\hod]
r publlc mm TastCakmamﬂ)
> :
> I/‘aunchxheawhiaﬂon
> var app = Aupnun-muﬂammuumhcc.\\wlndowmsynemm\mlwm
> //dc an me Overanons
r Mouse ChclqhunonZL
> MouseIlmeunonAddL
r Mouse Chclqhunonﬂ
> MouseLlebunanqualL
> mum“ the results
r Asseﬂ AreEqua\(‘S', mmmz Dlsp\ayTeXK,“Ca\wlawr IS no! showing 57,
, //cluse me apphunon
> aDD Onset»
' )
‘ ~

***************Ending Page***************

***************Beginning Page***************
***************page number:62**************
Software Bug

> A software bug is an error, flaw, mistake,
failure, or fault in a computer program

> Most bugs arise from mistakes and errors made
by people (in program or in its design), and a
few are caused by compilers

> Reports detailing bugs in a program are
commonly known as bug reports, fault reports,
problem reports, trouble reports, change
requests, and so forth.

***************Ending Page***************

***************Beginning Page***************
***************page number:63**************
Bug s Effects

> Bugs in the code controlling the Therac-ZS radiation
therapy machine were directly responsible for some
patient deaths in the 19805.

> Smart ship USS Yorktown was left dead in the water in
1997 for nearly 3 hours after a divide by zero error.

> Eve Online‘s deployment of the Trinity patch erased the
boot.ini file from several thousand users‘ computers.
rendering them unable to boot.

> Valve's Steam client for Linux could accidentally delete
all the user's files in every directory on the computer.

> In 2002 were responsible for losses of $59 billion
annually, or about 0.6 percent of the gross domestic
product.

‘ 5’

***************Ending Page***************

***************Beginning Page***************
***************page number:64**************
c|e M
Bug Llfecmy
_—

***************Ending Page***************

***************Beginning Page***************
***************page number:65**************
Bug Prevention

> Programming style

> Programming techniques

> Development methodologies

> Programming language support
> Code analysis

> Instrumentation

***************Ending Page***************

***************Beginning Page***************
***************page number:66**************
Coding Style — Motivation
> Coding conventions are important because:

<> 80% of the work on software is maintenance

o Usually, a product is not maintained by the
persons who created it

o Code conventions improve code readability
and allow a software developer to quickly
understand new programs

***************Ending Page***************

***************Beginning Page***************
***************page number:67**************
Coding Style — General
Reuquirements
> Use comments: what do functions do, what do
variables represent, explain steps of
algorithms, etc.
> Use suggestive names for variables and
functions
> Develop modular code
> Use dual pairs: set/get, start/stop,
add/remove, save/load

***************Ending Page***************

***************Beginning Page***************
***************page number:68**************
Correctness

> Correctness of an algorithm is asserted when it
is said that the algorithm is correct with respect
to a speciﬁcation

> Functional correctness refers to the input-
output behavior of the algorithm (i.e., for each
input it produces the correct output)

> A distinction is made between total correctness,
which additionally requires that the algorithm
terminates, and partial correctness, which
simply requires that ifan answer is returned it

I will be correct.

***************Ending Page***************

***************Beginning Page***************
***************page number:69**************
L| n ks

> Software Quality Assurance:
httQ: ZZsatc.gsfc.nasa.gov[assure[agbsecltxt

> Software Testing:
httg:[[en.wikigedia.org[wikilSoftwareJesting

> GUI Software Testing:
http: Z [en.wikipedia.org[wiki[GUI_software_testing

> Regression Testing:
http: Z [en.wikipedia.org[WikilRegressionJesting

> Junit Test Example:
http:[[www.cs.unc.edu[~weissZCOMP401[508-27-
UnitTestExample.doc

> https:[[www.test—
institute.org[What_is_Software_Quality_Assurance.phg

‘ 5's

***************Ending Page***************

***************Beginning Page***************
***************page number:70**************
Coding Style — Links
r C++I
O httg:[[www.chrisi
|ott.org[resourcesjcstyleZ
u http:[[geosoano[develogmentlcppstyla
m
> Java:
O httQ:Z['ava.sun.c0m[docslcodeconvj
u http:[[geosoft.no[developmentl'avastyle
l m

***************Ending Page***************

