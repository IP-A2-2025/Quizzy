***************Beginning Page***************
***************page number:1**************
lngineria Programérii
Cursul 5 — 21,22 Martie 2023
adiftene@info.uaic.ro

***************Ending Page***************

***************Beginning Page***************
***************page number:2**************
Cu prins
> Din Cursurile trecutem
> SOLID and Other Principles
> GRASP
~ LOW coupling
a High cohesion

***************Ending Page***************

***************Beginning Page***************
***************page number:3**************
> De ce avem nevoie de modelare.7

> Cum putem modela un proiect?

> SCRUM — roles, values, artifacts, events, rules
‘ i

***************Ending Page***************

***************Beginning Page***************
***************page number:4**************
SOLID and Other Principles
> SOLID Principles
=' SRP e Single Responsibility Principle
=' OCP e Open/Closed Principle I: S.O.L.I.D.
a LSP , Liskov Substitution PrincipIe Hal/A - ""r’
t. ISP e Interface Segregation Principle
~ DIP e Dependency Inversion Principle
> DRY - Don't Repeat Yourself
> YAGNI - You Aren't Gonna Need It
> KISS — Keep It Simple, Stupid

***************Ending Page***************

***************Beginning Page***************
***************page number:5**************
> SOLID was introduced by Robert C. Martin in the an
article called the “Principles of Object Oriented
Design" in the early 20005
Single responsibility
principle
D Open/closed principle
D Liskov substitution principle
Interface segregation
principle
Dependency inversion
principle i

***************Ending Page***************

***************Beginning Page***************
***************page number:6**************
SOLID — SRP — Definitions

> “The Single Responsibility Principle states that every
object should have a single responsibility, and that
responsibility should be entirely encapsulated by the
class." — Wikipedia

> “There should never be more than one reason for a
class to change." — Robert Martin

> Low coupling & strong cohesion

***************Ending Page***************

***************Beginning Page***************
***************page number:7**************
SOLID — SRP — Problems & Solutlons
> Classic violations
w Objects that can print/draw themselves
c Objects that can save/restore themselves
> Classic solution
v Separate printer & Separate saver
> Solution
c Multiple small interfaces (ISP)
c Many small classes
c Distinct responsibilities
> Result
c Flexible design
s Lower coupling & Higher cohesion
‘ ’

***************Ending Page***************

***************Beginning Page***************
***************page number:8**************
> Two responsabilities
interface Mode
public v01 @6115:an pno)
public v01 langupU?
public V01. send1char c);
public cha rerUF
)
> Separated interfaces
ln£erface DacaChannel ( incerface Connection (
public v01d sendhzhar c); public v01d d13115tr1nq phn);
publlC char rerUF publlc char hanqupU;
) )
‘ "

***************Ending Page***************

***************Beginning Page***************
***************page number:9**************
SOLID — Open/Closed Principle
Open chest surgery is not needed When putting on a
coat
Bertrand Meyer originated the OCP term in his 1988
book, Object Oriented Software Construction
‘f2, ‘l I'fh ii'w
, ' ' "' '

***************Ending Page***************

***************Beginning Page***************
***************page number:10**************
SOLID — OCP — Deﬁnitions

> “The Open / Closed Principle states that software
entities (classes, modules, functions, etc.) should be
open for extension, but closed for modification." -
Wikipedia

> “All systems change during their life cycles. This must
be borne in mind when developing systems expected
to last longer than the first version." — lvarJacobson

> Open to Extension — New behavior can be added in the
future

> Closed to Modification — Changes to source or binary
code are not required

‘ ,

***************Ending Page***************

***************Beginning Page***************
***************page number:11**************
SOLID — OCP — How?
> Change behavior without changing code?!
w Rely on abstractions. not implementations
c Do not limit the variety of implementations
> In .NET — Interfaces, Abstract Classes
> In procedural code — Use parameters
> Approaches to achieve OCP
w Parameters — Pass delegates / callbacks
c Inheritance / Template Method pattern — Child types
override behavior of a base class
c Composition / Strategy pattern — Client code depends on
abstraction. "Plug in" model
‘ "

***************Ending Page***************

***************Beginning Page***************
***************page number:12**************
SOLID — OCP — Problems & Solutions
> Classic violations
=' Each change requires reitesting (possible bugs)
a Cascading changes through modules
a Logic depends on conditional statements
> Classic solution
a New classes (nothing depends on them yet)
~ New classes (no legacy coupling)
> When to apply OCP?
~ Experience tell you
> OCP add complexity to design (TANSTAAFL)
.I No design can be closed against all changes

***************Ending Page***************

***************Beginning Page***************
***************page number:13**************
// open»clcse Pslnclple - Bad example // Open-Close Principle _ Good
class Graphiciditoz ( example

public void drawShape (shape s) 1 class Gtaphicliditoz 4

if (an type:=1) public void drawshapa (shape s) (

drawRectang1e(s) ,- Sin“) i
else l: (s.m_type==2) R
drawcircleﬁ) .-

) class shape (

public void dzawcircle (Circle r) apesnacc void dravﬂ);
l . . . . l l

pnpllc void d:awRectang1e(Rectangle t)
1....) class Rectangle extends shape <
, public void dravO (

// draw the seccangle

class shape ( )

int m_type; I
)
class Rectangle extends shape (

Rectangle 1) (supet.m_type=1; 1

ends shape (
—2:) U

***************Ending Page***************

***************Beginning Page***************
***************page number:14**************
SOLID — Liskov Substitution
> If it looks like a duck, quacks like a duck, but
needs batteries , you probably have the wrong
abstraction
> Barbara Liskov described the principle in 1988
I I, . I’ V
g/n\ 5 b 1 a _\ r
,2’ A, t: ‘A ‘
l.l\‘kt)\'v8lllfS_l'lllll11\NPylflltlglljl‘ LiSkOV Substitution

***************Ending Page***************


***************Beginning Page***************
***************page number:15**************
SOLID — LSP — Def|n|t|ons

> "The Liskov Substitution Principle states that
Subtypes must be substitutable for their base
types.“ — Agile Principles, Patterns, and Practices
in C#

> Substitutability — child classes must not
=' Remove base class behavior ‘
~ Violate base class invariants 4' ‘ C

> Normal OOP inheritance ‘4 ,5
a lSeA relationship . I‘

> Liskov Substitution inheritance ;;j' Q
a lS-SUBSTITUTABLE-FOR - 41f: 5 .1 '_

***************Ending Page***************

***************Beginning Page***************
***************page number:16**************
SOLID — LSP — Problems & Solutions
> The problem
Q Polymorphism break Client code expectations
Q "Fixing" by adding ifethen e nightmare (OCP)
> Classic violations
Q Type checking for different methods
Q Not implemented overridden methods
Q Virtual methods in constructor
> Solutions
Q “Tell, Don't Ask" e Don't ask for types and Tell the
object what to do
Q Refactoring to base class’ Common functionality and
Introduce third class
‘ ‘5

***************Ending Page***************

***************Beginning Page***************
***************page number:17**************
// Vxelation cl Liskcw's Subscituticn 2:11“:me
elm kennel“ c1.“ Sqwaze extends sum-me 1
{M "13'9"" public voyLeewi int vidzhﬂ
mt: mihuthb: width = width?
height = width;
public void Iatilidthﬂnf. ndthH , '\ ,
m_w£dch : "mm,- *i’
l Public ‘my, ' tun: heightH
_VidC-h = height,
mu: void secl-leightunt h)( m height = height
m_haight = ht; ) _\, ,/
) 1
public int. gchidﬂ'HH
"mm m_\d.df.h:
)
public mt gecﬂuighqn
tuturn nihaighc;
)
11c inf. qammu
urn anidth * m_hai.ght;
w

***************Ending Page***************

***************Beginning Page***************
***************page number:18**************
121.55 LSPTGSC
$rivate mm Rectlnqle qeﬂle-Rectlnqlel)
// it can be an abject I:tu!l\ed by 5m factory ~ v .
) mm new squmo;
public sum; Wm “in (String Ryan)
¢
“can” , : Llp'l'eat.qeﬂlevlectlnqla(l:
z,55tWidth(5)F
nautﬂeithllﬂ];
// use! m" a,“ x it's a motlnqle‘ u assumes a.» he’: able w m m mm,
.nd huqm as £0! m base c1115
SyltulLOuLPIix-Atlnkvqetlml()Iv‘
, // no' he’: surprised w m mt the m- is mo mm“: of so
>
‘ ‘a

***************Ending Page***************

***************Beginning Page***************
***************page number:19**************
SOLID — Interface Segregation
> You want me to plug this in. Where?
"\f
ff} Ed
_ _ > _ ‘ Interface Segrégztien Principle
t EAT
IN'I'L'IUQACE SEGREGA'IIUN PRlNCLIili J -
WWWmmm We, MIME“ DRINK ‘9

***************Ending Page***************

***************Beginning Page***************
***************page number:20**************
SOLID — ISP — Def|n|t|ons
> “The Interface Segregation Principle states that
Clients should not be forced to depend on methods
they do not use." — Agile Principles, Patterns, and
Practices in C#
> Prefer small, cohesive interfaces — Interface is the
interface type + All public members of a class
> Divide "fat" interfaces into smaller ones
v “fat” interfaces means classes with useless methods,
increased coupling. reduced flexibility and maintainability
_ , -I- "’\
' t
‘ ' ‘ m

***************Ending Page***************

***************Beginning Page***************
***************page number:21**************
SOLID — ISP — Problems & Solutlons
> Classic violations
w Unimplemented methods (also in LSP)
c Use of only small portion of a class
> When to fix?
v Once there is pain! Do not fix, if is not broken!
w If the "fat" interface is yours, separate it to smaller ones
c If the "fat" interface is not yours, use "Adapter" pattern
> Solutions
c Small interfaces
w Cohesive interfaces
c Focused interfaces
c Let the client define interfaces
v Package interfaces with their implementation
‘ 1i

***************Ending Page***************

***************Beginning Page***************
***************page number:22**************
um aximpll (pollutad incaxfaca) //Solucionz split into “a 1nbaxiacas
intarfnca Work-r 4 1ntarficl Iorkablu 4
‘mi ‘m _ public Wm “rm;
a k4). ,
void qatl);
) int-:Eaca Inqdablul
public Wm um:
y
mung“ impllnmnts um" 4
Wm Wm) 4 y:
void “to 410 min mm):
)
Bohntﬂnrkar awn-Mn“ Wuxksr 4
Wm Wm) 4 y:
m qatl) 4/1ch Appliciahl.
or i Babotﬂorkux):
22

***************Ending Page***************

***************Beginning Page***************
***************page number:23**************
SOLID — Dependency Inversion
> Would you solder a lamp directly to the
electrical wiring in a wall?
E I” A
Dependency Inversion Principle

***************Ending Page***************

***************Beginning Page***************
***************page number:24**************
SOLID — DIP — Definitions

> “High-level modules should not depend on
low-level modules. Both should depend on
abstractions."

> “Abstractions should not depend on details.
Details should depend on abstractions." —
Agile Principles, Patterns, and Practices in C#

***************Ending Page***************

***************Beginning Page***************
***************page number:25**************
SOLID - DIP - Dependency
> Framework > The new Keyword
> Third Party Libraries > Static methods
> Database > Thread.Sleep
> File System > Random
> Email
> Web Services
> System Resources
(Clock)
> Configuration

***************Ending Page***************

***************Beginning Page***************
***************page number:26**************
SOLID — DIP — Problems & Solutlons
> How it should be
w Classes should declare what they need
c Constructors should require dependencies
c Dependencies should be abstractions and be shown
> How to do it
w Dependency Injection
c The Hollywood principle "Don‘t call us, we'll call you!"
> Classic violations
c Using of the new keyword, static methods/properties
> How to fix?
c Default constructor. main method/starting point
c Inversion of Control container
‘ m

***************Ending Page***************

***************Beginning Page***************
***************page number:27**************
I/DIP - had example
public clan EmployceServlcel
private EmployeeFlllder emFlncler/lmcrele class. not abstract can access a sol. ma for luclcuce
public Employee lindEmployeeI..,)(
emFinder.ﬁlldEmployez(. ~l
)
)
I/DIP - ﬁxed
public class EmployeeService(
private IEmployeeFinder emFilldel lluepemle on an abmaction, no a" implementation
public Employee llndEmployeel...)(
emFlndel.ﬂlldEmployee(. ..l
)
)
' possible to :hange the linder lc he a XmlEmployeeFilldel, DBEmployeeFimler, FlalFileEmployeeFinder,
27

***************Ending Page***************


***************Beginning Page***************
***************page number:28**************
Other Principles

> Don't Repeat Yourself (DRY)

> You Ain't Gonna Need It (YAGNI)

> Keep It Simple, Stupid (KISS)
‘ 2,

***************Ending Page***************

***************Beginning Page***************
***************page number:29**************
I
OP — Don t Repeat Yourself
Repetition is the root of all software evil

1 will “or “gm Myself
iwill Mi- “,mi- WM
iwill Mr repeal‘ myself‘
1 will “0+ (‘pm myself‘
Iwill “0+ (Wai- myself‘
1 will no?‘ repeal“ myself
1 will Mr repeal‘ myself’
Iwill “0+ “wil- mew
iwill A01‘ rtpeaT myself‘

DON‘T REPEAT YOURSELF

\\ 19

***************Ending Page***************

***************Beginning Page***************
***************page number:30**************
OP — DRY — Definitions

> "Every piece of knowledge must have a single,
unambiguous representation in the system.“
— The Pragmatic Programmer

> "Repetition in logic calls for abstraction.
Repetition in process calls for automation.“ —
97 Things Every Programmer Should Know

> Variations include:
~ Once and Only Once
a Duplication ls Evil (DIE)

***************Ending Page***************

***************Beginning Page***************
***************page number:31**************
OP - DRY — Problems

> Magic Strings/Values

> Duplicate logic in multiple locations

> Repeated if-then logic

> Conditionals instead of polymorphism

> Repeated Execution Patterns

> Lots of duplicate, probably copy-pasted, code
> Only manual tests

> Static methods everywhere

***************Ending Page***************

***************Beginning Page***************
***************page number:32**************
OP — You Ain't Gonna Need It
Don't waste resources on What you might need
F ,
J‘ ” '
\‘nuxmﬂ (,lu\\\\ \Hmll

***************Ending Page***************

***************Beginning Page***************
***************page number:33**************
OP — YAGNI — Definitions

> "A programmer should not add functionality
until deemed necessary.“ — Wikipedia

> "Always implement things when you actually
need them, never when you just foresee that
you need them.“ — Ron Jeffries, XP co-founder

***************Ending Page***************

***************Beginning Page***************
***************page number:34**************
OP — YAGNI — Problems

> Time for adding, testing, improving

> Debugging, documented, supported

> Difficult for requirements

> Larger and complicate software

> May lead to adding even more features
> May be not know to clients

***************Ending Page***************

***************Beginning Page***************
***************page number:35**************
OP — Keep It Simple, Stupid
You don't need to know the entire universe
when livin- on the Earth

' i , ~ e
, w , --
§ K-EEPVIT SIMPLEIS'TUﬁD

***************Ending Page***************

***************Beginning Page***************
***************page number:36**************
OP — KISS — Definitions

> "Most systems work best if they are kept
simple.“ — U.S. Navy

> "Simplicity should be a key goal in design and
unnecessary complexity should be avoided.“
— Wikipedia

***************Ending Page***************

***************Beginning Page***************
***************page number:37**************
G RASP

> GRASP = General Responsibility Assignment
Software Patterns (Principles)

> Descrise de Craig Larman in cartea Applying
UML and Patterns. An Introduction to Object
Oriented Analysis and Design — 2004

> Ne ajuté sé alocim responsabilititi claselor si
obiectelor Tn cel mai elegant mod posibil

> Exemple de principii folosite in GRASP:
Information Expert (sau Expert), Creator, High
Cohesion, Low Coup/ig, Control/er

olymorphism, Pure Fabrication, lndirection,

***************Ending Page***************

***************Beginning Page***************
***************page number:38**************
Ce responsabllltap?
> Si faci:
a Si faci ceva el insu§i, precum crearea unui obiect
sau si facé un calcul
n lniﬂalizarea unei aqiuni in alte obiecte
a Controlarea 5i coordonarea activitiﬁlor altor obiecte
> Si cunoascé:
a Atributele private
Q Obiectele proprii
Q Lucrurile pe care le poate face sau le poate apela
‘ K‘

***************Ending Page***************

***************Beginning Page***************
***************page number:39**************
Pattern

> Traducere: §ab|on, model

> Este o solutie generalé la o problemé comuné

> Fiecare pattern are un nume sugestiv $i u$or de
retinut (ex. composite, observer, iterator,
singleton, etc.)

***************Ending Page***************

***************Beginning Page***************
***************page number:40**************
Information Expert 1

> Problemi: dat un anumit comportament
(operagie), cérei clase trebuie si-i fie atribuit?

> O alocare buné a operagiilor conduce la sisteme
care sunt:
Q Usor de inﬁeles
Q Mai u$or de extins
Q Refolosibile
Q Mai robuste

***************Ending Page***************

***************Beginning Page***************
***************page number:41**************
Information Expert 2

> Soluyie:

> asignez o responsabilitate clasei care are
informafii/e necesare pentru indeplinirea acelei
responsabilitégi

> Recomandare:

> incepeti asignarea responsabilitéyilor evidenﬂind
clar care sunt responsabilitégile

***************Ending Page***************


***************Beginning Page***************
***************page number:42**************
Exemplul 1
> Carei clase trebuie sa-i fie asignaté metoda
getTotalO? Mai trebuie alte metode?
mm
_
\
Comains
1.“
P"oductSpeciﬁcan'1
SalesLlneltem ‘ Described by 1
idescrlption
l — *PHCQ
—

***************Ending Page***************

***************Beginning Page***************
***************page number:43**************
Exe m pl u | 2
l:= gelTota\() _
l .Sake
‘3: gelTotaH) W’: si :: getSubioiaK)
_> Law x w
(I: gelTotaH) . 1': st I: getSubtmaK)
I .Sa\e ‘ :SalesLmellem
‘ W.1:p:=gelP"\ce()
:ProductSpecmcahon
— 1

***************Ending Page***************

***************Beginning Page***************
***************page number:44**************
Solugie posibilﬁ 1
Clasé Responsabllltaﬂ
Sale 55 cunoasci valoarea totali a cumpirilurilor
SalesLineltem 55 cunoasci subtotalul penrru un produs
ProductSpecification 55 cunoascé preyul produsului
Sale
*date
*Ume
_
1
Contains
P'oduclSpeciﬂcaﬂoq
SalesLlneltem . Described by 1
'desmpmn
*pme
*itemld
u

***************Ending Page***************

***************Beginning Page***************
***************page number:45**************
SO|LI§IE p05|b||a 2
—date
*tlme

w

Comams
ProductSpecification
Sa\esL|ne|tem ‘ Descnbedby 1 .

*prioe

***************Ending Page***************

***************Beginning Page***************
***************page number:46**************
Creator i
> Problemi: cine trebie 55 fie responsabil cu
crearea unei instange a unei clase?
> Solurie: Asignayi clasei B responsabilitatea de a
crea instange ale clasei A doar dacé cel putyin una
dintre urmétoarele afirmayii este adeviraté:
a B agrega' abiecre de tip A
a B conﬁne obiecre de tip A
~ B fo/ose5te obiecte de tip A
~ B are dare/e de inifia/izare care trebuie transmise la
instangierea unui obiect de tip A (B este deci un Expert
in ceea ce prive$te crearea obiectelor de tip A)
nripmtern este 0 varianté mai complexé
is

***************Ending Page***************

***************Beginning Page***************
***************page number:47**************
Creator 2
> Cine este responsabil cu crearea unei instange
a clasei SalesLineltem?
idate
inlme
_
1
Contains
1h‘
Sa\esL\neltem ~ Described by ‘ P"oductSpe<:|f\ca1|0'w
idescrlpilon
— *prlte
l
—

***************Ending Page***************

***************Beginning Page***************
***************page number:48**************
> Deoarece Sale con;ine(agreg€1)instan§e de tip
SalesLineltem, Sale este un bun candidat pentru a i
se atribui responsabilitatea creirii acestor instange
m E
l
l
addLmeliemﬂlemType quanmy)
cleateUiemType quanmy]
Sa\esLine\(em
I
l I
| I
I
| ' I
l |
—

***************Ending Page***************

***************Beginning Page***************
***************page number:49**************
Low coupllng (cuplaj redus)

> Cuplajul este 0 misuré a gradului de
dependenyé a unei clase de alte clase

> Tipuri de Dependengéz
~ este conectaté cu
~ are cuno$tin§e despre
~ se bazeazé pe

> 0 clasé care are cuplaj mic (redus) nu depinde
de "multe" alte clase; unde "multe" este
dependent de contex

> O clasi care are cuplaj mare depinde de multe

I alte clase

***************Ending Page***************

***************Beginning Page***************
***************page number:50**************
Cuplaj 2

> Probleme cauzate de cuplaj:
D schimbéri Tn clasele relagionate forgeazé
schimbéri locale
D clase greu de inteles Tn izolare (scoase din
context)
U clase greu de refolosit deoarece folosirea lor
presupune 5i prezen§a claselor de care

I depind

***************Ending Page***************

***************Beginning Page***************
***************page number:51**************
Cuplaj 3

> Forme comune de cuplaj de Ia clasa Ala
clasa B sunt:
D A are un atribut cle tip B
D O instanyi a clasei A apeleazi un serviciu
oferit de un obiect de tip B
D A are o metodé care referengiazé B
(parametru, obiect local, obiect returnat)
D A este subclasé (direct sau indirect) a lui B
D B este o interfagé, iar A implementeazi

I aceasté interfagi

***************Ending Page***************

***************Beginning Page***************
***************page number:52**************
Legea lui Demeter
> Don ’t talk t0 strangers
>Orice metodé a unui obiect trebuie sé
apeleze doar metode aparginénd
w lui Tnsu$i
w oricirui parametru al metodei
D oricirui obiect pe care |—a creat
D oriciror obiecte pe care le congine

***************Ending Page***************

***************Beginning Page***************
***************page number:53**************
Vizualizarea Cuplajelor
> Diagrama de clase
> Diagrama de colaborare

***************Ending Page***************

***************Beginning Page***************
***************page number:54**************
Exemplul 1
> Exista legituri Tntre toate clasele
> Eliminé cuplajul dintre Register $i Payment
iicreaieo
makePaymentO _>
2 addPayrrvenx(p) -
:Sale
(a)
makePaymemO I'makepaymenlo
I Regster _> *Sale
§ \ ‘:cremeﬂ

***************Ending Page***************


***************Beginning Page***************
***************page number:55**************
ngh Cohesmn

> Coeziunea este o misuré a cét de puternic sunt
focalizate responsabilitigile unei clase

> O clasi ale cirei responsabilitéyi sunt foarte
stréns legate $i care nu face foarte multe lucruri
are o coeziune mare

> O clasi care face multe lucruri care nu sunt
relayionate sau face prea multe lucruri are o
coeziune micé (slabé)

***************Ending Page***************

***************Beginning Page***************
***************page number:56**************
Coeziune
> Probleme cauzate de 0 slabé coeziune:
D greu de Tnt,eles
D greu de refolosit
D greu de mentinut
w delicate; astfel de clase sunt mereu supuse la
schimbéri

***************Ending Page***************

***************Beginning Page***************
***************page number:57**************
Coeziune $i Cuplaj

> Sunt principii vechi in design-ul software

> Promoveazé un design modular

> Modularitatea este proprietatea unui sistem care
a fost descompus Tntr-o mulgime de module
coezive 5i slab cuplate

***************Ending Page***************

***************Beginning Page***************
***************page number:58**************
Controller l

> Problemi: Cine este responsabil cu tratarea unui
eveniment generat de un actor?

> Aceste evenimente sunt asociate cu operayii ale
sistemului

> Un Controller este un obiect care nu tine de
interfaga graficé §i care este responsabil cu
recepyionarea sau gestionarea unui eveniment

> Un Controller define$te o metodé

,3

***************Ending Page***************

***************Beginning Page***************
***************page number:59**************
Controller 2

> Solurie: asigneazi responsabilitatea pentru
recepgionarea sau gestionarea unui eveniment
unei clase care reprezinti una dintre
urmitoarele alegeri:
Q Reprezinté Tntregul sistem sau subsistem (fagadé
controller)
u Reprezinté un scenariu de utilizare Tn care apare
evenimentul;

‘ *9

***************Ending Page***************

***************Beginning Page***************
***************page number:60**************
Controller 3

> ln mod normal, un controller ar trebui Si delege
altor obiecte munca care trebuie ficuté;

> Controller-ul coordoneazi sau controleazi
activitatea, Tnsi nu face prea multe lucruri el
insu$i

> O gre$ea|5 comuné in design-ul unui controller
este 55 i se atribuie prea multe responsabilitéti
(fatade controller)

‘ w

***************Ending Page***************

***************Beginning Page***************
***************page number:61**************
Concluzii
> SOLID
> DRY, YAGNI, KISS
> GRASP
‘ 6'

***************Ending Page***************

***************Beginning Page***************
***************page number:62**************
lntrebari

> i) Argumentayi pentru folosirea SOLID.

> 2) Argumentagi pentru folosirea diagramelor.

> 3) Venityi cu argumente pentru a nu folosi diagrame
sau SOLID.

> 4) Cum putgm folosi informayiile Iegage de coezjune
5i cuplaj? Cand evaluam un proiect. Cand evaluam
un membru al echipei.

> Criticism:

ii:iisourcemakinfxom[design_patterns

***************Ending Page***************

***************Beginning Page***************
***************page number:63**************
Blbllografle

> Erich Gamma, Richard Helm, Ralph Johnson, and
John Vlissides: Design Patterns: Elements of
Reusable Object-Oriented Software
(GangOfFour)

> Ovidiu Gheorghie§, Curs 7 lP

> Adrian lftene, Curs 9 TAIP:
httg:Z[thor.info.uaic.ro[~adiftene[ScoalaZZOl1Z
TAIPZCoursesZTAIPO9.Qdf

***************Ending Page***************

***************Beginning Page***************
***************page number:64**************
Bibliografie

> Craig Larman. Applying UML and Patterns. An
Intraduction to Object Oriented Analysis and
Design

> Ovidiu Gheorghie$, Curs 6 lP

***************Ending Page***************

***************Beginning Page***************
***************page number:65**************
Llnks (I)
v WebProjectManager: httg:ZZprofs.info.uaic.ro[~adrianaalumlZ
> Diagrame de Stare 5i de Activitate:
http:ZZsoftware.ucv.roZ~soimu anca[itmeDiagrame%20de%20
Stare%205i%20Activitate.doc
> Deployment Diagram:
httg:Z[en.wikigedia.org[wikiZDeployment diagram
http:Z[www.agilemodeling.com[artifacts[degloymentDiagram
m1
> GRASP:
httg:Z[en.wikigedia.org[wikiZGRASP (Ob'ect Oriented Design!
> http:1[web.cs.wgi.edu[~ggollice[64233-
aOS[CourseNotes[maps[class4[GRASPpatternshtml
duction to GRASP Patterns:
hinverhillsedu[dlevittZCS%202000%201FP)ZGRASP
55

***************Ending Page***************

***************Beginning Page***************
***************page number:66**************
Links (2)
> GangiofiFour: http:i[c2.com[cgi[wiki7GangOfFour,
httg:1[www.uml.org.cn[c9628%2BipdfiDesignPatternspdf
> Design Patterns Book: httg:l[c2.com[cgi[wiki?DesignPatternsBook
> About Design Patterns: httg:Z[www.‘avacampnrg[designPatternZ
> Design Patterns *Java companion:
httg:l[www.gatterndegomom[QutiBi avaPatternshtm
> Java Design patterns:
httg:[[www.allagplabs.com[ava design gatternsl'ava design garter
ns.htm
> Overview of Design Patterns:
httg:l[www.mindsgringLOm[~mgrand1gattern synogseshtm
> Gang of Four: httg:[[en.wikigedia.org[wiki[Gang of four
> JUnit in Eclipse: httg:l[www.vogella.de[articles[ Unitiarticlehtml
' ' NetBeans: httg:[[netbeansnrg[kbldocs[avai'unitiintrohtml
55

***************Ending Page***************

***************Beginning Page***************
***************page number:67**************
Links (3)

> httgs:Z[scotchiolbar-ta|k[s—o—|—i—d—the—
first-five-principles-of-ob'ect-oriented-
design

> httgs:[[www.slidesharemetlenbohm[solid-
design-principles-QOIGI17

> httgsrl[sideriteblogspotcom[2017Z02Zsolid
—principles-plus-dry-yagni-kiss-fina|.htm|

> httgs:Z[thefu||stack.xyz[dry-yagni-kiss-tdd-
soc-bdfu

***************Ending Page***************

