***************Beginning Page***************
***************page number:1**************
lngmerla Pragramarii
Cursul 5 — 21,22 Martie 2023
adiftene@info.uaic.ro

***************Ending Page***************

***************Beginning Page***************
***************page number:2**************
Cu prins
> Din Cursurile trecute...
> SOLID and Other Principles
> GRASP
<> Low coupling
<> High cohesion

***************Ending Page***************


***************Beginning Page***************
***************page number:3**************
> De ce avem nevoie de modelare?

> Cum putem modela un proiect?

> SCRUM — roles, values, artifacts, events, rules
x 3

***************Ending Page***************

***************Beginning Page***************
***************page number:4**************
SOLII and 0ther Principles
> SOLID Principles
O SRP — Single Responsibility Principle
O OCP — Open/Closed Principle I: S.0.L.I.D.
O LSP — Liskov Substitution Principle Mal/J .
O ISP — Interface Segregation Principle ‘if
O DIP — Dependency Inversion Principle
> DRY — Don't Repeat Yourself
> YAGNI — You Aren't Gonna Need It
> KISS — Keep It Simple, Stupid

***************Ending Page***************


***************Beginning Page***************
***************page number:5**************
SOLI
> SOLID was introduced by Robert C. Martin in the an
article called the “Principles of Object Oriented
Design" in the early 20005
Single responsibility
principle
D Open/closed principle
D Liskov substitution principle
Interface segregation
principle
Dependency inversion
principle 5

***************Ending Page***************

***************Beginning Page***************
***************page number:6**************
SOLID — SRP — leflnltlons

> “The Single Responsibility Principle states that every
object should have a single responsibility, and that
responsibility should be entirely encapsulated by the
class." — Wikipedia

> “There should never be more than one reason for a
class to change." — Robert Martin

> Low coupling & strong cohesion

***************Ending Page***************


***************Beginning Page***************
***************page number:7**************
SQLII — SRP — Problems 81 Solutlons
> Classic violations

O Objects that can print/draw themselves

O Objects that can save/restore themselves
> Classic solution

O Separate printer & Separate saver
> Solution

O Multiple small interfaces (ISP)

O Many small classes

O Distinct responsibilities
> Result

O Flexible design

O Lower coupling & Higher cohesion

***************Ending Page***************

***************Beginning Page***************
***************page number:8**************
> Two responsabilities
interface Modem
public voio dial(String pno),
public void angup();
public voio send(char c);
public char recv();
}
> Separated interfaces
interface DataChannel { interface Connection {
public void send(char c); public void dial(String phn);
public char recv(); public char hangup();
} }
g 8

***************Ending Page***************


***************Beginning Page***************
***************page number:9**************
SQLII — Open/Closed PrlnCIple
Open chest surgery i5 not needed When putting 0n a
coat
Bertrand Meyer originated the OCP term in his 1988
book, Object Oriented Software Construct/0n
‘ . Ti . .' __I ‘Ti / a’

t CLOSED PRINCIPLE T '*>.1."11:‘..‘?i“‘ii--‘LFH'i
his?’ Open Chest Surgery Is Not Needed'then Putting On A Coat 9

***************Ending Page***************

***************Beginning Page***************
***************page number:10**************
SQLII — QCP — leflnltlons

> “The 0pen / Closed Principle states that software
entities (classes, modules, functions, etc.) should be
open for extension, but closed for modification.” —
Wikipedia

> “All systems change during their life cycles. This must
be borne in mind when developing systems expected
to last longer than the first version." — lvarJacobson

> Open to Extension — New behavior can be added in the
future

> Closed to Modification — Changes to source or binary
code are not required

***************Ending Page***************


***************Beginning Page***************
***************page number:11**************
SQLII — OCP — How?
> Change behavior without changing code?!
O Rely on abstractions, not implementations
O Do not limit the variety of implementations
> In .NET — Interfaces, Abstract Classes
> In procedural code — Use parameters
> Approaches to achieve OCP
O Parameters — Pass delegates / callbacks
O Inheritance / Template Method pattern — Child types
override behavior of a base class
O Composition / Strategy pattern — Client code depends on
abstraction, "Plug in" model

***************Ending Page***************

***************Beginning Page***************
***************page number:12**************
SOLID — OCP — Problems 81 Solutions
> Classic violations
O Each change requires re-testing (possible bugs)
O Cascading changes through modules
O Logic depends on conditional statements
> Classic solution
O New classes (nothing depends on them yet)
O New classes (no legacy coupling)
> When to apply OCP?
O Experience tell you
> OCP add complexity to design (TANSTAAFL)
.I No design can be closed against all changes

***************Ending Page***************


***************Beginning Page***************
***************page number:13**************
// Open-Close Principle — Bad example // Open-Close Principle _ Good
class GraphicEditor { example

public void drawShape(Shape s) { class GraphicEditor {

if (s.m type==1) public void drawShape(Shape s) {

drawRectangle(s); s.draw();
else if (s.m_type==2) }}
drawCircle(s);

} class Shape {

public void drawCircle(Circle r) abstract void draw();
{....} }

public void drawRectangle(Rectangle r)
{....} class Rectangle extends Shape {
} public void draw() {

// draw the rectangle

class Shape { }

int m_type; }
}
class Rectangle extends Shape {

Rectangle() {super.m_type=1;}

ends Shape {
w

***************Ending Page***************

***************Beginning Page***************
***************page number:14**************
SQLII — Llskov Substltutlon
> If it looks like a duck, quacks like a duck, but
needs batteries — you probably have the wrong
abstraction
> Barbara Liskov described the principle in i988
I ‘I? ‘ I ‘I _
LISKQV SUB STITUTION PRINCIPLE |_i 5 kov Su bstitutio |1 it
Probably HaveTheWrongAbstraction Principle

***************Ending Page***************


***************Beginning Page***************
***************page number:15**************
SOLII — LSP — leflnltlons
> "The Liskov Substitution Principle states that
Subtypes must be substitutable for their base
types.“ — Agile Principles, Patterns, ancl Practices
in C#
> Substitutability — child classes must not
<> Remove base class behavior ‘9 A
<> Violate base class invariants l i <\
> Normal OOP inheritance Q \ #5
<> |S—A relationship Y l v ‘
> Liskov Substitution inheritance 1;‘)? _, )4 a

***************Ending Page***************

***************Beginning Page***************
***************page number:16**************
SQLII — LSP — Problems 81 Solutions
> The problem
O Polymorphism break Client code expectations
O "Fixing" by adding if-then — nightmare (OCP)
> Classic violations
O Type checking for different methods
O Not implemented overridden methods
O Virtual methods in constructor
> Solutions
O “Tell, Don’t Ask" — Don’t ask for types and Tell the
object What to do
O Refactoring to base class- Common functionality and
Introduce third class

***************Ending Page***************


***************Beginning Page***************
***************page number:17**************
// Violation of Liskov's Substitution Principle
class Rectangle{ class Square extends Rectangle {
lint m_w1dth; public VQ' o - I = _ I int Width) {
int m;height; _width = width;
_ _ _ _ _ m height = width;
public void setW1dth(int w1dth){ } -
m;width = width;
} public voi- -- - ~nt(int height){
_width = height,
public void setHeight(int h){ m height = height
m;height = ht; } —
} }
public int getWidth(){
return m_width;
}
public int getHeight(){
return m_height;
}
ublic int getArea(){
urn m_width * m;height;
17

***************Ending Page***************

***************Beginning Page***************
***************page number:18**************
class LspTest
{
private static Rectangle getNewRectangle()
{
// it can be an object returned by some factory ...
return new Square();
}
public static void main (String args[])
{
Rectangle r = LspTest.getNewRectangle();
r.setWidth(5);
r.setHeight(10);
// user knows that r it's a rectangle. It assumes that he's able to set the width
and height as for the base class
System.out.println(r.getArea());
// now he's surprised to see that the area is 100 instead of 50.
}
}
|||IIIIIllllIiiiiiiiiiii:::!!!llll___ 18

***************Ending Page***************


***************Beginning Page***************
***************page number:19**************
SOLI — lnte rface Seg regatlan
> You want me to plug this in. Where?
‘ a“ \1
‘ ; y» _r1ﬁ$Y-‘i&f
- __ _ a ._ ; .nterfacSegégaﬁon Priaiple
" ‘ \‘7 If lRequireFood, | want to Eat(Food food) not,
> /1(7..£g 3? "¥f‘:1:‘ LightCandelabraOorLayoutCutlery(Cut|eryLayoutpreferredLayout)
4" < ) EAT
)3)
IN TERFACE SEGREGATION PRINCIPLE J,
You Want Me To Plug This In. Where? ' ,7
DRINK + EAT DRINK 19

***************Ending Page***************

***************Beginning Page***************
***************page number:20**************
SOLII — ISP — leflnltlons

> “The Interface Segregation Principle states that
Clients should not be forced to depend on methods
they do not use.” — Agile Principles, Patterns, and
Practices in C#

> Prefer small, cohesive interfaces — Interface is the
interface type + All public members of a class

> Divide "fat" interfaces into smaller ones
O “fat” interfaces means classes with useless methods,

increased coupling, reduced flexibility and maintainability
g ‘I’. ‘

***************Ending Page***************


***************Beginning Page***************
***************page number:21**************
SOLID — ISP — Problems 81 Solutlons
> Classic violations
O Unimplemented methods (also in LSP)
O Use of only small portion of a class
> When to fix?
O Once there is pain! Do not fix, if is not broken!
O If the "fat" interface is yours, separate it to smaller ones
O If the "fat" interface is not yours, use "Adapter" pattern
> Solutions
O Small interfaces
O Cohesive interfaces
O Focused interfaces
O Let the client define interfaces
O Package interfaces with their implementation
x 2‘

***************Ending Page***************

***************Beginning Page***************
***************page number:22**************
//Bad example (polluted interface) //Solution: split into two interfaces
interface Worker { interface Workable {
void work(); } public void work();
void eat();
} interface Feedable{
public void eat();
}
ManWorker implements Worker {
void work() {m};
void eat() {30 min break;};
}
RobotWorker implements Worker {
void work() {m};
oid eat() {//Not Appliciable
or a RobotWorker};
22

***************Ending Page***************


***************Beginning Page***************
***************page number:23**************
SOLII — Iependency Inversion
> Would you solder a lamp directly to the
electrical Wiring in a wall?
n_ - i! \ Q /
c; ~~ — \  g
Dependency Inversion Principle 5
“$12Zﬁaiﬁileiﬁi'ﬁgﬁiliéi'? P°"d°es""de“"ede"“e

***************Ending Page***************

***************Beginning Page***************
***************page number:24**************
SQLII — IlP — Iefinitions

> “High-level modules should not depend on
low-level modules. Both should depend on
abstractions.”

> “Abstractions should not depend on details.
Details should depend on abstractions.” —
Agile Principles, Patterns, and Practices in C#

***************Ending Page***************


***************Beginning Page***************
***************page number:25**************
SQLII - IlP — Iependency
> Framework > The new Keyword
> Third Party Libraries > Static methods
> Database > Thread.S|eep
> File System > Random
> Email
> Web Services
> System Resources
(Clock)
> Configuration

***************Ending Page***************

***************Beginning Page***************
***************page number:26**************
SOLID — IIP — Problems 81 Solutlons
> How it should be
O Classes should declare what they need
O Constructors should require dependencies
O Dependencies should be abstractions and be shown
> How to do it
O Dependency Injection
O The Hollywood principle "Don't call us, we'll call you!"
> Classic violations
O Using of the new keyword, static methods/properties
> How to fix?
O Default constructor, main method/starting point
O Inversion of Control container
x 26

***************Ending Page***************


***************Beginning Page***************
***************page number:27**************
I/DlP - bad example
public class EmployeeService {
private EmployeeFinder emFinder llconcrete class, not abstract. Can access a SQL DB for instance
public Employee findEmployee(...){
emFinder.findEmployee(...)
}
}
l/DlP - fixed
public class EmployeeService {
private lEmployeeFinder emFinder l/depends on an abstraction, no an implementation
public Employee findEmployee(...){
emFinder.findEmployee(...)
}
}
'ts possible to change the finder to be a XmlEmployeeFinder, DBEmployeeFinder, FlatFileEmployeeFinder,
' er....
27

***************Ending Page***************

***************Beginning Page***************
***************page number:28**************
Other Principles

> Don't Repeat Yourself (DRY)

> You Ain't Gonna Need It (YAGNI)

> Keep It Simple, Stupid (KISS)
g 28

***************Ending Page***************


***************Beginning Page***************
***************page number:29**************
‘ I
0P — on t Repeat You rself
Repetition is the root of all software evil

I wi“ not‘ repeat‘ m'yseiF
I wt“ not‘ repeat‘ mysehc
I wi“ not repeat‘ myset?
1 wt“ not‘ repeat‘ Mysetf~
1 vol“ not repeat myseitr
I wiii not‘ repeat‘ mysdf~
1 wiit not‘ repeat myseiF
I wiii not‘ repeat‘ myset?
I wiit not repeat mysdf~

DON'T REPEAT YOURSELF

‘ Repetition is the root of all software evil

***************Ending Page***************

***************Beginning Page***************
***************page number:30**************
OP — IRY — Definitions

> "Every piece of knowledge must have a single,
unambiguous representation in the system.“
— The Pragmatic Programmer

> "Repetition in logic calls for abstraction.
Repetition in process calls for automation.“ —
97 Things Every Programmer Should Know

> Variations include:
O Once and Only Once
O Duplication ls Evil (DIE)

***************Ending Page***************


***************Beginning Page***************
***************page number:31**************
GP — IRY — Problems

> Magic Strings/Values

> Duplicate logic in multiple locations

> Repeated if-then logic

> Conditionals instead of polymorphism

> Repeated Execution Patterns

> Lots of duplicate, probably copy-pasted, code
> Only manual tests

> Static methods everywhere

***************Ending Page***************

***************Beginning Page***************
***************page number:32**************
- i
GP — You Amt Gonna Need It
Don’t waste resources on What you might need
I‘ ,
f n 4
d
~.  , g”): f’ "-3 _

***************Ending Page***************


***************Beginning Page***************
***************page number:33**************
OP — YAGNI — Definitions

> "A programmer should not add functionality
until deemed necessary.“ — Wikipedia

> "Always implement things when you actually
need them, never when you just foresee that
you need them.“ — Ron Jeffries, XP co-founder

***************Ending Page***************

***************Beginning Page***************
***************page number:34**************
OP — YAGNI — Problems

> Time for adding, testing, improving

> Debugging, documented, supported

> Difficult for requirements

> Larger and complicate software

> May lead to adding even more features
> May be not know to clients

***************Ending Page***************


***************Beginning Page***************
***************page number:35**************
I I
>-__o_’., ~v,\/.-\---_“._v" ._> ' 7- .‘ .~.-.-‘-A_~-.‘.7 -,-'."-"""“- ‘My 4 ;.- '~“_ __'_-..,-’
I .. --».' --, ‘1 ,- .l I ‘ _-.-,' _» '._.; .‘- '0". '-' -- '- -.‘~.'- U v“ ‘,5‘.'-- *_.' "I.
If u I 1- i _ .
' '- ' -. -,-_‘-, ." .'-"_-, .1, _- ~'- >. '. . '-‘7_.‘-' .-r‘z71 e..--_ :~_.-.»,,~ ,‘ ,- 1-. ~ -'_ .~.‘---. ‘1'2.’
-- -- n~',‘ - - .~"- I - ,. p-~.-,. q, ~- I a w; -' ‘.----".
ALF m.‘ ?-‘. 1.“ ‘j._ ")xihc'l'nl': {$5.13 2-1" -=~;§,' ._ j ,
'\_\.
You don t need to know the entlre unlverse when llvmg on the Earth
‘\‘u

***************Ending Page***************

***************Beginning Page***************
***************page number:36**************
OP — KISS — Definitions

> "Most systems work best if they are kept
simple.“ — U.S. Navy

> "Simplicity should be a key goal in design and
unnecessary complexity should be avoided.“
— Wikipedia

***************Ending Page***************


***************Beginning Page***************
***************page number:37**************
GRASP

> GRASP I General Responsibility Assignment
Software Patterns (Principles)

> Descrise de Craig Larman in cartea Applying
UML and Patterns. An Introduction to Object
Oriented Analysis and Design — 2004

> Ne ajuta sa alocam responsabilitati claselor si
obiectelor in cel mai elegant mod posibil

> Exemple de principii folosite in GRASP:
information Expert(sau Expert), Creator, High
Cohesion, LoW Coup/ig, Control/er

olymorphism, Pure Fabrication, lndirection,

***************Ending Page***************

***************Beginning Page***************
***************page number:38**************
Ce responsabllltap?
> Sé facé:
O Séi facéi ceva el Tnsu§i, precum crearea unui obiect
sau sé facéi un calcul
O Initializarea unei acgiuni Tn alte obiecte
O Controlarea §i coordonarea activitéigilor altor obiecte
> Sé cunoascé:
O Atributele private
O Obiectele proprii
O Lucrurile pe care Ie poate face sau Ie poate apela
x 38

***************Ending Page***************


***************Beginning Page***************
***************page number:39**************
Pattern

> Traclucere: sablon, model

> Este o solutie generaléi Ia o probleméi comuné

> Fiecare pattern are un nume sugestiv si usor de
retinut (ex. composite, observer, iterator,
singleton, etc.)

***************Ending Page***************

***************Beginning Page***************
***************page number:40**************
Informatlon Expert 1

> Problemﬁ: dat un anumit comportament
(operagie), cérei clase trebuie si-i fie atribuit?

> O alocare buné a operagiilor conduce Ia sisteme
care sunt:
O U§0r de Tngeles
O Mai u§0r de extins
O Refolosibile
O Mai robuste

***************Ending Page***************


***************Beginning Page***************
***************page number:41**************
Informatlon Expert 2

> SOIUEiEI

> asignez 0 responsabilitate clasei care are
informap'i/e necesare pentru Tndeplinirea acelei
responsabilitégi

> Recomandare:

> Tncepegi asignarea responsabilitégilor evidengiind
clar care sunt responsabilitégile

***************Ending Page***************

***************Beginning Page***************
***************page number:42**************
Exemplul 1
> Carei clase trebuie sa-i fie asignaté metoda
getTota|()? Mai trebuie alte metode?
-date
—time
_
1
Contains
P"oductSpeciﬁcatio*1
SalesLlneltem ‘ Described by 1
_ —description
l .
— —pr1<:e
III-IIIIIIIIIIIIIIIIzn

***************Ending Page***************


***************Beginning Page***************
***************page number:43**************
Exe m pl u | 2
t := getTota|() ‘S
' . ale
t := getTota|() 1*: st := getSubtota|()
—> E * :SalesLineltem
t := getTota|() _ 1*: st := getSubtota|()
—> E * :SalesLineltem
¢ 1.1: p:=getP"ice()
:ProductSpecification
— 3

***************Ending Page***************

***************Beginning Page***************
***************page number:44**************
Sol t'e osibilé 1
, l3
Clasé Responsabilitiyi
Sale sé cunoascé valoarea totalé a cumpéréturilor
SalesLineltem séi cunoascéi subtotalul pentru un produs
ProductSpecification sé cunoascé pregul produsului
Sale
—date
—time
—
1
Contains
P"oductSpeciﬁcatio*1
SalesLmeltem * Described by 1
- i
.
— —prlce
—itemId
44

***************Ending Page***************


***************Beginning Page***************
***************page number:45**************
S I I Ib-IV
o ul,:|e p05| la. 2
Sale
—date
—time
1
Contahs
ProductSpecification
SalesLmeltem * Described by 1
—pr1ce

***************Ending Page***************

***************Beginning Page***************
***************page number:46**************
Creator 1
> Problemﬁ: cine trebie séi fie responsabil cu
crearea unei instante a unei clase?
> Solutie: Asignati clasei B responsabilitatea de a
crea instante ale clasei A cloar clacé cel putin una
dintre urméitoarele afirmatii este adevéiraté:
O B agregé' obiecte de tip A
o B confine obiecte de tip A
O B f0/05e,5te obiecte de tip A
O B are date/e de initializare care trebuie transmise la
instantierea unui obiect cle tip A (B este deci un Expert
Tn ceea ce prive§te crearea obiectelor de tip A)
“rypattem este 0 varianté mai complexéi
46

***************Ending Page***************


***************Beginning Page***************
***************page number:47**************
Creatar 2
> Cine este responsabil cu crearea unei instange
a clasei SalesLineltem?
-date
—time
_
1
Contains
1H‘
P"oductSpeciﬁcatio*1
SalesLlneltem * Described by 1
_ —description
.
— —pr1<:e
I
—

***************Ending Page***************

***************Beginning Page***************
***************page number:48**************
> Deoarece Sale conﬁne (agregéi) instange de tip
SalesLineltem, Sale este un bun candidat pentru a i
se atribui responsabilitatea creérii acestor instange
m a
l
l
addLineltem(itemType, quantity) ‘ ‘
create(itemType,quantity)
:SalesLineltem
l
l
l l
| l
I
l : |
—‘ I

***************Ending Page***************


***************Beginning Page***************
***************page number:49**************
Low coupllng (cu plaJ redus)

> Cuplajul este 0 misuréi a gradului de
dependenyé a unei clase de alte clase

> Tipuri de Dependengé:
O este conectatéi cu
O are cun0§tin§e despre
O se bazeazéi pe

> O clasé care are cuplaj mic (redus) nu depinde
de “multe” alte clase; uncle “multe” este
dependent de contex

> O claséi care are cuplaj mare depinde de multe

***************Ending Page***************

***************Beginning Page***************
***************page number:50**************
Cu plaJ 2

> Probleme cauzate cle cuplaj:
<> schimbéri Tn clasele relationate forgeazé
schimbéri locale
<> clase greu de Tnyeles Tn izolare (scoase din
context)
<> clase greu de refolosit deoarece folosirea Ior
presupune 5i prezenga claselor de care

I depind

***************Ending Page***************


***************Beginning Page***************
***************page number:51**************
Cu plaj 3
> Forme comune de cuplaj de Ia clasa Ala
clasa B sunt:
<> A are un atribut de tip B
<> O instanté a clasei A apeleazé un serviciu
oferit de un obiect de tip B
<> A are 0 metoclé care referentiazé B
(parametru, obiect local, obiect returnat)
<> A este subclasé (direct sau indirect) a lui B
<> B este 0 interfaté, iar A implementeazé
I aceasté interfaté

***************Ending Page***************

***************Beginning Page***************
***************page number:52**************
Legea lui Demeter

> Don ’t talk t0 strangers

> Orice metodei a unui obiect trebuie séi
apeleze cloar metode aparginénd
oluiTnsu§i
<> oricérui parametru al metodei
<> oricérui obiect pe care |—a creat
<> oricéror obiecte pe care Ie conﬁne

***************Ending Page***************


***************Beginning Page***************
***************page number:53**************
Vizualizarea. Cuplajelor
> Diagrama de clase
> Diagrama de colaborare

***************Ending Page***************

***************Beginning Page***************
***************page number:54**************
Exemplul 1
> Exista legéituri Tntre toate clasele
> Eliminé cuplajul dintre Register §i Payment
1:0reate()
makePayment() _ —>
2:addPayment(p) -
:Sale
(a)
makePayment() _ 1:makePayment()
I :Reglster - :Sale
+ 1.1:create()

***************Ending Page***************


***************Beginning Page***************
***************page number:55**************
ngh Cohesmn

> Coeziunea este 0 mésuré a cét de puternic sunt
focalizate responsabilitéigile unei clase

> O claséi ale cérei responsabilitégi sunt foarte
strains legate §i care nu face foarte multe lucruri
are 0 coeziune mare

> O claséi care face multe lucruri care nu sunt
relationate sau face prea multe lucruri are 0
coeziune micé (slabé)

***************Ending Page***************

***************Beginning Page***************
***************page number:56**************
Caeziune
> Probleme cauzate cle 0 slabéi coeziune:
<> greu de Tnyeles
<> greu de refolosit
<> greu de menginut
<> delicate; astfel de clase sunt mereu supuse Ia
schimbéri

***************Ending Page***************


***************Beginning Page***************
***************page number:57**************
CerIune 5| CuplaJ

> Sunt principii vechi Tn design-ul software

> Promoveazé un design modular

> Modularitatea este proprietatea unui sistem care
a fost descompus Tntr-o multime de module
coezive §i slab cuplate

***************Ending Page***************

***************Beginning Page***************
***************page number:58**************
Controller l

> Problemﬁ: Cine este responsabil cu tratarea unui
eveniment generat de un actor?

> Aceste evenimente sunt asociate cu operatii ale
sistemului

> Un Controller este un obiect care nu tine de
interfata graficéi §i care este responsabil cu
receptionarea sau gestionarea unui eveniment

> Un Controller define§te o metodé

nunzétoare operatiei sistemului
58

***************Ending Page***************


***************Beginning Page***************
***************page number:59**************
Controller 2

> Soluyie: asigneazé responsabilitatea pentru
receptionarea sau gestionarea unui eveniment
unei clase care reprezintéi una dintre
urméitoarele alegeri:
o Reprezintéi lntregul sistem sau subsistem (faradéi
controller)
o Reprezintéi un scenariu de utilizare Tn care apare
evenimentul;

x 59

***************Ending Page***************

***************Beginning Page***************
***************page number:60**************
Controller 3

> ln mod normal, un controller ar trebui 55 delege
altor obiecte munca care trebuie féicutéi;

> Controller-ul coordoneazﬁ sau controleazé
activitatea, Tnsﬁ nu face prea multe lucruri el
Tnsuei

> O gre§ealé comunéi ln design-ul unui controller
este séi i se atribuie prea multe responsabilitéti
(fatade controller)

x 6°

***************Ending Page***************


***************Beginning Page***************
***************page number:61**************
Concluzii
> SOLID
> DRY, YAGNI, KISS
> GRASP
g 61

***************Ending Page***************

***************Beginning Page***************
***************page number:62**************
lntrebarl

> i) Argumentagi pentru folosirea SOLID.

> 2) Argumentagi pentru folosirea diagramelor.

> 3) Venigi cu argumente pentru a nu folosi diagrame
sau SOLID.

> 4) Cum putgm folosi informayiile legage de coezviune
§i cuplaj? Cand evaluam un proiect. Cand evaluam
un membru al echipei.

> Criticism:

iiiEsourcemakinfxom/design_gatterns

***************Ending Page***************


***************Beginning Page***************
***************page number:63**************
Bibliografie

> Erich Gamma, Richard Helm, Ralph Johnson, and
John Vlissides: Design Patterns.‘ Elements 0f
Reusable Object-Oriented Software
(GangOfFour)

> Ovidiu Gheorghies, Curs 7 lP

> Adrian lftene, Curs 9 TAIP:
httg:[[thor.info.uaic.ro[~adiftene[ScoalaZZOl1Z
TAIPZCoursesZTAIPO9.|:_>clf

***************Ending Page***************


***************Beginning Page***************
***************page number:64**************
Bibliografie

> Craig Larman. Applying U/l/IL and Patterns. An
Introduction t0 Object Oriented Analysis and
Design

> Ovidiu Gheorghies, Curs 6 lP

***************Ending Page***************

***************Beginning Page***************
***************page number:65**************
Lmks (1)
> WebProjectManager: http:[Zgrofs.info.uaic.ro[~adrianaaZumlZ
> Diagrame de Stare §i de Activitate:
http: Z Zsoftware.ucv.ro[~soimu_anca[ it|:_)m Z Diag rame%20cle%20
Stare%205i%2OActivitate.d0c
> Deployment Diagram:
httg:[[en.wikipedia.org[wiki[DegloymenLdiagram
httg:[[www.agilemodeling.com[artifacts[deploymentDiagram
ht_m
> GRASP:
httg:[[en.wiki|:_>edia.org[wikiZGRASP_§Ob'|ect_Oriented_Design2
> httg:[[web.cs.wpi.edu[~ggollice[cs4233—
a05[CourseNotesZmags[class4[GRASPQatternshtml
ioduction to GRASP Patterns:
.inverhills.edu dlevitt CS%202000%20 FP GRASP

***************Ending Page***************


***************Beginning Page***************
***************page number:66**************
Links (2)
> Gang-Of-Four: http:[[c2.com[cgi[wiki?GangOfFour,
http:[[www.um|.org.cn[c%ZB%ZB[pdeDesignPatternspdf
> Design Patterns Book: http:[[c2.com[cgi[Wiki?DesignPatternsBook
> About Design Patterns: httpj[www.iavacamporg[designPatternZ
> Design Patterns —Java companion:
http: Z [www.patterndepot.com Z putZS Z lavaPatterns.htm
> Java Design patterns:
http:[[www.allapplabs.com[iava_design_patterns['|ava_design_patter
ns.htm
> Overview of Design Patterns:
http:[[www.mindspring.com[~mgrand[pattern_synopses.htm
> Gang of Four: http:[[en.wikipedia.org[wiki[Gang_of_four
> JUnit in Eclipse: http:[[www.vogellaerarticlesZIUnitZarticle.htm|
' 'n NetBeans: http:[[netbeansorg[kadocsZiavaZ'|unit—intro.htm|
66

***************Ending Page***************


***************Beginning Page***************
***************page number:67**************
Links (3)

> httgs:[[scotchiozbar-ta|k[s—o—l—i—d—the—
first-five-grincigles—0f—0b'|ect—0riented—
deygn

> httgs:[[www.slidesharemet[enbohm[solid-
design-grincigles-90161 17

> httgs:[[sideriteblogsgotcom[2017Z02Zso|id
—|Qrincigles—p|us—clry-yagni-kiss-finalhtml

> httgs:[[thefullstackxyz[dry-yagni-kiss-tdd-
M

***************Ending Page***************

