[{content={parts=[{text=--FlashCardSeparator--
Single
--InteriorSeparator--
What type of testing checks if software functions correctly with invalid inputs?
--InteriorSeparator--
Non-functional software testing
--InteriorSeparator--
easy
--InteriorSeparator--
4
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following are types of software performance testing?
--InteriorSeparator--
(right) Load testing
(right) Stress testing
(wrong) Unit testing
(wrong) Integration testing
--InteriorSeparator--
medium
--InteriorSeparator--
5
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the purpose of usability testing?
--InteriorSeparator--
To evaluate a product by testing it on users.
--InteriorSeparator--
easy
--InteriorSeparator--
7
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following are considered basic security concepts?
--InteriorSeparator--
(right) Confidentiality
(right) Integrity
(wrong) Portability
(wrong) Efficiency
--InteriorSeparator--
medium
--InteriorSeparator--
9
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the process of adapting software for a specific region or language called?
--InteriorSeparator--
Localization
--InteriorSeparator--
easy
--InteriorSeparator--
11
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following are examples of code degradation?
--InteriorSeparator--
(right) Rigidity
(right) Fragility
(wrong) Flexibility
(wrong) Maintainability
--InteriorSeparator--
hard
--InteriorSeparator--
14
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the main goal of refactoring?
--InteriorSeparator--
To improve the internal structure of the code without altering its external behavior.
--InteriorSeparator--
medium
--InteriorSeparator--
15
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What are some reasons for refactoring code?
--InteriorSeparator--
(right) To increase cohesion and decrease coupling
(right) To simplify the use of design patterns
(wrong) To add new features quickly
(wrong) To rewrite the entire application
--InteriorSeparator--
medium
--InteriorSeparator--
17
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What should you always prepare when refactoring code?
--InteriorSeparator--
A set of automatic tests
--InteriorSeparator--
medium
--InteriorSeparator--
19
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following are refactoring techniques?
--InteriorSeparator--
(right) Extract Method
(right) Rename Method
(wrong) Add new functionality
(wrong) Ignore failing tests
--InteriorSeparator--
medium
--InteriorSeparator--
20, 21
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does the SOLID acronym represent in software design?
--InteriorSeparator--
A set of five object-oriented design principles
--InteriorSeparator--
easy
--InteriorSeparator--
22
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What does the Single Responsibility Principle state?
--InteriorSeparator--
(right) A class should have only one reason to change
(right) Each responsibility is an axis of change
(wrong) Classes should be tightly coupled for better performance
(wrong) All classes should handle multiple responsibilities
--InteriorSeparator--
hard
--InteriorSeparator--
23
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does the Open/Closed Principle advocate?
--InteriorSeparator--
Software entities should be open for extension, but closed for modification.
--InteriorSeparator--
medium
--InteriorSeparator--
25
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What does the Liskov Substitution Principle ensure?
--InteriorSeparator--
(right) Derived classes must be substitutable for their base classes.
(wrong) Base classes must be substitutable for their derived classes.
(wrong) All classes must implement the same interfaces.
(wrong) Code should be tightly coupled for efficiency.
--InteriorSeparator--
hard
--InteriorSeparator--
26
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the core idea behind the Interface Segregation Principle?
--InteriorSeparator--
Clients should not be forced to depend upon interfaces that they do not use.
--InteriorSeparator--
medium
--InteriorSeparator--
29
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What are some indicators of a "bad" design, according to the Dependency Inversion Principle?
--InteriorSeparator--
(right) It is hard to change because every change affects too many other parts of the system.
(right) When you make a change, unexpected parts of the system break.
(wrong) Code is easy to change and reuse
(wrong) Code is easily isolated and tested
--InteriorSeparator--
hard
--InteriorSeparator--
31
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does the Dependency Inversion Principle (DIP) state regarding high-level and low-level modules?
--InteriorSeparator--
Both should depend upon abstractions.
--InteriorSeparator--
hard
--InteriorSeparator--
32
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Why are packages important in large applications?
--InteriorSeparator--
(right) The class is too finely grained to be used as an organizational unit for large applications.
(right) Packages provide a level of organization above classes.
(wrong) Packages are not needed for organized classes
(wrong) Classes are sufficient to organize the program
--InteriorSeparator--
medium
--InteriorSeparator--
34
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the main idea behind the Reuse/Release Equivalence Principle?
--InteriorSeparator--
The granule of reuse is the granule of release.
--InteriorSeparator--
hard
--InteriorSeparator--
38
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What does the Common Reuse Principle state regarding classes in a package?
--InteriorSeparator--
(right) Classes that tend to be reused together belong in the same package.
(wrong) Classes should be placed in different packages for better isolation
(wrong) A package should only contain one class
(right) The classes in a package are reused together.
--InteriorSeparator--
hard
--InteriorSeparator--
39
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does the Common Closure Principle state?
--InteriorSeparator--
The classes in a package should be closed together against the same kinds of changes.
--InteriorSeparator--
hard
--InteriorSeparator--
41
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What kind of structure should the dependency between packages follow according to the Acyclic Dependencies Principle?
--InteriorSeparator--
(right) A directed acyclic graph (DAG)
(wrong) A cyclic graph
(wrong) A tree structure with cycles
(wrong) A single linear chain
--InteriorSeparator--
hard
--InteriorSeparator--
43
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
According to the Stable Dependencies Principle, what should be the direction of dependencies between packages?
--InteriorSeparator--
In the direction of the stability of the packages.
--InteriorSeparator--
hard
--InteriorSeparator--
48
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What do Ca and Ce represent in stability metrics?
--InteriorSeparator--
(right) Ca: Afferent Couplings
(right) Ce: Efferent Couplings
(wrong) Ca: Cohesive Attributes
(wrong) Ce: Centralized Entities
--InteriorSeparator--
hard
--InteriorSeparator--
49
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What should maximally stable packages also be, according to the Stable Abstractions Principle?
--InteriorSeparator--
Maximally abstract
--InteriorSeparator--
hard
--InteriorSeparator--
52
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is a design pattern?
--InteriorSeparator--
(right) A general repeatable solution to a commonly occurring problem in software design.
(wrong) A specific code implementation for a particular problem.
(right) Language-independent strategies for solving common object-oriented problems.
(wrong) Just a good solution.
--InteriorSeparator--
medium
--InteriorSeparator--
55
--FlashCardSeparator--
}], role=model}, finishReason=STOP, avgLogprobs=-0.15342584611886995}]