***************Beginning Page***************
***************page number:1**************
l I I P V I I
Cursul 2 — 28 februaneJ martle 2023
adlftene@|nfo.ua|c.ro

***************Ending Page***************

***************Beginning Page***************
***************page number:2**************
Cu prlns

> Din Cursul 1...

> Prototipizare

> RUP

> V-Model

> Extreme Programming
> Agile, Scrum

> Lean, Kanban

> MDD, AMDD

> TDD

> lngineria ceringelor
> Diagrame Use-Case

***************Ending Page***************


***************Beginning Page***************
***************page number:3**************
lin Cursul 1 —1
> lngineria programérii (Software engineering)
O Se referéi Ia metodologiile folosite Tn rezolvarea
proiectelor mari care sunt rezolvate de echipe de
oamenl
O Folosirea principiilor inginere§ti Tn anal/zarea,
dezvo/tarea, punerea fn funcﬂ'une, testarea,
fntreﬂnerea, retragerea produselor software
O Tot aici mai pot fi prinse: gestionarea resurse/or,
coordonarea echipe/0r, p/an/ﬁcare, buget
> Scop: obginerea de programe sigure §i care
functioneazéi eficient pe ma§ini de calcul
COHCFEtE
x 3

***************Ending Page***************

***************Beginning Page***************
***************page number:4**************
Iin Cursul i — Etapele dezvoltarii

programelor

> Analiza cerintelor (Requirements analisys)

> Proiectarea architecturala (Arhitectural
design)

> Proiectarea detaliata (Detailed design)

> Scrierea codului (Implementation)

> lntegrarea componentelor (Integration)

> Validare (Validation)

> Verificare (Verification)

> lntretinere (Maintenance)

***************Ending Page***************


***************Beginning Page***************
***************page number:5**************
Prototlplzare (Prototypmg)
> Tipuri de prototipuri
<> De aruncat (throw-away)
- Scop: clarificarea specificagiilor
- Se dezvoltéi repede, orice altceva e secundar
(quick-and-dirty)
- Util Tn a rezolva “architecural/techn0|ogy spikes"
- Programul “adevéirat” este scris apoi de Ia O
<> Evolutionar
- Scop: construire incrementaléi a produsului final
- Se construie§te un nucleu funcgional Ia care se
adaugéi apoi noi functionalitéigi

***************Ending Page***************

***************Beginning Page***************
***************page number:6**************
Pr0t0tipizare +-

> +: Se poate elimina lipsa de claritate a specificagiilor

> +: Cliengii pot schimba ceringele (e ieftin de
gestionat)

> +: intreginere ieftinéi (verificare pe parcurs)

> +: Se poate facilita instruirea utilizatorilor

> —: Mediu artificial, probleme ascunse

> —: Da'nu—/ aproape gata?! De ce ma/ dureazzi' atét?

> —: Putem 55 sch/mbé'm spec/ﬁcafiile? Pa/ a; vrea ,si...

> —: Ad/cé munca mea este aruncatzi’ la gunoi?

***************Ending Page***************


***************Beginning Page***************
***************page number:7**************
RU P (Ratlonal U n |f|ed Process)
> Model iterativ folosit de IBM din 2003
Phases
Business Modeling ' :
Requirements : E
Analysis & Design M
Test ' '
Deployment E : 2
Conﬁguration i g g
WW" "9"“ __;___-i|—
Project Management M
Environment : ' :
I Iteratlons 7

***************Ending Page***************

***************Beginning Page***************
***************page number:8**************
RUP

> lngineria functionalitatii. Sunt sintetizate
necesitatile functionale.

> Are Ia baza 4 etape:
O Inception: pentru validarea costurilor §i bugetului,
stucliu de risc, intelegerea cerintelor
O Elaboration: analiza domeniului problemei,
arhitectura proiectului este stabilita
O Construction: constructia sistemului, se obtine
prima versiune a sistemului
o Transition: tranzitia Ia sistemul din productie

x 8

***************Ending Page***************


***************Beginning Page***************
***************page number:9**************
> A fost utilizat in Germania §i SUA in anii ’8O
> Partea stﬁngé — analiza cerintelor §i crearea
specificatiilor sistemului
> Partea dreapti — integrarea pértilor §i validarea lor
> V de Ia Verificare §i Validare
Operation
c t r . . .
oggfaeﬁoé ver'gﬁgt'm Mainignjance
_ Validation
PrPJF'Pt Requirements System
Deﬁnltlon and Veriﬁcatlon
Architecture and Validation
Integration,
Detailed Test, and Project
Design Veriﬁcation Test and
Integration
implementation
.—>
Time 9

***************Ending Page***************

***************Beginning Page***************
***************page number:10**************
> Minimizarea riscurilor
> lmbunétéitirea si garantarea calitéitii
> Reducerea costurilor
> lmbunétéitirea comunicéirii
<> is’
ta i; Subsystems
Item Level LU Configuration Items
Design Requirements PDR \ $89’ TRR
g Assemblies
‘I?
CDR Components
_ All Design Requirements Complete
PDR = preliminary Design Review SVR = System Verification Review
CDR = Critical Design Review 10

***************Ending Page***************


***************Beginning Page***************
***************page number:11**************
V-Model + —

> +: utilizatorii V-model participéi Ia dezvoltare §i Ia
Tntreginere

> +: existé un grup ce controleazé modificérile din
specificagii. Acesta se Tntélne§te odaté pe an §i
h0téiré§te ce modificéri sunt acceptate

> +: modelul asiguréi Ia fiecare etapéi asistengéi §i
define§te explicit ce avem de féicut

> —: nu se asiguré Tntreginerea

> —: e folosit Ia proiecte de dimensiuni relativ mici

x “

***************Ending Page***************

***************Beginning Page***************
***************page number:12**************
Extreme Programmlng
b Why "EXtreme"? Releaseplan
o "Extreme" meens these .. months ﬂ_____lte@t_ion plan
practlces get turned up / Acégtt nce Est
to a much higher "volume" “geeks D‘Q.._\
than otn tradltlonal d S Stan up “ﬂee/ting
proiec s. , ,
h Palr- __ otlaton
> What really matters? la is 3/
<> Listening, Testing, Coding, m'm'tes U ESt
Designing \ Pai gramming
\Code

***************Ending Page***************


***************Beginning Page***************
***************page number:13**************
XP — Caracteristici

> XP este un model modern, u§0r (lightweight),
de dezvoltare, inspirat din RUP

> Dezvoltarea programelor nu inseamné ierarhii,
responsabilitéti §i termene limitéi, ci inseamné
colaborarea oamenilor din care este formatii
echipa

> Membrii echipei sunt Tncurajati sé—§i afirme
personalitatea, sé ofere §i sé primeascé
cunoa§tere §i sé deviné programatori strélucigi

> XP consideré c5 dezvoltarea de programe
“ eamné in primul rénd scrierea de programe

erPoint nu se pot compila) 13

***************Ending Page***************

***************Beginning Page***************
***************page number:14**************
Idel maJore In XP
> Proiectul este Tn mintea tuturor programatorilor din
echipa, nu Tn documentatii, modele sau rapoarte
> La orice moment, un reprezentant al clientului este
disponibil pentru clarificarea cerintelor
> Codul se scrie cét mai simplu. Se scrie cod de test Tntéi
> Daca apare necesitatea re-scrierii sau aruncérii de cod,
aceasta se face fﬁré milé
> Modificérile aduse codului sunt integrate continuu (de
céteva ori pe zi)
> Se programeazi Tn echipi (programare Tn perechi).
Echipele se schimbﬁ la sfﬁr§itul unei iteratii (1-2
séiptéméni)
> Se lucreazﬁ 4O de ore pe siptémﬁné, fﬁré lucru
limentar
x ‘4

***************Ending Page***************


***************Beginning Page***************
***************page number:15**************
X P R u | e s
Planning Coding
'I' :1 User stories are written. 'I' :1 The customer is alwax-Fs available.
'I‘ :1 Release planning creates the schedule. '1' :1 Code must be written to agreed
'I' :1 Make frequent small releases. standards.
'I' :1 The Project Velocitv is measured. 'I' :1 Code the unit test. ﬁrst.
'I‘ :1 The project is divided into iterations. 'I' :1 All production code is pair programmed.
'I' :1 Iteration planning starts each iteration. 'I' :1 Only one pair integrates code at a time.
'I' :1 Move people around. 'I' :1 Integrate often.
'I' :1 A stand-up meeting starts each day. 'I' :1 Use collective code ownership.
'I' '1 Fix XP when it. breaks. 'I' :1 Leave optimization till last.
'I' :1 No overtime.
Designing
Testing
'I' :1 Simplicitv.
'I' :1 Choose a svstem metaphor. 'I' :1 All code must have unit tests.
'I' :1 Use CRC cards for design sessions. 'I' :1 All code must pass all unit tests before it
'I' :1 Create spike solutions to reduce risk. can be released.
'I' :1 No functionality is added earlv. '1' :1 \Vhen a bug is found tests are created.
'I' :1 Refactor Whenever and wherever 'I' :1 Acceptance tests are run often and the
possible. score
is published. 15

***************Ending Page***************

***************Beginning Page***************
***************page number:16**************
Agile
> Satisfacerea rapidé a clientului prin oferirea continuéi
de software util (séptéiménal dacéi e posibil)
> Progresul se méisoaréi in functie de partea
functionaléi a proiectului
> Chiar 5i modificérile tﬁrzii in cerinte sunt binevenite
> O cooperare foarte apropiaté Tntre client §i
programatori
> Discutiile face-t0-face constituie cea mai bunéi
forméi de comunicare
> Adaptare continué la modificérile care apar
> Dezvoltarea unui spirit de evidentiere §i rezolvare a
problemelor, nu de ascundere sau 'neobservare' a lor
x ‘6

***************Ending Page***************


***************Beginning Page***************
***************page number:17**************
l\"Ianifesto for Agile Software Development
We are uncovering better ways of developing
software by doing it and helping others do it.
Through this work we have come to value:
Indh-"iduals and interactions over processes and tools
WOl'klllg SOft\\--’211‘6 over comprehensive documentation
CUStOanl' COllﬂbOlHthl] over contract negotiation
Responding to change over following a plan
That is, while there is value in the items on
the right, we value the items on the leﬁ more.
Kent Beck James Grenning Robert C. Martin
Mike Beedle .Tim Highsmith Steve Mellor
Arie van Bennekum Andrew Hunt Ken Schwaber
Alistair Cockbuin Ron .Teffries .T eff Sutherland
Ward Cunningham I on Kenl Dave Thomas
1\=-"[art in Fowler Brian Marick 17

***************Ending Page***************

***************Beginning Page***************
***************page number:18**************
Aglle +-

> —I
o lmposibilitatea realizarii documentatiei necesare
O Se lucreaza cloar cu dezvoltatori “senior-level”
O lnsuficienta structurare a modelarii software
O Poate duce Ia negocieri cle contract dificile

> +1
o Companiile care au adoptat metoda de lucru Toyota §i—
au Tmbunatatit cu 83% productivitatea, cu 93% timpul
de productie, cu 91% calitatea produselor §i au redus la
jumatate overtime-ul — dupa cum arata un studiu
oficial U.S., realizat Tn urrna cu cativa ani pe companii
din industria auto —

x ‘8

***************Ending Page***************


***************Beginning Page***************
***************page number:19**************
.4 ‘a -,~‘ , ' '=°
n v v n ﬂ >17 8&4»; QM,‘
Sc ru m ( g ramada ) A9 ﬁg
> Clientul devine parte a echipei de dezvoltare
> Frecvente distribuiri intermediare a pérgii software, cu
verificéri 5i validéri imediate
> Discutii zilnice:
O Ce ai fécut ieri? (realizéiri)
o Ce ai de génd 551 faci péné mﬁine? (de realizat)
o Care sunt problemele care te-ar putea Tncurca?
(probleme/riscuri)
> Transparentéi Tn planificare §i dezvoltare
> Tntélniri frecvente pentru a monitoriza progresul
> Nu sunt probleme ginute sub covor
> Eficienga muncii: “sé lucrezi mai multe ore" nu
iﬁnéi neapérat “0b1;inerea mai multor rezultate"
19

***************Ending Page***************

***************Beginning Page***************
***************page number:20**************
Metodologia Scrum
SCRUM Methodology
x

***************Ending Page***************


***************Beginning Page***************
***************page number:21**************
Lean (“sprijin”)

> Principiile Lean Software Development (LSD)

1. Eliminarea lucrurilor nefolositoare

2. Amplificarea Tnvétérii

3. Decide cét mai térziu posibil

4. Termini cét mai curénd posibil

5. Oferé responsabilitélgi membrilor echipei

6. Construie§te un proiect integru

7. Construie§te véizénd tot proiectul Tn ansamblu

***************Ending Page***************

***************Beginning Page***************
***************page number:22**************
Kanban

> A scheduling system for lean and just-in-time (HT)
production

> Taiichi Ohno at Toyota in 1953

> A system to control the logistical chain from a
production point of view, and is an inventory control
system

> Aligns inventory levels with actual consumption. A
signal tells a supplier to produce and deliver a new
shipment when material is consumed

> An approach where the "pull" comes from demand

***************Ending Page***************


***************Beginning Page***************
***************page number:23**************
Kan ban — Toyota’s SIX Rules

> Later process picks up the number of items
indicated by the kanban at the earlier process.

> Earlier process produces items in the quantity
and sequence indicated by the kanban.

> No items are made or transported Without a
kanban.

> Always attach a kanban to the goods.

> Defective products are not sent on to the
subsequent process. The result is 100% defect-
free goods.

> Reducing the number of kanban increases the
sensitivity.

***************Ending Page***************

***************Beginning Page***************
***************page number:24**************
Kan ban methodology

> 2009, Corey Ladas, Scrumban, 2010, David
Anderson

> A method for managing knowledge work with
an emphasis on just-in-time delivery while not
overloading the team members

> A visual process-management system that tells
what to produce, when to produce it, and how
much to produce

> Visualisation is an important aspect that allows

l to understand the work and the workflow

***************Ending Page***************


***************Beginning Page***************
***************page number:25**************
Kanban princlples

> Start with existing process — The Kanban method does
not prescribe a specific set of roles or process steps

> Agree to pursue incremental, evolutionary change —
continuous, incremental and evolutionary change is the
way to make system improvements and make them stick

> Respect the current process, roles, responsibilities and
titles — agreeing to respect current roles, responsibilities
and job titles with the goal of gaining broader support

> Leadership at all levels — Acts of leadership at all levels
in the organization are encouraged

x 25

***************Ending Page***************

***************Beginning Page***************
***************page number:26**************
Kanban — Visual Example
PenZing Amjlysis Develjpment T551: Deliloy
5 as é B a
5 5 ; B 5
5 g g 5
Backlog To Do Developmenté) Testingqi) Dsnpelglh Done
_ <2) Ongoing Done Ongoing Done {D
,_ B A
Lg: Ci Q Q
I L“ é 9
‘ |

***************Ending Page***************


***************Beginning Page***************
***************page number:27**************
—
I D
.
‘I ado Domg DOM Todo Domg Wﬂwneeek
tI-us week 5
"I I ‘I "' “WM-In PM‘!!! .'— ...
Aim _ m MUSE“ Qty-M. W an 52:3“
.w m . .. |_ ‘whin- . in “mm-“H .. I _ Zip-:33“
“""“°""’M“ ‘a '“"--- w" i’ — “...”... m,
mean-mm" u- kw H _ “mm” “Mosul "fuzz"
FIB! .. .LDM EH1. a _ — m
O‘ I. “I I A’ - 51"!“th
mm...
mm.
—___
—_l_-||
_
-' a“ ‘ I V
(3.117?‘
W8 - _
‘on ‘ \‘PA. "109};- _-___
J ‘5;: =9 .v 1_

***************Ending Page***************

***************Beginning Page***************
***************page number:28**************
Model lriven Development

> Model Driven Development(M DD) is a
paradigm for writing and implementing
computer programs quickly, effectively and at
minimum cost

> MDD is an approach to software development
where extensive models are created before
source code is written

> A primary example of MDD is the Object
Management Group (OMG)’s Model Driven
Architecture (MDA) standard

***************Ending Page***************


***************Beginning Page***************
***************page number:29**************
> Thinking Through What You’|| Do This Iteration
High c } Each iteration implement the highest-
Priority g priority work items
o
2
Modeled in / 2 Each new work item is
greater detail 5 4- c: prioritized and added to
o: the stack
CID
o
E D Work items may be
. o reprioritized at any time
Modeled In g
lesser detall 2 Work items may be removed
6 at any time
o
c:-
Low 8
Priority 2
WOI'k Items Copyright 2004-2007 Scott W. Ambler 29

***************Ending Page***************

***************Beginning Page***************
***************page number:30**************
Test Iriven Ievelapment
t.
FAILING
T£$T
T551 Pnss
59"éii'2'r2213
h ‘m’

***************Ending Page***************


***************Beginning Page***************
***************page number:31**************
Cum vom face nel?

> O comunicare foarte buné cu CLIENTUL care face parte
din echipéi (SCRUM)

> Dupé fiecare etapéi vel;i obgine un produs finit care de
regulé nu va putea fi reféicut la pa§ii urmétori (Cascadéi)

> Ca membru al “echipei” v51 voi sprijini cét mai mult
posibil (LEAN)

> Fiecare va fi Tncurajat sé facé ce Ti place mai mult (XP)

> NU am sé aduc modificéiri continue Tn ceringele mele
(NU AGILE) A

> (NU) vovm face un studiu de risc ((NU) MODEL IN
SPIRALA)

> Vom realoca resurse cénd 0 echipéi Tntémpinéi dificultégi

I (KANBAN)

***************Ending Page***************

***************Beginning Page***************
***************page number:32**************
Etapele dezvoltarii programelor
> ln engleza: Software Development Life Cycle
—
> Proiectarea arhitecturala (Architectural design)
> Proiectarea detaliata (Detailed design)
> Scrierea codului (Implementation)
> lntegrarea componentelor (Integration)
> Validare (Validation)
> Verificare (Verification)

I > lntretinere (Maintenance)

***************Ending Page***************


***************Beginning Page***************
***************page number:33**************
Cum Tncepe un proiect?
> Un client dore§te sé-gi
O Tmbunétégeascéi productivitatea
O Rezolve 0 probleméi de personal
O Facé reclamé la produsele pe care Ie vinde
O Gestioneze mai u§0r activitatea sucursalelor din garéi
> Un proiect interesant
> O idee, nevoia de a-mi gestiona cheltuielile
zilnice, etc.
> Din acest punct urmeazé lngineria Ceringelor!
x 33

***************Ending Page***************

***************Beginning Page***************
***************page number:34**************
lngineria cerintelor (Requirement

analysis) — lefinitie

> Procesul lntelegerii nevoilor clientului §i a
a§teptarilor acestuia de la aplicatia noastra

> O etapa bine definita din ciclul de viata al
dezvoltarii unui produs (Software Development
Life Cycle)

> La ce ne a§teptam de la 0 aplicatie sa faca

> Cum ar trebui sistemul sa se comporte 5i care

int caracteristicile acestuia

***************Ending Page***************


***************Beginning Page***************
***************page number:35**************
lngmerla cermgelor — Exemplu
> Realizagi un program C++ care sé realizeze
suma a doué matrici citite din figier.
> +1
<> Se specificéi limbajul
<> Stim céi citirea se face din fi§ier
b —I
<> Nu §tim ce 551 facem cu douéi matrici care nu au
acelea§i dimensiuni
<> Ce facem cu rezultatul?

***************Ending Page***************

***************Beginning Page***************
***************page number:36**************
lngmerla cermgelor — Cme?

> Datorita multitudinii de tipuri de interacgiuni
care pot exista intre utilizatori, procese de
business, dispozitive hardware, etc., pot exista
diverse tipuri de cerin1;e, de Ia aplicagii simple, Ia
aplicagii complexe

> Procesul de analiza a cerini;e|0r presupune
alegerea si documentarea acestor tipuri de
cerinl;e, si construirea documentelor ce vor
constitui baza construirii sistemului

ine se ocupa? Project Manager, Program

***************Ending Page***************


***************Beginning Page***************
***************page number:37**************
Inglnerla cerlngelor — Ie ce?

> Studiile facute demonstreaza ca aten1;ia
insuficienta acordata analizei ceringelor este cea
mai des intalnita cauza in cadrul proiectelor
vulnerabile

> Foarte multe organizagii au cheltuit sume
imense pe proiecte software care in final nu
faceau ceea ce se dorea iniigial de Ia ele

> in momentul de faga foarte multe companii
investesc timp §i bani pentru a face 0 analiza a
ceringelor eficienta

x 37

***************Ending Page***************

***************Beginning Page***************
***************page number:38**************
lngineria. ceringelor — Pasi
1. Stabilirea limitelor aplicaigiei

2. Gésirea clientului

3. ldentificarea cerintelor

4. Procesul de analizé a ceringelor

5. Specificarea cerintelor

6. Gestionarea ceringelor

***************Ending Page***************


***************Beginning Page***************
***************page number:39**************
lC — Limitele aplicagiei (1)

> Ca prim pas, are ca scop identificarea
modului Tn care aceasté noué aplicatie se va
integra Tn mediul pentru care va fi conceputé

> Care va fi scopul aplicagiei

> Care vor fi limitele aplicagiei

***************Ending Page***************

***************Beginning Page***************
***************page number:40**************
lC- GaSIrea clientulul (2)

> Obiectivul ultimilor ani: Cine este uti/l'zatoru/
(cl/‘en tul) care va f0/05/ efect/v ap/l'cafia .7

> Ca rezultat, vom §ti exact ce persoane vor fi
direct sau indirect afectate de realizarea
acestui proclus

> Vom §ti pe cine séi intrebém pentru eventuale
clarificéiri

***************Ending Page***************


***************Beginning Page***************
***************page number:41**************
IC — Identlflcarea cerlngelor (3)
> Ceringele se colecteazéi de Ia mai multe grupuri
ce au fost identificate Tn etapa anterioaré
> Se identificé ce anume doresc acestia ca
aplicagia sé realizeze
> Nivelul de detaliere depinde de:
O Numéirul si de dimensiunea grupurilor
O Complexitatea procesului de business
O Dimensiunea aplicagiei
> Probleme Tntﬁlnite Tn aceastéi etapéi
O Ambiguitégi Tn Tngelegerea proceselor
O lnconsistengé Tn ingelegerea aceluiasi proces
O Date insuficiente
‘i'ficéri Tn ceringe dupé Tnceperea proiectului

***************Ending Page***************

***************Beginning Page***************
***************page number:42**************
IC — Cine face identificarea

ceringelor ? (3)

> Aceasta persoana trebuie sa interactioneze
direct cu multe grupuri de lucru

> Are de a face cu idei contradictorii

> Trebuie sa aiba abilitagi de comunicare 5i de
lucru cu oamenii

> Trebuie sa aiba cuno§tin§e de programare

> in final trebuie sa cada de acord cu clientul in

.rivinta cerintelor

***************Ending Page***************


***************Beginning Page***************
***************page number:43**************
IC — Metode folosite Tn

identificarea cerimgelor (3)

> lnterviuri cu viitorii utilizatori §i cu grupuri de
utilizatori

> Folosirea documentagiei existente (manuale de
utilizare, diagrame ale organizatiei, specificagii
de sistem, etc.)

> Metode:
<> Prototipuri
<> Diagrame “Use case"
<> Diagrame de flux a datelor §i a proceselor

‘rfege utilizator

***************Ending Page***************

***************Beginning Page***************
***************page number:44**************
IC — Procesul cle analizé a.
ceringelor (4)
> Se face 0 analizé structuraté care folose§te
tehnici specifice:
<> “animarea” ceringelor
<> Rationament automat
<> Privire criticéi din punct de vedere al cunoagterii
<> Verificarea consistengei
<> Rationament analogic 5i bazat pe exemple

***************Ending Page***************


***************Beginning Page***************
***************page number:45**************
lC — Specificarea cerlntelor (5) i

> Se face intr-un mod clar, neambiguu

> Scrierea unui document in care se specificéi cerintele
este obligatoriu!

> Acest document va circula intre toate persoanele
implicate in aceastéi fazé: client, grupur/ de
uti/izatari, ech/pe/e de dezvoltare 5/‘ de testare

> Documentul va fi folosit la:
O Validarea cerintelor de céitre client
O Contractul dintre client 5i echipa de dezvoltare
O Bazéi pentru proiectarea sistemului de céitre dezvoltatori
O Bazéi pentru planificéri
O Surséi pentru realizarea scenariilor de testare

x 45

***************Ending Page***************

***************Beginning Page***************
***************page number:46**************
IC — SpeCIflcarea cerlngelor (5) 2

> Trebuie séi surprindé viziunea clientului despre
produs

> Reprezinté rezultatul colaborérii clintre utilizator
(care nu e un expert) 5i analistul de sistem (care
surprincle situagia Tn termeni tehnici)

> E posibil ca specificarea ceringelor sé se facéi Tn
douéi documente separate:

O Cerin1;ele utilizator — scrise Tn clar folosind cazuri de
utilizare (pentru utilizator)

O Cerin1;ele sistemului — descrise folosind un model
matematic sau programatic (pentru dezvoltatori 5i
pentru testeri)

x 46

***************Ending Page***************


***************Beginning Page***************
***************page number:47**************
IC - Specificarea cerintelor (5) 3

> Tn cerintele utilizatorului nu trebuie sé aparé
notiuni tehnice (protocol de comunicare,
criptarea folosind MD5, http, IP, etc)

> Tn cerintele sistemului trebuie séi aparé formatul
de export al datelor (XML), adresa serverului de
pe care se fac citiri, locul Tn care se depoziteazé
fi§ierele log

***************Ending Page***************

***************Beginning Page***************
***************page number:48**************
lC — SpeCIflcarea cermgelor (5) 4

> Nivelul de detaliere:
O Ridicat — presuspune multéi muncéi, uneori inutiléi (este
mai precis 5i mai clar)
O Scézut — poate fi vag (nu ajuté Tn procesul de
dezvoltare §i testare)

> Exemplu:
O Realizagi un program care sé facé suma a douéi matrici.
O Realizagi un program C# care séi aibéi clasa Matrice cu
atributele n,m de tip int reprezenténd numérul de linii
5i de coloane §i matrice de tip int[3][3] reprezenténd
elementele matricii. Metodele disponibile Tn clasa
Matrice sunt

x 48

***************Ending Page***************


***************Beginning Page***************
***************page number:49**************
IC — SpeCIflcarea cermgelor (5) 5
> Tipuri de ceringe:

O Cerinige utilizator: legate de locul uncle va fi folosit
sistemul,eficien1;é, durata de viagé a produsului
(produsu/ va f/ f0/05/‘t de compart/mentu/ ﬁnancial?

O Cerinige functionale: despre modul Tn care se fac
anumite calcule, modul Tn care se manipuleazé datele
(/mpoz/tu/ pe sa/ar este de l 6 %)

O Cerinige de performangi: modul Tn care anumite functii
sunt apelate cantitativ, calitativ (sistemu/ va perm/te
l 000 de interogér/ pe secunda")

O Constrﬁngeri: nu se va permite ca doué persoane séi
introducé simultan date Tn tabele

x 49

***************Ending Page***************

***************Beginning Page***************
***************page number:50**************
lC — Gestlonarea cermgelor (6)

> Este un proces continuu care surprinde toate
aspectele identificérii ceringelor §i Tn plus
asiguré verificarea, validarea acestora

> Pentru a fi utiléi trebuie séi asigure
neambiguitatea cerintelor, eliminarea erorilor
5i completarea omisiunilor

***************Ending Page***************


***************Beginning Page***************
***************page number:51**************
Requirement ‘Example of bad requirement ‘Example of good requirement

Quality

Atomic ‘Students will be able to enroll to ‘Students will be able to enroll to
undergraduate and post graduate undergraduate courses
courses ‘Students will be able to enroll to post—

graduate courses

Uniquely l— Students will be able to enroll to l.Course Enrolment

identified undergraduate coursesl — Students will 2.Students will be able to enroll to
be able to enroll to post—graduate undergraduate courses
courses 3.Students will be able to enroll to post—

graduate courses

Complete A professor user will log into the A professor user will log into the system by
system by providing his username, providing his username, password and
password, and other relevant department code
information

Consistent A student will have either A student will have either under—graduate

and undergraduate courses or post— or post graduates but not both

unambiguous graduate courses but not both. Some
courses will be open to both under—
graduate and post—graduate

Traceable ‘Maintain student information—mapped ‘Maintain student information—Mapped to ‘
to BRD req.|D? BRD req ID 4.1

Prioritized Registered student—Priority iMaintain Register Student—Priority iMaintain User
User lnformation—Priority lEnroll lnformation—Priority 2Enroll courses—
courses—Priority iView Report Card— Priority iView Report Card—Priority3
Priority l

Testable Each page of the system will load in an Register student and enrol courses pages of
acceptable time—frame the system will load within 5 seconds

***************Ending Page***************

***************Beginning Page***************
***************page number:52**************
Scenarll cle utllizare 1
> Folosesc actori (elemente cu care programul
interactioneaza):
o Utilizatori umani
o Elemente software (Ex: program care prelucreaza
informatiile colectate de pe Internet)
o Elemente hardware (Ex: cititor de coduri de bare,
telefoane mobile, etc.)
> Folosesc scenarii (use case)
O Acestea descriu cum interactioneaza actorul cu
sistemul
O Cum reactioneaza sistemul Tn urma acestor actiuni
O Care e rezultatul vizibil pentru actori
52

***************Ending Page***************


***************Beginning Page***************
***************page number:53**************
Scenaru de utlllzare 2
> Ce nu congin acestea:
O Diagrame de clase
O Structura modularéi a programului
O Tipul datelor de intrare §i de ie§ire
> Use Case — Tipuri de continut:
O Pe scurt — descrie principalul caz de succes
O Cazual — congine ce ar trebui fécut Tn caz c5 se
Tntémplé ceva
O Detaliat — se prezinté pe larg toate situagiile posibile
x 53

***************Ending Page***************

***************Beginning Page***************
***************page number:54**************
Use Case — Exemple

> Pe scurt: Programul trebuie séi poaté aduna 2 matrici

> Cazual: Programul trebuie séi poaté aduna 2 matrici
dacéi au ace|a§i numéir de linii §i de coloane, altfel se
va afiga un mesaj de eroare corespunzétor

> Detaliat: Programul trebuie 551 poaté aduna doué
matrici de numere Tntregi citite de Ia tastaturé, dacé
au ace|a§i numéir de linii §i de coloane, iar matricea
rezultatéi se va afi§a Tntr-un fi§ier “rezultat.txt" céte
0 linie pe rénd. Altfel se va afi§a un mesaj de eroare
corespunzéitor Tntr-un fi§ier “mesaj.txt” aflat Tn

.irectorul cu rent. (Mai trebuie spec/ﬁcat ceva?)

***************Ending Page***************


***************Beginning Page***************
***************page number:55**************
liagrama cazurilor de utilizare
(Use Case Diagram)
> Este 0 diagramé comportamentalé care
capteazéi ceringele sistemului
> Delimiteazé granigele sistemului
> Punctul de plecare TI constituie scenariile de
folosire a sistemului din fi§a ceringelor
> Poate prezenta:
O specificarea ceringelor (externe) din punctul de
vedere al utilizatorului
O specificarea functionalitéigii sistemului din punctul
de vedere al sistemului
> Contine:
O UseCase-uri : functionalitéti ale sistemului
O Actori :_ entitay externe cu care sistemul
Interactloneaza
‘law

***************Ending Page***************

***************Beginning Page***************
***************page number:56**************
UseCase

> Este o descriere a unei muligimi de secvenge de actgiuni
(incluzénd variante) pe care un program Ie executéi
atunci cénd interactioneazéi cu entitéigile din afara Iui
(actorl) §i care conduc Ia obtinerea unui rezultat
observabil

> Poate fi un sistem, un subsistem, 0 claséi, 0 metodé

> Reprezinté o functionalitate a programului

> Precizeazé ce face un program sau subprogram

> Nu precizeazﬁ cum se implementeazé 0
functionalitate

> ldentificarea UseCase-urilor se face pornind de Ia
ceringele clientului §i analizénd descrierea problemei.

x 56

***************Ending Page***************


***************Beginning Page***************
***************page number:57**************
UseCase — Reprezentare
> Notagie
> Atribute
o Nume I fraza verbalﬁ ce denume§te o
operalgie sau un comportament din
domeniul problemei.
> Restricgii
O Numele este unic

***************Ending Page***************

***************Beginning Page***************
***************page number:58**************
Actor
> Reprezinté un rol pe care utilizatorii unui
UseCase TI joacé atunci cénd interactioneazéi cu
acesta
> Este 0 entitate exterioaréi sistemului
> Interactioneazé cu sistemul:
o Initiazéi execugia unor cazuri de utilizare
O Oferéi functionalitate pentru realizarea unor cazuri
de utilizare
> Poate fi:
O Utilizator (uman)
O Sistem software
istem hardware
58

***************Ending Page***************


***************Beginning Page***************
***************page number:59**************
Actor — Reprezentare

> Notagie

> Atribute

> Nume I indicé rolul pe care actorul TI joacé Tn
interacgiunea cu un UseCase

> Restricgii
O Numele este unic

***************Ending Page***************

***************Beginning Page***************
***************page number:60**************
Relagii
> Se stabilesc Tntre douéi elemente
> Tipuri de relagii:
O Asociere: Actor — UseCase, UseCase — UseCase
O Generalizare: Actor — Actor, UseCase — UseCase
O Dependenté: UseCase — UseCase (<<inc|ude>>,
<<extend>>)

***************Ending Page***************


***************Beginning Page***************
***************page number:61**************
Relagla de Asoaere

> Modeleazé 0 comunicare Tntre elementele pe
care Ie conecteazé

> Poate sa aparéi Tntre

O un actor §i un UseCase (actorul initiazé execugia
cazului de utilizare sau oferé functionalitate pentru
realizarea acestuia)

O douﬁ UseCase-uri (transfer de date, trimitere de
mesaje/semnale)

> Notatie —

x 6]

***************Ending Page***************

***************Beginning Page***************
***************page number:62**************
Relalgia de Generalizare

> Se realizeaza Tntre elemente de acelagi tip =>
ierarhii

> Modeleaza situatii Tn care un element este un
caz particular al altui element

> Elementul particular mo§tene§te relagiile Tn care
este implicat elementul general

> Notatie: <—

***************Ending Page***************


***************Beginning Page***************
***************page number:63**************
Exemplu 1
Persoané
/ \ Sistem de
Logare

***************Ending Page***************

***************Beginning Page***************
***************page number:64**************
Relagia de Generalizare

***************Ending Page***************


***************Beginning Page***************
***************page number:65**************
Relagla cle Iependenga

> Apare Tntre douéi UseCase-uri

> Modeleazéi situagiile Tn care
O Un UseCase folose§te comportamentul definit Tn alt
UseCase (<<inc|ude>>)
O Comportamentul unui UseCase poate fi extins de
citre un alt UseCase (<<extend>>)

l >Notal;ie <--------------

***************Ending Page***************

***************Beginning Page***************
***************page number:66**************
<<m>> "1'"
m
MGM‘
“M M on“
Module
<<onond>>
0mm
M
\i <<0xiend>>
b
@ scam
i
School
86800!
@
i 66
lecl'm

***************Ending Page***************


***************Beginning Page***************
***************page number:67**************
SlasOrduSydom
1; "'"22Fm"";""'§
Customer .
‘\gExtond» I
“~\ SalesManager
4 V

***************Ending Page***************

***************Beginning Page***************
***************page number:68**************
Exe m pl u 4
<<include>> .\\<<include>>
.k: b

***************Ending Page***************


***************Beginning Page***************
***************page number:69**************
Concluzii
> Metodologii
> lngineria ceringelor
> Diagrame Use-case

***************Ending Page***************

***************Beginning Page***************
***************page number:70**************
lntrebéri

> 1) Ce metodologie ar fi mai utilé pentru
angajagii companiei de IT?

> 2) Ce metodologie ar fi mai utiléi pentru client
(manager, end-user)?

> Exemplu: eSims

***************Ending Page***************


***************Beginning Page***************
***************page number:71**************
Bibliografie

> Anil Hemrajani, Agile Java Development with
Spring, Hibernate and Eclipse, 2006

> Dorel Lucanu, Principii POO

***************Ending Page***************


***************Beginning Page***************
***************page number:72**************
ArgoUML
> Link: httg:[[argouml—
downloads.tigris.org[argoum|—0.34[
> Varianta “zip” trebuie doar dezarhivatéi
> Trebuie séi aveti instalatJava
O Tn Path sa aveti c:\Program Files\Java\jdk1.8.0_141\bin
O Variabila
JAVA_HOME:c:\Program Files\Java\jdk1.8.0_141\

***************Ending Page***************



***************Beginning Page***************
***************page number:73**************
L| n ks
> XP: httg:[[www.extremegrogramming.org[rules.htm|
> Agile: httg:[[agilemanifestoorgz
> Scrum: httg:[Z'|effsuther|and.com[oogslalschwagubgdf
> Lean: httg:[[www.gro'|ect|gerfect.com.auZinfo_|ean_develogment.ghg
> V-model: http:[[en.wikigedia.org[wiki[V-Model,
httgj[en.wiki|gedia.org[WikiZV-
Model_%2850 tware_deve|o|gment%29
> Project Management White Paper Index:
httg: Z (WWW.gro'|ect|gerfect.com.au [wg_index.|gh|g
> Requirements analysis process:
httg:[[www.outsourceZindia.com(software!ReguirementAnalysisasg
> lmageCup 2009:
httg:[[fiistudent.wordgress.com[20081i21101imagine-cug-2009-
ce-ar-fi-daca-intr-o-zi-am-aiunge-toti-Ia-muzeuZ
> Curs 2 lP — 0vidiu Gheorghies:
httgj[www.infoiasi.ro[~ogh[filesZichurs-OZJQdf
> Software house: httg:[[en.wiki|gedia.org[wikiZSoftware_house
.:iiwww.;uru99.comilearnsoftwarereguirementsanalysis
ud .html
73

***************Ending Page***************


