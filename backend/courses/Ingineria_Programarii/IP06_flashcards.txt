[{content={parts=[{text=--FlashCardSeparator--
Single
--InteriorSeparator--
What does SRP stand for in the SOLID principles?
--InteriorSeparator--
Single Responsibility Principle
--InteriorSeparator--
easy
--InteriorSeparator--
5
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following are elements of a Design Pattern, as defined in the lecture?
--InteriorSeparator--
(right) Problem
(right) Solution
(wrong) Algorithm
(wrong) Data Structure
--InteriorSeparator--
medium
--InteriorSeparator--
10
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Who are the authors of the book "Design Patterns: Elements of Reusable Object-Oriented Software"?
--InteriorSeparator--
Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides
--InteriorSeparator--
easy
--InteriorSeparator--
9
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following is a creational design pattern?
--InteriorSeparator--
(right) Singleton
(right) Factory Method
(wrong) Adapter
(wrong) Observer
--InteriorSeparator--
medium
--InteriorSeparator--
19
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the intent of the Adapter pattern?
--InteriorSeparator--
Allows classes with incompatible interfaces to work together.
--InteriorSeparator--
medium
--InteriorSeparator--
20
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following is a behavioral design pattern?
--InteriorSeparator--
(right) Observer
(wrong) Facade
(right) Command
(wrong) Prototype
--InteriorSeparator--
medium
--InteriorSeparator--
21
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does the Flyweight pattern aim to achieve?
--InteriorSeparator--
Reduces the cost of creating and manipulating a large number of similar objects
--InteriorSeparator--
medium
--InteriorSeparator--
20
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following are steps to take when using a Design Pattern?
--InteriorSeparator--
(right) Define the classes
(right) Read the pattern once through for an overview
(wrong) Implement all patterns simultaneously
(wrong) Ignore the Sample Code section
--InteriorSeparator--
hard
--InteriorSeparator--
25
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the purpose of JUnit testing?
--InteriorSeparator--
Testing a function, a program, a screen, or a functionality.
--InteriorSeparator--
easy
--InteriorSeparator--
27
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
According to the slides, which of the following statements are myths about software development?
--InteriorSeparator--
(right) A general description of objectives is sufficient to begin writing a program
(right) Once the program is written and it is functional, our role has ended
(wrong) Software development is a straightforward, linear process
(wrong) Detailed documentation is essential from the outset, regardless of the project's size
--InteriorSeparator--
hard
--InteriorSeparator--
43
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the main purpose of the "Intent" section when describing a design pattern?
--InteriorSeparator--
To answer the question: What does the design pattern do?
--InteriorSeparator--
medium
--InteriorSeparator--
16
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following is a Structural Pattern?
--InteriorSeparator--
(wrong) Command
(right) Decorator
(wrong) Singleton
(right) Composite
--InteriorSeparator--
hard
--InteriorSeparator--
20
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is Code Coverage?
--InteriorSeparator--
A way to measure the extent to which the source code of a program has been tested.
--InteriorSeparator--
medium
--InteriorSeparator--
38
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following are benefits of using Design Patterns?
--InteriorSeparator--
(right) Improved communication between developers
(wrong) Guaranteed bug-free code
(right) Design at a higher level of abstraction
(wrong) Elimination of the need for documentation
--InteriorSeparator--
hard
--InteriorSeparator--
11
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the 'Problem' element in a Design Pattern?
--InteriorSeparator--
Describes when to apply the pattern. It explains the problem and its context.
--InteriorSeparator--
medium
--InteriorSeparator--
12
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What are some potential drawbacks of using Design Patterns?
--InteriorSeparator--
(right) Can lead to over-engineering if applied inappropriately
(wrong) Always results in simpler code
(wrong) Eliminates the need for testing
(right) Can increase complexity if not well-understood
--InteriorSeparator--
hard
--InteriorSeparator--
44
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the main goal of the High Cohesion principle?
--InteriorSeparator--
To keep related parts of a module together.
--InteriorSeparator--
medium
--InteriorSeparator--
4
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which SOLID principle advocates for minimizing dependencies between classes?
--InteriorSeparator--
(right) DIP (Dependency Inversion Principle)
(wrong) SRP (Single Responsibility Principle)
(wrong) ISP (Interface Segregation Principle)
(right) Low Coupling (GRASP)
--InteriorSeparator--
hard
--InteriorSeparator--
4, 5
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the purpose of the "Consequences" element in a design pattern?
--InteriorSeparator--
To describe the results and trade-offs of applying the pattern.
--InteriorSeparator--
medium
--InteriorSeparator--
14
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following best describes the 'Solution' element of a Design Pattern?
--InteriorSeparator--
(right) Describes the elements that make up the design, their relationships, responsibilities, and collaborations
(wrong) Provides a concrete, ready-to-use implementation for a specific problem
(right) Provides an abstract description of a design problem and how a general arrangement of elements solves it
(wrong) Contains specific code examples that can be directly copy-pasted into a project
--InteriorSeparator--
hard
--InteriorSeparator--
13
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the purpose of the Builder design pattern?
--InteriorSeparator--
Constructs complex objects by separating construction and representation.
--InteriorSeparator--
medium
--InteriorSeparator--
19
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following are true regarding the benefits of writing tests?
--InteriorSeparator--
(right) Tests should be pre-defined
(wrong) Test should never use simulators for input and output
(right) Test results should be documented
(wrong) Tests are usually conducted by the client
--InteriorSeparator--
hard
--InteriorSeparator--
27
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does the acronym DRY stand for?
--InteriorSeparator--
Don't Repeat Yourself
--InteriorSeparator--
easy
--InteriorSeparator--
5
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
When should you consider using the Facade pattern?
--InteriorSeparator--
(right) When you want to provide a simplified interface to a large body of code
(wrong) When you need to create multiple instances of a class
(wrong) When you want to dynamically add behavior to an object
(right) When you want to hide the complexity of a subsystem
--InteriorSeparator--
hard
--InteriorSeparator--
20
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does YAGNI stand for?
--InteriorSeparator--
You Aren't Gonna Need It
--InteriorSeparator--
easy
--InteriorSeparator--
5
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following describes the Liskov Substitution Principle (LSP)?
--InteriorSeparator--
(right) Subtypes must be substitutable for their base types without altering the correctness of the program.
(wrong) Classes should have only one reason to change.
(wrong) Depend upon Abstractions. Do not depend upon concretions
(right) Objects in a program should be replaceable with instances of their subtypes without altering the correctness of that program
--InteriorSeparator--
hard
--InteriorSeparator--
5
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the primary goal of the Information Expert GRASP principle?
--InteriorSeparator--
Assigning a responsibility to the class that has the information necessary to fulfill it.
--InteriorSeparator--
medium
--InteriorSeparator--
4
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What aspects are generally addressed when describing a design pattern?
--InteriorSeparator--
(right) Applicability
(right) Implementation
(wrong) Cost
(wrong) Scalability
--InteriorSeparator--
hard
--InteriorSeparator--
16, 17
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the purpose of the Memento pattern?
--InteriorSeparator--
Provides the ability to restore an object to its previous state.
--InteriorSeparator--
medium
--InteriorSeparator--
21
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is the primary function of the JUnit framework?
--InteriorSeparator--
(right) To facilitate unit testing in Java
(wrong) To provide a code coverage analysis tool
(wrong) To manage project dependencies
(right) To allow for writing and running repeatable tests
--InteriorSeparator--
medium
--InteriorSeparator--
27
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the main purpose of the State behavioral pattern?
--InteriorSeparator--
Allows an object to alter its behavior when its internal state changes
--InteriorSeparator--
medium
--InteriorSeparator--
22
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What are some ways to select an appropriate design pattern for a given problem?
--InteriorSeparator--
(right) Consider how design patterns solve design problems
(right) Scan intent sections of the design patterns
(wrong) Randomly select a pattern and adapt the design to fit it
(wrong) Ignore existing code and start from scratch
--InteriorSeparator--
hard
--InteriorSeparator--
24
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is one potential problem with a "requirements are constantly changing, but the software is flexible and can easily adapt" assumption?
--InteriorSeparator--
The requirements will never settle and the project risks feature creep or constant refactoring.
--InteriorSeparator--
hard
--InteriorSeparator--
43
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What could occur if you follow the assumption "Software Engineering will create voluminous documentation and will cause delays"
--InteriorSeparator--
(right) Insufficient documentation could be created, and code maintainability would suffer.
(right) Communication issues among the development team.
(wrong) Improved product quality due to reduced administrative overhead
(wrong) Faster time to market due to a focus on coding rather than documentation
--InteriorSeparator--
hard
--InteriorSeparator--
43
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does it mean when a programmer follows the myth, "Until the program doesn't work, we cannot assess the quality."
--InteriorSeparator--
Quality is only assessed after development is complete.
--InteriorSeparator--
hard
--InteriorSeparator--
43
--FlashCardSeparator--
}], role=model}, finishReason=STOP, citationMetadata={citationSources=[{startIndex=8585, endIndex=8707, uri=https://rust-unofficial.github.io/patterns/additional_resources/design-principles.html}]}, avgLogprobs=-0.23343790138669088}]