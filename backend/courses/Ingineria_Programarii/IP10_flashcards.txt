[{content={parts=[{text=--FlashCardSeparator--
Single
--InteriorSeparator--
What are the three categories of GoF design patterns?
--InteriorSeparator--
Creational Patterns, Structural Patterns, Behavioral Patterns
--InteriorSeparator--
easy
--InteriorSeparator--
3
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following are Creational Patterns?
--InteriorSeparator--
(right) Abstract Factory
(right) Builder
(wrong) Adapter
(wrong) Decorator
--InteriorSeparator--
medium
--InteriorSeparator--
4
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the intent of the Interpreter pattern?
--InteriorSeparator--
Given a language, define a representation for its grammar along with an interpreter.
--InteriorSeparator--
easy
--InteriorSeparator--
8
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following elements are part of the Interpreter pattern's grammar as described in the provided material?
--InteriorSeparator--
(right) literal
(right) alternation
(wrong) container
(wrong) proxy
--InteriorSeparator--
medium
--InteriorSeparator--
9
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
According to the example provided, what is the frequency for "Sa" in the "musical notes" interpreter?
--InteriorSeparator--
256 Hz
--InteriorSeparator--
easy
--InteriorSeparator--
11
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What are some of the downsides to using the Interpreter Pattern?
--InteriorSeparator--
(right) Code becomes complicated because of lots of extra classes
(wrong) Simplifies code with lots of states
(right) May detach user classes from model classes
(wrong) Removes S and O from SOLID
--InteriorSeparator--
hard
--InteriorSeparator--
14
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is another name for the Iterator pattern?
--InteriorSeparator--
Cursor
--InteriorSeparator--
easy
--InteriorSeparator--
15
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What is the purpose of the Iterator Pattern?
--InteriorSeparator--
(right) To access an aggregate object’s contents without exposing its internal representation
(right) To support multiple traversals of aggregate objects
(wrong) To provide a single interface for traversing single structures
(wrong) To expose the internal representation
--InteriorSeparator--
medium
--InteriorSeparator--
17
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
According to the remote control example, what action is used to iterate through channels?
--InteriorSeparator--
Pressing Up and Down or Forward and Back keys
--InteriorSeparator--
easy
--InteriorSeparator--
18
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What are the benefits of using the Iterator pattern?
--InteriorSeparator--
(right) Allows the use of multiple iterators at the same time on the same collections
(right) Iteration can be stopped and resumed at will
(wrong) Simplifies collections
(wrong) Slows iteration over complex collections
--InteriorSeparator--
hard
--InteriorSeparator--
21
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the intent of the Mediator pattern?
--InteriorSeparator--
Define an object that encapsulates how a set of objects interact.
--InteriorSeparator--
easy
--InteriorSeparator--
22
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
When should the Mediator pattern be used?
--InteriorSeparator--
(right) When a set of objects communicate in complex ways
(right) When reusing an object is difficult because it refers to many other objects
(wrong) When objects communicate in simple, well-defined ways
(wrong) When subclassing is preferred for customization
--InteriorSeparator--
medium
--InteriorSeparator--
24
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is one potential drawback of the Mediator pattern?
--InteriorSeparator--
The Mediator may become a God Object (knows too much, does too many things).
--InteriorSeparator--
medium
--InteriorSeparator--
26
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What are the benefits of using the Mediator pattern?
--InteriorSeparator--
(right) Reduces coupling
(right) Allows for easy reuse of classes
(wrong) Complicates coupling
(wrong) Requires more classes
--InteriorSeparator--
medium
--InteriorSeparator--
26
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is another name for the Memento pattern?
--InteriorSeparator--
Token
--InteriorSeparator--
easy
--InteriorSeparator--
27
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What roles are involved in the Memento pattern?
--InteriorSeparator--
(right) Memento
(right) Originator
(wrong) Iterator
(wrong) Mediator
--InteriorSeparator--
medium
--InteriorSeparator--
28
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the main purpose of the Caretaker in the Memento pattern?
--InteriorSeparator--
Responsible for keeping the memento.
--InteriorSeparator--
medium
--InteriorSeparator--
28
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What are some of the downsides to using the Memento pattern?
--InteriorSeparator--
(right) Numerous mementos use a lot of memory
(right) Overhead for the caretakers as they need to manage which mementos are obsolete
(wrong) Decreases responsibilities of the originator
(wrong) Mementos are easy to change
--InteriorSeparator--
hard
--InteriorSeparator--
31
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the intent of the Observer pattern?
--InteriorSeparator--
Define a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically.
--InteriorSeparator--
easy
--InteriorSeparator--
32
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What are other names for the Observer Pattern?
--InteriorSeparator--
(right) Dependents
(right) Publish-Subscribe
(wrong) Encapsulation
(wrong) Abstraction
--InteriorSeparator--
medium
--InteriorSeparator--
32
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What Java library makes extensive use of the Observer pattern for event management?
--InteriorSeparator--
Java Swing
--InteriorSeparator--
easy
--InteriorSeparator--
36
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
When should the Observer pattern be used?
--InteriorSeparator--
(right) When a change to one object requires changing others, and you don’t know how many objects need to be changed
(right) When an object should be able to notify other objects without making assumptions about who these objects are
(wrong) When the number of objects to be changed is known beforehand
(wrong) When an object needs to make assumptions about the identity of the observers
--InteriorSeparator--
hard
--InteriorSeparator--
34
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What happens to the order of notification when using the Observer pattern?
--InteriorSeparator--
The order of notification of observers is random.
--InteriorSeparator--
medium
--InteriorSeparator--
40
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What are the benefits of using the Observer pattern?
--InteriorSeparator--
(right) Can establish relations between objects at runtime
(right) Preserves S and O (from SOLID)
(wrong) Decreases coupling
(wrong) Allows for a predetermined notification order
--InteriorSeparator--
hard
--InteriorSeparator--
40
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the intent of the State pattern?
--InteriorSeparator--
Allow an object to alter its behavior when its internal state changes.
--InteriorSeparator--
easy
--InteriorSeparator--
41
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
When should the State pattern be used?
--InteriorSeparator--
(right) An object’s behavior depends on its state
(right) Operations have large, multipart conditional statements that depend on the object’s state
(wrong) When an object’s behavior does not depend on its state
(wrong) When operations can be easily expressed without conditional statements
--InteriorSeparator--
medium
--InteriorSeparator--
43
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is a potential drawback of the State pattern?
--InteriorSeparator--
Leads to large and unnecessary overhead for objects with few states or whose states rarely change.
--InteriorSeparator--
medium
--InteriorSeparator--
44
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What are the benefits of using the State pattern?
--InteriorSeparator--
(right) Simplifies the code of the objects by removing lots of if statements
(right) Preserves S and O (from SOLID)
(wrong) Complicates code with more if statements
(wrong) Does not preserve SOLID
--InteriorSeparator--
hard
--InteriorSeparator--
44
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is another name for the Strategy pattern?
--InteriorSeparator--
Policy
--InteriorSeparator--
easy
--InteriorSeparator--
45
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What are the key elements of the Strategy pattern?
--InteriorSeparator--
(right) Algorithms can be selected at runtime
(right) Line breaking algorithms
(wrong) Can only select inheritance at design time
(wrong) Depends heavily on implementation
--InteriorSeparator--
medium
--InteriorSeparator--
47
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does the Strategy pattern replace?
--InteriorSeparator--
Inheritance with composition
--InteriorSeparator--
medium
--InteriorSeparator--
51
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What are some downsides of using the Strategy pattern?
--InteriorSeparator--
(right) If you only need few algorithms, the extra complication of code is not useful
(right) Users need to understand the differences between implementations to use them properly
(wrong) Can swap algorithms at compile-time
(wrong) Requires less code
--InteriorSeparator--
hard
--InteriorSeparator--
51
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What principle is the Template Method often referred to as?
--InteriorSeparator--
The Hollywood Principle: "Don't call us, we'll call you."
--InteriorSeparator--
easy
--InteriorSeparator--
53
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What are some of the problems that the Template Method can have?
--InteriorSeparator--
(right) If you override some part of the algorithm, it can lead to breaking Liskov substitution
(right) The more elements in the template, the more difficult it is to manage
(wrong) Duplicate code can never be sent to a superclass
(wrong) Clients are affected by changes to other segments
--InteriorSeparator--
hard
--InteriorSeparator--
56
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What does the Visitor pattern let you do without changing the classes of the elements on which it operates?
--InteriorSeparator--
Define a new operation
--InteriorSeparator--
easy
--InteriorSeparator--
57
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What happens to visitors when adding new classes to a collection using the Visitor pattern?
--InteriorSeparator--
(right) Every time you add an extra class to the collection, all visitors must be updated
(wrong) Only specific visitors need updating
(wrong) The classes have already been decided
--InteriorSeparator--
hard
--InteriorSeparator--
61
--FlashCardSeparator--
}], role=model}, finishReason=STOP, citationMetadata={citationSources=[{startIndex=5830, endIndex=5972, uri=https://patents.google.com/patent/WO1999060478A1/en}]}, avgLogprobs=-0.16300639964516273}]