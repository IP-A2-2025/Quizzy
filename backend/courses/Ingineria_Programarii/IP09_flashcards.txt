[{content={parts=[{text=```
--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following are creational patterns?
--InteriorSeparator--
(right) Abstract Factory
(right) Singleton
(wrong) Adapter
(wrong) Composite
--InteriorSeparator--
medium
--InteriorSeparator--
2, 3
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the main intent of the Composite pattern?
--InteriorSeparator--
Compose objects into tree structures to represent part-whole hierarchies, allowing clients to treat individual objects and compositions uniformly.
--InteriorSeparator--
medium
--InteriorSeparator--
6
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
When is the Composite pattern applicable?
--InteriorSeparator--
(right) When you want to represent part-whole hierarchies of objects.
(right) When clients should be able to ignore the difference between compositions of objects and individual objects.
(wrong) When you want to add responsibilities to individual objects dynamically.
(wrong) When you want to provide a simple interface to a complex subsystem.
--InteriorSeparator--
medium
--InteriorSeparator--
9
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What SOLID principle does the Composite pattern preserve?
--InteriorSeparator--
Open/Closed Principle (O)
--InteriorSeparator--
easy
--InteriorSeparator--
15
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the intent of the Decorator pattern?
--InteriorSeparator--
Attach additional responsibilities to an object dynamically, providing a flexible alternative to subclassing for extending functionality.
--InteriorSeparator--
medium
--InteriorSeparator--
16
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
When is the Decorator pattern applicable?
--InteriorSeparator--
(right) To add responsibilities to individual objects dynamically and transparently.
(right) For responsibilities that can be withdrawn.
(wrong) When you want to layer your subsystems.
(wrong) To support large numbers of fine-grained objects efficiently.
--InteriorSeparator--
medium
--InteriorSeparator--
20
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What SOLID principle does the Decorator pattern preserve?
--InteriorSeparator--
Single Responsibility Principle (S)
--InteriorSeparator--
easy
--InteriorSeparator--
25
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the main intent of the Facade pattern?
--InteriorSeparator--
Provide a unified interface to a set of interfaces in a subsystem.
--InteriorSeparator--
medium
--InteriorSeparator--
26
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
When is the Facade pattern applicable?
--InteriorSeparator--
(right) When you want to provide a simple interface to a complex subsystem.
(right) When there are many dependencies between clients and the implementation classes of an abstraction.
(wrong) When you want to represent part-whole hierarchies of objects.
(wrong) When you need to control access to another object.
--InteriorSeparator--
medium
--InteriorSeparator--
29
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is a potential drawback of the Facade pattern?
--InteriorSeparator--
The facade class runs the risk of being coupled to everything.
--InteriorSeparator--
hard
--InteriorSeparator--
35
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the intent of the Flyweight pattern?
--InteriorSeparator--
Use sharing to support large numbers of fine-grained objects efficiently.
--InteriorSeparator--
medium
--InteriorSeparator--
36
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
When is the Flyweight pattern applicable?
--InteriorSeparator--
(right) Supporting a large number of similar objects.
(right) Objects share at least some attributes.
(wrong) When you want to add responsibilities dynamically
(wrong) When you want to decouple an abstraction from its implementation.
--InteriorSeparator--
medium
--InteriorSeparator--
40
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is a potential drawback of using the Flyweight pattern?
--InteriorSeparator--
It can become costly in processing time.
--InteriorSeparator--
hard
--InteriorSeparator--
44
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the intent of the Proxy pattern?
--InteriorSeparator--
Provide a surrogate or placeholder for another object to control access to it.
--InteriorSeparator--
medium
--InteriorSeparator--
45
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
When should the Proxy pattern be used?
--InteriorSeparator--
(right) When you need to provide some interposed service between the application logic and the client.
(right) To screen or restrict user access to a resource or service.
(wrong) When you need to compose objects into tree structures.
(wrong) When you want to define a family of algorithms
--InteriorSeparator--
medium
--InteriorSeparator--
48
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What SOLID principle does the Proxy pattern preserve?
--InteriorSeparator--
Open/Closed Principle (O)
--InteriorSeparator--
easy
--InteriorSeparator--
52
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the main focus of Behavioral Patterns?
--InteriorSeparator--
Algorithms and the assignment of responsibilities between objects.
--InteriorSeparator--
easy
--InteriorSeparator--
53
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the intent of the Chain of Responsibility pattern?
--InteriorSeparator--
Chain the receiving objects and pass the request along the chain until an object handles it.
--InteriorSeparator--
medium
--InteriorSeparator--
57
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
When is the Chain of Responsibility pattern applicable?
--InteriorSeparator--
(right) When more than one object may handle a request, and the handler isn't known a priori.
(right) When you want to issue a request to one of several objects without specifying the receiver explicitly.
(wrong) When you need to encapsulate a request as an object
(wrong) When you want to minimize memory use by sharing data.
--InteriorSeparator--
medium
--InteriorSeparator--
60
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What SOLID principles does the Chain of Responsibility preserve?
--InteriorSeparator--
Single Responsibility Principle (S) and Open/Closed Principle (O)
--InteriorSeparator--
easy
--InteriorSeparator--
64
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the intent of the Command pattern?
--InteriorSeparator--
Encapsulate a request as an object, thereby letting you parameterize clients with different requests, queue or log requests, and support undoable operations.
--InteriorSeparator--
medium
--InteriorSeparator--
65
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
What benefits does the Command Pattern offer?
--InteriorSeparator--
(right) Supports undo/redo types of operations.
(right) Allows delaying execution.
(wrong) Guarantees that requests are handled.
(wrong) Hides the complexities of the system.
--InteriorSeparator--
medium
--InteriorSeparator--
71
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What SOLID principles does the Command pattern preserve?
--InteriorSeparator--
Single Responsibility Principle (S) and Open/Closed Principle (O)
--InteriorSeparator--
easy
--InteriorSeparator--
71
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Why might the code become complicated in the Command pattern?
--InteriorSeparator--
Because of an extra layer of code between caller and service.
--InteriorSeparator--
hard
--InteriorSeparator--
71
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following Structural design patterns helps to define a hierarchy of objects?
--InteriorSeparator--
(right) Composite
(wrong) Proxy
(wrong) Flyweight
(wrong) Facade
--InteriorSeparator--
medium
--InteriorSeparator--
5
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Which Structural pattern is also known as Wrapper?
--InteriorSeparator--
Decorator
--InteriorSeparator--
medium
--InteriorSeparator--
16
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which of the following scenarios is a good use case for the Proxy pattern?
--InteriorSeparator--
(right) Controlling access to a resource.
(wrong) Creating a complex object step by step.
(right) Delaying the loading of a resource until it is needed.
(wrong) Providing a common interface to a set of subsystems.
--InteriorSeparator--
medium
--InteriorSeparator--
45
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
What is the term used to describe the new objects in behavioral patterns that encapsulate the aspect that is likely to change?
--InteriorSeparator--
Encapsulating variation
--InteriorSeparator--
hard
--InteriorSeparator--
54
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which pattern is used to minimize memory usage by sharing as much data as possible with similar objects?
--InteriorSeparator--
(right) Flyweight
(wrong) Facade
(wrong) Decorator
(wrong) Command
--InteriorSeparator--
easy
--InteriorSeparator--
36
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Which pattern involves attaching additional responsibilities to an object dynamically?
--InteriorSeparator--
Decorator
--InteriorSeparator--
easy
--InteriorSeparator--
16
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Which pattern describes aspects of a program that are likely to change?
--InteriorSeparator--
(right) Behavioral
(wrong) Structural
(wrong) Creational
(wrong) all of the above
--InteriorSeparator--
hard
--InteriorSeparator--
55
--FlashCardSeparator--

--FlashCardSeparator--
Multiple
--InteriorSeparator--
Why can the Flyweight pattern be difficult to implement?
--InteriorSeparator--
(right) It's complicated and not intuitive.
(right) It becomes costly in processing time.
(wrong) Code becomes complicated because of an extra layer of code between caller and service
(wrong) Because of an extra layer of code between caller and service.
--InteriorSeparator--
hard
--InteriorSeparator--
44
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Why can some requests in the Chain of Responsibility pattern not be handled?
--InteriorSeparator--
Because some requests may not be handled by any class.
--InteriorSeparator--
hard
--InteriorSeparator--
64
--FlashCardSeparator--

--FlashCardSeparator--
Single
--InteriorSeparator--
Which structural pattern isolates and masks system complexity from the user?
--InteriorSeparator--
Facade
--InteriorSeparator--
easy
--InteriorSeparator--
35
--FlashCardSeparator--
```}], role=model}, finishReason=STOP, citationMetadata={citationSources=[{startIndex=417, endIndex=551, uri=https://www.ituonline.com/tech-definitions/what-is-software-design-pattern/}, {startIndex=1532, endIndex=1653, uri=http://en.wikipedia.org/wiki/List_of_abstractions_(computer_science)}, {startIndex=6912, endIndex=7063, uri=https://ja.wikipedia.org/wiki/Command_%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3}]}, avgLogprobs=-0.13215634870310108}]