***************Beginning Page***************
***************page number:1**************
lngineria programérii
Curs 13 - 24-25 mai

***************Ending Page***************

***************Beginning Page***************
***************page number:2**************
Outline

> Previous courses...
5 Testing
u SOLID Refactoring

> Program Quality

> Metrics

> Copyright

***************Ending Page***************

***************Beginning Page***************
***************page number:3**************
Degradation of code

> Rigidity — the tendency for software to be difficult
to change, even in simple ways

> Fragility — the tendency of the software to break
in many places every time it is changed

> lmmobility — the inability to reuse software from
other projects or from parts of the same project

> Viscosity — it is easy to do the wrong thing, but
hard to do the right thing

***************Ending Page***************

***************Beginning Page***************
***************page number:4**************
SOLID Refactoring
> Cohesion
O The Release Reuse Equivalency Principle
Q The Common Closure Principle
= The Common Reuse Principle
> Coupling
Q Acyclic Dependencies Principle
a The Stable Dependencies Principle
= The Stable Abstractions Principle

***************Ending Page***************

***************Beginning Page***************
***************page number:5**************
Assessmg quality
> How do we measure the quality of an item?
, Construction quality (how well it is built, whether the
raw material has flaws, etc ...)
a Design quality (comfort, elegance...)
= A combination between quality of design and
construction (sturdiness...)
> In general, we can say that chair A is better than
chair B regarding some particular aspect, but it
is usually difficult to say by how much.

***************Ending Page***************

***************Beginning Page***************
***************page number:6**************
Software Quality (i)
> We do not assess construction quality (=>
unique among engineering applications)
> All quality attributes refer to design.
> Esthetic qualities:
= Software is mostly invisible, and esthetics only
matter for the visible elements
u Apart from the GUI, observable aspects software are:
' Notations for design and writing of code
- Behavior of software when interacting with other
intities.

***************Ending Page***************

***************Beginning Page***************
***************page number:7**************
Software Quality (2)
> When discussing software quality we must:
, Deﬁne those attributes of quality that are of interest;
Determine a way of measuring those attributes;
= Find a way of representing design;
a Write speciﬁcations that will guide developers
(following and implementing design qualities).

***************Ending Page***************

***************Beginning Page***************
***************page number:8**************
Source Code

> Code that implements a given design is a
representation of that design.

> Performing quality assurance after writing code is
expensive and possibly useless.

> Usually, only the manner in which the code is written
is taken into account (coding style, design patterns,
adaptability, maintenance, reuse (coupling, cohesion),
security)

‘ B

***************Ending Page***************

***************Beginning Page***************
***************page number:9**************
Software Quality (3)
> Measures the appropriateness of software to the
environment it is used in.
> Variuos aspecte taken into account are:
7 The software is running;
= The software performs according to specifications;
a The software is safe;
a The software can be adapted as requirements
change.
> A|| measurements regarding quality are relative!

***************Ending Page***************


***************Beginning Page***************
***************page number:10**************
Aspects of Software Quality
> Safety S ﬁ TY
E
> Efficiency ‘ﬁg?
i||i||||||||i||||||||||||1||||
> Maintenance k
II Usability

***************Ending Page***************

***************Beginning Page***************
***************page number:11**************
i
b
Safety
> ls the software complete, correct and robust?
Q Completeness — works for all possible inputs;
a Consistency — always behaves as expected;
C Robustness — behaves well in abnormal
situations (eg. Lack of resources, lack of
internet connection, etc.)

***************Ending Page***************

***************Beginning Page***************
***************page number:12**************
Efficiency

> The software makes efficient use of available

resources (CPU time, network connection, etc.)

v Efficiency is always less important than safety. It is

easier to make safe software efficient than the reverse
$ ‘

***************Ending Page***************

***************Beginning Page***************
***************page number:13**************
. 19 I}
Maintenance
v How easily can the design be changed or
adapted?
> Types of maintenance:
B Corrective: error fixing;
c Perfective: adding features that should have
been part of the product;
Q Adaptive: updating software as requirements
change.

***************Ending Page***************

***************Beginning Page***************
***************page number:14**************
Usability
How easily can the software be taught and used?

***************Ending Page***************

***************Beginning Page***************
***************page number:15**************
Measurable Attributes

> Simplidty
$11‘.IX1.,E‘.MLJWSTHEEI Y

> Modularity ,5"???

***************Ending Page***************

***************Beginning Page***************
***************page number:16**************
> The reverse of complexity.
> Aspects of complexity:
Q Control flow: counts all the possible
execution paths for a program
D Information flow: measures amount of data
transmitted within the program
D Understanding: counts the number of
identifiers and operators

***************Ending Page***************

***************Beginning Page***************
***************page number:17**************
Mod u larity
> Can be measured by examining :
D Cohesion: how well the components of a
module collaborate.
Q Coupling: interaction between modules

***************Ending Page***************

***************Beginning Page***************
***************page number:18**************
Why Use Metrics?

> We use metrics to
L» understand :
D control cg; W55
Q predict / ‘

***************Ending Page***************


***************Beginning Page***************
***************page number:19**************
What Should We Measure

> Size of software

> Complexity of software

> Robustness of software

> Amount of time required to develop
some software

> Resource allocation for development

> Productivity of effort

> Development costs

***************Ending Page***************

***************Beginning Page***************
***************page number:20**************
Estimation

> lntuitively, estimation seem subjective
, To inexperienced persons, it looks like predicting
the future
= This is reinforced when estimation is incorrect and
projects are delivered late

> Formal estimation processes
Q allows the project team to reach a consensus on the
estimates
= improve the accuracy

‘ I“

***************Ending Page***************

***************Beginning Page***************
***************page number:21**************
Estimation
> Successful estimations take into account the
following
= Work Breakdown Structure (WBS) — What are the
tasks that need to be performed to finish the
product?
= Assumptions — how to deal with incomplete
information
a Trust — if stakeholders and engineers trust each
other, the estimate will be more accurate

***************Ending Page***************

***************Beginning Page***************
***************page number:22**************
Work Breakdown Structu re
> A list of tasks that, if completed, will produce
the final product
Q Broken down by feature
O By project phase (requirements tasks, design tasks,
programming tasks, QA tasks, etc.)
a Some combination of the two
=' Should reflect the way previous projects have been
developed

***************Ending Page***************

***************Beginning Page***************
***************page number:23**************
Work Breakdown Structu re
> A project should be broken down into lO , 20
tasks
= Regardless of the size of the project
O For large projects (e.g. an operating system), the
tasks are large
a For smaller projects, the tasks are correspondingly
smaller
> Create an estimate for the cost of each task
Q Most accurate estimates are those that rely on prior
experience
= NO estimate is guaranteed to be accurate
‘ 1,

***************Ending Page***************

***************Beginning Page***************
***************page number:24**************
As s u m ptio n s
> At the beginning of the development team
members do not have all the information
= Assumptions are needed to fill in missing things
O Assumptions can also be placeholders which will be
corrected later
= If an assumption is proven incorrect, the timeline of
the project MUST be adjusted
> For effective estimates, assumptions need to
be written down
= If not, the team will need to have the same
discussion again

***************Ending Page***************

***************Beginning Page***************
***************page number:25**************
Assumptions and Trust

> Estimates can either be a source of trust or
distrust between the project team and
managers.

> Stakeholders need the project completed but
usually do not have software engineering
experience

> Project managers must take care to make the
estimation process as open and honest as
possible

***************Ending Page***************

***************Beginning Page***************
***************page number:26**************
Assumptions and Trust
> It is common for nontechnical people to
assume that programmers pad their
estimates
=' They have a "rule" by which they cut off a third or
half of any estimate
, This lack of trust causes engineers to automatically
pad their estimates
> An important part of running successful
software projects is reaching a common
understanding between the engineers,
managers, and stakeholders.
‘ 15

***************Ending Page***************

***************Beginning Page***************
***************page number:27**************
Basic Metrics
> KLOC: Kilo Lines Of Code
> Effort, PM: Person — Month
Sum > f," ‘

***************Ending Page***************


***************Beginning Page***************
***************page number:28**************
COCOMO 2

> Boehm 1995

> Takes into consideration high level development
tools and techniques
Prototyping
a Modular development
a 4GL (fourth generation language)

> Allows for estimates from the very first stages of
development

***************Ending Page***************

***************Beginning Page***************
***************page number:29**************
COCOMO 2: Initial prototyping
> Effort required to create a prototype of the
application
> Based on the Number of Object Points (NOP)
> Formula for computing effort:
NOP
PM: 1—Preuse i
( / )PROD

***************Ending Page***************

***************Beginning Page***************
***************page number:30**************
NOP

> Investigate the screens and dialogs that are
needed
a Simple: l
= Complex: 2
u Very complex: 3

> Reports that need generated
a Simple: 2
= Complex: 5
~ Very complex: 8

> Each lower level module (eg. 3GL): lO

I > The sum of all of the above represents the NOP.

***************Ending Page***************

***************Beginning Page***************
***************page number:31**************
COCOMO 2: after prototyping
> Estimate the total lines of code (ESLOC)
> Takes into account

a Requirements instability

a Possibilities of code reuse

***************Ending Page***************

***************Beginning Page***************
***************page number:32**************
COCOMO 2: Influences on Costs
> Product attributes
, Safety, module complexity, size of user manual, size
of the required database, amount of reusable
components
> Platform attributes
= Constraints referring to execution time; platform
volatility, memory constraints

***************Ending Page***************

***************Beginning Page***************
***************page number:33**************
COCOMO 2: Influences on Costs
(cont.)
> Personnel attributes
, Analyst experience; developer experience; personnel
continuity; knowledge of the domain of the problem to
be solved with regards to analysts and developers;
knowledge of the programming language and
development tools
> Project attributes
~ Required tools; distance between development teams
(eg. different countries) and quality of communication;
Development plan compression
‘ “

***************Ending Page***************

***************Beginning Page***************
***************page number:34**************
The Planning Game

> A planning method from Extreme
Programming (XP)

> A method used to manage the negotiation
between the engineering team (Development)
and the stakeholders (Business)
a Treats the planning process as a game
= playing pieces are “user stories" written on cards
Q the goal is to assign value to stories and put them

into production overtime

***************Ending Page***************

***************Beginning Page***************
***************page number:35**************
The Planning Game

> Unlike other planning methodologies, it does
not require a documented description of the
scope of the project to be estimated

> The Planning Game combines
= estimation
Q identifying the scope of the project
u Identifying the tasks required to complete the

software

***************Ending Page***************

***************Beginning Page***************
***************page number:36**************
The Plannmg Game
> The planning process is highly iterative. Each
iterations looks like this:
~ Scope is established by having Development and
Business work together to interactively write the
stories.
= Each story is given an estimate of l, 2, or 3 weeks.
~ Larger stories are split into multiple iterations
. Business is given an opportunity to steer the project
between iterations.
Q The estimates are created by the programmers,
based on the stories that are created.
= Commitments are agreed upon
‘ ‘a

***************Ending Page***************


***************Beginning Page***************
***************page number:37**************
Distributing Workforce Over Time
> 20 PM. Are the following correct?
6 20 people working l month
u 4 people working 5 months
= l person working 20 months
v Individual productivity decreases as team size
increases
a Communication overhead
= On adding new members, productivity decreases
initially
> Adding peop/e to a team behind of schedule
makes that project more behind schedule.
‘is’ law)

***************Ending Page***************

***************Beginning Page***************
***************page number:38**************
Distributing Workforce Over Time (2)
> For a team with P members, one can have
between P-i and P(P—i)/2 communication
channels
> Each channel is a decrease in efficiency
Q
a
I o 0 we“

***************Ending Page***************

***************Beginning Page***************
***************page number:39**************
How Not to Plan and Estimate

Costs

> We have 12 months to finish thejob, so it will
take 12 months.

> A competitor asked for $1 .OO0.000. We wil ask
for 5900.000.

> The client budget is $500000. That will be the
exact cost of development.

> Development takes l year, but we say it will take
10 months. A delay of 2 months is not

l important...

***************Ending Page***************

***************Beginning Page***************
***************page number:40**************
Problems with Metrics

> Lack of accuracy

> Employee pushback

> Use for other purposes than intended

> Animosity within the development team

***************Ending Page***************

***************Beginning Page***************
***************page number:41**************
C o py r | g h t

> The rights enjoyed by authors with regards to
their work;

> Copyright is the instrument of protection of
authors and their work;

> Copyright gives the creator of an original work
exclusive right fora certain time period in
relation to that work, including its publication,
distribution and adaptation; after which time the
work is said to enter the public domain.

***************Ending Page***************

***************Beginning Page***************
***************page number:42**************
Excluswe rights

> Several exclusive rights typically attach to the
holder of a copyright:
= to produce copies or reproductions of the work and to
sell those copies (mechanical rights; including,
sometimes, electronic copies: distribution rights)
a to create derivative works (works that adapt the
original work)
a to perform or display the work publicly (performance
rights)
Q to sell or assign these rights to others
a to transmit or display by radio or video (broadcasting

I rightS)

***************Ending Page***************

***************Beginning Page***************
***************page number:43**************
Blbllography

> Extreme Programming Explained by Kent
Beck (Addison Wesley, 2000)

> Applied Software Project Management, by
Andrew Stellman and Jennifer Greene
(0’Reilly, 2006)

***************Ending Page***************

***************Beginning Page***************
***************page number:44**************
L| n ks

> Bug Life Cycle: httQIZ [www.buzzle.com[editorialsl4i
6*2005i681 77.2159,
http: Z [gastationwordpressxom[2008[06!I 3 [process
-for-bug—|ife—cycle[

> COCOMO: httg:[[en.wikipedia.org[wikilCOCOMO

v Cur512, Ovidiu si Adriana Gheorghies:
httQ:Z[www.info.uaic.ro[~ogh[filesliglcursil 2.9df

***************Ending Page***************

