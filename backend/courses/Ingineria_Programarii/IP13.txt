***************Beginning Page***************
***************page number:1**************
I I V I I
lngmerla programaru
Curs 13 — 24-25 mai

***************Ending Page***************

***************Beginning Page***************
***************page number:2**************
Outline

> Previous courses...
o Testing
O SOLID Refactoring

> Program Quality

> Metrics

> Copyright

***************Ending Page***************


***************Beginning Page***************
***************page number:3**************
Degradation of code

> Rigidity — the tendency for software to be difficult
to change, even in simple ways

> Fragility — the tendency of the software to break
in many places every time it is changed

> lmmobility — the inability to reuse software from
other projects or from parts of the same project

> Viscosity — it is easy to do the wrong thing, but
hard to do the right thing

***************Ending Page***************

***************Beginning Page***************
***************page number:4**************
SOLID Refactoring
> Cohesion
O The Release Reuse Equivalency Principle
O The Common Closure Principle
O The Common Reuse Principle
> Coupling
O Acyclic Dependencies Principle
o The Stable Dependencies Principle
O The Stable Abstractions Principle

***************Ending Page***************


***************Beginning Page***************
***************page number:5**************
Assessmg quallty
> How do we measure the quality of an item?
O Construction quality (how well it is built, whether the
raw material has flaws, etc ...)
O Design quality (comfort, elegance...)
O A combination between quality of design and
construction (sturdiness...)
> ln general, we can say that chair A is better than
chair B regarding some particular aspect, but it
is usually difficult to say by how much.

***************Ending Page***************

***************Beginning Page***************
***************page number:6**************
Software Quality (i)
> We do not assess construction quality (:>
unique among engineering applications)
> All quality attributes refer to design.
> Esthetic qualities:
O Software is mostly invisible, and esthetics only
matter for the visible elements
o Apart from the GUI, observable aspects software are:
- Notations for design and writing of code
- Behavior of software when interacting with other
intities.

***************Ending Page***************


***************Beginning Page***************
***************page number:7**************
Software Quality (2)
> When discussing software quality we must:
o Define those attributes of quality that are of interest;
O Determine a way of measuring those attributes;
o Find a way of representing design;
o Write specifications that will guide developers
(following and implementing design qualities).

***************Ending Page***************

***************Beginning Page***************
***************page number:8**************
Source Code

> Code that implements a given design is a
representation of that design.

> Performing quality assurance after writing code is
expensive and possibly useless.

> Usually, only the manner in which the code is written
is taken into account (coding style, design patterns,
adaptability, maintenance, reuse (coupling, cohesion),

l security)

***************Ending Page***************


***************Beginning Page***************
***************page number:9**************
Software Quality (3)

> Measures the appropriateness of software to the
environment it is used in.

> Variuos aspecte taken into account are:
O The software is running;
O The software performs according to specifications;
o The software is safe;
O The software can be adapted as requirements
change.

| > All measurements regarding quality are relative!

***************Ending Page***************

***************Beginning Page***************
***************page number:10**************
Aspects of Software Quality
> Safety
if?“
Eff'c'enc FIT-"f
i“i"iii"iii
> Maintenance flwi
> Usability pg

***************Ending Page***************


***************Beginning Page***************
***************page number:11**************
d
Safety
> ls the software complete, correct and robust?
O Completeness — works for all possible inputs;
O Consistency — always behaves as expected;
O Robustness — behaves well in abnormal
situations (eg. Lack of resources, lack of
internet connection, etc.)

***************Ending Page***************

***************Beginning Page***************
***************page number:12**************
Efficiency

> The software makes efficient use of available

resources (CPU time, network connection, etc.)

> Efficiency is always less important than safety. It is

easier to make safe software efficient than the reverse
$ ‘

***************Ending Page***************


***************Beginning Page***************
***************page number:13**************
. a ‘$.-
Malntenance
> How easily can the design be changed or
adapted?
> Types of maintenance:
O Corrective: error fixing;
O Perfective: adding features that should have
been part of the product;
O Adaptive: updating software as requirements
change.

***************Ending Page***************

***************Beginning Page***************
***************page number:14**************
Usability
How easily can the software be taught and used?

***************Ending Page***************


***************Beginning Page***************
***************page number:15**************
Measurable Attributes
> Simplicity 3'Find x'%x : I
S IMPLIC 1T Y
> Modularity
HQ’.

***************Ending Page***************

***************Beginning Page***************
***************page number:16**************
> The reverse of complexity.
> Aspects of complexity:
O Control flow: counts all the possible
execution paths for a program
O Information flow: measures amount of data
transmitted within the program
O Understanding: counts the number of
identifiers and operators

***************Ending Page***************


***************Beginning Page***************
***************page number:17**************
I I
C I’ X l l '
> an emeasue ye amnng.
I
I
° CO e5|0n OW WE t E COIII OHEIItS O a
I
HIOCIUIE collaborate.
I I I
I
° COU |n Interactlon bEtWGGII IIIOClUlES
I
getName
getTy-pe n
getTexName
Bremen-w :Order “WT'm'o-P 1'1*'geﬂ_°‘a'°—r
— m
Checkout 12: 3.1: getlnfo0+
Customer orderTotal:= h _ .
calculateTotalO 1.1.1.getPr|ce +
2; debit‘); _l" {numberOrdered}
1 n
- - :Credit - -
n §§§§QTZL get/WNW? W 3-dlsnlaar0 :Checkout
getArdiTexName — Egg
gamete ﬁrm
map n getDecay-Channel
getDecay-Group 1
n geiPDGID
1 map n getCOnﬁdenceLevel 2.2: commitO-Iv Processor
getFamily pdgid .I' name 1 map getDecay-Group m
getParticle map map getDecay-Particles
getFraotion
getName
n n getNegError
getP
getName 1 0-1 getPUn'rt
etS IF Ct
getConfidenceLevel getName gget'ﬁxeNaameor
getNegError
_ getPosError
getScaleFactor
getUn'rt
geWalue 17

***************Ending Page***************

***************Beginning Page***************
***************page number:18**************
Why Use Metrics?

> We use metrics to
O understand .3. *
O control PAMA A
O predict / ‘ \i '

***************Ending Page***************


***************Beginning Page***************
***************page number:19**************
What Should We Measure

> Size of software

> Complexity of software

> Robustness of software

> Amount of time required to develop
some software

> Resource allocation for development

> Productivity of effort

> Development costs

***************Ending Page***************

***************Beginning Page***************
***************page number:20**************
Estimation

> lntuitively, estimation seem subjective
O To inexperienced persons, it looks like predicting
the future
O This is reinforced when estimation is incorrect and
projects are delivered late

> Formal estimation processes
O allows the project team to reach a consensus on the
estimates
o improve the accuracy

x 20

***************Ending Page***************


***************Beginning Page***************
***************page number:21**************
Estimation
> Successful estimations take into account the
following
o Work Breakdown Structure (WBS) — What are the
tasks that need to be performed to finish the
product?
o Assumptions — how to deal with incomplete
information
O Trust — if stakeholders and engineers trust each
other, the estimate Wlll be more accurate

***************Ending Page***************

***************Beginning Page***************
***************page number:22**************
Work Breakdown Structu re
> A list of tasks that, if completed, will produce
the final product
o Broken down by feature
O By project phase (requirements tasks, design tasks,
programming tasks, QA tasks, etc.)
O Some combination of the two
O Should reflect the way previous projects have been
developed

***************Ending Page***************


***************Beginning Page***************
***************page number:23**************
Work Breakdown Structure
> A project should be broken down into lO — 20
tasks
O Regardless of the size of the project
O For large projects (e.g. an operating system), the
tasks are large
O For smaller projects, the tasks are correspondingly
smaller
> Create an estimate for the cost of each task
<> Most accurate estimates are those that rely on prior
expenence
O NO estimate is guaranteed to be accurate

***************Ending Page***************

***************Beginning Page***************
***************page number:24**************
Assu m pt|ons
> At the beginning of the development team
members do not have all the information
O Assumptions are needed to fill in missing things
O Assumptions can also be placeholders which will be
corrected later
o If an assumption is proven incorrect, the timeline of
the project MUST be adjusted
> For effective estimates, assumptions need to
be written down
o If not, the team will need to have the same
discussion again

***************Ending Page***************


***************Beginning Page***************
***************page number:25**************
Assumptions and Trust

> Estimates can either be a source of trust or
distrust between the project team and
managers.

> Stakeholders need the project completed but
usually do not have software engineering
expenence

> Project managers must take care to make the
estimation process as open and honest as
possible

***************Ending Page***************

***************Beginning Page***************
***************page number:26**************
Assumptlons and Trust
> It is common for nontechnical people to
assume that programmers pad their
estimates
o They have a “rule” by which they cut off a third or
half of any estimate
o This lack of trust causes engineers to automatically
pad their estimates
> An important part of running successful
software projects is reaching a common
understanding between the engineers,
| managers, and stakeholders.

***************Ending Page***************


***************Beginning Page***************
***************page number:27**************
Basic Metrics
> KLOC: Kilo Lines Of Code
> Effort, PM: Person — Month

***************Ending Page***************

***************Beginning Page***************
***************page number:28**************
> Boehm l995

> Takes into consideration high level development
tools and techniques
O Prototyping
o Modular development
o 4GL (fourth generation language)

> Allows for estimates from the very first stages of
development

***************Ending Page***************


***************Beginning Page***************
***************page number:29**************
COCOMO 2: Initial prototyping
> Effort required to create a prototype of the
application
> Based on the Number of Object Points (NOP)
> Formula for computing effort:
NOP
PM I (1 - firmlm

***************Ending Page***************

***************Beginning Page***************
***************page number:30**************
NOP

> Investigate the screens and dialogs that are
needed
O Simple: l
O Complex: 2
O Very complex: 3

> Reports that need generated
O Simple: 2
O Complex: 5
o Very complex: 8

> Each lower level module (eg. 36L): lO

I > The sum of all of the above represents the NOP.

***************Ending Page***************


***************Beginning Page***************
***************page number:31**************
COCQMO 2: after prototyping
> Estimate the total lines of code (ESLOC)
> Takes into account

o Requirements instability

O Possibilities of code reuse

***************Ending Page***************

***************Beginning Page***************
***************page number:32**************
COCOMO 2: Influences on Costs
> Product attributes
o Safety, module complexity, size of user manual, size
of the required database, amount of reusable
components
> Platform attributes
O Constraints referring to execution time; platform
volatility, memory constraints

***************Ending Page***************


***************Beginning Page***************
***************page number:33**************
COCOMO 2: Influences on Costs
(cont.)
> Personnel attributes
O Analyst experience; developer experience; personnel
continuity; knowledge of the domain of the problem to
be solved with regards to analysts and developers;
knowledge of the programming language and
development tools
> Project attributes
O Required tools; distance between development teams
(eg. different countries) and quality of communication;
Development plan compression

***************Ending Page***************

***************Beginning Page***************
***************page number:34**************
The Planning Game

> A planning method from Extreme
Programming (XP)

> A method used to manage the negotiation
between the engineering team (Development)
and the stakeholders (Business)
O Treats the planning process as a game
o playing pieces are “user stories” written on cards
O the goal is to assign value to stories and put them

into production over time

***************Ending Page***************


***************Beginning Page***************
***************page number:35**************
The Planning Game

> Unlike other planning methodologies, it does
not require a documented description of the
scope of the project to be estimated

> The Planning Game combines
O estimation
o identifying the scope of the project
O Identifying the tasks required to complete the

software

***************Ending Page***************

***************Beginning Page***************
***************page number:36**************
The Plannlng Game
> The planning process is highly iterative. Each
iterations looks like this:

O Scope is established by having Development and
Business work together to interactively write the
stories.

o Each story is given an estimate of i, 2, or 3 weeks.
~ Larger stories are split into multiple iterations

o Business is given an opportunity to steer the project
between iterations.

O The estimates are created by the programmers,
based on the stories that are created.

O Commitments are agreed upon

x 36

***************Ending Page***************


***************Beginning Page***************
***************page number:37**************
Distributing Workforce Over Time
> 20 PM. Are the following correct?
O 20 people working l month
O 4 people working 5 months
O l person working 20 months
> Individual productivity decreases as team size
increases
O Communication overhead
O On adding new members, productivity decreases
initially
> Adding people t0 a team behind ofschedu/e
makes that project more behind schedule.
‘is’ law)

***************Ending Page***************

***************Beginning Page***************
***************page number:38**************
Distributing Workforce Over Time (2)
> For a team with P members, one can have
between P—i and P(P—i)/2 communication
channels
> Each channel is a decrease in efficiency
6
i
'nner |lll
o
li
I o o —————_

***************Ending Page***************


***************Beginning Page***************
***************page number:39**************
How Not to Plan and Estimate

Costs

> We have 12 months to finish the job, so it will
take 12 months.

> A competitor asked for $1 .OO0.000. We wil ask
for $900.000.

> The client budget is $500.000. That will be the
exact cost of development.

> Development takes l year, but we say it will take
lO months. A delay of 2 months is not

l important...

***************Ending Page***************

***************Beginning Page***************
***************page number:40**************
Problems with Metrics

> Lack of accuracy

> Employee pushback

> Use for other purposes than intended

> Animosity within the development team

***************Ending Page***************


***************Beginning Page***************
***************page number:41**************
C o py r| g ht

> The rights enjoyed by authors With regards to
their work;

> Copyright is the instrument of protection of
authors ancl their work;

> Copyright gives the creator of an original work
exclusive right for a certain time period in
relation to that work, including its publication,
distribution and adapta tion; after which time the
worl< is said to enter the public domain.

***************Ending Page***************


***************Beginning Page***************
***************page number:42**************
Exclusive rights
> Several exclusive rights typically attach to the
holder of a copyright:

O to produce copies or reproductions of the work and to
sell those copies (mechanical rights; including,
sometimes, electronic copies: distribution rights)

O to create derivative works (works that adapt the
original work)

O to perform or display the work publicly (performance
rights)

O to sell or assign these rights to others

O to transmit or display by radio or video (broadcasting

I rights)

***************Ending Page***************


***************Beginning Page***************
***************page number:43**************
Bibliography

> Extreme Programming Explained by Kent
Beck (Addison Wesley, 2000)

> Applied Software Project Management, by
Andrew Stellman and Jennifer Greene
(0’Reilly, 2006)

***************Ending Page***************


***************Beginning Page***************
***************page number:44**************
Llnks

> Bug Life Cycle: httg:[[www.buzzle.com[editoria|s[4—
6-2005-68177.a5|g,
httg:[[gastatiomwordgressxom[2008[O6[13Z|Qrocess
—f0r—bug—|ife—cyc|e[

> COCOMO: httg:[[en.wiki|gedia.org[wiki[COﬁOMO

> Curs 12, Ovidiu si Adriana Gheorghies:
httgj[www.info.uaic.ro[~ogh[filesZichurs-l 2.|Z_)C|f

***************Ending Page***************


