***************Beginning Page***************
***************page number:1**************
lngineria Programérii
Cursul 6 — 29, 30 Martie 2023
adiftene@info.uaic.ro

***************Ending Page***************

***************Beginning Page***************
***************page number:2**************
Cuprins
> Din Cursurile trecutem
> SOLID Principles
> Design Patterns
Q Definitions
a Elements
a Example
~ Classification
> JUnit Testing
~ Netbeans (Exemplu i)
~ Eclipse (Exemplu 2)

***************Ending Page***************

***************Beginning Page***************
***************page number:3**************
Din Cursurile Trecute
> Etapele Dezvoltérii Programelor
> lngineria Ceringelor
> Diagrame UML
> SOLID
> GRASP
‘ K

***************Ending Page***************

***************Beginning Page***************
***************page number:4**************
R — GRASP

> Principii, responsabilitéti
> Information Expert

> Creator

> Low Coupling

> High Cohesion

> Controller

***************Ending Page***************

***************Beginning Page***************
***************page number:5**************
R — SOLID and Other Principles

> SOLID Principles
~ SRP e Single Responsibility Principle -
~ OCP i Open/Closed Principle
~ LSP i Liskov Substitution Principle 2-!
a ISP i Interface Segregation Principle
a DIP e Dependency Inversion Principle

> DRY - Don't Repeat Yourself ‘v

> YAGNI — You Aren't Gonna Need It -- --

***************Ending Page***************

***************Beginning Page***************
***************page number:6**************
Cu prlns
> Din Cursurile trecutem
> Design Patterns h
Q Definitions
Q Elements
a Example
a Classification
> JUnit Testing
~ Netbeans (Exemplu l)
~ Eclipse (Exemplu 2)

***************Ending Page***************

***************Beginning Page***************
***************page number:7**************
Design Patterns — Why?

> lf a problem occurs over and over again, a
solution to that problem has been used
effectively (solution = pattern)

> When you make a design, you should know the
names of some common solutions. Learning
design patterns is good for people to
communicate each other effectively

***************Ending Page***************

***************Beginning Page***************
***************page number:8**************
Design Patterns — Definitions

> “Design patterns capture solutions that have
developed and evolved over time" (GOF — Gang-Of-
Four (because of the four authors who wrote it),
Des/gr! Patterns.‘ Elements afReusab/e Object-
Oriented Software)

> In software engineering (or computer science), a
design pattern is a general repeatable solution to a
commonly occurring problem in software design

> The design patterns are language-independent
strategies for solving common object-oriented

blems

***************Ending Page***************

***************Beginning Page***************
***************page number:9**************
Gang of Four

> Initial was the name given to a leftist political
faction composed of four Chinese Communist party
officials

> The name ofthe book (“Design Patterns: Elements
of Reusable Object-Oriented Software") is too long
for e-mail, so “book by the gang of four" became a
shorthand name for it

> That got shortened to "GOF book“. Authors are:
Erich Gamma, Richard Helm, Ralph johnson, john
V/issides

> The design patterns in their book are descriptions
of communicating objects and classes that are
customized to solve a general design prob/em in a

***************Ending Page***************

***************Beginning Page***************
***************page number:10**************
Design Patterns — Elements
1. Pattern name

2. Problem

3. Solution

4. Consequences

***************Ending Page***************


***************Beginning Page***************
***************page number:11**************
Design Patterns — Pattern name

> A handle used to describe a design problem,
its solutions, and consequences in a word or
two

v Naming a pattern immediately increases our
design vocabulary. lt lets us design at a higher
level of abstraction

> Having a vocabulary for patterns lets us talk
about them with our colleagues, in our
documentation

v Finding good names has been one ofthe

Hist parts of developing our catalog

***************Ending Page***************

***************Beginning Page***************
***************page number:12**************
De5|gn Patterns — Problem

> Describes when to apply the pattern. It
explains the problem and its context

> It might describe specific design problems
such as how to represent algorithms as
objects

> It might describe class or object structures
that are symptomatic of an inflexible design
> Sometimes the problem will include a list of
conditions that must be met before it makes

l sense to apply the pattern

***************Ending Page***************

***************Beginning Page***************
***************page number:13**************
De5|gn Patterns — Solution

> Describes the elements that make up the design,
their relationships, responsibilities, and
collaborations

> The solution doesn’t describe a particular
concrete design or implementation, because a
pattern is like a template that can be applied in
many different situations

> Instead, the pattern provides an abstract
description of a design problem and how a
general arrangement of elements (classes and

Ib'ects in our case) solves it

***************Ending Page***************

***************Beginning Page***************
***************page number:14**************
Design Patterns - Consequences

> Are the results and tradeioffs of applying the
pattern

> They are critical for evaluating design alternatives
and for understanding the costs and benefits of
applying the pattern

> The consequences for software often concern
space and time trade-offs, they can address
language and implementation issues as well

> Include its impact on a system's flexibility,
extensibility, or portability
Listing these consequences explicitly helps you

***************Ending Page***************

***************Beginning Page***************
***************page number:15**************
Example of (Micro) pattern

> Pattern name: Initialization

> Problem: It is important for some code
sequence to be executed only once at the
beginning of the execution of the program.

> Solution: The solution is to use a static variable
that holds information on whether or not the
code sequence has been executed.

> Consequences: The solution requires the
language to have a static variab e that can be
allocated storage at the beginning of the
execution, initialized prior to the execution and

.i allocated until the program termination.

***************Ending Page***************

***************Beginning Page***************
***************page number:16**************
Describing Design Patterns l

> Pattern Name and Classification

> Intent — the answer to question: What does the
design pattern do?

> Also Known As

> Motivation — A scenario that illustrates a design
problem and how the class and object structures in
the pattern solve the problem

> Applicability — What are the situations in which the
design pattern can be applied? How can you
recognize these situations?

ii Patterns

***************Ending Page***************

***************Beginning Page***************
***************page number:17**************
Describing Design Patterns 2

> Structure — A graphical representation ofthe classes in
the pattern

> Participants — The classes and/or objects participating
in the design pattern and their responsibilities

> Collaborations — How the participants collaborate to
carry out their responsibilities

> Consequences — How does the pattern support its
objectives?

> Implementation — What techniques should you be
aware of When implementing the pattern?

> Sample Code

> Known Uses — Examples of the pattern found in real

.5

***************Ending Page***************

***************Beginning Page***************
***************page number:18**************
Design Patterns — Classification

> Creational patterns

> Structural patterns

> Behavioral patterns

v NOT in GOFI Fundamental, Partitioning, GRASP,
GUI, Organizational Coding, Optimization
Coding, Robustness Coding, Testing,
Transactions, Distributed Architecture,
Distributed Computing, Temporal, Database,

.iency patterns

***************Ending Page***************

***************Beginning Page***************
***************page number:19**************
Creational Patterns

> Abstract Factory groups object factories that have
a common theme

> Builder constructs complex objects by separating
construction and representation

> Factory Method creates objects without specifying
the exact class to create

> Prototype creates objects by cloning an existing
object

> Singleton restricts object creation for a class to
only one instance

' GOF book: Lazy initialization, Object pool,
mquisition (is initialization) ‘9

***************Ending Page***************


***************Beginning Page***************
***************page number:20**************
Structural Patterns

> Adapter allows classes with incompatible interfaces to
work together

> Bridge decouples an abstraction from its
implementation so that the two can vary independently

> Composite composes zero-or-more similar objects so
that they can be manipulated as one object.

> Decorator dynamically adds/overrides behavior in an
existing method of an object

> Facade provides a simplified interface to a large body
of code

> Flyweight reduces the cost of creating and
manipulating a large number of similar objects

rovides a placeholder for another object to
“ieduce cost, and reduce complexity m

***************Ending Page***************

***************Beginning Page***************
***************page number:21**************
Behavioral patterns l

> Chain of responsibility delegates commands to a
chain of processing objects

> Command creates objects which encapsulate
actions and parameters

> Interpreter implements a specialized language

> Iterator accesses the elements sequentially

> Mediator allows loose coupling between classes by
being the only class that has detailed knowledge of
their methods

> Memento provides the ability to restore an object

_' irevious state

***************Ending Page***************

***************Beginning Page***************
***************page number:22**************
Behavioral patterns 2

> Observer allows to observer objects to see an event

> State allows an object to alter its behavior when its
internal state changes

> Strategy allows one of a family of algorithms to be
selected on-the-fly at runtime

> Template defines an algorithm as an abstract class,
allowing its subclasses to provide concrete
behavior

> Visitor separates an algorithm from an object
structure

.' GOF book: Null Object, Specification

***************Ending Page***************

***************Beginning Page***************
***************page number:23**************
w“ 1
> Patterns ﬁrle.“ '
>§.r..e.a.t.i.9na.l. w $1”:sz m
>Structura| WM W" 5% \EE
> Behavioral WW‘ W #Jﬁ...
:r__ ~73’ {:M' ‘\W
\ \ _ mf-
"CIA"
-\WM
m’ %/--
W
Duiwn Pamm Ruhlimuhins 23

***************Ending Page***************

***************Beginning Page***************
***************page number:24**************
How to Select a Design Pattern?
> With more than 20 design patterns to choose from,
it might be hard to find the one that addresses a
particular design problem
> Approaches to finding the design pattern that’s
right for your problem:
I. Consider how design patterns solve design prob/ems
Z. Scan Intent sections
3. Study relationships between patterns
4. Study patterns of like purpose (comparison)
5. Examine a cause of redesign
‘is/tier What should be variable in your design

***************Ending Page***************

***************Beginning Page***************
***************page number:25**************
How to Use a Design Pattern?
1. Read the pattern once through for an overview
2. Co back and study the Structure, Participants,
and Collaborations sections
3. Look at the Sample Code section to see a
concrete example
4. Choose names for pattern participants that are
meaningful in the application context
5. Deﬁne the classes
6. Deﬁne application-speciﬁc names for operations
in the pattern
ent the operations to carry out the
wcol/ahorations in the pattern,

***************Ending Page***************

***************Beginning Page***************
***************page number:26**************
Cu prins
> Din Cursurile trecutem
> Design Patterns
Q Definitions
Q Elements
a Example
a Classification
>JUnit Testing h
~ Netbeans (Exemplu l)
~ Eclipse (Exemplu 2)

***************Ending Page***************

***************Beginning Page***************
***************page number:27**************
Unit Testing

> Testarea unei funcgii, a unui program, a unui ecran,
a unei functionalitétgi

> Se face de citre programatori

> Predefinité

> Rezultatele trebuie documentate

> Se folosesc simulatoare pentru Input §i Output

***************Ending Page***************

***************Beginning Page***************
***************page number:28**************
Sum'llelﬂunslﬂis I
‘Elle Bill llurw Nam-it: Sum Manor Bun Deb“! Emile Team 10015 Muir” ﬂdp
ﬁiiiiBG—°i”W>Ei~Gi~MB~>lil ML
l—_ his SUM - mum‘ .
Fgg'gw \nrrm-esawuwaanama
him.
‘ a m," r -,
)Jﬁ Yupadwu
m mm M.“ m;
E‘ Tallinn“
an; m. E
‘ 0 "B'ﬁwwﬂaw ~ Wm.“ m: m mm; mt Mm“
enquwmhw. V H
E mm “mum mp, <
El mm m .u-(m |. m ml
r I
,

***************Ending Page***************

***************Beginning Page***************
***************page number:29**************
PM. “T i...“ mum" - T
iiﬁivumhomx‘ II‘. Q§§E\FLFL -201H:_-
“gm w ,Y , . \ ,. . .. , sm..m._............m.._
. 5mm»... 0m ' ‘ ‘ “mmmmﬂw
l: 7:53... m. GM Oimui

w... u... "-1 _
v... m... o cm. MS x
WM... m
M... 3...... 1 .. . Mm... ...........

“rm”, "*MJNP 0......“ 0...... mm“...

m. Mk...
n... . .. .4. m...
SzweAsftmlﬂilz. M m n
mxw > M Bunk \7 “gym-mu
Mum (mm. Framed IZ nu Hum
mm...“ amnz \vw-q-FM w MMHI-mn
Wm... .W |
6...... 9......“
WWW » g mm...“
. L?‘ . MM...‘ W MW
PM Omen/mm“ CM...
uni-Em» I- .m-z ‘
MM...“ m [W w m 1

***************Ending Page***************


***************Beginning Page***************
***************page number:30**************
Unlt Testln- — Exemlu 1 (3)

y.“ >. 5-5- X

l—
_ .- W... . an.» -m wan.

61;;va \nhn \weawu whim; ‘.

“mm ‘-

"ii-"35% Mm,

V ;fommm-m v w

***************Ending Page***************

***************Beginning Page***************
***************page number:31**************
II! MIG Mm Bull REM 1!le Team IOOIS Him Help
H'—“T“W r HB-Gi- bl'vll
am 5 Pub-Yaw- *
u \II'I"§Q-§@|f$3>\ﬂ2l\lilﬂ-l
,
Hen
, ,
g .

***************Ending Page***************

***************Beginning Page***************
***************page number:32**************
m ,. 7‘me Mum...
:.,.. v a _
:Imm-F ‘El I QE5E\?§$\9 ‘OD k
Kw.
1.," M,
Wm. m m, W, k
In‘ or“ * mu: m4 ‘am-u I
(Mnyﬂthk w n ‘ V 7v V NV
wym ""“Myg “
W”
MM M, »—
g;~_ M. M. 7 ,,
B V
m, , 7
mm“ — ~r
BMW .9 w
rm-mluumm m
Mm M, , “WWW
"I s E: 4mm‘? “MMMJLQ' "' “n
M 4wmmmeu-(M-wdp-asv
pm , I 12

***************Ending Page***************

***************Beginning Page***************
***************page number:33**************
mm W mm.“ |
I
,
Farm...” 1... MM E
w m»
q 0 mmMamTes FABED
+ ¢ mmvam nun atsumsMaml'esuesmalﬂI-imnl'eskqavamﬁn
* \l—=I-\
‘ n

***************Ending Page***************

***************Beginning Page***************
***************page number:34**************
WM
package "a"; ’
pm“ =1“, BXXXWXXWM (

X m1“ m mum X, m XH
mm X ¢ X;
»
X mm XX.‘ mmHnt X, m y»
XmXX X X X;
»
PM“ m mum.“ X, m yH
“m, X - X;
»
PM“ XX.‘ awn»: X, m yH
“tum x /\ ‘1:
\
- fpn'un m,
./
X mm mm "XXX mummy" .XQX, l
E // Bonn Aurn'anPrarPd mPf1nd wuh
Basiwpexamons be X m XXXXWXXXXXXXW
WMXMPXXXUMDQMQJX>.-
»
)
1? '

***************Ending Page***************

***************Beginning Page***************
***************page number:35**************
I: Padag: Emma Y: Hmmavy Alum 1! \ = E 1 Bampmnmnma IZ BISAKODeVIUD/vﬂmjlvl :1 ‘
nmmnuumm; a e .Inm- - n . ~ pact“?! rm;
—
E lcrLDAMOp-eulmllﬂeﬂ [Rm/15' \Lmt q Mm s‘,
£1 mud m um 31 V
\Dwmummms)‘ - - = ‘was cuudnu r
_‘ WW5 ) umqm“ W1 a, mm, 5,».
F . = ‘laid cesunn
Emu” x27 Y V .. ‘.L ‘A .. ,,
.WmmmmmmWWW ,mmqnnﬂnmm 2. mms, 3,».-
Ea.“WWW.WWWMMMM1m ,
r
. . = m. “mm K
“mqwu-WW. 15.1mm, 5H
»
r
Wm: W “mm, K
,mmhmw. 2, new“, 2n.-
A
, 15
—

***************Ending Page***************

***************Beginning Page***************
***************page number:36**************
i Pang: Emlmu '1 chmrchy . H X z D I lexopuawmpvu [B Bmtonﬂalmnﬂﬁlim aX
memdmeﬂwwszwrm 0 6 a“ Ei W ' - E ~ v Flaw- (HI;
—
E unMd 0mm) s‘, he“

.
E a mathBenwperilmnsmvthsmwahum]Evil!) )

,

,

,

***************Ending Page***************

***************Beginning Page***************
***************page number:37**************
VI Pamq: hpkxer Ix Hmrdly w \ \ F‘ K W D Empemmmjava [E Bumpemmnﬂzﬂpva Y; ‘
I. E '1 " - ‘H _
michzl. “mu erg Jumussmﬁn
ﬁlmmmmnsy yu-blic ‘mid tesuaddu l
Mlmmvmﬂws) ’
_ " a:5:nn\lse{"kesuk", ‘ (3 '1 bornmﬁ, Ill):
)
publh: ‘mm [asKDIVU l
1
.

***************Ending Page***************

***************Beginning Page***************
***************page number:38**************
Code Coverage

> NetBeans — TikiOneJaCoCoverage:

> http:1[pluginsnetbeansorg[plugin14857OZtikio

ne-‘acocoverage

> Java Code Coverage for Eclipse:

> httg:[[www.ec|emma.org[

> lntelliJ — Running with coverage:

> httgs:[[www.‘etbrains.com[helpZideaZZOI6.3[r
l unning-with-coverage.html

***************Ending Page***************


***************Beginning Page***************
***************page number:39**************
NetBeans — 1
m... m- m» WNW“
"E"; u... "'LLI.‘I.Z§YIZ“,l-m.Wummm‘
‘ n

***************Ending Page***************

***************Beginning Page***************
***************page number:40**************
"i111 m~ WW ~va > u u
‘TE-‘1": ' 1.. “IT .' ‘1'71'53'éTJ ¢ w, ~= u - u I . ~
V I ,_ A .
. a: "M m
7 u ><
Imnw-gm-w‘ X
c o i‘!NIL1USeKIMxan]DwumenK/Nmkamﬂlqeds/IWWDMMMnWaznnwalw/rvwﬂMmeduMml w a‘ v
BJMCwnY-pmlngmWnﬂ'JnnAWmun'YWMMWJnGnCnmmEin-m) “mm
JaCoCoverage analysis of project "JavaApplicalioM" (powered hy JaCoCo from
EclEmma)
am." MMIHWW. CW mummh m MN... my Mm UM MM I'Mlmls W M
Immhuul _ an“ _ 5m ‘ 5 ‘ 1 n 4 n ‘
W “m m 1m2 m { 5 1 1 D A o {
w

***************Ending Page***************

***************Beginning Page***************
***************page number:41**************
1. 1111 1W 1W“ 1.... 1.1.111 W 1m 1W1. W1. ~11 q
"i114 m- WWW '0 1 I > u u
TH 7",. --1:':1l.|7?;‘7:7;¢m =1-1 11 id ~
""1 1W ‘ "'
l1:~ ‘ "m
mm 7 u X
B1111W111111m1 X
c O n1Wj/mewmmbmmm11111111111111m/11W11w111111111/11m111111111/W11111mmmum 111 -1- y
51.010111.”11111111mwm-1w1m1111-111111-111m1m1111mwm1111 “NW
JaCoCoverage analysis of project "JavaApplicaﬁoM" (powered hy JaCoCo from
mm 7 r1 >1
B 1.111111111111111 X
e c 10 11qMWW11WMWWNWWWWWWWAWWW11pm1W1111/m11111141111111.1111"1,1“11111 11 1- 4
1; 1,11-Wm1wmm1m-11112111111111 WWW M1 111111111111 >Immym>emgmumm1 .omm
JavaApplicatioM
a...“ 1111,111111111111. 0,1 Maud-s Ow 111111111 1,1, M 111.s 1111,11 M11115
1111111111 _ 5111. _ 5011 1 1 1 1 11 1
. 11.11 $11111 — 111111. W 11 1 11 7 11 1
~ W — 111111 11.1 1 1 1 1 11 1
.WMM — 100% 1W 11 1 11 1 11 1
111111 111111 1111. 11112 51111 1 5 1 1 11 1

***************Ending Page***************

***************Beginning Page***************
***************page number:42**************
Concluzii
> SOLID
> Design Patterns
Q Definitions, Elements, Example, Classification
> JUnit Testing
‘ ‘Z

***************Ending Page***************

***************Beginning Page***************
***************page number:43**************
Myths
> Clients
~ A general description of the objectives is sufficient to
begin writing program
~ Requirements are constantly changing, but the
software is flexible and can easy adapts
> Developers
~ Once the program is written and it is functional, our
role has ended
a Until the program doesn't work, we can not assess the
quality
~ The only good product is the functional program
~ Software Engineering will create voluminous and
mmmation and will cause delays
u

***************Ending Page***************

***************Beginning Page***************
***************page number:44**************
Design Patterns — Tntrebiri
> i)Argumenta1;i pentru folosirea DP.
> 2) Veniti cu argumente pentru a nu folosi DP.
> Criticism:
httg:[[sourcemakingcom[design_patterns
‘ "

***************Ending Page***************

***************Beginning Page***************
***************page number:45**************
Blbllografle

> Erich Gamma, Richard Helm, Ralph Johnson, and
John Vlissides: Design Patterns: Elements of
Reusable Object-Oriented Software
(GangOfFour)

> Ovidiu Gheorghie§, Curs 7 lP

> Adrian lftene, Curs 9 TAIP:
httg:Z[thor.info.uaic.ro[~adiftene[ScoalaZZOl1Z
TAIPZCoursesZTAIPO9.Qdf

***************Ending Page***************

***************Beginning Page***************
***************page number:46**************
L| nks

> GangiofiFour: http:i[c2.com[cgi[wiki7GangOfFour,
httg:1[www.uml.org.cn[c9628%2BipdfiDesignPatternspdf

> Design Patterns Book: httg:l[c2.com[cgi[wiki?DesignPatternsBook

> About Design Patterns: httg:Z[www.‘avacampnrg[designPatterni

> Design Patterns *Java companion:
httg:l[www.gatterndegomomigutiBi avaPatternshtm

> Java Design patterns:
httg:[[www.allagplabs.com[ava design gatternsi'ava design garter
ns.htm

> Overview of Design Patterns:
httg:l[www.mindsgringLOm[~mgrand1gattern synogseshtm

> Gang of Four: httg:[[en.wikigedia.org[wiki[Gang of four

> JUnit in Eclipse: httg:l[www.vogelladeiarticlesl Unitiarticlehtml

' ' NetBeans: httg:[[netbeansnrg[kbidocs[avai'unitiintrohtml
k ‘5

***************Ending Page***************

***************Beginning Page***************
***************page number:47**************
V5 MultUmesc! I
Pentru prezengé, t
ribdare,
Colaborare... ngltljk

***************Ending Page***************

