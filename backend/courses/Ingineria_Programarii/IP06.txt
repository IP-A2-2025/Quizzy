***************Beginning Page***************
***************page number:1**************
lngmerla Pragramarii
Cursul 6 — 29,30 Martie 2023
adiftene@info.uaic.ro

***************Ending Page***************

***************Beginning Page***************
***************page number:2**************
Cu prlns
> Din Cursurile trecute...
> SOLID Principles
> Design Patterns
O Definitions
O Elements
O Example
O Classification
> JUnit Testing
O Netbeans (Exemplu i)
O Eclipse (Exemplu 2)

***************Ending Page***************


***************Beginning Page***************
***************page number:3**************
Iin Cursurile Trecute
> Etapele Dezvoltérii Programelor
> lngineria Ceringelor
> Diagrame UML
> SOLID
> GRASP
g 3

***************Ending Page***************

***************Beginning Page***************
***************page number:4**************
R — GRASP

> Principii, responsabilitéti
> Information Expert

> Creator

> Low Coupling

> High Cohesion

> Controller

***************Ending Page***************


***************Beginning Page***************
***************page number:5**************
R — SQLII and Other Principles
> SOLID Principles
O SRP — Single Responsibility Principle \
O OCP — Open/Closed Principle
O LSP — Liskov Substitution Principle m
O ISP — Interface Segregation Principle
O DIP — Dependency Inversion Principle
> D RY — Do n 't Re p e at Yo u rs e If
> YAGNI — You Aren't Gonna Need It M“

***************Ending Page***************

***************Beginning Page***************
***************page number:6**************
Cu prlns
> Din Cursurile trecute...
> Design Patterns -
O Definitions
O Elements
O Example
O Classification
> JUnit Testing
O Netbeans (Exemplu i)
O Eclipse (Exemplu 2)

***************Ending Page***************


***************Beginning Page***************
***************page number:7**************
lesign Patterns — Why?

> lf a problem occurs over and over again, a
solution to that problem has been used
effectively (solution I pattern)

> When you make a design, you should know the
names of some common solutions. Learning
design patterns is good for people to
communicate each other effectively

***************Ending Page***************

***************Beginning Page***************
***************page number:8**************
Iesign Patterns — Definitions

> “Design patterns capture solutions that have
developed and evolved over time” (GOF — Gang-0f-
Four (because of the four authors who wrote it),
Design Patterns." Elements 0f Reusable Object-
Or/ented Software)

> ln software engineering (or computer science), a
design pattern is a general repeatable solution to a
commonly occurring problem in software design

> The design patterns are language-independent
strategies for solving common object-oriented

oMems

***************Ending Page***************


***************Beginning Page***************
***************page number:9**************
Gang of Fou r

> Initial was the name given to a leftist political
faction composed of four Chinese Communist party
officials

> The name of the book (“Design Patterns: Elements
of Reusable Object-Oriented Software") is too long
for e—mail, so “book by the gang of four” became a
shorthand name for it

> That got shortened to "GOF book“. Authors are:
Erich Gamma, Richard Helm, Ralph johnson, john
V/issides

> The design patterns in their book are descriptions
of communicating objects and c/asses that are
customized to so/ve a genera/ design prob/em in a

***************Ending Page***************

***************Beginning Page***************
***************page number:10**************
Iesign Patterns — Elements
1. Pattern name

2. Problem

3. Solution

4. Consequences

***************Ending Page***************


***************Beginning Page***************
***************page number:11**************
leslgn Patterns — Pattern name
> A handle used to describe a design problem,
its solutions, and consequences in a word or
tWO

> Naming a pattern immediately increases our
design vocabulary. lt lets us design at a higher
level of abstraction

> Having a vocabulary for patterns lets us talk
about them with our colleagues, in our
documentation

> Finding good names has been one of the

nest parts of developing our catalog

***************Ending Page***************

***************Beginning Page***************
***************page number:12**************
leSIgn Patterns — Problem

> Describes when to apply the pattern. It
explains the problem and its context

> It might describe specific design problems
such as how to represent algorithms as
objects

> It might describe class or object structures
that are symptomatic of an inflexible design
> Sometimes the problem will include a list of
conditions that must be met before it makes

l sense to apply the pattern

***************Ending Page***************


***************Beginning Page***************
***************page number:13**************
leslgn Patterns — Solutlon

> Describes the elements that make up the design,
their relationships, responsibilities, and
collaborations

> The solution doesn’t describe a particular
concrete design or implementation, because a
pattern is like a template that can be applied in
many different situations

> Instead, the pattern provides an abstract
description of a design problem and how a
general arrangement of elements (classes and

ijects in our case) solves it

***************Ending Page***************

***************Beginning Page***************
***************page number:14**************
Iesign Patterns — Consequences

> Are the results and trade-offs of applying the
pattern

> They are critical for evaluating design alternatives
and for understanding the costs and benefits of
applying the pattern

> The consequences for software often concern
space and time trade-offs, they can address
language and implementation issues as well

> Include its impact on a system's flexibility,
extensibility, or portability
Listing these consequences explicitly helps you

***************Ending Page***************


***************Beginning Page***************
***************page number:15**************
Example of (Micro) pattern

> Pattern name: Initialization

> Problem: It is important for some code
sequence to be executed only once at the
beginning of the execution of the program.

> Solution: The solution is to use a static variable
that holds information on Whether or not the
code sequence has been executed.

> Consequences: The solution reqluires the
language to have a static variab e that can be
allocated storage at the beginning of the
execution, initialized prior to the execution and

‘a allocated until the program termination.

***************Ending Page***************

***************Beginning Page***************
***************page number:16**************
Describing Iesign Patterns i

> Pattern Name and Classification

> Intent — the answer to question: What does the
design pattern do?

> Also Known As

> Motivation — A scenario that illustrates a design
problem and how the class and object structures in
the pattern solve the problem

> Applicability — What are the situations in Which the
design pattern can he app/ied? HoW can you
recognize these situations?

id Patterns

***************Ending Page***************


***************Beginning Page***************
***************page number:17**************
Iescrlblng leslgn Patterns 2

> Structure — A graphical representation of the classes in
the pattern

> Participants — The classes and/or objects participating
in the design pattern and their responsibilities

> Collaborations — How the participants collaborate to
carry out their responsibilities

> Consequences — HoW does the pattern support its
objectives?

> Implementation — What techniques should you he
aware of When implementing the pattern?

> Sample Code

> Known Uses — Examples of the pattern found in real

‘s

***************Ending Page***************

***************Beginning Page***************
***************page number:18**************
Iesign Patterns — Classification

> Creational patterns

> Structural patterns

> Behavioral patterns

> NOT in GOF: Fundamental, Partitioning, GRASP,
GUI, Organizational Coding, Optimization
Coding, Robustness Coding, Testing,
Transactions, Distributed Architecture,
Distributed Computing, Temporal, Database,

‘ﬁency patterns

***************Ending Page***************


***************Beginning Page***************
***************page number:19**************
Creational Patterns

> Abstract Factory groups object factories that have
a common theme

> Builder constructs complex objects by separating
construction ancl representation

> Factory Method creates objects without specifying
the exact class to create

> Prototype creates objects by cloning an existing
object

> Singleton restricts object creation for a class to
only one instance

' GOF book: Lazy initialization, Object pool,
mquisition (is initialization) 19

***************Ending Page***************

***************Beginning Page***************
***************page number:20**************
Structural Patterns

> Adapter allows classes with incompatible interfaces to
work together

> Bridge decouples an abstraction from its
implementation so that the two can vary independently

> Composite composes zero-or-more similar objects so
that they can be manipulated as one object.

> Decorator dynamically adds/overrides behavior in an
existing method of an object

> Facade provides a simplified interface to a large body
ofcode

> Flyweight reduces the cost of creating and
manipulating a large number of similar objects

‘irovides a placeholder for another object to
reduce cost, and reduce complexity 20

***************Ending Page***************


***************Beginning Page***************
***************page number:21**************
Behavioral patterns i

> Chain of responsibility delegates commands to a
chain of processing objects

> Command creates objects which encapsulate
actions and parameters

> Interpreter implements a specialized language

> Iterator accesses the elements sequentially

> Mediator allows loose coupling between classes by
being the only class that has detailed knowledge of
their methods

> Memento provides the ability to restore an object

.' irevious state

***************Ending Page***************

***************Beginning Page***************
***************page number:22**************
lehavioral patterns 2

> Observer allows to observer objects to see an event

> State allows an object to alter its behavior when its
internal state changes

> Strategy allows one of a family of algorithms to be
selected on—the—fly at runtime

> Template defines an algorithm as an abstract class,
allowing its subclasses to provide concrete
behavior

> Visitor separates an algorithm from an object
structure

i‘ GOF book: Null Object, Specification

***************Ending Page***************


***************Beginning Page***************
***************page number:23**************
/— 'Jemento
@ $33???
clearing
Wm: —
enamel-sung
Oilddmn
adding .
> Patterns ‘mm’ —
mpoelte
‘
> Creatlonal ms my "W mg,
________________. operabons
deﬁning
> Structural ""‘°"‘ W
— cmngmgskm
e aviora WM m W
> B h | m
urn .
Sm’ $2?” W‘ wow
E — WW‘-
deﬁning Stat’
algomnm's —
“1””
________ conﬂguyefacrory ‘
dynam'caﬂy mplememuw ___________.
sing? -----------'
mrance
WA
NISLSDOG —
Design Pattern Relationships

***************Ending Page***************

***************Beginning Page***************
***************page number:24**************
How to Select a Ie5|gn Pattern?
> With more than 20 design patterns to choose from,
it might be hard to find the one that addresses a
particular design problem
> Approaches to finding the design pattern that’s
right for your problem:
i. Consider how design patterns so/ve design prob/ems
2. Scan intent sections
3. Study re/ationsh/ps between patterns
4. Study patterns of like purpose (comparison)
5. Examine a cause of redesign
‘is/der What shou/d be variable in your design

***************Ending Page***************


***************Beginning Page***************
***************page number:25**************
How to Use a lesign Pattern?
i. Read the pattern once through for an overview
2. Go hack and study the Structure, Participants,
and Collaborations sections
a. Look at the Sample Code section to see a
concrete example
4. Choose names for pattern participants that are
meaningful in the application context
5. Deﬁne the classes
6. Deﬁne application-speciﬁc names for operations
in the pattern
ent the operations to carry out the
mco/lahorations in the patterns

***************Ending Page***************

***************Beginning Page***************
***************page number:26**************
Cu prlns
> Din Cursurile trecute...
> Design Patterns
O Definitions
O Elements
O Example
O Classification
> JUnit Testing -
O Netbeans (Exemplu i)
O Eclipse (Exemplu 2)

***************Ending Page***************


***************Beginning Page***************
***************page number:27**************
Unit Testing

> Testarea unei functii, a unui program, a unui ecran,
a unei functionalitéiti

> Se face de cétre programatori

> Predefinitéi

> Rezultatele trebuie documentate

> Se folosesc simulatoare pentru Input §i Output

***************Ending Page***************

***************Beginning Page***************
***************page number:28**************
U 't | t' E | 1 (1)
. H
Suma - NetBeansIDE 6. .i, Ll
I‘file Edit yiew ﬂavigate §ource Refgctor Bun erug Eroﬁle Team Iools window ﬂelp
ﬁii%Q@ <defaultoonﬁg> ' I? I? $ .W'Qlﬁ' >56 <l'lSearch(Ctrl+I)
‘Skis-ma |EI'I'|Q%§%|?£?D|§E§|0I|§-é
Elé Source Packages >
Bi suma *- and open the template in the editor.
[é Test Packages
‘a Libraries package suma;
IE Test Libraries ..
T *- @author Adrian
x public class Main {
5" Main Jp'dzk
"'" 0 main(String[] args) T t @param args the command line arguments
O suma(int a, int b) : int a,“
public static void nain(5tring[] args) {
H’ TODO code application logic here
}
public int suma(int I, int b).
return a + b:
}

***************Ending Page***************


***************Beginning Page***************
***************page number:29**************
I I
Unlt lestlng — Exemp u l 2
—2|=i$ Servics -'-'> Main.java* x 0 Sel CtJU _tv _ X
M's“ lll'l'lﬁﬁnﬁi-Wiei-|¢i=>i|0tl|lk e “' °‘S'°"-- i
5% Source Packages ‘I: ‘D =- =I E E
I u .
E}- i gma ' T : :hinlje 2113 template 3113:35 1" : :13 l Temp-lat. seleCt Junit VerSiOn for WhiCh the created teSt
Main.jav- __‘ ‘_ __ __ _’_ l ‘P _.>; ‘w :
IE Test Packages open L L skeletons should becreated
I? Libraries ",1.
Copy Ctrl+C ' ,-. L i
Pas“? Cm” U Create Tests _X_
Compile File F9
tor Aztlan | t Test‘ M ,
Run File Shift+F6 gas‘ ° ' suma' a'"
_ _ lass Main ( v .
'3 sum _ navigami- Eetfmg :le Ctrl+Sh|ft+F5 Class ﬂame: >suma.MainTest .
Membefs View r0 lle lle . _
Bug Main Test Fi|e Ctrl+F6 param arga the can-nerd 11:5 .3 Locaﬂon; ‘Test Packages '-
eii ‘ll; 3:? e ap;:_;r:at'1:: ‘cglr
Delete Delete
'l Code Generation
Save As Template...
ic int: suma(int i, int b).
Find Usa g es Alt +|_-, return a + b: I Meﬂtod Access Levels Generated Code
Refactor t I Bublic Te§t Initializer
Beanlnfo Editor... Prgtected Test Finaliger
File Members Ctrl+F12 Package Private Default Method Bodies
File Hierarchy Alt+F12 ||
Generated Comments
L l H'St '
oca I my Javadoc Comments
T | ' Add t F 't
Poo s If O avori es Source Code Hints
ro e les
[:C'eatemm “'“Shm
ma t: I- na yze avaoc
Add to Palette... | OK | Cancel lielp |

***************Ending Page***************

***************Beginning Page***************
***************page number:30**************
I I
nlt eStln ' - XQlll i U
* w ‘ -F
.9 Suma-NetBeanleE 6. .1‘ ‘LE. X
I File Edit View Navigate Source Refactor Run Debug Profile Team Tools Window Help
Eim%qe <defaultoonfig> v can? $ “'Qﬁ'bﬁ'vw‘ Q'lSearch(Ctrl+I)
H—m5 Sennos StartPage x— a MalnTmJava x EIJEJEJ
Eta...“ |El-I'|€E§El?%?c>lﬁﬁlosllﬁa |
El-é Source Packages
I = 1"“ ‘ I
\‘ “I. ‘m '= To change tnis template, choose Tools \l Templates
..—é TestPackages :fand open the template in the editor.
\_u_.:____‘" package suma:
[é Test Libraries _ . .
import org.]unit.After;
import org. junit .AfterClass;
import org.junit.Before:
import org. junit .BeforeClass :
import org.junit.1‘est;
import static org.junit.Assert-*:
a n
I illavbator ‘ll X '
M ' @auth" Adrian
'/ I
I, MalnTeSt public class Hain'l'est {
6 MamTestQ
public MalnTestQ {
0 :ea‘rD"oinnClass() @BeforeClass
g {655323) I? public static void setUpClassQ throws Exception l
I @AfterClass
l? public static void tearDalmClassO throws Exception {
I l
@Before
I? public void setUpQ l
l l
@After
I? public void tearDownO {
l v 30
énmnm- e x ﬁrm [:Tngfnnﬂh |

***************Ending Page***************


***************Beginning Page***************
***************page number:31**************
I I
Unlt lestlng - Exemglu 1 (4)
ate §ource Refgctor Bun erug Eroﬁle Team Iools window ﬂelp
be; mm? . “8* “e > loo/tr > H
5m Page x E mainmJ-m =
=5 IIEI'I'Iii-5Eil?£?slﬂi>lliilﬁl-I
' 1
a
[fitk
If * Test of suma method, of class Main.
"
@Test
public void testSuma() {
System.out.print1n("suma"):
int a = 0:
int b = 0:
Main instance = new Main();
int epresult = 0:
int result = instance.suma(a, b):
assertEquals(epresu1t, result):
// TODO review the generated test code and remove the dmfault call
m x fail("The test case is a prototype."):
v }
}

***************Ending Page***************

***************Beginning Page***************
***************page number:32**************
I I
Unlt lestlng — Exemp u l 5
1H5 ESerim-s E1 MainTesr-java x
Ewe-ma @llmeeeleeeleem [1|st
Elé Source Packages
Bi suma
EB Main.java OBefore
El? Test Packages I? public void setUpQ {
Eli suma l
IE1 MainTest.]ava
[a Librari Open @After
I-é Test Li I? public void tearDoan {
Cut Ctrl+X }
Copy Ctrl+C , ‘
Paste CU|+V T ' Test ::=f malr. method, crf class Plain.
Compile File F9
QTest
Run File Shift+F6 Public ‘mid tesﬂhin" l
2 _ ' 1 System. out.print1n ("main") ;
.llavngator euQ le l’+ I + Stringl] args = null:
Profile File I Main.main(args) .-
Elg MainTest Test File th|+F6 ICIDCI :evlew the generated test cscie azd renzsve the default call t: fa l.
Q SetUI. Add }
O team Delete Delete _,»-»
0 tearD SaveAsTemplate... T ' Test =::f sums netted, of class Mali.
0 testSu Find Usages Alt+F7 @Iest
Refactor l B ' ‘- " "
M.2:';:_ =th ' .,_ l ~
Beanlnfo Editor--- w “in
if No test pamd, 2 tests failed.(0.145 s) 5""
File Members Ctrl+F12 4 El-Q suma.MainTest FAILED
File Hierarchy Alt+F12 El‘ testMain FAILED (at suma.MainTest.testhlain(MainTest.java:49))
$ at suma.MainTest.testMain(MainTest.java:49)
Local History p E‘ testSuma FAILED (at suma.MainTest.testSuma(MainTest.java:65))
at suma.MainTest.testSuma(MainTest.java:65)
Tools P \% 3 2
Properties I

***************Ending Page***************


***************Beginning Page***************
***************page number:33**************
Unit Testing Exemplu 1 (6)
@Test
public void testSuma() I
System.out.print1n("suma");
int a = 0; __
int b = 0;
Main instance = new Main();
int epresult = 0: E
int result = instance.suma(a, b):
assertEquals(epresult, result);
TCIIIC review the Generated test‘ cede and :emsve the default‘ cell ‘0:1 fe'l. _
| _
}
V
EOutput - Suma (tut) ETasks iTat Raults e
w “in
? 1_test passed, 1 test failed.(0.019 s) 5m
é 6-0 suma.MainTest FAILED
I-- testMain FAILED at suma.MainTest.testMain(MainTest.java:49))
$
‘ 33

***************Ending Page***************

***************Beginning Page***************
***************page number:34**************
U 't | t' E | 2 (1 )
Eiiiiiiiiiiliiliiﬁii ElksMOpemﬂonﬂksqawa ' D
package math; A
public class BasicOperations {
W public int add(int x, int y){
return x + y;
}
M public int min(int X, int y){
return x + y;
}
@ public int mul(int x, int y){
return x * y;
}
public int div(int x, int y){
@g return x /|y;
‘_‘ /‘k*
* @param args
*/
M public static void main(String[] args) {
E // TODO Auto-generated method stub
BasicOperations bc = new BasicOperations();
System.out.println(bc.add(3,5));
}
}
34 '
4 v

***************Ending Page***************


***************Beginning Page***************
***************page number:35**************
U 't | t' E | 2 (2)
‘I II: Package Explorer "I: Hierarchy d1’? JUnit 5:3 ‘=' l5)" {[1] BasicOperationsJava (‘[1] BasicOperationsTestjava 53
Finished after 0.019 seconds Q- ? a“ 5E| Q, ~ H v v package test;
Runs: 4/4 “Errors: 0 “Failures: 1 i'import static org.junit.Assert.*;[]
—
— public class BasicOperationsTest {
Er] test.BasicOperationsTest [Runnerz JUnit 4] (0.004 s)
E testAdd (0.000 s) -
IEtestMin(0.003 5)) public void testAdd() {
EtestMul (0000 s) BasicOerations bo = new BasicOerations() ;
H testDiv 0001 s assertEquals("Result", 8, bo.add(3, 5) ) ;
I }
-
=Fa|lureTrace 47- i. I 00- . en 00- a-. i. I 00- . on ),'
J!java.|ang.AssertionError'. Result expected:<2> but was:<8> assertEquals ( "Result" , 2, b0 .min (5, 3) ) ;
E at test.BasicOperationsTest.testMin(BasicOperationsTestjava220) }
-
public void testMul() {
BasicOoerations b0 = new BasicOoerations();
assertEquals("Result", 15, bo.mul (3, 5))
}
public void testDiv() {
BasicOerations b0 = new BasicOerations();
assertEquals("Result", 2, bo.div(4, 2)) ;
—‘

***************Ending Page***************

***************Beginning Page***************
***************page number:36**************
Unit Testing Example 2 (3)
it: Package Explorer IT: Hierarchy ' ‘=' Elm" ‘II-[D BasicOperationsjava ‘YE BasicOperationsTestjava 53
Vivi-wort Static org-junit-Assert-*;|:|
—
public class BasicOperationsTest {
EEI testBasicOperationsTest [Runnerz JUnit 4] (0.004 s)
£1 testAdd (0.000 s) - @Test
@testMin (0.000 S) Pllblic VOid teStAddU {
ﬁltestMul (0000 s) BasicOperations b0 = new BasicOperations() ;
\m‘ } assertEquals("Result", 8, bo.add(3, 5));
- @Test
_ _ _,. public void testMin() {
BasicOperations bo = new BasicOperations() ;
J!java.lang.ArithmeticException:/by zero assertEquals("Result", 2, bo.min(5, 3));
E at math.BasicOperations.div(BasicOperations.java:18) }
E at test.BasicOperationsTesttestDiv(BasicOperationsTestjavaz32) @Test
public void testMul() {
BasicOperations b0 = new BasicOperations() ;
assertEquals("Result", 15, bo.mul(3, 5));
}
- @Test
public void testDiv() {
BasicOperations b0 = new BasicOperations() ;
assertEquals("Result", 0, bo.div(4, 0));
}

***************Ending Page***************


***************Beginning Page***************
***************page number:37**************
U 't | t' E | 2 (4)
ﬁll: Package Explorer KI: Hierarchy ﬂu JUnit 23 '=' 5-0" ‘IV-ID BasicOperationsJava fl] BasicOperationsTestjava 53
Finished after 0.016 seconds V package test;
'i'inport static org.]un1t.Assert.*;|;]
uns: 4/4 Errors: 0 B Failures: 0
public class BasicOperationsTest {
1 test.BasicOperationsTest [Runnerz JUnit 4] (0.000 s) ~ @Test
EiltestAdd (0.0005) public void testAddU {
‘ﬁltestMiMOOOO s) BasicOperations bo = new BasicOperations();
EtestMuHOOOO s) assertTrue("Result", 8 == bo.add(3, 5));
£1 testDiv (0.000 s) }
public void testMin() {
= Failure Trace -; BasicOperations bo = new BasicOperations() ;
_ _.. assertFalse("Result", ! (3 != bo.min(5, 3H);
- @Test
public void testMul() {
BasicOperations b0 = new BasicOperations();
assertEquals("Result", 15, bo.mul(3, 5));
}
- @Test
public void testDiv() {
BasicOperations bo = new BasicOperations();
if(bo.div(4, 2) == 3)
fail ( "Incorrect result! ") ;
7
1

***************Ending Page***************

***************Beginning Page***************
***************page number:38**************
Code Coverage

> NetBeans — TikiOne JaCoCoverage:

> httg:[[gluginsnetbeansorg[gluginl48570ltikio

ne-iacocoverage

> Java Code Coverage for Eclipse:

> httg:[[www.ec|emma.org[

> lntelIiJ — Running with coverage:

> httgs:[[www.ietbrainsxom[hengicleaZZO]6.3[r
l unning-with-coverage.htm|

***************Ending Page***************


***************Beginning Page***************
***************page number:39**************
i) JavaApplicationl — NetBeans lDE 8.2 — El X
:ile Edit View Navigate Source Refactor Run Debug Profile Team Tools Window Help Q‘ Search(Ctr|+I)
ﬁiﬁi%i'9@i<defaumﬁg> @043‘? >'B'®'
W= X m@— @Jmnliwﬁonl-jm X El JWPPIicaﬁomTesr-java X ' E‘
3 b JavaApphcahnnl — “ism _ _ .i i1? ‘D. ¢|E $5 0 El 0: _ Bi
El‘Source New :Y| 54 E |QEI§|2 $|P§D|=a=a| Isa
Eli jav-- A I
Eli iav Clea" and Blind public void testSum2(){
-. é] " (Jean JavaApplicationl jl = new JavaApplicationlO;
B Libran'e- GenerateJavadoc assertEquﬂﬂ-a'j1‘sum‘_5'_3)n
I Q Test Lib '
Run
@Iest
DebuQ public void testPozl () t
Proﬁ|e JavaApplicationl jl = new JavaApplicationlO;
Test A|t+F6 assertEqua1s(B,j1.-(8)):
l
Run Selenium Tests
Set Configuration > * @TEEI
JavaA lioaﬁonﬂ publlc "Iild cethcizz | 1i lj
PP Open Required Projects ) JavaAppllcatlcinl j; = new JavaAppllcatlan; l_ ll ;
Members .JyscE “.lng _- .lln.
i . Close q“:- q“: ‘ "“‘ -
3»@ JavaApplr 3. l;
O JavaAp ) =
0 sew“) Rename...
0 setUp . Move...
° tear“ Cow- v
0 tearDo _ _ _ _ ‘
O testMai Delete Delete JavaappllcltronlJavaAppllcahoanest > X
Z tests" Flnd... Ctrl+F "' m" 1 I, ti 1 (m) x
5 lavaAp '- ' 'aqowve X MA lca on
'~-- O testSu Inspect and Transform... “mph mm (J rage repon) pp
Versioning ) Tests run: 4, Failures: l, Errors: O, Skipped: 0, Tine elapsed: 0.041 sec A
HiStOIy > ————————————— Standard Output ———————————————
main
Run with laCoCoverage -—-—-———-—--— —-—-—-—-———-—--— —-—-—---—-—-—-- v
b E] [I] F Test with JaCoCoverage < >
Reset coverage data 1 74:8 l INS

***************Ending Page***************

***************Beginning Page***************
***************page number:40**************
Net ‘l —
- e a n S
i) JavaApplicationl — NetBeans lDE 8.2 — El X
:ile Edit View Navigate Source Refactor Run Debug Profile Team Tools Window Help
ﬁi G3 % Y‘) Gd §i<defaumnﬁg> v 0' “F “Q 5 'I'®'
PM’ X m@— _—@mpplmn1Test-jm X ' =1
jgmsol New "EH-stoww'm-lﬁeeeim-ileeelegomeé w
- Eli gvaa ) A I
. R B 'ld
E’ ‘ TestPac u‘l-71 in i ' I’ a 921's“? .-. n
. ‘5 mien _ _ I] X
B JaCoCoverage analysis [1 x
C‘ (D ﬁle:///C:/Users/Adrian/Documents/NetBeansProjects/JavaApplication1ljacocoverage/reporthtml/index.htm| if! 7.‘ <7
[Q JaCoCoverage analysis of project "JavaAppIication1" (powered by JaCoCo from EclEmma) fSession
' ‘ ll ' ' II
JaCoCoverage analy3|s of project JavaAppllcatlon1 (powered by JaCoCo from
EclEm ma)
Element Missed Instructions‘ Cov. Missed Branches Cov. Missed Cxty Missed Lines Missed Methods Missed Classes
Biavaapplicatiom = 80% = 50% 1 5 1 7 0 4 0 1
Total 4 of 20 80% 1 of 2 50% 1 5 1 7 0 4 0 1
Created mm Jar: @130 0 r a 2015021803
4O

***************Ending Page***************


***************Beginning Page***************
***************page number:41**************
I;
G - e a n S
0 JavaApplicationl — NetBeans lDE 8.2 — El X
:ile Edit View Navigate Source Refactor Run Debug Profile Team Tools Window Help
ﬁiGiQ; *3 6? <defaumnﬁg> v U'T “a 3 '5'63'
PM MM—@WWMMMM x ' B
jgmwl New ‘IE-“WWILd'bJ'IQE'§%E'-"'|?£‘MidgeEll'éé a;
El i gm ) A I
< B 'ld
E‘TestP:: “11,711: '| 5891.5‘? .-. n
‘I’ ﬁkill'ﬂil _ I] X
[i JaCoCoverage analysis IQ x
C‘ (D ﬁle:///C:/Users/Adrian/Documents/NetBeansProjects/JavaApplication1lJacocoverage/report.html/index.html 7k 7.‘ <7
IQ JaCoCoverage analysis of project "JavaApplication1" (powered by JaCoCo from EclEmma) fSession
' ' II ' ' ll
JaCoCoverage analysrs of prolect JavaAppllcat|0n1 (powered by JaCoCo from
‘5 Milan _ [I ><
[a JavaApplicationl x
(- C' (D file:///C:/Users/Adrian/Documents/NetBeansProjects/JavaApplication1/.jacocoverage/report.html/Javaapplication1/JavaApplica' if 7.‘ <7
[Q JaCoCoverage analysis of proiect "JavaAleicatiom" gpowered by JaCoCo from EclEmma) > B iavaapplicatiom > G JavaApplication1 ISessior
JavaAppllcat|0n1
Element Missed Instructions. Cov. Missed Branches Cov. Missed Cxty Missed Lines Missed Methods
o Poz(int) = 50% = 50% 1 2 1 3 0 1
o main(String||) = 100% n/a 0 1 0 2 0 1
o Sum(int, int) = 100% nla 0 1 0 1 0 1
o JaVQAQQIiCGtiOI'HQ = 100% n/a 0 1 0 1 0 1
Total 4 of 20 80% 1 of 2 50% 1 5 1 7 0 4
‘Created ‘with 1&1lequ U T l» ZlilllfrUil Eli]?

***************Ending Page***************

***************Beginning Page***************
***************page number:42**************
Concluzii
> SOLID
> Design Patterns
<> Definitions, Elements, Example, Classification
> JUnit Testing
x 42

***************Ending Page***************


***************Beginning Page***************
***************page number:43**************
Myths
> Clients
O A general description of the objectives is sufficient to
begin writing program
O Requirements are constantly changing, but the
software is flexible and can easy adapts
> Developers
O Once the program is written and it is functional, our
role has ended
O Until the program doesn’t work, we can not assess the
quality
O The only good product is the functional program
O Software Engineering will create voluminous and
mntation and will cause delays
43

***************Ending Page***************


***************Beginning Page***************
***************page number:44**************
Design Patterns — Tntrebéri
> i) Argumentati pentru folosirea DP.
> 2) Veniti cu argumente pentru a nu folosi DP.
> Criticism:
httg:[[sourcemakingcom[design_|gatterns
g 44

***************Ending Page***************

***************Beginning Page***************
***************page number:45**************
Bibliografie

> Erich Gamma, Richard Helm, Ralph Johnson, and
John Vlissides: Design Patterns.‘ Elements 0f
Reusable Object-Oriented Software
(GangOfFour)

> Ovidiu Gheorghies, Curs 7 lP

> Adrian lftene, Curs 9 TAIP:
httg:[[thor.info.uaic.ro[~adiftene[ScoalaZZOl1Z
TAIPZCoursesZTAIPO9.|:_>clf

***************Ending Page***************


***************Beginning Page***************
***************page number:46**************
Li n ks
> Gang-Of-Four: http:[[c2.com[cgi[wiki?GangOfFour,
http:[[www.um|.org.cn[c%ZB%ZB[pdeDesignPatternspdf
> Design Patterns Book: http:[[c2.com[cgi[Wiki?DesignPatternsBook
> About Design Patterns: httpj[www.iavacamporg[designPatternZ
> Design Patterns —Java companion:
http: Z [www.patterndepot.com Z putZS Z lavaPatterns.htm
> Java Design patterns:
http:[[www.allapplabs.com[iava_design_patterns['|ava_design_patter
ns.htm
> Overview of Design Patterns:
http:[[www.mindspring.com[~mgrand[pattern_synopses.htm
> Gang of Four: http:[[en.wikipedia.org[wiki[Gang_of_four
> JUnit in Eclipse: http:[[www.vogellaerarticlesZIUnitZarticle.htm|
' 'n NetBeans: http:[[netbeansorg[kadocsZiavaZ'|unit—intro.htm|
46

***************Ending Page***************


***************Beginning Page***************
***************page number:47**************
V51 Mulgumesc! I
Pentru prezengéi, i ’ Q ' “ '
rébdare’ ITHANK
colaborare... l ‘-
.- YQU ,

***************Ending Page***************

