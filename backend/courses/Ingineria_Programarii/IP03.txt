***************Beginning Page***************
***************page number:1**************
lngmerla Pragramarii
Cursul 3 — 7,8 martie 2023
adiftene@info.uaic.ro

***************Ending Page***************

***************Beginning Page***************
***************page number:2**************
Cu prins
> Din Cursurile 1, 2...
> Modelarea
> Limbaje de Modelare
O Limbaje Grafice
> UML — lstoric
> UML — Definigie
> UML — Tipuri de Diagrame
> UML — Diagrame Use Case
> UML — Diagrame de Clase

***************Ending Page***************


***************Beginning Page***************
***************page number:3**************
Iin Cursurile 1, 2

> lngineria programérii (Software engineering)
> Etapele dezvoltérii programelor

> Modele de dezvoltare

> lngineria ceringelor

***************Ending Page***************

***************Beginning Page***************
***************page number:4**************
Iln cu rsul l
@¥
Analysis Design Development Implement
Modelul Tn cascadé...
x 4

***************Ending Page***************


***************Beginning Page***************
***************page number:5**************
Dletermtlpe object|ves, Evaluate alternatives;
a erna rves, Identify, resolve risks
constramts r\
n‘“ l
Concet\ \ ‘ s e s
Plan next phases
Re - e nts Develop next level product
I 1 : ' 0' n
l l0 =' ent
x MOdEIUI Tn spiralé
5

***************Ending Page***************

***************Beginning Page***************
***************page number:6**************
Iin cursul 2
Hemmer
> XP, TDD...

***************Ending Page***************


***************Beginning Page***************
***************page number:7**************
Iln cursul 2

> lngineria ceringelor:
<> Actori
<> Scenarii

***************Ending Page***************

***************Beginning Page***************
***************page number:8**************
lerarhla dmtr-o flrma de software — Compartlmente
Head 0f Development
(HOD)
Product/Project Business Analysts Software Development Quality Analisis SUPPO'T Engineer
Managers Manager/Leader Manager/Leader Manager/Leader Manager/ Leader
Analysis Designers/Programmers
x 8

***************Ending Page***************


***************Beginning Page***************
***************page number:9**************
lerarhia dintr-o firmé de software — Proiecte
"@02th
\
ﬁlm/landﬁll) Mmllﬂﬂeﬂl) Mmllﬂdel'lﬂ
Mmll'rwmmn him/"mien Desimll'rwlllnen
- n

***************Ending Page***************

***************Beginning Page***************
***************page number:10**************
Modelarea. — Ie ce?

Ce este un model? _... 6.2;? :_._7;_._".7
Simplificarea realitétii w'_~~v-"?'f§f‘“"r€;; _ Q’. -~
Planul detaliat al unui - = ~ (‘g-l.‘ '31
sistem (blueprints) l-~-;-_._.;'E._';_---1,;f5;_._.._.,§;.¢-"-$ I

De ce modelém? ' ' '
Pentru a Tntelege mai bine ce avem de fécut
Pentru a ne concentra pe un aspect la un moment dat
‘nde folosim modelarea?

***************Ending Page***************


***************Beginning Page***************
***************page number:11**************
Scopurlle Madelarll

> Vizualizarea unui sistem

> Specificarea structurii sale §i/sau a comportérii
> Oferirea unui §ab|0n care 55 ajute Ia construcgie
> Documentarea deciziilor luate

***************Ending Page***************

***************Beginning Page***************
***************page number:12**************
Modelarea Arhitecturii

> Cu ajutorul Use case-urilor: pentru a prezenta
ceringele

> Cu ajutorul Design-ului: surprindem vocabularul §i
domeniul problemei

> Cu ajutorul Proceselor: surprindem procesele §i
thread-urile

> Cu ajutorul lmplementérii: avem modelarea aplicagiei

> Cu ajutorul Deployment: surprindem sistemul din

***************Ending Page***************


***************Beginning Page***************
***************page number:13**************
Principiile Madelérii

> Modelele influenteazé solugia finaléi

> Se pot folosi diferite niveluri de precizie

> Modelele bune au corespondent Tn realitate
> Nu e suficient un singur model

***************Ending Page***************

***************Beginning Page***************
***************page number:14**************
Limbaje de Modelare

> Analiza 5i proiectarea unui proiect trebuie facute
inainte de realizarea codului

> in prezent, se acorda 0 atentie deosebita acestei
etape, deoarece de ele depind producerea 5i
refolosirea de software

> Pentru analiza §i proiectarea programelor s-au
creat limbajele de modelare

> Limbaj de modelare este un limbaj artificial care
poate fi folosit sa exprime informagii sau
cunoa§tere sau sisteme

***************Ending Page***************


***************Beginning Page***************
***************page number:15**************
Tlpurl de LImbaJe de Modelare

> Limbaje Grafice: arbori comportamentali,
modelarea proceselor de business, EXPRESS
(modelarea datelor), flowchart, ORM (modelarea
rolurilor), re1;ele Petri, diagrame UML

> Limbaje Specifice: modelare algebrica (AML)
(pentru descrierea si rezolvarea problemelor de
matematica ce necesita putere computationala
mare), modelarea domeniilor specifice (DSL),
modelarea arhitecturilor specifice (FSML),
modelarea obiectelor (object modeling

I language), modelarea realitagii virtuale (VRML)

***************Ending Page***************

***************Beginning Page***************
***************page number:16**************
Limbaje Grafice 1
> Arbori comportamentali
L__
i T _1 E
“m '
_ m-i
—

***************Ending Page***************


***************Beginning Page***************
***************page number:17**************
lebaJe Graflce 2
> Modelarea proceselor de business
Group PM Paciﬁc "WWW" "
Active Time :
No E
> EXPRESS (modelarea datelor) B j
name -l lssueList
_*a*£'_| ENE;
5 I 1

***************Ending Page***************

***************Beginning Page***************
***************page number:18**************
Limbaje Grafice 3
> Flowchart
V
N0
>
Yes
V
Yes
P
N0
‘ v

***************Ending Page***************


***************Beginning Page***************
***************page number:19**************
> ORM Ob ect Role Modelm
DogmaModeler @FQE
Tree Tablelleraphy ORM Diagram ORM-ML“ Pseudo NLH DIG t
Q)OntologyBase(jdb01postgresql k A‘ H o I e6» =® -© ma‘ ? g PE", (5)‘ I.‘ Q Q
El .Q Degma-OntologyBase " ' ' ' '
El 3/ Subject Categories
El 3/ CustomerComplaint
El V-I e_.s_=.
El Author [£5- '_'_ ISBN _jl
EEIHas: First Name W-
EE! Has: Last Name “Title:
mwrites: Book M-
El Book q—> “PH-Ms
EElHas: Title M. 1' Value ~
< t > W"
Q Commitments Library (jdbaapcg: @- ZQUIQ'JQI
El B —
El Q Library v

***************Ending Page***************

***************Beginning Page***************
***************page number:20**************
Limbaje Grafice 5
> Petri Netsc1 redJenow
O \
Yelowgreen“ red
b‘
greenJellovV". yellow
62 45'

***************Ending Page***************


***************Beginning Page***************
***************page number:21**************
lebaJe Graflce 6
> Metoda Booch (Grady Booch) — analiza si design oo
A /"\_ ._
\ i
\) Class D ) / Class P I
i _ ._\ _V_ J
<’A\v,-\ L“va J ‘ \/
\ \ A l“ — — — — — 1
) ClassA )(/ \Ifq /OJ ClassP l
1 W I \ \ 0 \ L — — — — — -|
‘ — /— -’ ) Class B ,_n C' G i
L +—/i ass I
__ \ /_ .J -_ __ __ ,1
/ v \ /
(/A V , q\ W Abstract Class
\ — Association
> ClassC m —> Inherits
1- _ _\ ,o k) O— Aggregation
v O— Uses 2]

***************Ending Page***************

***************Beginning Page***************
***************page number:22**************
L' b ‘e Graf'ce 7
> OMT (0b ect-modelm g techm a ue

A Generalizationir Inheritance

$ Class operation I Class attribute add(Obj'ecl) _. void
italic Abstract class! Abstract operation inserlﬂ'nl, Object) _. void
Association l Link: . .

get(int) : Object
— Multiplicity: one IS‘ _ :
e rze :m

4O Multiplicity: optional g 0

—. Multiplicity: many

—<> Aggregation A

.next LinkedList ArrayList
MAX SIZE: int= 100
header $ “ acld(0bject) : void
' add(0bject) ; void insert(int. Object) : void
_ insert(int_ Object): void get(int) r Object
get(int) : Object getSize() : int
getSizeO ; int $ listToArray(List) : Array
° O
Object 22

***************Ending Page***************


***************Beginning Page***************
***************page number:23**************
Limbaje Grafice 8
> OOSE (Object-oriented software engineering)
UseCase
Diagmms
\ ° @
expressed realized veriﬁed
structured implemented ' uses
Actor
Analysis ' :
. uses i
domainobject
diaamm
Actor
speciﬁed diagums diagrams
U

***************Ending Page***************

***************Beginning Page***************
***************page number:24**************
I I I
lebaje Graflce 9
> Diagrame UML
.'- 1
; as; ‘g _ @155 kg QE El-l Q
an,‘ _ . __-1

***************Ending Page***************


***************Beginning Page***************
***************page number:25**************
UML — lntroducere

> UML (Unified Modeling Language) este
succesorul celor mai bune trei limbaje
OO cle modelare anterioare:
<> Booch (Grady Booch)
<> OMT (lvarJacobson)
<> OOSE (lames Rumbaugh)

> UML se constituie din unirea acestor
limbaje de modelare §i Tn plus are 0

‘resivitate mai mare

***************Ending Page***************

***************Beginning Page***************
***************page number:26**************
SIEIEYGIH ‘ ~
1990 m
‘865153191
m roron
76131-194 (Hose-94
1995 m
unto‘ mm m
1997 “"L“ _ m
', 1- OEP
W [I
2000 {Ii-“ETTA ~31 r
2003 mum
m5
2°07 111mm
Is'ML'1z1 Iﬁrmuu' 26
2008 ‘Um-2.

***************Ending Page***************


***************Beginning Page***************
***************page number:27**************
UML — Iefinigie (QMG)

> "The Uniﬁed Modeling Language (UML) is a
graphical language for visualizing,
specifying, constructing, and documenting the
artifacts of a software —intensive system.

> The UML offers a standard way to write a
system 's blueprints, including conceptual
things such as business processes and system
functions as well as concrete things such
as programming language statements,
database schemas, and reusable software

.mponents. ”

***************Ending Page***************

***************Beginning Page***************
***************page number:28**************
UML — Standard Internatlonal
> lanuarie 1997 — UML 1.0 a fost propus spre
standardizare 1n cadrul OMG (Object
Management Group)
> Noiembrie 1997 — Versiunea UML1.1 a fost
adoptata ca standard de catre OMG
> Ultima versiune este UML 2.5.1 (Decembrie 2017)
> Site-ul oficial: httg:[[www.uml.0rg
[511.7115 UNIFIED MODELING LANGUAGE" ‘M?’ E
———-ww a
h UML® Resource Page
— 1A—1 28

***************Ending Page***************


***************Beginning Page***************
***************page number:29**************
UML . llpurl e Ilagrame
A
Structure Behaviour
Diagram Diagram
A A
‘y Q?
. Component Object Activity Use Case State Machine
Class Diagram . . . . .
Diagram Diagram Diagram Diagram Diagram
Composite .
Deployment Package Interaction
Structure Dia am Dia am Dia am
Diagram gr gr gr
A
‘I?
Interaction
Sequence .
Diagram Overview
Diagram
Communication Timing
Diagram Diagram
‘ 29

***************Ending Page***************

***************Beginning Page***************
***************page number:30**************
UML2 .O — llag rame de Structura l
> Diagrame de Clasé'l: clasele (atributele, metodele) si
relatiile dintre clase
Name Street
Phone Number 0..1 lives at 1 C'ty
Email Address State
Postal Code
Purchase Parking Pass Country
‘ Validate
Output As Label
Student Number
Average Mark —
ls Eligible To Enroll
Get Seminars Taken 30

***************Ending Page***************


***************Beginning Page***************
***************page number:31**************
UML2.0 — Ilagrame de Structura 2
> Diagramé de Componente: componentele sistemului 5i
legéiturile Tntre componente
UserPC BackEndSeruer
- SermerProglam - ExampleLibmr-y
- '“ ' “"““““““
<<lnterface>>
—
\ 3]

***************Ending Page***************

***************Beginning Page***************
***************page number:32**************
UML2.0 — Ilagrame de Structura 3
> Diagrame structuré composité: structura interné
ind'v'ar2 indVaM depVar view
var var V8!’
‘ 32

***************Ending Page***************


***************Beginning Page***************
***************page number:33**************
UML2.0 — Iiagrame de Structuré 4
> Diagramﬁ de Deployment: mpdelarea structurii hardware
ﬁ
(Mae bus XMUJSON» —|
33

***************Ending Page***************

***************Beginning Page***************
***************page number:34**************
UML2.0 — Ilagrame de Structura. 5
> Diagrami de obiecte: structura sistemului la un
moment dat
Ausprégungsspeziﬁ kation fiir eine
Objektbeziehqng
vater V sohn
vomame = "Hans" vomame = “Peter”
nachname = 'Meier" nachname = "Meier'
alter = "50" alter = "20'
‘ 34

***************Ending Page***************


***************Beginning Page***************
***************page number:35**************
x‘ m cl v
UML2.0 — llagra e e Structura 6
I V I A V I I I A I
> Dlagrama de pachete. |mparl;|rea Slstemulul |n pachete 5|
relagnle dmtre ele
-
I \
" J I \\ |
, |
x f : \ l
1 I | \\ l
<<imp0n>> 1/ |I : ‘\ :
r’ I, : \\ <<impg|1>=> :
r’ J l ‘K |
1 ' | x l
[I ’l | \\ <<access> :
’r |' : \ |
/ ,l | \\ :
I! J' : _ \\ |
f1 f :<=:|mpgﬂ:=:= \\\ :
\
,'<<import>>
jf
f
X :l
\\\ <¢imp0rb=> | /’ .x”
\ I ’ ,"
\\ l' ),’<=:imp0n:=> f,-’
\\\ f: ll!’ , -" i .- fd <<imp0l1>>
\ r,’
35

***************Ending Page***************

***************Beginning Page***************
***************page number:36**************
UML 2.0 — Dlagrame Comportamentale 1
> Dlagrame de actIVItate: prezentare busmess §l a
. . . v . File Sharing:Activity Diagram
fluxulul de actIVItagl —
Eserogged]
Share Via Link Make ﬁle public [eke File Available to the
System
_—l _—_|
TOGI'OUp oanother
T0 Frien person [if user opts for]
- UpdatePublic ‘ sendFi'FKa'Td ' Updateshaﬂng ' Reque$‘A°°ess'

***************Ending Page***************


***************Beginning Page***************
***************page number:37**************
UML 2.0 — Dlagrame Comportamentale 2
> Dlagrame de stare: pentru a prezenta starlle oblectelor
data will be encrypted with SSLITLS
0 Iogmsuccess
transfercancelled
ﬁ'etransferrequest forcemquestedtermim
\“_ O
37

***************Ending Page***************

***************Beginning Page***************
***************page number:38**************
UML 2.0 — llagrame Comportamentale 3
> Diagrame Use Case: prezinté fungionalitéigile sistemului
folosind actori, use case-uri si dependenge Tntre ele
Team Leader I: J <<include>:’,~"#,f
Use, ,Iiéi'nglede» ,/’/ ,”
Developer -1
Spllt stones Into tasks

***************Ending Page***************


***************Beginning Page***************
***************page number:39**************
UML 2.0 — liagrame de interacgiuni 1
> Diagrama de comunicare: araté interacgiunile Tntre
obiecte (comportamentul dinamic al sistemului) (actori:
bucétar, aragaz, acyiuni: gétirea, aprinderea,
deconectarea)
1: einschaltenﬁ
—>
2: ausschalten()
—>

***************Ending Page***************

***************Beginning Page***************
***************page number:40**************
UML 2.0 — Ilagrame de mteracglunl 2

> Diagramé de secventﬁ: prezinté modul Tn care obiectele
comunicé Tntre ele din punct de vedere al trimiterii de mesaje

: | | |

login(user, pass) : :

| |

- - - - - - logged(true) - - - - - - dispatchUserlnf0(user, pass) :

queryDatabase(q)
performAction()
querleesult()-----

l sendSuggestions() -------- sendResult()-——- l

| | |

i : : :

l | | |

! | |

***************Ending Page***************


***************Beginning Page***************
***************page number:41**************
llagrama de clase — Class llagram
> Scop:
O Modeleazé vocabularul sistemului ce trebuie
dezvoltat
O Surprinde conexiunile semantice sau interacgiunile
care se stabilesc Tntre elementele componente
O Folositéi pentru a modela structura unui program
> Contine
O Clase/lnterfege
O Obiecte
O Relagii (Asociere, Agregare, Generalizare,
Dependengéi)

***************Ending Page***************

***************Beginning Page***************
***************page number:42**************
Clase
> Modeleazéi vocabularul z identificéi conceptele pe care
clientul sau programatorul Ie foloseste pentru a descrie
solutia problemei
> Elementele unei clase:
O Nume: identificéi o claséi
O Atribute: proprietéiti ale clasei
O Metode: implementarea unui serviciu care poate fi cerut
oricéirei instante a clasei
ManipulateNImbers } Nume
Class
E‘ Fie'ds } Atribute (private)
j nurnere
El Methods
u Afisare
v ManipulateNumbers (+ 1 overload) M6t0d6 (private,
‘U mlnlm
u size protected)
q‘? SumaVectori 42

***************Ending Page***************


***************Beginning Page***************
***************page number:43**************
Relagu - Generahzare — C#
> Modeleazéi conceptul de mostenire Tntre clase
> Mai poarté denumirea de relagie de tip is a (este
u n/ este 0)
ggésoana
El Fields
J9 nume
59 varsta
El Methods
5" getNume
1i" getVarsta
5" setNume
i‘ setVarsta
Profesor Student
Class Class
:9 Materia 59 anul
- El Methods g? grupa
ii getMateria El Methods
i‘ setMateria a‘ getGrupa
ii setGrupa 43

***************Ending Page***************

***************Beginning Page***************
***************page number:44**************
ArgoUML — Relatya de generallzare
getNumeU : String
4
grupa1lnteger
anul : Integer
‘ 44

***************Ending Page***************


***************Beginning Page***************
***************page number:45**************
> Exprimé o co_ne>§iune semanticéi sau o interacgiune Tntre obiecte
aparglnand dlferltelor clase
> Pe mésgra c_:e sistemul evolpegzéi noi legaturi Tntre obiecte pot fi create,
sau legaturl eXIstente pot fl dlstruse
> O asocigre interactioneazéi cu obiectele sale prin intermediul capetelor
de asouere
> Elemente:
o Nume: descrie relagia
o Capete de asociere
- Nume I roluljucat de obiect Tn relatie
- Multiplicitate I céte instange ale unei clase corespund unei singure instange ale
celeilalte clase . .. . ..
nurlhphutateﬁ lnultlphmateﬂ u
- I'HIA numasuciere FHIB -
Persnana Cum ante
-angajat lumazapemru angajatur' - 45

***************Ending Page***************

***************Beginning Page***************
***************page number:46**************
Relagla de asoaere i
> Relagia Student — Discipliné
<> Student: urmez O sau mai multe discipline, cunosc
disciplinele pe care Ie urmez;
<> Discipliné: pot fi urmaté de mai mulgi studengi, nu
cunosc studentii care m5 urmeazé
StudDisc
0..‘ 0..a
m
studlnscrisi dichrmate

***************Ending Page***************


***************Beginning Page***************
***************page number:47**************
Relaigla de asoaere 2
> Relagia Discipliné — Profesor
<> Discipliné: sunt predatéi de un profesor, imi cunosc
titularul
<> Profesor: pot preda mai multe discipline, cunosc
disciplinele pe care Ie predau
DiscProf
1..a 0..a
discPredate titular

***************Ending Page***************

***************Beginning Page***************
***************page number:48**************
Relagu — Ag regare
> Este un caz particular a| relagiei de asociere
> Modeleaza 0 relatie de tip parte-Tntreg
> Poate avea toate e_|e_rr1entele _unei r_e|a_t;i_i de asociere, Tnsa
|n general se SpElelCa numal multlpIICItatea
> Se folose§tedpentrua modela situagiile Tntre care un obiect
este format In mal multe componente.
—""' — —
. i
l i
I F
| I
l i
l F
L _ L
agregare cumpuzltle
x 48

***************Ending Page***************


***************Beginning Page***************
***************page number:49**************
— Gender
— male
accountNumber:lnteger female
0..1 —
0__* customer

_ _ 1 managedCompanies Company
lsMarrled : Boolean name : String
is_Unemployed : Boolean numberOfEmployees : Integer
birthpate 3 Date employee employer
age - Integer _ _ 0 . stockPrice() : Real
ﬁrstName : String 0-- | "
lastName : String |
gender : Gender |
'ncome(Date) lnte er wife
| :

g 0..1

husband 0..1 title : String
startDate : Date
salary : Integer
_
l
place : String
date : Date
_ 27
m

***************Ending Page***************

***************Beginning Page***************
***************page number:50**************
Relagia de Compozigie (“hasA”)
1 1 1 1
fac fao fac fac
stud prof planln sesiun - Ex
1..‘ 1..a 1..a 1..a
m

***************Ending Page***************


***************Beginning Page***************
***************page number:51**************
Studiu de Caz

> Obtginerea Studengilor Bursieri
<> Actori
<> Scenarii de utilizare
<> Clase

***************Ending Page***************


***************Beginning Page***************
***************page number:52**************
Concluzu
> Modelare — De ce?
> Limbaje grafice
> UML
<> Structurale: clase
<> Comportamentale: use-case
<> De interacgiuni
x 52

***************Ending Page***************


***************Beginning Page***************
***************page number:53**************
lntre ban

> 1) Dagi exemplu de 0 situayie Tn care e
suficientéi doar 0 diagraméi sau 0 schemé
pentru a realiza ceva.

> 2) Dayi exemplu de 0 situagie Tn care e nevoie
de mai mult de 0 diagraméi sau 0 schemé
pentru a realiza ceva.

> 3) Care e legétura dintre diagramele de tip
use-case §i diagramele de clase?

x 53

***************Ending Page***************


***************Beginning Page***************
***************page number:54**************
Bibliografie

> OMG Unified Modeling LanguageTM (OMG
UML), Infrastructure, Version 2.2, May 2008,
httg:[[www.omgorg[docsthcZO8-OS-O4gclf

> ArgoUML User Manual, A tutorial and
reference description, httg:[[argouml—
stats.tigris.org[documentation[grintablehtml
[manuallargomanuaLhtml

> Ovidiu Gheorghies, Curs lP, Cursurile 3, 4

> Diagrame UML, Regie.ro

***************Ending Page***************


***************Beginning Page***************
***************page number:55**************
Links

> OOSE: httg:[[cs-exhibitions.uni—
klu.ac.at[index.ph|g?id:448

> ArgoUML: http:[[argoum|—
stats.tigris.org[nonadeocumentation[manual-0.22Z

> Wikipedia

***************Ending Page***************

