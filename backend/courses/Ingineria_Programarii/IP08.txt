***************Beginning Page***************
***************page number:1**************
I I V I I
lngmerla programaru
Cu rs 8

12-13 aprilie

***************Ending Page***************

***************Beginning Page***************
***************page number:2**************
Din Cursurile Trecute

> Design Patterns: Definitions, Elements

> 60F: Creational Patterns, Structural Patterns,
Behavioral Patterns

***************Ending Page***************


***************Beginning Page***************
***************page number:3**************
Creational Patterns
> Abstract Factory

> Builder

> Factory Method

> Prototype

> Singleton

> Lazy initialization

> Object pool

> MultitOn

> Resource acquisition

***************Ending Page***************

***************Beginning Page***************
***************page number:4**************
Creational Patterns — Introduction

> Abstract the instantiation process

> Help make a system independent of how its
objects are created, composed, and represented

> There are two recurring themes in these patterns:
O First, they all encapsulate knowledge about which
concrete classes the system uses
O Second, they hide how instances of these classes are
created and put together

> The creational patterns give a lot of flexibility in
What gets created, who creates it, how it gets

Ireated, and When

***************Ending Page***************


***************Beginning Page***************
***************page number:5**************
Creational Patterns — Abstract
Factory
> Intent — Provide an interface for creating families of
related or dependent objects without specifying
thEll' concrete classes
> Also Known As — Kit
> Motivation
O Consider a user interface toolkit that supports multiple
look-and-feel standards, defines different appearances
and behaviors for user interface "widgets" like scroll bars,
windows, and buttons
O To be portable across look-and—feel standards, an
application should not hard-code its widgets for a
.ticular look and feel

***************Ending Page***************

***************Beginning Page***************
***************page number:6**************
It is global 1V remote
cover. Somebody else
hasto provide remote
for it to function.
Q
I
I’ AllTVs will support following buttons: "E |
i 'Change channel I
i -Volume Increase/Decrease I
, r
Getme remotewith ~ _‘_ _,_._._ _v___‘_ -17-‘- _____‘_ -7- _ _ _ -' ‘
Global remote cover
Samsung TV Remote
SonyTV
E Factory
.1 ‘ Appliances
f}? \ Samsung
' l ‘IV Remote
a F t
1 _ Abstract Factory ac my
‘ 6

***************Ending Page***************


***************Beginning Page***************
***************page number:7**************
Abstract Factory
> Applicability — Use this pattern when:
O a system should be independent of how its products are
created, composed, and represented
O a system should be configured With one of multiple
families of products
O a family of related product objects is designed to be used
together, and you need to enforce this constraint
O you want to provide a class library of products, and you
want to reveal just their interfaces, not their
‘itations

***************Ending Page***************

***************Beginning Page***************
***************page number:8**************
> Abstract Factory — maze, computer components
ad: abstract Factar'gr lmplamarrtatian - LIML Class Diagram J
+craata Product-q (lﬂbatractha'uct-q
was-atePma'uc-tﬁfjﬁbatrac-tpma'uc-tﬂ
l
- = t t
+craataProductAt):Abstractha'uct-q +craataF‘roductﬂﬁmbstracthduct-q
+craataPraductElﬂﬁbatractha'u-ztﬂ +craataPraductElﬁJ:A.batractha'u-:tﬂ
8

***************Ending Page***************


***************Beginning Page***************
***************page number:9**************
Abstract Factory- The Good, The

Bad

> Detaches creators from created objects

> Guarantees compatibility of created objects

> Preserves S and O (from SOLID)

> Code becomes complicated because of lots of
extra classes

***************Ending Page***************

***************Beginning Page***************
***************page number:10**************
Creatlonal Patterns — Builder

> Intent — Separate the construction of a complex
object from its representation so that the same
construction process can create different
representations

> Motivation

O A reader for the RTF (Rich Text Format) document
exchange format should be able to convert RTF to many
text formats.

O The reader might convert RTF documents into plain ASCII
text or into a text Widget that can be edited interactively.
The problem, however, is that the number of possible

nversions is open-ended. So it should be easy to add a
mmodifying the reader.

***************Ending Page***************


***************Beginning Page***************
***************page number:11**************
Builder and Factory Design Pattern - Building chessboard with pieces
Cheaboard elm“
~491© nag), u‘
I
Bwlc chessboard Position Provider
0.". posmon bv name p
3 ‘TD ._" “In chess plea
—. \ ' \ \ e
A M a
'2'}?!
a?! -..; 0° PM"
‘°' “1:7:- B“"°_;°f§:a"‘ Chou Piece Factory
cmaoom Builder mace Pteces Q
\ man
I I I
- - - e.
D I I
i- I I I Bishop
I
- - - e
w U
Rook
cmmm
with pieces g
Queen
King
11

***************Ending Page***************

***************Beginning Page***************
***************page number:12**************
> Each kmd of converter class takes the mechanlsm for
creatlng and assembllng
> The converter |s separate from the reader
. , er
Parseﬂrﬂ) ‘P i’ ConverfCharacrerfcharj
: ConvertFoﬂrChange(FonrJ
: mearﬂ-hmgrwmf)
I
whalelt=get1he maltokenH i
smch LType{
CHAR:
Pig?“ _-.~(ZonvenF (“Ch-""990 Fem) (ImveﬂChm'zschicmar) C(xwenﬂharmﬂm{chm,8 CarverKIhal:scleﬁchm]
builtler _ “Mmenpmag 410M) GetASCI ITexﬂ) ConvenFomChangeljFont) CmvenFomChange(Fom)
p | Com'enptuagmphijl Cmvedpmagraphﬂ
i : GetTeXTexhj) GelTextWidge1( II
l
i i i
I l I
i i i
‘ 12

***************Ending Page***************


***************Beginning Page***************
***************page number:13**************
> Builder — RTF Reader, Happy Meal
—+ —

' l

l

l

-

—
+buiI::IF' altﬁwuid —
+getHe£urtﬁPruduct —

\ 13

***************Ending Page***************

***************Beginning Page***************
***************page number:14**************
Bquer3

> Applicability — Use when the parameters
required for construction are numerous, but
only some are required for each specific
object (different kinds of pizza)

> When you want to build different
representations of similar objects (rail bridge
and road bridge)

***************Ending Page***************


***************Beginning Page***************
***************page number:15**************
Builder - The Good, The Bad

> Allows for step by step construction of
objects

> Steps can be skipped and run later, or can be
run recursively

> Allows for reusing code when building similar
(but different) objects

> Preserves S (from SOLID) — decouples
complex building processes from the
business logic

> Code becomes complicated because of many
new classes

***************Ending Page***************

***************Beginning Page***************
***************page number:16**************
Creational Patterns — Factory
Method

> Intent — Define an interface for creating an object,
but let subclasses decide which class to instantiate

> Also Known As — Virtual Constructor

> Motivation — To create a drawing application, for
example, we define the classes DrawingApplication
and DrawingDocument. The Application class is
responsible for managing Documents and will
create them as required (at Open or New from a
menu, for example)

***************Ending Page***************


***************Beginning Page***************
***************page number:17**************
\‘ Strawberry

-.-- _ ,4 ‘ ‘a, - Chocolate
Factorv
Client '

P
Vanilla
Product
‘ 17

***************Ending Page***************

***************Beginning Page***************
***************page number:18**************
> Subclasses redefine an abstract CreateDocument
> It can then instantiate application-specific Documents
without knowing their class
> CreateDocument is a factory method because it‘s
responsible for "manufacturing" an object
m-
099"” CreateDocumenlO Document‘ doc _ CroathocumcmO; Y:
Cmsml NewDocumomU Q- _________ docsAddmoc).
Saon OpenDocumcmu doc~>00en();
Flavor“)
‘ A
‘\ 18

***************Ending Page***************


***************Beginning Page***************
***************page number:19**************
Factory Method 3
> Applicability — Use this pattern when

o a class can't anticipate the class of objects it must
create

o a class wants its subclasses to specify the objects it
creates

O classes delegate responsibility to one of several helper
subclasses, and you want to localize the knowledge of
which helper subclass is the delegate

***************Ending Page***************

***************Beginning Page***************
***************page number:20**************
Factory Method 4
> Consequences
l. Provides interconnections for subclasses
2. Connects parallel class hierarchies

***************Ending Page***************


***************Beginning Page***************
***************page number:21**************
CP — Factory Method
> Factory Method — Open / New Project, Hello M r/ Ms
-:-: inteﬁacﬁ: I=I= —
Product Hectoryn-lethoriﬂ'PmrIu-rt
l +tJoS omethingﬁﬁroitl - — — — — —
| .l.
'
—
— — — — — -

***************Ending Page***************

***************Beginning Page***************
***************page number:22**************
Factory Method- The Good, The

Bad

> Detaches creators from created objects

> Preserves S and O (from SOLID)

> Code becomes complicated because of extra
(derived) classes

***************Ending Page***************


***************Beginning Page***************
***************page number:23**************
Creational Patterns — Prototype

> Intent — Specify the kinds of objects to create using
a prototypical instance, and create new objects by
copying this prototype

> Motivation — You could build an editor for music
scores by customizing a general framework for
graphical editors and adding new objects that
represent notes, rests, and staves

> The editor framework may have a palette of tools
for adding these music objects to the score. The
palette would also include tools for selecting,

iving, and otherwise manipulating music objects

***************Ending Page***************

***************Beginning Page***************
***************page number:24**************
Do Ob'ect .
g J Cloned Dog Object
e g
. . 2-.
2‘
- i _ Ndme ' Mammy
leg omen
' Name 7 Inmmv .
tal ubgeﬂ Age 5 VI‘; A89 3V‘;
' - ' H Lolur w \ite
fly? Obi“! Lolor f whlte
Iall object
Modified Dog Object
/\ ‘
‘ \
i ‘If \
l i ,
Name ' hmmy
Age ' b yrs
(olor Blown
24

***************Ending Page***************


***************Beginning Page***************
***************page number:25**************
> We can use the Prototype pattern to reduce the
number of classes
Drawrposm'mj
Crone0
A
pmiowpe
MampuiateU Draw(Positron)
: CloneU A _____
:
pmowpe_,c.me(, er
while (user dra smouse){ Draw(Posihon) Drathosition)
p->0}aw(ne?v postman) 0'0"“) Q CloneO Q
insert p unto drawmg E E
w ..

***************Ending Page***************

***************Beginning Page***************
***************page number:26**************
Prototype 3
> Applicability — Use the Prototype pattern when a

system should be independent of how its products

are created, composed, and represented; and

o when the classes to instantiate are specified at run-
time, for example, by dynamic loading; 0r

O to avoid building a class hierarchy of factories that
parallels the class hierarchy of products; 0r

o when instances of a class can have one of only a few
different combinations of state

***************Ending Page***************


***************Beginning Page***************
***************page number:27**************
CP — Prototype
> Prototype — Music editor, Clonable
— —
: l
— —
—\

***************Ending Page***************

***************Beginning Page***************
***************page number:28**************
Prototype - The Good, The Bad

> Copy objects Without using the concrete class

> Skip repeated initializations

> Quickly create complex objects

> It is very hard to clone complex classes with
many references

***************Ending Page***************


***************Beginning Page***************
***************page number:29**************
Creational Patterns — Singleton

> Intent — Ensure a class only has one instance, and
provide a global point of access to it

> Motivation — It's important for some classes to
have exactly one instance. There should be only
one file system and one window manager. An
accounting system will be dedicated to serving one
company.

> How do we ensure that a class has only one
instance and that the instance is easily accessible?
A global variable makes an object accessible, but it

iesn't keep you from instantiating multiple

***************Ending Page***************

***************Beginning Page***************
***************page number:30**************
Two instances are same, Singleton pattern is working ﬁne
x 30

***************Ending Page***************


***************Beginning Page***************
***************page number:31**************
CP — Slngleton
> Singleton — Logger
cd: Singletun Im plem entatiun- UML Clam diagram
Single-tun
-in5tance:5ingletnn
Singletunﬁ:
+get|n3tanceﬁ£ingletun
31

***************Ending Page***************

***************Beginning Page***************
***************page number:32**************
Singleton - The Good, The Bad

> Guarantees a single instance

> Global access point to an instance

> Breaks S (from SOLID) — the pattern has TWO
responsibilities (i.e. does two things)

> Can mask high coupling or other bad design

> ls difficult to use in multi thread systems

***************Ending Page***************


***************Beginning Page***************
***************page number:33**************
CP — Lazy initialization

> Lazy initialization is the tactic of delaying the
creation of an object, the calculation of a
value, or some other expensive process until
the first time it is needed

> How? With a flag

> Each time when the object is called, the flag
is tested:
o If it is ready, it is returned
o If not, it is initialized

***************Ending Page***************

***************Beginning Page***************
***************page number:34**************
Lazy initialization — Java l
public class Fruit{
private static final Map<String,Fruit> types I new
HashMap<String, Fruit>();
private final String type;
//using a private constructor to force use of the factory method
private Fruit(String type) { this.type I type; }
public static synchronized Fruit getFruit(String type) {
if(!types.containsKey(type)) {
types.put(type, new Fruit(type)); // Lazy initialization
l
return types.get(type);

***************Ending Page***************


***************Beginning Page***************
***************page number:35**************
Lazy Initialization- The Good, The

Bad

> Saves on memory, since it instantiates only as
needed

> More time consuming in case you need many
new instances

***************Ending Page***************

***************Beginning Page***************
***************page number:36**************
CP — Object Pool

> lntent: reuse ancl share objects that are
expensive to create.

> Motivation: Performance can be sometimes the
key issue during the software development and
the object creation (class instantiation) is a
costly step. The Object Pool pattern offer a
mechanism to reuse objects that are expensive
to create

> Why use it? Basically, we'll use an object pool
whenever there are several clients who needs

i same stateless resource which is expensive

***************Ending Page***************


***************Beginning Page***************
***************page number:37**************
Visual Example of Object Pooling
CO.‘ ‘,QO~
mi, Skim s C'hrfe D£$‘}’o 7
4/ A,
* 0 Q I O O O O X
/’
Gun
B 4 J
Re use
I 0 Q I I I I O ;_1_ >
Pew
P
"" (>004
by Mike Geig
x 37

***************Ending Page***************

***************Beginning Page***************
***************page number:38**************
Object Pool — Implementation (l)
> When a client asks for a Reusable object, the
pool performs the following actions:

O Search for an available Reusable object and if it
was found it will be returned to the client.

o lf no Reusable object was found then it tries to
create a new one. If this actions succeeds the new
Reusable object will be returned to the client.

o If the pool was unable to create a new Reusable,
the pool will wait until a reusable object will be
released.

***************Ending Page***************


***************Beginning Page***************
***************page number:39**************
Object Pool - Implementatlon (2)
aaka fur Reusable
“5'33 +get|natanceﬂﬁeuaahleP null
+acquil'eHeuﬁahleﬁﬁeugahle
+l'eleaaeHeauaahleﬁreumhleﬁeuaahlejwuid
x 39

***************Ending Page***************

***************Beginning Page***************
***************page number:40**************
ObJECt Pool — Appllcablllty

> Lets’ take the example of the database
connections. It's obviously that opening too
many connections might affect the performance:
O Creating a connection is an expensive operation
<> When there are too many connections opened it
takes longer to create a new one and the
database server will become overloaded

> Here the object pool comes to manage the
connections and provide a way to reuse and
share them. It can also limit the maximum

what can be created

***************Ending Page***************


***************Beginning Page***************
***************page number:41**************
Object Pool- The Good, The Bad

> Saves on computing resources, since it only
allows for a set number of instances

> Increased overhead in terms of managing the
pool

> Slow for the objects in the waiting queue

***************Ending Page***************

***************Beginning Page***************
***************page number:42**************
Structural Patterns i

> Structural patterns are concerned with how
classes and objects are composed to form larger
structures

> Example: consider how multiple inheritance
mixes two or more classes into one. The result
is a class that combines the properties of its
parent classes. This pattern is particularly useful
for making independently developed class
libraries work together.

***************Ending Page***************


***************Beginning Page***************
***************page number:43**************
Structural Patterns 2

> Rather than composing interfaces or
implementations, structural object
patterns describe ways to compose
objects to realize new functionality

> The added flexibility of object
composition comes from the ability to
change the composition at run-time

***************Ending Page***************

***************Beginning Page***************
***************page number:44**************
Structural Patterns
> Adapter

>Bﬁdge

> Composite

> Decorator

>Fagade

> Flyweight

> Proxy

***************Ending Page***************


***************Beginning Page***************
***************page number:45**************
Structural Patterns — Adapter

> Intent: Convert the interface of a class into another
interface clients expect. Adapter lets classes work
together that couldn't otherwise because of
incompatible interfaces.

> Also Known As: Wrapper

> Motivation: Consider for example a drawing editor
that lets users draw and arrange graphical elements
(lines, polygons, text, etc.) into pictures and
diagrams. The interface for graphical objects is
defined by an abstract class called Shape. The editor
defines a subclass of Shape for each kind of

raphical object: a LineShape class for lines, a
e class for polygons, and so forth.

***************Ending Page***************

***************Beginning Page***************
***************page number:46**************
‘ \/ /] (h\
\‘ -/ it‘ 1
~ / < V //“ sz R
& b \ . _ ‘
4Q} Q a ~\\ ( ‘
‘ht/'3‘ a ‘\\
https-//refactor|ng.guru/ _
- _ ,_
46

***************Ending Page***************


***************Beginning Page***************
***************page number:47**************
-/ \ / mlcroSD
' UHS-l 104M815
SD
UHS-l 104MB/s
USB-C
HDMI Video Output 5Gb/s doto s ' 2 x USB 3.1 Gen 1
1080p "51 60H: SGb/s data speed
Up to 4K :q 30H: Thunderbolt 3 os we" os high_ power
Up to 5K or 2 x 4K 4: 6on Video '° Y°°' “mes
Up to 4OGb/s ddto speed
Mox IOOW Power Delivery
‘ 4 7

***************Ending Page***************

***************Beginning Page***************
***************page number:48**************
> A TextShape subclass that can display and edit text is
considerably more difficult to implement
> We suppose the existence of a TextView class for
displaying and editing text. So we can consider TextShape
derived from these classes
m
BoundmgBoxU
CrealeMampularort'J
A
MIX!
BoundmgBoxt) BounomgBoxli D- -------- reiumtext—>GetExtenl[)
‘
k\ 48

***************Ending Page***************


***************Beginning Page***************
***************page number:49**************
Adapter 2

> Applicability — Use the Adapter pattern when
O you want to use an existing class, ancl its interface
does not match the one you need
O you want to create a reusable class that cooperates
with unrelated or unforeseen classes, that is, classes
that don't necessarily have compatible interfaces
O (object adapter only) you need t0 use several existing
subclasses, but it’s impractical to aclapt their interface
by sub classing every one.

g 49

***************Ending Page***************

***************Beginning Page***************
***************page number:50**************
Adapter 3
> Structure — The Adapter pattern is used so that two
unrelated interfaces can work together. This is
something like we convert interface of one class into
interface expected by the client.
A A
(implementation)
__ a
x 50

***************Ending Page***************


***************Beginning Page***************
***************page number:51**************
Adapter — Example

> We all have electric sockets in our houses of
different sizes and shapes. | will take an
example of a socket of 15 Ampere. This is a
bigger socket ancl the other one which is smaller
is of 5 Ampere. A 15 Amp plug cannot fit into a
5 Amp socket :> we will use an Adapter

> We have a 5 Amp plug ancl want a 5 Amp socket
so that it can work. We DO NOT have a 5 Amp
socket, what we have is a 15 Amp socket in
which the 5 Amp plug cannot fit. The problem is
how to cater to the client without changing the

***************Ending Page***************

***************Beginning Page***************
***************page number:52**************
Adapter - Java i
/*"" The socket class has a specs for i 5 AMP.*/
public interface Socket{
public String getOutput();
}
public class Plug {
private String specification I "5 AMP";
public String getlnput(){
return specification;
l‘

***************Ending Page***************


***************Beginning Page***************
***************page number:53**************
Adapter — Java 2
public class ConnectorAdapter implements Socket
l
public String getOutput(){
Plug plug I new Plug();
String output I plug.getlnput();
return output;
}
}

***************Ending Page***************

***************Beginning Page***************
***************page number:54**************
Adapter - The Good, The Bad

> Preserves S and O (from SOLID)

> Code becomes complicated because of extra
classes

***************Ending Page***************


***************Beginning Page***************
***************page number:55**************
Structural Patterns — Bridge

> Intent — Decouple an abstraction from its
implementation so that the two can vary
independendy

> Also Known As — Handle/Body

> Motivation — Consider the abstraction of shapes,
each with its own properties. One thing all
shapes can do is draw themselves. Drawing
graphics to a screen can be dependent on
different graphics implementations or operating
systems. Shapes have to be able to be drawn on

- many types of operating systems

***************Ending Page***************

***************Beginning Page***************
***************page number:56**************
L
U U v5.
‘ ‘
https://refact0ring.guru/
‘ 56

***************Ending Page***************


***************Beginning Page***************
***************page number:57**************
> The bridge helps by allowing the creation of new implementation
classes that provide the drawing implementation. Shape class
provides methods for getting the size or properties of a shape.
Drawing class provides an interface for drawing graphics
- —
_ .
(l O ‘
A g ‘
— —
57

***************Ending Page***************

***************Beginning Page***************
***************page number:58**************
Brldge 2

> Applicability — When dividing large classes
with many versions of the same feature (e.g.
multiple types of network connections)

> When developing and extending classes in
multiple and independent directions

***************Ending Page***************


***************Beginning Page***************
***************page number:59**************
Bridge — Java i
interface DrawingAPl {/""" "lmplementor" */
public void draWCircle(double x, double y, double
radius);
}
/"""" "Concretelmplementor" 1,2 /
class DrawingAPll implements DrawingAP|{
public void drawCircle(double x, double y, double
radius) { System.out.printf("APli " + x + y + radius);}
l
class DrawingAPl2 implements DrawingAP|{
ublic void draWCircle(double x, double y, double
i' i System.out.printf("AP|2“ + x + y + radius);}

***************Ending Page***************

***************Beginning Page***************
***************page number:60**************
Brldge — Java 2
interface Shape {/"* "Abstraction" ~'i/
public void draw();
public void resizeByPercentage(double pct); }
/“"“'" "Refined Abstraction" "‘/
class CircleShape implements Shape {
private double x, y, radius;
private DrawingAPl drawingAPl;
public CircleShape(double x, double y, double radius,
DrawingAPl drawingAPl) {
this.x I x; this.y I y; this.radius I radius;
this.drawingAP| I drawingAPl;
}
public void draw() {drawingAPl.drawCircle(x, y, radius); }
H‘ oid resizeByPercentage(double pct){ radius "I pct; }

***************Ending Page***************


***************Beginning Page***************
***************page number:61**************
Bridge — Java 3
/"'“'" "Client" "‘/
class BridgePattern {
public static void main(String[] args){
Shape[] shapes = new Shape[2];
shapes[0] = new CircleShape(i, 2, 3, new DrawingAPli());
shapes[i] = new CircleShape(5, 7, 8, new DrawingAP|2());
for (Shape shape : shapes){
shape.resizeByPercentage(2.5);
shape.draw();
}

***************Ending Page***************


***************Beginning Page***************
***************page number:62**************
Bridge — The Good, The Bad

> Preserves S and O (from SOLID)

> Allows for platform independent systems

> High level connections

> Code becomes complicated and splits
cohesive classes

***************Ending Page***************


***************Beginning Page***************
***************page number:63**************
Bibliografie

> Erich Gamma, Richard Helm, Ralph Johnson,
and John Vlissides: Design Patterns.‘ Elements
0f Reusable Object-Oriented Software
(GangOfFour)

***************Ending Page***************


***************Beginning Page***************
***************page number:64**************
Li n ks
> Design Patterns: http:ZZWWW.oodesign.comZ
> Gang-Of-Four: http:ZZc2.comchiZwiki?GangOfFour,
http:Zwaw.um|.org.cnZc%ZB%ZBZpdeDesignPatterns.pdf
> Design Patterns Book: http:ZZc2.cochgiZWiki?DesignPatternsBook
> About Design Patterns: http:Zwaw.'|avacam|:_>.orgZdesignPatternZ
> Design Patterns —Java companion:
http: Z waw.patterndepot.com Z putZ8 Z lavaPatterns.htm
> Java Design patterns:
http: Z waw.a||a|:_>|:_>|abs.com Z '|ava_design_|:_>atterns Z '|ava_design_patter
ns.htm
> Overview of Design Patterns:
http:Zwaw.mindspring.comZ~mgrandZpattern_synopses.htm
> Lazy initialization: http:ZZen.wikipedia.orgZWikiZLazy_initia|ization
> Use Lazy Initialization to Conserve Resources:
tt : www.devx.com ti s Ti 18007
ﬁ'in patterns https:ZZrefactoringguruZdesign-patterns
64

***************Ending Page***************


