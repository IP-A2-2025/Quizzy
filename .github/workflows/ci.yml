name: Java CI with Docker (Backend)

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build custom PostgreSQL image
        run: |
          docker build -t myapp-db ./backend/db

      - name: Build and start custom DB container
        run: |
          docker run -d \
            --name myapp-db \
            -e POSTGRES_USER=myuser \
            -e POSTGRES_PASSWORD=mypass \
            -e POSTGRES_DB=mydb \
            -p 5432:5432 \
            --health-cmd="pg_isready -U myuser" \
            --health-interval=10s \
            --health-timeout=5s \
            --health-retries=5 \
            myapp-db

      - name: Wait for DB to become healthy
        run: |
          echo "Waiting for DB to be healthy..."
          for i in {1..10}; do
            if [ "$(docker inspect --format='{{json .State.Health.Status}}' myapp-db)" == "\"healthy\"" ]; then
              echo "Database is healthy!"
              break
            fi
            echo "Waiting for DB... ($i)"
            sleep 5
          done
          if [ "$(docker inspect --format='{{json .State.Health.Status}}' myapp-db)" != "\"healthy\"" ]; then
            echo "Database did not become healthy in time."
            docker logs myapp-db
            exit 1
          fi

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: maven-${{ runner.os }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            maven-${{ runner.os }}-

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: docker-${{ runner.os }}-${{ hashFiles('**/Dockerfile') }}
          restore-keys: |
            docker-${{ runner.os }}-

      - name: Run Backend Tests
        run: |
          docker build \
            --target test \
            --build-arg SPRING_DATASOURCE_URL=jdbc:postgresql://host.docker.internal:5432/mydb \
            --build-arg SPRING_DATASOURCE_USERNAME=myuser \
            --build-arg SPRING_DATASOURCE_PASSWORD=mypass \
            -f backend/Dockerfile \
            backend
