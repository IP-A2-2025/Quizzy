name: Deploy Only

on:
  push:
    branches: [CD-FIX]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create docker-compose files
        run: |
          cat > docker-compose.yml << 'EOL'
          version: '3.9'

          services:
            backend:
              build:
                context: ./backend
              image: quizzy-backend
              container_name: backend
              environment:
                - SPRING_DATASOURCE_URL=${SPRING_DATASOURCE_URL}
                - SPRING_DATASOURCE_USERNAME=${SPRING_DATASOURCE_USERNAME}
                - SPRING_DATASOURCE_PASSWORD=${SPRING_DATASOURCE_PASSWORD}
                - GEMINI_API_KEY=${GEMINI_API_KEY}
              ports:
                - "3000:3000"

            frontend:
              build:
                context: ./frontend
              image: quizzy-frontend
              container_name: frontend
              environment:
                - BACKEND_URL=${BACKEND_URL}
              ports:
                - "36882:80"
              depends_on:
                - backend
          EOL

          cat > docker-compose.override.yml << 'EOL'
          services:
            db:
              build:
                context: ./backend/db
              container_name: db
              environment:
                POSTGRES_USER: myuser
                POSTGRES_PASSWORD: mypass
                POSTGRES_DB: mydb
              ports:
                - "5432:5432"
              volumes:
                - pgdata:/var/lib/postgresql/data

            backend:
              build:
                context: ./backend
              image: quizzy-backend
              container_name: backend
              environment:
                SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/mydb
                SPRING_DATASOURCE_USERNAME: myuser
                SPRING_DATASOURCE_PASSWORD: mypass
                GEMINI_API_KEY: AIzaSyAUWUg9b-ZsVmTo8lmwr5VewpF28wnDEH8
              ports:
                - "3000:3000"
              depends_on:
                - db

            frontend:
              build:
                 context: ./frontend
              image: quizzy-frontend
              container_name: frontend
              ports:
                - "36882:80"
              depends_on:
                - backend

          volumes:
            pgdata:
          EOL

      - name: Copy docker-compose files to EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "docker-compose.yml docker-compose.override.yml"
          target: ~/quizzy-app/

      - name: Deploy on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd quizzy-app

            if ! command -v docker &> /dev/null; then
              sudo dnf update -y
              sudo dnf install -y docker
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -aG docker ec2-user
              newgrp docker
            fi

            if ! docker compose version &> /dev/null; then
              mkdir -p ~/.docker/cli-plugins
              curl -SL https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) \
                -o ~/.docker/cli-plugins/docker-compose
              chmod +x ~/.docker/cli-plugins/docker-compose
            fi

            aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws

            docker compose down || true
            docker compose pull
            docker compose up -d

            rm ~/.docker/config.json
